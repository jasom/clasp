import path ;
import os ;

using clang ; # CLASP_TOOLSET



import feature ;
feature.feature gc : refcount boehm mps mps-prep
                : symmetric implicit composite propagated link-incompatible ;
feature.compose <gc>refcount : <define>USE_REFCOUNT ;
feature.compose <gc>boehm : <define>USE_BOEHM ;
feature.compose <gc>mps : <define>USE_MPS ;
feature.compose <gc>mps-prep : <define>USE_MPS <define>RUNNING_GC_BUILDER ;  # used for testing MPS



project clasp : requirements
	<define>INHERITED_FROM_SRC
#        <target-os>darwin:<cxxflags>"-resource-dir /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/clang/5.1/usr/include/c++/4.2.1"
        <cxxflags>"-Wno-deprecated-register"
	<target-os>darwin:<cxxflags>"-mmacosx-version-min=10.7"
	<cxxflags>"-fvisibility=default"
        <variant>debug:<cxxflags>"-O0 -g"
        <variant>release:<cxxflags>"-O3"
        <linkflags>"-fvisibility=default"
	<target-os>linux:<linkflags>-lpthread
	<define>INCLUDED_FROM_CLASP
	<include>$(APPRES-EXTERNALS-RELEASE-INCLUDE)
	<define>EXPAT
        <cxxflags>"-Wgnu-array-member-paren-init"


#
# CONFIGURE CLASP BUILD
#

## I wrote a drop in replacement for std::vector<X> that should work with the AMCpool
## If you turn on USE_STD_VECTOR then gctools::Vector0<X> will inherit from std::vector<X>
##   if you disable USE_STD_VECTOR then the gctools::Vector0<X> will inherit from my
##   custom GCVector which will be compatible with the MPS AMC pool
##   There are two allocators for GCVector, a testing one that uses malloc/free (not MPS compatible)
##        and a production one that is compatible with MPS
##        Turn on USE_GCVECTOR_MALLOC_ALLOCATOR to use the malloc/free one

#       <define>USE_GCVECTOR_MALLOC_ALLOCATOR      # DO NOT USE WITH USE_MPS - just for testing GCVector

#         <define>DEBUG_MPS_AMS_POOL    # use the debugging AMS pool and run tests on it
#       <define>DEBUG_LOG_MPS_KINDS     # Give more verbose MPS debugging messages that include kind names
#       <define>SOURCE_DEBUG
#	<define>DEBUG_MPS      # generate lots of debugging information for MPS
        <define>DEBUG_LOAD_TIME_VALUES   # generate lots of debugging information when accessing ltvs
#       <define>CONFIG_VAR_COOL # Detailed, slow MPS debugging
#        <define>USE_PUT_SELECT_CLASSES_IN_AMC_POOL
#---------- dmalloc stuff
#            <linkflags>-ldmallocxx
#            <define>DMALLOC
#            <define>DMALLOC_FUNC_CHECK
# ------------------------------------------------------------
	<toolset>clang:<cxxflags>-std=c++11
	<target-os>darwin:<cxxflags>-stdlib=libc++
	<target-os>darwin:<linkflags>-stdlib=libc++
#	<cxxflags>-v        # this will generate a lot more output during compilation but help with tooling
#	<target-os>darwin:<linkflags>-stdlib=libc++
#	<target-os>darwin:<linkflags>"-flat_namespace -undefined warning"
	<define>__STDC_LIMIT_MACROS
	<define>__STDC_CONSTANT_MACROS
	<define>__STDC_FORMAT_MACROS

#	<toolset>clang:<include>/usr/lib/c++/v1
#	<define>USEBOOSTPYTHON

#
# If you want source code debugging uncomment this
#
#	<variant>debug:<define>SOURCE_DEBUG








#
# To run address sanitizer
#
# This will cause problems with examining variables while debugging - I don't know why
#
# #### REMEMBER!!!  address sanitizer is BROKEN in that when you gdb with it
#                   it screws up addresses so that you can't locate where the asan error
#                   was caught - check for updates on this
#                   for now liberally sprinkle printf statements until you find the line
#                   that generates the asan error
#
#	<toolset>clang,<sanitize>asan:<cxxflags>"-fsanitize=address -g3"
#	<toolset>clang,<sanitize>asan:<linkflags>"-fsanitize=address"
#	<sanitize>asan:<cxxflags>"-fsanitize=address -g3"

#	<cxxflags>"-fsanitize=address -g3"
#	<linkflags>"-fsanitize=address"




#	<toolset>clang:<cxxflags>"-frelative-path=\/"
#	<target-os>darwin:<linkflags>"--export-dynamic"

#	<include>$(pythonInclude)

#This defines the size of a pointer - used in newhash.h
#	<target-os>darwin:<define>POINTER_BITS=64
	<target-os>darwin:<define>_TARGET_OS_DARWIN
	<target-os>linux:<define>_TARGET_OS_LINUX

# for now 
        <target-os>darwin:<define>_ADDRESS_MODEL_64
        <target-os>linux:<define>_ADDRESS_MODEL_32
	<address-model>32:<define>_ADDRESS_MODEL_32
	<address-model>64:<define>_ADDRESS_MODEL_64
#	<cxxflags>-D_ADDRESS_MODEL_[<address-model>]


	<variant>debug:<define>DEBUG_ASSERTS
# generate MLOG output to compare with ECL
	<variant>debug:<define>_DEBUG_BUILD
	<variant>release:<define>_RELEASE_BUILD



#
# Others 
#
	<toolset>darwin:<define>darwin
	<cxxflags>"-Wno-unused-variable"
#	<toolset>darwin:<cxxflags>"-fopenmp"
#-include pch.h"
	<toolset>darwin:<linkflags>"-framework IOKit -framework Carbon -framework Cocoa -framework System -framework OpenGL -framework Glut -framework AGL -L/usr/local/lib/x86_64 -lgomp"
	<toolset>gcc:<cxxflags>"-Wno-unused-variable"
	<toolset>pathscale:<cxxflags>"-Wno-unused-variable -fopenmp"
	<toolset>pgi:<cxxflags>"-mp -gopt"
	<toolset>pgi:<linkflags>"-mp -gopt"
	<define>READLINE

	: usage-requirements
    ;








path-constant TOP : . ;
path-constant COMMON : src/common ;
path-constant APPTOP : [ os.environ PREFIX ] ;
path-constant APPCONT : $(APPTOP)/Contents ;
path-constant APPRES : $(APPCONT)/Resources ;
path-constant APPRES-EXTERNALS : [ os.environ EXTERNALS ] ;
path-constant APPRES-EXTERNALS-RELEASE : $(APPRES-EXTERNALS)/release ;
path-constant APPRES-EXTERNALS-DEBUG : $(APPRES-EXTERNALS)/debug ;
path-constant APPRES-EXTERNALS-DEBUG-LIB : $(APPRES-EXTERNALS-DEBUG)/lib ;
path-constant APPRES-EXTERNALS-RELEASE-LIB : $(APPRES-EXTERNALS-RELEASE)/lib ;
path-constant APPRES-EXTERNALS-DEBUG-INCLUDE : $(APPRES-EXTERNALS-DEBUG)/include ;
path-constant APPRES-EXTERNALS-RELEASE-INCLUDE : $(APPRES-EXTERNALS-RELEASE)/include ;
path-constant APPRES-EXTERNALS-COMMON : $(APPRES-EXTERNALS)/common ;
path-constant APPRES-EXTERNALS-COMMON-LIB : $(APPRES-EXTERNALS-COMMON)/lib ;
path-constant APPRES-EXTERNALS-COMMON-INCLUDE : $(APPRES-EXTERNALS-COMMON)/include ;
path-constant APPRES-LISP : $(APPRES)/lisp ;
path-constant APPBIN_LINUX : $(APPTOP)/bin ;
path-constant APPBIN_OSX : $(APPTOP)/MacOS ;
path-constant APPINC : $(APPRES)/include ;
path-constant APPLIB : $(APPRES)/lib ;
path-constant APP-DEBUG-LIB : $(APPLIB)/debug ;
path-constant APP-RELEASE-LIB : $(APPLIB)/release ;
#path-constant BUILD : build ;



path-constant MPS-SRC : ./externals/src/mps-kit-1.111.0/code ;
path-constant MPS-LIB : $(APPRES-EXTERNALS-COMMON-LIB) ;



using cando : $(TOP) ;

use-project externals : ./externals ;
use-project internals : src ;
use-project internals/core : src/core ;
# use-project boost : externals/src/boost ;
use-project internals/llvmo : src/llvmo ;
use-project internals/gctools : src/gctools ;
use-project internals/asttooling : src/asttooling ;
use-project internals/cffi : src/cffi ;
use-project internals/mpip : src/mpip ;
use-project internals/sockets : src/sockets ;
use-project internals/clbind : src/clbind ;
use-project internals/serveEvent : src/serveEvent ;
use-project internals/lisp : src/lisp ;

#use-project modules : modules ;
#use-project modules/addon : modules/addon ;
#use-project modules/units : modules/units ;
#use-project modules/chem : modules/chem ;
#use-project modules/kinematics : modules/kinematics ;



# use-project internals/addon : src/addon ;
# use-project internals/units : src/units ;
# use-project internals/chem : src/chem ;
# use-project internals/kinematics : src/kinematics ;
# use-project internals/packageManager : src/packageManager ;
# use-project internals/cando : src/cando ;
# use-project internals/tools : src/tools ;
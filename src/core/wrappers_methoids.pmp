//
// Methods
//
// Three kinds of return values    single-value, multiple-value and void
$var ReturnTypeCount = 3 
$var RetSV = 0
$var RetVoid = 1
$var RetMV = 2
$var MaxArgs = 16
$range isConst 0..1
$range ret 0..(ReturnTypeCount-1)
$range innerCount 0..(MaxArgs-1)
$for isConst [[
  $for ret [[
    $for innerCount [[
      $var numVoids = innerCount
      $var numArgs = MaxArgs - numVoids
      $range Args_ 1..(numArgs-1)
      //
      // ret = $ret  $if ret==RetSV [[RetSV]] $elif ret==RetVoid [[RetVoid]] $else [[RetMV]] 
      //
      //
      // numArgs = $numArgs 
      // numVoids = $numVoids    
      /* Specialization */
      template <int DispatchOn $if ret==RetVoid [[]] $else [[,typename RT]], typename OT $if numArgs>1 [[,]]  $for Args_ ,[[typename ARG$Args_]] >
      class VariadicMethoid
      <DispatchOn,$if ret==RetVoid [[void]] $elif ret==RetSV [[RT]] $else [[gctools::multiple_values<RT>]] (OT::*)( $for Args_ , [[ARG$Args_]]) $if isConst [[const]] >
        : public BuiltinClosure {
      public:
        typedef BuiltinClosure TemplatedBase;
      public:
        typedef $if ret==RetVoid [[void]] $elif ret==RetSV [[RT]] $else [[gctools::multiple_values<RT>]](OT::*Type)($for Args_ , [[ARG$Args_]]) $if isConst [[const]];
        Type mptr;
      public:
        enum { NumParams = $numArgs };
        VariadicMethoid(T_sp name, Type ptr) : BuiltinClosure(name), mptr(ptr) {};
        DISABLE_NEW();
        virtual size_t templatedSizeof() const { return sizeof(*this);};
        void LISP_CALLING_CONVENTION()
        {   
          $if numArgs>0 [[
            ALLOC_STACK_VALUE_FRAME(frameImpl,frame,$numArgs);
            core::StackFrameDynamicScopeManager scope(frame);
            try {
              lambdaListHandler_createBindings(this->lambdaListHandler,scope,lcc_nargs,lcc_fixed_arg0,lcc_fixed_arg1,lcc_fixed_arg2,lcc_arglist);
            } catch (...) {
              handleArgumentHandlingExceptions(this);
            }
          ]]
          PUSH_INVOCATION_HISTORY_FRAME();
          this->invoke(lcc_resultP, frame::Value(frameImpl,0) $for Args_ [[, frame::Value(frameImpl,$Args_) ]] );
        }

        void invoke(core::T_mv* lcc_resultP, core::T_sp arg0  $for Args_ [[, core::T_sp arg$Args_]] )
        {
          gctools::smart_ptr<OT> ot((arg0).template as<OT>());
          $for Args_ [[translate::from_object<ARG$Args_> a$Args_(arg$Args_);
          ]]
          $if ret==RetVoid [[]] $elif ret==RetSV [[ RT retval = ]] $else [[ gctools::multiple_values<RT> retval = ]] ((*ot.get()).*mptr)($for Args_ ,[[a$Args_._v]]);
          $if ret==RetVoid [[
            *lcc_resultP = Values0<core::T_O>();
          ]] $elif ret==RetMV [[
            *lcc_resultP = retval;
          ]] $else [[
            *lcc_resultP = Values(translate::to_object<RT>::convert(retval));
          ]]
        }
      };
    ]]
  ]]
]]


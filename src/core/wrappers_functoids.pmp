$$ Three kinds of return values for the wrapped functions    single-value, multiple-value and void
$$ I'm screwing everything up for variadic arguments
$var ReturnTypeCount = 3 
$var RetSV = 0
$var RetVoid = 1
$var RetMV = 2
$var NumArgs = 16
$var InnerCount = NumArgs+1
$var Templates = InnerCount*ReturnTypeCount-1
$range template_ 0..Templates
$for template_ [[
        $var numVoids = template_ % InnerCount
        $var numArgs = NumArgs - numVoids
        $var ret = template_ // InnerCount
        $range Args_ 0..numArgs-1
        // ret = $ret  $if ret==RetVoid [[RetVoid
        ]] $elif ret==RetSV [[RetSV
        ]] $else [[RetMV
        ]]
        // numArgs = $numArgs 
        // numVoids = $numVoids    
    /* Specialization */
    template <$if ret==RetVoid [[]] $else [[typename RT $if numArgs [[,]] ]] $for Args_ ,[[typename ARG$Args_]] >
        class VariadicFunctoid
    <$if ret==RetVoid [[void]] $elif ret==RetSV [[RT ]] $else [[gctools::multiple_values<RT>]]($for Args_ , [[ARG$Args_]]) >
        : public Functoid {
        public:
            typedef Functoid TemplatedBase;
        public:
        typedef $if ret==RetVoid [[void]] $elif ret==RetSV [[RT]] $else [[gctools::multiple_values<RT>]](*Type) ($for Args_ , [[ARG$Args_]]);
        Type fptr;
        public:
        enum { NumParams = $numArgs };
        VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};
        DISABLE_NEW();
        virtual size_t templatedSizeof() const { return sizeof(*this); };
        core::T_mv activate( ActivationFrame_sp closedOverFrame, int numArgs, ArgArray args )
        {
            if ( numArgs != (NumParams) )
            {
                core::wrongNumberOfArguments(numArgs,NumParams);
            }
                $for Args_ [[
                    translate::from_object<ARG$Args_> a$Args_(*args);
                    ++args;
                    ]]
                $if ret==RetVoid [[]] $elif ret==RetSV [[ RT retval = ]] $else [[ gctools::multiple_values<RT> retval = ]] fptr($for Args_ ,[[a$Args_._v]]);
            $if ret==RetVoid [[
                    return Values0<core::T_O>();
                    ]] $elif ret==RetMV [[
                    return retval;
                    ]] $else [[
                    return Values(translate::to_object<RT>::convert(retval));
                    ]]
                }

        };
        ]]




$var NumArgs = 16
    $var NumRets = 3
    $var RetSV = 0
    $var RetVoid = 1
    $var Ret_unique_ptr = 2
    $var InnerCount = NumArgs+1
    $range ret 0..(NumRets-1)
    $range template_ 0..(InnerCount-1)
    $for ret [[
        $for template_ [[
                $var numVoids = template_
                $var numArgs = NumArgs - template_
                $range Args_ 0..(numArgs-1)
                // ret = $ret
                // template_ = $template_
                // numVoids = $numVoids
                // numArgs = $numArgs
                /* Specialization */
                template <typename Pols $if ret==RetVoid [[]] $elif ret==Ret_unique_ptr [[, typename UPRT ]] $else [[, typename RT ]] $if numArgs [[,]] $for Args_ ,[[typename ARG$Args_]] >
                class VariadicFunctoid
                < $if ret==RetVoid [[void]] $elif ret==Ret_unique_ptr [[ std::unique_ptr<UPRT> ]] $else [[ RT ]] (*)($for Args_ , [[ARG$Args_]]), Pols>
                : public core::BuiltinClosure {
                public:
                typedef core::BuiltinClosure TemplatedBase;
                public:
                    typedef $if ret==RetVoid [[void]] $elif ret==Ret_unique_ptr [[ std::unique_ptr<UPRT> ]] $else [[RT]](*Type)($for Args_ , [[ARG$Args_]]);
                    Type fptr;
                public:
                    enum { NumParams = $numArgs };
                    VariadicFunctoid(core::T_sp name, Type ptr) : core::BuiltinClosure(name), fptr(ptr) {};
                    DISABLE_NEW();
                    virtual size_t templatedSizeof() const { return sizeof(*this);};

                    void LISP_CALLING_CONVENTION()
                    {
                        INVOCATION_HISTORY_FRAME();
                        $if numArgs>0 [[
                          ALLOC_STACK_VALUE_FRAME(frameImpl,frame,$numArgs);
                          core::StackFrameDynamicScopeManager scope(frame);
                          lambdaListHandler_createBindings(this,this->_lambdaListHandler,scope,lcc_nargs,lcc_fixed_arg0,lcc_fixed_arg1,lcc_fixed_arg2,lcc_arglist);
                        ]]
                        this->invoke(lcc_resultP $for Args_ [[, frame::Value(frameImpl,$Args_) ]] );
                    };
                    // I need a 1:1 match between the arguments passed to invoke and those passed to the wrapped function because
                    // I can't iterate through the required arguments because I don't use varargs
                    void invoke(core::T_mv* lcc_resultP $for Args_ [[, core::T_sp arg$Args_]] )      
                    {
                      $for Args_ [[
                        translate::from_object<ARG$Args_,typename DoesNotContain_<Pols,pureOutValue<$(1+Args_)> >::type > a$Args_(arg$Args_);
                        //IncWhen<typename DoesNotContain_<Pols,pureOutValue<$(1+Args_)> >::type >::go(args);
                      ]]
                      $if ret==RetVoid [[]] $elif ret==Ret_unique_ptr [[ std::unique_ptr<UPRT> retval = ]] $else [[ RT retval = ]] fptr($for Args_ ,[[a$Args_._v]]);
                      $if numArgs>0 [[
                        core::MultipleValues& returnValues = _lisp->multipleValues();
                        returnValues.setSize(0);
                      ]]
                      $if ret==RetVoid [[
                        $if numArgs==0 [[]] $else [[ int oidx = 0; ]]
                      ]] $else [[
                        int oidx = 1;
                      ]]
                      $for Args_ [[
                        ReturnValueWhen(returnValues,oidx
                                          , typename is_outValue<Pols,$Args_>::type()
                                          , typename AdoptPointer<Pols,$Args_>::type()
                                          , a$Args_._v);
                      ]]
                      $if ret==RetVoid [[
                        $if numArgs==0 [[
                          *lcc_resultP = Values0<core::T_O>();
                        ]] $else [[
                          *lcc_resultP = gctools::multiple_values<core::T_O>(returnValues.valueGet(0,oidx),oidx);
                        ]]
                      ]] $elif ret==Ret_unique_ptr [[
                        *lcc_resultP = gctools::multiple_values<core::T_O>(translate::to_object<std::unique_ptr<UPRT>, typename AdoptPointer<Pols,result>::type>::convert(std::move(retval)),oidx);
                      ]] $else [[
                        *lcc_resultP = gctools::multiple_values<core::T_O>(translate::to_object<RT,typename AdoptPointer<Pols,result>::type >::convert(retval),oidx);
                      ]]
                    }
                };
                ]]
        ]]


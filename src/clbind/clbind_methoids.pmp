//
$var ConstTypeCount = 2
    $var ReturnTypeCount = 2
    $var RetSV = 0
    $var RetVoid = 1
    $var MaxArgs = 8
    $var InnerCount = MaxArgs
    $var Templates = (InnerCount*ReturnTypeCount*ConstTypeCount)-1
    $var template_ = -1
    $range isConst 0..1
    $range ret 0..1
    $range innerCount 0..(InnerCount-1)
    $for isConst [[
      $for ret [[
        $for innerCount [[
              $var template_ = isConst*(InnerCount*ReturnTypeCount)+ret*(InnerCount)+innerCount
              $var numVoids = innerCount
              $var numArgs = MaxArgs - numVoids
              $range Args_ 1..(numArgs-1)
              // TEMPLATE_TOP
              // template_ = $template_
              // isConst = $isConst
              // ret = $ret ($if ret==RetVoid [[void]] $else [[RetSV]]) 
              //
              // innerCount = $innerCount
              // numArgs = $numArgs ($for Args_ , [[ARG$Args_]])
              // numVoids = $numVoids
              // 
              /* Specialization  */
              template <typename Pols, typename OT $if ret==RetVoid [[]] $else [[, typename RT ]] $if numArgs>1 [[,]] $for Args_ ,[[typename ARG$Args_]] >
              class IndirectVariadicMethoid
              < Pols,OT $if ret==RetVoid [[,void]] $else [[,RT ]](OT::*)( $for Args_ , [[ARG$Args_]]) $if isConst [[const]] >
              : public core::BuiltinClosure {
              public:
                  typedef BuiltinClosure TemplatedBase;
              public:
              typedef $if ret==RetVoid [[void]] $else [[RT]] (OT::*Type)( $for Args_ , [[ARG$Args_]]) $if isConst [[const]];
              Type mptr;
              public:
              enum { NumParams = $numArgs };
              IndirectVariadicMethoid(core::T_sp name, Type ptr) : core::BuiltinClosure(name), mptr(ptr) {};
              DISABLE_NEW();
              virtual size_t templatedSizeof() const { return sizeof(*this);};

              void LISP_CALLING_CONVENTION()
              {
                INVOCATION_HISTORY_FRAME();
                $if numArgs>0 [[
                  ALLOC_STACK_VALUE_FRAME(frameImpl,frame,$numArgs);
                  core::StackFrameDynamicScopeManager scope(frame);
                  lambdaListHandler_createBindings(this,this->_lambdaListHandler,scope,lcc_nargs,lcc_fixed_arg0,lcc_fixed_arg1,lcc_fixed_arg2,lcc_arglist);
                ]]
                this->invoke(lcc_resultP, frame::Value(frameImpl,0) $for Args_ [[, frame::Value(frameImpl,$Args_) ]] );
              };
              // I need a 1:1 match between the arguments passed to invoke and those passed to the wrapped function because
              // I can't iterate through the required arguments because I don't use varargs
              void invoke(core::T_mv* lcc_resultP, core::T_sp arg0 $for Args_ [[, core::T_sp arg$Args_]] )      
              {
                translate::from_object<OT*> objPtr(arg0);
                $for Args_ [[
                  translate::from_object<ARG$Args_,typename DoesNotContain_<Pols,pureOutValue<$Args_> >::type > a$Args_(arg$Args_);
                ]]
                $if ret==RetVoid [[]] $else [[ RT retval = ]] ((*objPtr._v).*(this->mptr))($for Args_ ,[[a$Args_._v]]);
                $if numArgs>0 [[
                  core::MultipleValues& returnValues = _lisp->multipleValues();
                  returnValues.setSize(0);
                ]]
                $if ret==RetVoid [[
                    $if numArgs==0 [[]] $else [[ int oidx = 0; ]]
                    ]] $else [[
                    int oidx = 1;
                    ]]
                $for Args_ [[
                  ReturnValueWhen(returnValues,oidx
                                , typename is_outValue<Pols,$Args_>::type()
                                , typename AdoptPointer<Pols,$Args_>::type()
                                , a$Args_._v);

                ]]
                $if ret==RetVoid [[
                    $if numArgs==0 [[
                            *lcc_resultP = Values0<core::T_O>();
                    ]] $else [[
                            *lcc_resultP = gctools::multiple_values<core::T_O>(returnValues.valueGet(0,oidx),oidx);
                    ]]
                ]] $else [[
                        *lcc_resultP = gctools::multiple_values<core::T_O>(translate::to_object<RT,typename AdoptPointer<Pols,result>::type >::convert(retval),oidx);
                ]]
              }
            };
          ]]
        ]]
]]

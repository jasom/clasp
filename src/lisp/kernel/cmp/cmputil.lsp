(defun print-compiler-message (c stream)
  (bformat stream ";;; %s\n" c))

(defvar *compilation-conditions* nil)
(defmacro with-compiler-env ( (conditions &rest options) &rest body )
  "Initialize the environment to protect nested compilations from each other"
  `(let ((*the-module* nil)
	 (*irbuilder-ltv-function-alloca* nil)
	 (*irbuilder-ltv-function-body* nil)
	 (*irbuilder-function-alloca* nil)
	 (*irbuilder-function-body* nil)
	 (*generate-compile-file-load-time-values* nil)
	 (*next-load-time-value-index* nil)
	 (*load-time-value-holder-global-var* nil)
	 (*load-time-value-coalesce* nil)
	 (*load-time-initializer-environment* nil)
	 (*the-module-dibuilder* nil)
	 (*readtable* *readtable*)
	 (*package* *package*)
         (*compilation-conditions* nil)
	 )
     (handler-bind
         ((compiler-warning #'(lambda (c)
                                (push c *compilation-conditions*)
                                (print-compiler-message c t)))
          (compiler-error #'(lambda (c)
                              (signal c)
                              (push c *compilation-conditions*)
                              (print-compiler-message c t)
                              (abort))))
       ,@body
       )))

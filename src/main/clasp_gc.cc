#ifdef DECLARE_FORWARDS
 namespace cffi {
    class Pointer_O;
 };
 namespace clbind {
    class DummyCreator;
    class ClassRep_O;
    class ClassRegistry_O;
    namespace detail {
        class class_map;
    };
 };
 namespace core {
    class Instance_O;
    class Complex_O;
    class Null_O;
    class SexpLoadArchive_O;
    class HashTableEqual_O;
    class StdClass_O;
    class DynamicBinding;
    class ExceptionEntry;
    class DoubleFloat_O;
    class InstanceClosure;
    class UserData_O;
    class String_O;
    class Regex_O;
    class FunctionValueEnvironment_O;
    class SequenceStepper;
    class SourceManager_O;
    class SymbolClassPair;
    class CompileTimeEnvironment_O;
    class RegexMatch_O;
    class Vector_O;
    class InterpretedClosure;
    class WeakPointer_O;
    class Reader_O;
    class TwoWayStream_O;
    class SpecialForm_O;
    class StandardClass_O;
    class Binder_O;
    class Function_O;
    class MacroClosure;
    class InstanceCreator;
    class TagbodyFrame_O;
    class UnwindProtectEnvironment_O;
    class BaseChar_O;
    class WeakKeyHashTable_O;
    class IOFileStream_O;
    class CoreExposer;
    class IntArray_O;
    class SymbolList_O;
    class LexicalEnvironment_O;
    class PosixTimeDuration_O;
    class FuncallableStandardClass_O;
    class MultiStringBuffer_O;
    class WeakKeyMapping_O;
    class Cons_O;
    class SymbolSet_O;
    class Pathname_O;
    class AuxArgument;
    class SingleDispatchGenericFunction_O;
    class ForwardReferencedClass_O;
    class StringOutputStream_O;
    class StringSet_O;
    class LeafSNode_O;
    class MicroHeap_O;
    class ReadTable_O;
    class KeywordArgument;
    class Path_O;
    class ForeignData_O;
    class IOStreamStream_O;
    class StandardObject_O;
    class Float_O;
    class WeakHashTable_O;
    class Archive_O;
    class RecursiveDirectoryIterator_O;
    class SingleDispatchGenericFunctionClosure;
    class Integer_O;
    class ConcatenatedStream_O;
    class RequiredArgument;
    class Ratio_O;
    class GlueEnvironment_O;
    class SymbolStorage;
    class SNode_O;
    class VectorStepper;
    class ExternalObject_O;
    class BitVector_O;
    class LambdaListHandler_O;
    class CompiledFunction_O;
    class Rational_O;
    class BlockEnvironment_O;
    class SingleDispatchMethod_O;
    class ExtendedChar_O;
    class DirectoryEntry_O;
    class StringStream_O;
    class SymbolToEnumConverter_O;
    class PosixTime_O;
    class Symbol_O;
    class Metaobject_O;
    class VectorObjectsWithFillPtr_O;
    class AnsiStream_O;
    class Str_O;
    class ActivationFrame_O;
    class DirectoryIterator_O;
    class ValueEnvironment_O;
    class OptionalArgument;
    class T_O;
    class HashTableEq_O;
    class ArrayObjects_O;
    class HashTableEql_O;
    class ValueFrame_O;
    class ObjectSet_O;
    class HashTable_O;
    class FileStream_O;
    class FileStatus_O;
    class Specializer_O;
    class ObjRef_O;
    class SaveArchive_O;
    class Package_O;
    class MacroletEnvironment_O;
    class StructureObject_O;
    class LightUserData_O;
    class SynonymStream_O;
    class ConsStepper;
    class RuntimeVisibleEnvironment_O;
    class LoadTimeValues_O;
    class Real_O;
    class StringInputStream_O;
    class Character_O;
    class FunctionFrame_O;
    class TagbodyEnvironment_O;
    class Stream_O;
    class SexpSaveArchive_O;
    class BroadcastStream_O;
    class LoadArchive_O;
    class Array_O;
    class CandoException_O;
    class Class_O;
    class SourcePosInfo_O;
    class StructureClass_O;
    class Bignum_O;
    class SimpleBitVector_O;
    class HashTableEqualp_O;
    class SymbolMacroletEnvironment_O;
    class Fixnum_O;
    class Lisp_O;
    class StandardChar_O;
    class Number_O;
    class BuiltInClass_O;
    class SmallMap_O;
    class Pointer_O;
    class SingleDispatchEffectiveMethodFunction_O;
    class StrWithFillPtr_O;
    class CacheRecord;
    class EchoStream_O;
    class LogicalPathname_O;
    class StringList_O;
    class BranchSNode_O;
    class CatchEnvironment_O;
    class Cache;
    class FunctionContainerEnvironment_O;
    class Environment_O;
    class SingleFloat_O;
    class ShortFloat_O;
    class VectorObjects_O;
    class SourceFileInfo_O;
 };
 namespace llvmo {
    class VectorType_O;
    class TerminatorInst_O;
    class IRBuilderBase_O;
    class ConstantInt_O;
    class PassManagerBuilder_O;
    class ConstantStruct_O;
    class MDString_O;
    class DIDerivedType_O;
    class StoreInst_O;
    class BlockAddress_O;
    class ConstantPointerNull_O;
    class PassManager_O;
    class User_O;
    class StructType_O;
    class CompositeType_O;
    class IndirectBrInst_O;
    class MDNode_O;
    class ExecutionEngine_O;
    class DICompositeType_O;
    class Linker_O;
    class FunctionPass_O;
    class Type_O;
    class VAArgInst_O;
    class InvokeInst_O;
    class DIArray_O;
    class Argument_O;
    class DICompileUnit_O;
    class ConstantDataArray_O;
    class ResumeInst_O;
    class PointerType_O;
    class SequentialType_O;
    class DIScope_O;
    class AtomicCmpXchgInst_O;
    class ImmutablePass_O;
    class DIBuilder_O;
    class SwitchInst_O;
    class FenceInst_O;
    class APFloat_O;
    class ArrayType_O;
    class GlobalVariable_O;
    class ConstantFP_O;
    class FunctionPassManager_O;
    class DataLayoutPass_O;
    class DIDescriptor_O;
    class DataLayout_O;
    class APInt_O;
    class UnaryInstruction_O;
    class LLVMContext_O;
    class NamedMDNode_O;
    class Constant_O;
    class ReturnInst_O;
    class PassManagerBase_O;
    class DIType_O;
    class Instruction_O;
    class UnreachableInst_O;
    class GlobalValue_O;
    class DebugLoc_O;
    class DISubroutineType_O;
    class Function_O;
    class Value_O;
    class DIFile_O;
    class DebugInfo_O;
    class DITypeArray_O;
    class Module_O;
    class DIBasicType_O;
    class LoadInst_O;
    class Pass_O;
    class InsertPoint_O;
    class AtomicRMWInst_O;
    class UndefValue_O;
    class PHINode_O;
    class IRBuilder_O;
    class BranchInst_O;
    class DISubprogram_O;
    class EngineBuilder_O;
    class FunctionType_O;
    class ConstantDataSequential_O;
    class TargetMachine_O;
    class ConstantExpr_O;
    class ConstantArray_O;
    class IntegerType_O;
    class DILexicalBlock_O;
    class Attribute_O;
    class BasicBlock_O;
    class LandingPadInst_O;
    class CallInst_O;
    class AllocaInst_O;
    class ModulePass_O;
    class CompiledClosure;
 };
 namespace asttooling {
    class ErrorContent;
    class DerivableSyntaxOnlyAction;
    class AstVisitor_O;
    class ContextFrame;
    class DerivableArgumentsAdjuster;
    class DerivableMatchCallback;
    class Message;
    class ParserValue;
    class DerivableFrontendActionFactory;
    class DerivableASTFrontendAction;
    namespace internal {
        class VariadicOperatorMatcherDescriptor;
        class OverloadedMatcherDescriptor;
        class MatcherDescriptor;
        class FixedArgCountMatcherDescriptor;
        class FreeFuncMatcherDescriptor;
    };
    namespace RegMap {
        class SymbolMatcherDescriptorPair;
        class RegistryMaps;
    };
 };
#endif // DECLARE_FORWARDS
#if defined(GC_ENUM)
enum { KIND_null = 0, 
KIND_GCVECTOR_gctools__GCVector_moveable_core__DynamicBinding_ = 239,
KIND_CLASSALLOC_core__Cache = 238,
KIND_LISPALLOC_core__SingleFloat_O = 105,
KIND_LISPALLOC_core__Binder_O = 237,
KIND_LISPALLOC_core__FuncallableStandardClass_O = 219,
KIND_LISPALLOC_core__RecursiveDirectoryIterator_O = 71,
KIND_LISPALLOC_core__LoadArchive_O = 78,
KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__SourceFileInfo_O__ = 240,
KIND_LISPALLOC_core__BaseChar_O = 84,
KIND_LISPALLOC_llvmo__ConstantInt_O = 198,
KIND_LISPALLOC_llvmo__FunctionPassManager_O = 147,
KIND_LISPALLOC_asttooling__DerivableFrontendActionFactory = 241,
KIND_LISPALLOC_llvmo__NamedMDNode_O = 202,
KIND_LISPALLOC_core__SymbolSet_O = 236,
KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ContextFrame_ = 242,
KIND_LISPALLOC_core__HashTable_O = 231,
KIND_LISPALLOC_core__BitVector_O = 123,
KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__Message_ = 243,
KIND_LISPALLOC_core__VectorObjects_O = 121,
KIND_LISPALLOC_core__StrWithFillPtr_O = 120,
KIND_LISPALLOC_llvmo__CallInst_O = 184,
KIND_LISPALLOC_core__WeakPointer_O = 230,
KIND_LISPALLOC_core__ValueFrame_O = 46,
KIND_GCSTRING_gctools__GCString_moveable_char_ = 244,
KIND_LISPALLOC_core__SymbolList_O = 229,
KIND_LISPALLOC_llvmo__SwitchInst_O = 182,
KIND_LISPALLOC_core__TagbodyEnvironment_O = 42,
KIND_LISPALLOC_core__MacroletEnvironment_O = 38,
KIND_LISPALLOC_core__MultiStringBuffer_O = 228,
KIND_LISPALLOC_llvmo__AllocaInst_O = 174,
KIND_LISPALLOC_core__DoubleFloat_O = 104,
KIND_LISPALLOC_core__SymbolToEnumConverter_O = 227,
KIND_LISPALLOC_llvmo__Module_O = 201,
KIND_GCVECTOR_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__T_O__gctools__smart_ptr_core__T_O___ = 245,
KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__internal__MatcherDescriptor_P_ = 246,
KIND_LISPALLOC_core__StringSet_O = 226,
KIND_BOOTSTRAP_core__Symbol_O = 224,
KIND_LISPALLOC_core__UserData_O = 208,
KIND_LISPALLOC_llvmo__FenceInst_O = 183,
KIND_BOOTSTRAP_core__Str_O = 119,
KIND_LISPALLOC_core__ActivationFrame_O = 43,
KIND_BOOTSTRAP_core__T_O = 11,
KIND_CLASSALLOC_clbind__DummyCreator = 6,
KIND_LISPALLOC_core__FunctionValueEnvironment_O = 41,
KIND_LISPALLOC_core__SymbolMacroletEnvironment_O = 37,
KIND_LISPALLOC_core__HashTableEq_O = 235,
KIND_LISPALLOC_asttooling__AstVisitor_O = 223,
KIND_LISPALLOC_llvmo__TerminatorInst_O = 175,
KIND_LISPALLOC_llvmo__DILexicalBlock_O = 66,
KIND_LISPALLOC_core__String_O = 118,
KIND_GCVECTOR_gctools__GCVector_moveable_core__ExceptionEntry_ = 247,
KIND_BOOTSTRAP_core__StandardObject_O = 212,
KIND_LISPALLOC_core__ConcatenatedStream_O = 26,
KIND_TEMPLATED_LISPALLOC_core__WrappedPointer_O = 211,
KIND_LISPALLOC_llvmo__ResumeInst_O = 181,
KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__ = 248,
KIND_LISPALLOC_core__WeakHashTable_O = 209,
KIND_LISPALLOC_core__FunctionContainerEnvironment_O = 36,
KIND_LISPALLOC_llvmo__LLVMContext_O = 200,
KIND_LISPALLOC_llvmo__TargetMachine_O = 199,
KIND_LISPALLOC_core__Rational_O = 106,
KIND_LISPALLOC_core__StringInputStream_O = 23,
KIND_LISPALLOC_llvmo__ImmutablePass_O = 134,
KIND_LISPALLOC_llvmo__Value_O = 159,
KIND_LISPALLOC_llvmo__DIDerivedType_O = 65,
KIND_LISPALLOC_llvmo__GlobalVariable_O = 195,
KIND_LISPALLOC_core__LeafSNode_O = 205,
KIND_LISPALLOC_llvmo__PassManager_O = 146,
KIND_ROOTCLASSALLOC_clbind__detail__class_map = 10,
KIND_LISPALLOC_core__LightUserData_O = 207,
KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ErrorContent_ = 249,
KIND_LISPALLOC_llvmo__FunctionType_O = 157,
KIND_LISPALLOC_llvmo__DICompileUnit_O = 64,
KIND_LISPALLOC_llvmo__Linker_O = 158,
KIND_LISPALLOC_llvmo__BranchInst_O = 180,
KIND_LISPALLOC_llvmo__Constant_O = 185,
KIND_LISPALLOC_llvmo__ReturnInst_O = 179,
KIND_LISPALLOC_core__LexicalEnvironment_O = 31,
KIND_LISPALLOC_core__LoadTimeValues_O = 206,
KIND_LISPALLOC_llvmo__Function_O = 194,
KIND_LISPALLOC_core__SNode_O = 203,
KIND_LISPALLOC_core__ExternalObject_O = 130,
KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__ = 250,
KIND_LISPALLOC_core__SourceManager_O = 129,
KIND_LISPALLOC_llvmo__StructType_O = 155,
KIND_LISPALLOC_asttooling__DerivableSyntaxOnlyAction = 251,
KIND_LISPALLOC_core__StandardChar_O = 85,
KIND_LISPALLOC_core__Null_O = 225,
KIND_LISPALLOC_llvmo__User_O = 164,
KIND_LISPALLOC_llvmo__InsertPoint_O = 128,
KIND_CLASSALLOC_core__SequenceStepper = 7,
KIND_LISPALLOC_core__SpecialForm_O = 92,
KIND_TEMPLATED_CLASSALLOC_core__BuiltinClosure = 252,
KIND_BOOTSTRAP_core__Specializer_O = 214,
KIND_BOOTSTRAP_core__StructureClass_O = 222,
KIND_CLASSALLOC_llvmo__CompiledClosure = 253,
KIND_CLASSALLOC_core__InterpretedClosure = 254,
KIND_LISPALLOC_core__ObjRef_O = 127,
KIND_BOOTSTRAP_core__BuiltInClass_O = 220,
KIND_LISPALLOC_llvmo__IntegerType_O = 156,
KIND_LISPALLOC_core__Reader_O = 126,
KIND_LISPALLOC_llvmo__Type_O = 149,
KIND_LISPALLOC_core__RuntimeVisibleEnvironment_O = 39,
KIND_LISPALLOC_core__SmallMap_O = 125,
KIND_LISPALLOC_llvmo__DataLayout_O = 148,
KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ParserValue_ = 255,
KIND_CLASSALLOC_asttooling__internal__OverloadedMatcherDescriptor = 256,
KIND_LISPALLOC_llvmo__CompositeType_O = 150,
KIND_LISPALLOC_core__Instance_O = 91,
KIND_LISPALLOC_asttooling__DerivableMatchCallback = 257,
KIND_LISPALLOC_llvmo__DIDescriptor_O = 63,
KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__SingleDispatchMethod_O__ = 258,
KIND_LISPALLOC_llvmo__InvokeInst_O = 178,
KIND_LISPALLOC_llvmo__PassManagerBase_O = 145,
KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__ = 259,
KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Character_O__ = 260,
KIND_LISPALLOC_llvmo__DIFile_O = 62,
KIND_LISPALLOC_llvmo__VAArgInst_O = 173,
KIND_LISPALLOC_core__ShortFloat_O = 103,
KIND_GCVECTOR_gctools__GCVector_moveable_core__SequenceStepper_P_ = 261,
KIND_LISPALLOC_core__Array_O = 115,
KIND_LISPALLOC_llvmo__PassManagerBuilder_O = 144,
KIND_CLASSALLOC_core__CoreExposer = 262,
KIND_CLASSALLOC_core__SingleDispatchGenericFunctionClosure = 263,
KIND_CLASSALLOC_core__InstanceCreator = 5,
KIND_LISPALLOC_core__UnwindProtectEnvironment_O = 35,
KIND_GCVECTOR_gctools__GCVector_moveable_core__SymbolStorage_ = 264,
KIND_LISPALLOC_core__Fixnum_O = 110,
KIND_LISPALLOC_core__ForeignData_O = 143,
KIND_LISPALLOC_core__EchoStream_O = 25,
KIND_LISPALLOC_llvmo__UndefValue_O = 197,
KIND_TEMPLATED_CLASSALLOC_core__Creator = 3,
KIND_LISPALLOC_llvmo__BasicBlock_O = 163,
KIND_LISPALLOC_llvmo__UnreachableInst_O = 177,
KIND_LISPALLOC_core__CompileTimeEnvironment_O = 32,
KIND_GCVECTOR_gctools__GCVector_moveable_core__OptionalArgument_ = 265,
KIND_LISPALLOC_llvmo__Attribute_O = 114,
KIND_CLASSALLOC_core__VectorStepper = 9,
KIND_LISPALLOC_core__BranchSNode_O = 204,
KIND_LISPALLOC_core__ReadTable_O = 113,
KIND_LISPALLOC_core__CompiledFunction_O = 90,
KIND_LISPALLOC_llvmo__DataLayoutPass_O = 135,
KIND_LISPALLOC_core__SynonymStream_O = 24,
KIND_LISPALLOC_core__PosixTime_O = 112,
KIND_LISPALLOC_core__VectorObjectsWithFillPtr_O = 122,
KIND_LISPALLOC_core__Number_O = 100,
KIND_LISPALLOC_llvmo__UnaryInstruction_O = 171,
KIND_LISPALLOC_core__IntArray_O = 99,
KIND_LISPALLOC_core__Float_O = 102,
KIND_BOOTSTRAP_core__Class_O = 215,
KIND_LISPALLOC_llvmo__MDNode_O = 162,
KIND_LISPALLOC_core__StringOutputStream_O = 22,
KIND_LISPALLOC_llvmo__IndirectBrInst_O = 176,
KIND_LISPALLOC_core__StringList_O = 98,
KIND_LISPALLOC_llvmo__MDString_O = 161,
KIND_LISPALLOC_core__CandoException_O = 97,
KIND_LISPALLOC_core__Vector_O = 117,
KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__0_ = 266,
KIND_LISPALLOC_llvmo__SequentialType_O = 151,
KIND_LISPALLOC_llvmo__APFloat_O = 142,
KIND_LISPALLOC_llvmo__ArrayType_O = 154,
KIND_LISPALLOC_llvmo__LandingPadInst_O = 170,
KIND_LISPALLOC_llvmo__ConstantExpr_O = 196,
KIND_LISPALLOC_core__IOStreamStream_O = 19,
KIND_LISPALLOC_llvmo__VectorType_O = 153,
KIND_LISPALLOC_asttooling__DerivableArgumentsAdjuster = 267,
KIND_LISPALLOC_core__Package_O = 96,
KIND_LISPALLOC_llvmo__DIScope_O = 61,
KIND_LISPALLOC_core__Regex_O = 95,
KIND_LISPALLOC_llvmo__DISubroutineType_O = 60,
KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__3_ = 268,
KIND_LISPALLOC_core__GlueEnvironment_O = 30,
KIND_LISPALLOC_core__StringStream_O = 21,
KIND_LISPALLOC_core__Complex_O = 111,
KIND_LISPALLOC_core__SexpSaveArchive_O = 77,
KIND_LISPALLOC_llvmo__DebugLoc_O = 94,
KIND_LISPALLOC_llvmo__GlobalValue_O = 193,
KIND_CLASSALLOC_core__MacroClosure = 269,
KIND_LISPALLOC_core__WeakKeyMapping_O = 93,
KIND_LISPALLOC_core__Function_O = 87,
KIND_BOOTSTRAP_core__Metaobject_O = 213,
KIND_LISPALLOC_core__MicroHeap_O = 86,
KIND_LISPALLOC_core__BroadcastStream_O = 20,
KIND_LISPALLOC_llvmo__Argument_O = 160,
KIND_LISPALLOC_asttooling__DerivableASTFrontendAction = 270,
KIND_LISPALLOC_llvmo__DITypeArray_O = 59,
KIND_LISPALLOC_core__HashTableEql_O = 234,
KIND_LISPALLOC_core__SexpLoadArchive_O = 79,
KIND_LISPALLOC_core__FunctionFrame_O = 45,
KIND_LISPALLOC_llvmo__DIArray_O = 58,
KIND_LISPALLOC_core__Character_O = 82,
KIND_LISPALLOC_core__ArrayObjects_O = 116,
KIND_CLASSALLOC_core__ConsStepper = 8,
KIND_CLASSALLOC_asttooling__internal__FixedArgCountMatcherDescriptor = 271,
KIND_LISPALLOC_core__SourcePosInfo_O = 81,
KIND_LISPALLOC_llvmo__ConstantDataArray_O = 187,
KIND_LISPALLOC_llvmo__ConstantFP_O = 192,
KIND_LISPALLOC_core__RegexMatch_O = 80,
KIND_LISPALLOC_core__WeakKeyHashTable_O = 210,
KIND_CLASSALLOC_asttooling__internal__FreeFuncMatcherDescriptor = 272,
KIND_GCVECTOR_gctools__GCVector_moveable_core__AuxArgument_ = 273,
KIND_LISPALLOC_core__Archive_O = 75,
KIND_LISPALLOC_clbind__ClassRegistry_O = 74,
KIND_LISPALLOC_llvmo__AtomicCmpXchgInst_O = 169,
KIND_LISPALLOC_core__BlockEnvironment_O = 34,
KIND_GCVECTOR_gctools__GCVector_moveable_core__SymbolClassPair_ = 274,
KIND_LISPALLOC_core__DirectoryIterator_O = 70,
KIND_LISPALLOC_core__FileStatus_O = 73,
KIND_LISPALLOC_core__PosixTimeDuration_O = 72,
KIND_LISPALLOC_core__TagbodyFrame_O = 44,
KIND_LISPALLOC_core__Integer_O = 108,
KIND_LISPALLOC_core__ExtendedChar_O = 83,
KIND_LISPALLOC_core__SaveArchive_O = 76,
KIND_LISPALLOC_core__Bignum_O = 109,
KIND_LISPALLOC_llvmo__Instruction_O = 165,
KIND_LISPALLOC_core__LogicalPathname_O = 28,
KIND_BOOTSTRAP_core__StdClass_O = 217,
KIND_GCVECTOR_gctools__GCVector_moveable_core__KeywordArgument_ = 275,
KIND_LISPALLOC_core__Real_O = 101,
KIND_GCVECTOR_gctools__GCVector_moveable_core__CacheRecord_ = 276,
KIND_LISPALLOC_llvmo__APInt_O = 141,
KIND_TEMPLATED_LISPALLOC_core__Iterator_O = 69,
KIND_LISPALLOC_core__CatchEnvironment_O = 33,
KIND_LISPALLOC_llvmo__DISubprogram_O = 57,
KIND_LISPALLOC_core__LambdaListHandler_O = 68,
KIND_LISPALLOC_core__ValueEnvironment_O = 40,
KIND_LISPALLOC_llvmo__ConstantArray_O = 191,
KIND_LISPALLOC_core__FileStream_O = 17,
KIND_LISPALLOC_core__StructureObject_O = 67,
KIND_LISPALLOC_llvmo__DebugInfo_O = 53,
KIND_LISPALLOC_core__Path_O = 52,
KIND_LISPALLOC_core__SingleDispatchGenericFunction_O = 89,
KIND_CLASSALLOC_core__InstanceClosure = 277,
KIND_GCVECTOR_gctools__GCVector_moveable_core__RequiredArgument_ = 278,
KIND_LISPALLOC_core__Ratio_O = 107,
KIND_LISPALLOC_llvmo__DIType_O = 56,
KIND_LISPALLOC_llvmo__ConstantPointerNull_O = 190,
KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Symbol_O__ = 279,
KIND_LISPALLOC_core__SimpleBitVector_O = 124,
KIND_LISPALLOC_llvmo__EngineBuilder_O = 140,
KIND_ROOTCLASSALLOC_asttooling__RegMap__RegistryMaps = 2,
KIND_TEMPLATED_CLASSALLOC_clbind__ConstructorCreator = 4,
KIND_LISPALLOC_clbind__ClassRep_O = 221,
KIND_BOOTSTRAP_core__StandardClass_O = 218,
KIND_LISPALLOC_core__HashTableEqualp_O = 233,
KIND_LISPALLOC_llvmo__PointerType_O = 152,
KIND_LISPALLOC_core__Pointer_O = 51,
KIND_LISPALLOC_core__DirectoryEntry_O = 50,
KIND_LISPALLOC_core__HashTableEqual_O = 232,
KIND_LISPALLOC_llvmo__ExecutionEngine_O = 139,
KIND_LISPALLOC_llvmo__PHINode_O = 168,
KIND_LISPALLOC_core__TwoWayStream_O = 16,
KIND_LISPALLOC_core__ForwardReferencedClass_O = 216,
KIND_LISPALLOC_core__ObjectSet_O = 49,
KIND_LISPALLOC_core__SourceFileInfo_O = 48,
KIND_LISPALLOC_core__SingleDispatchMethod_O = 47,
KIND_CLASSALLOC_asttooling__internal__VariadicOperatorMatcherDescriptor = 280,
KIND_LISPALLOC_llvmo__DIBuilder_O = 138,
KIND_LISPALLOC_llvmo__DIBasicType_O = 55,
KIND_LISPALLOC_llvmo__LoadInst_O = 172,
KIND_LISPALLOC_llvmo__IRBuilder_O = 137,
KIND_LISPALLOC_core__Environment_O = 29,
KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_clbind__ClassRep_O__ = 281,
KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__RegMap__SymbolMatcherDescriptorPair_ = 282,
KIND_LISPALLOC_llvmo__IRBuilderBase_O = 136,
KIND_LISPALLOC_llvmo__BlockAddress_O = 189,
KIND_LISPALLOC_core__Pathname_O = 27,
KIND_ROOTCLASSALLOC_core__Lisp_O = 1,
KIND_LISPALLOC_llvmo__DICompositeType_O = 54,
KIND_LISPALLOC_llvmo__ModulePass_O = 133,
KIND_LISPALLOC_llvmo__StoreInst_O = 167,
KIND_LISPALLOC_core__Stream_O = 14,
KIND_LISPALLOC_core__SingleDispatchEffectiveMethodFunction_O = 88,
KIND_LISPALLOC_llvmo__ConstantStruct_O = 188,
KIND_LISPALLOC_llvmo__FunctionPass_O = 132,
KIND_LISPALLOC_llvmo__AtomicRMWInst_O = 166,
KIND_LISPALLOC_cffi__Pointer_O = 13,
KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Str_O__ = 283,
KIND_LISPALLOC_core__IOFileStream_O = 18,
KIND_LISPALLOC_core__Cons_O = 12,
KIND_LISPALLOC_core__AnsiStream_O = 15,
KIND_LISPALLOC_llvmo__Pass_O = 131,
KIND_LISPALLOC_llvmo__ConstantDataSequential_O = 186,
  KIND_max = 283
}
#endif // defined(GC_ENUM)
#if defined(GC_DYNAMIC_CAST)
template <typename FP> struct DynamicCast<core::Cache*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 238 238 
    return (kindVal == 238);
  };
  static core::Cache* castOrNULL(FP client) {
    if (DynamicCast<core::Cache*,FP>::isA(client)) {
      return reinterpret_cast<core::Cache*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::SingleFloat_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 105 105 
    return (kindVal == 105);
  };
  static core::SingleFloat_O* castOrNULL(FP client) {
    if (DynamicCast<core::SingleFloat_O*,FP>::isA(client)) {
      return reinterpret_cast<core::SingleFloat_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Binder_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 237 237 
    return (kindVal == 237);
  };
  static core::Binder_O* castOrNULL(FP client) {
    if (DynamicCast<core::Binder_O*,FP>::isA(client)) {
      return reinterpret_cast<core::Binder_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::FuncallableStandardClass_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 219 219 
    return (kindVal == 219);
  };
  static core::FuncallableStandardClass_O* castOrNULL(FP client) {
    if (DynamicCast<core::FuncallableStandardClass_O*,FP>::isA(client)) {
      return reinterpret_cast<core::FuncallableStandardClass_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::RecursiveDirectoryIterator_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 71 71 
    return (kindVal == 71);
  };
  static core::RecursiveDirectoryIterator_O* castOrNULL(FP client) {
    if (DynamicCast<core::RecursiveDirectoryIterator_O*,FP>::isA(client)) {
      return reinterpret_cast<core::RecursiveDirectoryIterator_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::LoadArchive_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 78 79 
    return ((78 <= kindVal) && (kindVal <= 79));
  };
  static core::LoadArchive_O* castOrNULL(FP client) {
    if (DynamicCast<core::LoadArchive_O*,FP>::isA(client)) {
      return reinterpret_cast<core::LoadArchive_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::BaseChar_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 84 85 
    return ((84 <= kindVal) && (kindVal <= 85));
  };
  static core::BaseChar_O* castOrNULL(FP client) {
    if (DynamicCast<core::BaseChar_O*,FP>::isA(client)) {
      return reinterpret_cast<core::BaseChar_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::ConstantInt_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 198 198 
    return (kindVal == 198);
  };
  static llvmo::ConstantInt_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::ConstantInt_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::ConstantInt_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::FunctionPassManager_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 147 147 
    return (kindVal == 147);
  };
  static llvmo::FunctionPassManager_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::FunctionPassManager_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::FunctionPassManager_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::NamedMDNode_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 202 202 
    return (kindVal == 202);
  };
  static llvmo::NamedMDNode_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::NamedMDNode_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::NamedMDNode_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::SymbolSet_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 236 236 
    return (kindVal == 236);
  };
  static core::SymbolSet_O* castOrNULL(FP client) {
    if (DynamicCast<core::SymbolSet_O*,FP>::isA(client)) {
      return reinterpret_cast<core::SymbolSet_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::HashTable_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 231 235 
    return ((231 <= kindVal) && (kindVal <= 235));
  };
  static core::HashTable_O* castOrNULL(FP client) {
    if (DynamicCast<core::HashTable_O*,FP>::isA(client)) {
      return reinterpret_cast<core::HashTable_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::BitVector_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 123 124 
    return ((123 <= kindVal) && (kindVal <= 124));
  };
  static core::BitVector_O* castOrNULL(FP client) {
    if (DynamicCast<core::BitVector_O*,FP>::isA(client)) {
      return reinterpret_cast<core::BitVector_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::VectorObjects_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 121 122 
    return ((121 <= kindVal) && (kindVal <= 122));
  };
  static core::VectorObjects_O* castOrNULL(FP client) {
    if (DynamicCast<core::VectorObjects_O*,FP>::isA(client)) {
      return reinterpret_cast<core::VectorObjects_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::StrWithFillPtr_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 120 120 
    return (kindVal == 120);
  };
  static core::StrWithFillPtr_O* castOrNULL(FP client) {
    if (DynamicCast<core::StrWithFillPtr_O*,FP>::isA(client)) {
      return reinterpret_cast<core::StrWithFillPtr_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::CallInst_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 184 184 
    return (kindVal == 184);
  };
  static llvmo::CallInst_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::CallInst_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::CallInst_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::WeakPointer_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 230 230 
    return (kindVal == 230);
  };
  static core::WeakPointer_O* castOrNULL(FP client) {
    if (DynamicCast<core::WeakPointer_O*,FP>::isA(client)) {
      return reinterpret_cast<core::WeakPointer_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::ValueFrame_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 46 46 
    return (kindVal == 46);
  };
  static core::ValueFrame_O* castOrNULL(FP client) {
    if (DynamicCast<core::ValueFrame_O*,FP>::isA(client)) {
      return reinterpret_cast<core::ValueFrame_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::SymbolList_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 229 229 
    return (kindVal == 229);
  };
  static core::SymbolList_O* castOrNULL(FP client) {
    if (DynamicCast<core::SymbolList_O*,FP>::isA(client)) {
      return reinterpret_cast<core::SymbolList_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::SwitchInst_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 182 182 
    return (kindVal == 182);
  };
  static llvmo::SwitchInst_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::SwitchInst_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::SwitchInst_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::TagbodyEnvironment_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 42 42 
    return (kindVal == 42);
  };
  static core::TagbodyEnvironment_O* castOrNULL(FP client) {
    if (DynamicCast<core::TagbodyEnvironment_O*,FP>::isA(client)) {
      return reinterpret_cast<core::TagbodyEnvironment_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::MacroletEnvironment_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 38 38 
    return (kindVal == 38);
  };
  static core::MacroletEnvironment_O* castOrNULL(FP client) {
    if (DynamicCast<core::MacroletEnvironment_O*,FP>::isA(client)) {
      return reinterpret_cast<core::MacroletEnvironment_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::MultiStringBuffer_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 228 228 
    return (kindVal == 228);
  };
  static core::MultiStringBuffer_O* castOrNULL(FP client) {
    if (DynamicCast<core::MultiStringBuffer_O*,FP>::isA(client)) {
      return reinterpret_cast<core::MultiStringBuffer_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::AllocaInst_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 174 174 
    return (kindVal == 174);
  };
  static llvmo::AllocaInst_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::AllocaInst_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::AllocaInst_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::DoubleFloat_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 104 104 
    return (kindVal == 104);
  };
  static core::DoubleFloat_O* castOrNULL(FP client) {
    if (DynamicCast<core::DoubleFloat_O*,FP>::isA(client)) {
      return reinterpret_cast<core::DoubleFloat_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::SymbolToEnumConverter_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 227 227 
    return (kindVal == 227);
  };
  static core::SymbolToEnumConverter_O* castOrNULL(FP client) {
    if (DynamicCast<core::SymbolToEnumConverter_O*,FP>::isA(client)) {
      return reinterpret_cast<core::SymbolToEnumConverter_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::Module_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 201 201 
    return (kindVal == 201);
  };
  static llvmo::Module_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::Module_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::Module_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::StringSet_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 226 226 
    return (kindVal == 226);
  };
  static core::StringSet_O* castOrNULL(FP client) {
    if (DynamicCast<core::StringSet_O*,FP>::isA(client)) {
      return reinterpret_cast<core::StringSet_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Symbol_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 224 225 
    return ((224 <= kindVal) && (kindVal <= 225));
  };
  static core::Symbol_O* castOrNULL(FP client) {
    if (DynamicCast<core::Symbol_O*,FP>::isA(client)) {
      return reinterpret_cast<core::Symbol_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::UserData_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 208 208 
    return (kindVal == 208);
  };
  static core::UserData_O* castOrNULL(FP client) {
    if (DynamicCast<core::UserData_O*,FP>::isA(client)) {
      return reinterpret_cast<core::UserData_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::FenceInst_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 183 183 
    return (kindVal == 183);
  };
  static llvmo::FenceInst_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::FenceInst_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::FenceInst_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Str_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 119 120 
    return ((119 <= kindVal) && (kindVal <= 120));
  };
  static core::Str_O* castOrNULL(FP client) {
    if (DynamicCast<core::Str_O*,FP>::isA(client)) {
      return reinterpret_cast<core::Str_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::ActivationFrame_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 43 46 
    return ((43 <= kindVal) && (kindVal <= 46));
  };
  static core::ActivationFrame_O* castOrNULL(FP client) {
    if (DynamicCast<core::ActivationFrame_O*,FP>::isA(client)) {
      return reinterpret_cast<core::ActivationFrame_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::T_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 11 237 
    return ((11 <= kindVal) && (kindVal <= 237));
  };
  static core::T_O* castOrNULL(FP client) {
    if (DynamicCast<core::T_O*,FP>::isA(client)) {
      return reinterpret_cast<core::T_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<clbind::DummyCreator*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 6 6 
    return (kindVal == 6);
  };
  static clbind::DummyCreator* castOrNULL(FP client) {
    if (DynamicCast<clbind::DummyCreator*,FP>::isA(client)) {
      return reinterpret_cast<clbind::DummyCreator*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::FunctionValueEnvironment_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 41 41 
    return (kindVal == 41);
  };
  static core::FunctionValueEnvironment_O* castOrNULL(FP client) {
    if (DynamicCast<core::FunctionValueEnvironment_O*,FP>::isA(client)) {
      return reinterpret_cast<core::FunctionValueEnvironment_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::SymbolMacroletEnvironment_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 37 37 
    return (kindVal == 37);
  };
  static core::SymbolMacroletEnvironment_O* castOrNULL(FP client) {
    if (DynamicCast<core::SymbolMacroletEnvironment_O*,FP>::isA(client)) {
      return reinterpret_cast<core::SymbolMacroletEnvironment_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::HashTableEq_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 235 235 
    return (kindVal == 235);
  };
  static core::HashTableEq_O* castOrNULL(FP client) {
    if (DynamicCast<core::HashTableEq_O*,FP>::isA(client)) {
      return reinterpret_cast<core::HashTableEq_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<asttooling::AstVisitor_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 223 223 
    return (kindVal == 223);
  };
  static asttooling::AstVisitor_O* castOrNULL(FP client) {
    if (DynamicCast<asttooling::AstVisitor_O*,FP>::isA(client)) {
      return reinterpret_cast<asttooling::AstVisitor_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::TerminatorInst_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 175 182 
    return ((175 <= kindVal) && (kindVal <= 182));
  };
  static llvmo::TerminatorInst_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::TerminatorInst_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::TerminatorInst_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::DILexicalBlock_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 66 66 
    return (kindVal == 66);
  };
  static llvmo::DILexicalBlock_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::DILexicalBlock_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::DILexicalBlock_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::String_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 118 120 
    return ((118 <= kindVal) && (kindVal <= 120));
  };
  static core::String_O* castOrNULL(FP client) {
    if (DynamicCast<core::String_O*,FP>::isA(client)) {
      return reinterpret_cast<core::String_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::StandardObject_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 212 222 
    return ((212 <= kindVal) && (kindVal <= 222));
  };
  static core::StandardObject_O* castOrNULL(FP client) {
    if (DynamicCast<core::StandardObject_O*,FP>::isA(client)) {
      return reinterpret_cast<core::StandardObject_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::ConcatenatedStream_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 26 26 
    return (kindVal == 26);
  };
  static core::ConcatenatedStream_O* castOrNULL(FP client) {
    if (DynamicCast<core::ConcatenatedStream_O*,FP>::isA(client)) {
      return reinterpret_cast<core::ConcatenatedStream_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::WrappedPointer_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 211 211 
    return (kindVal == 211);
  };
  static core::WrappedPointer_O* castOrNULL(FP client) {
    if (DynamicCast<core::WrappedPointer_O*,FP>::isA(client)) {
      return reinterpret_cast<core::WrappedPointer_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::ResumeInst_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 181 181 
    return (kindVal == 181);
  };
  static llvmo::ResumeInst_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::ResumeInst_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::ResumeInst_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::WeakHashTable_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 209 210 
    return ((209 <= kindVal) && (kindVal <= 210));
  };
  static core::WeakHashTable_O* castOrNULL(FP client) {
    if (DynamicCast<core::WeakHashTable_O*,FP>::isA(client)) {
      return reinterpret_cast<core::WeakHashTable_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::FunctionContainerEnvironment_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 36 36 
    return (kindVal == 36);
  };
  static core::FunctionContainerEnvironment_O* castOrNULL(FP client) {
    if (DynamicCast<core::FunctionContainerEnvironment_O*,FP>::isA(client)) {
      return reinterpret_cast<core::FunctionContainerEnvironment_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::LLVMContext_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 200 200 
    return (kindVal == 200);
  };
  static llvmo::LLVMContext_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::LLVMContext_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::LLVMContext_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::TargetMachine_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 199 199 
    return (kindVal == 199);
  };
  static llvmo::TargetMachine_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::TargetMachine_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::TargetMachine_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Rational_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 106 110 
    return ((106 <= kindVal) && (kindVal <= 110));
  };
  static core::Rational_O* castOrNULL(FP client) {
    if (DynamicCast<core::Rational_O*,FP>::isA(client)) {
      return reinterpret_cast<core::Rational_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::StringInputStream_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 23 23 
    return (kindVal == 23);
  };
  static core::StringInputStream_O* castOrNULL(FP client) {
    if (DynamicCast<core::StringInputStream_O*,FP>::isA(client)) {
      return reinterpret_cast<core::StringInputStream_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::ImmutablePass_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 134 135 
    return ((134 <= kindVal) && (kindVal <= 135));
  };
  static llvmo::ImmutablePass_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::ImmutablePass_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::ImmutablePass_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::Value_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 159 198 
    return ((159 <= kindVal) && (kindVal <= 198));
  };
  static llvmo::Value_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::Value_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::Value_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::DIDerivedType_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 65 65 
    return (kindVal == 65);
  };
  static llvmo::DIDerivedType_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::DIDerivedType_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::DIDerivedType_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::GlobalVariable_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 195 195 
    return (kindVal == 195);
  };
  static llvmo::GlobalVariable_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::GlobalVariable_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::GlobalVariable_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::LeafSNode_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 205 205 
    return (kindVal == 205);
  };
  static core::LeafSNode_O* castOrNULL(FP client) {
    if (DynamicCast<core::LeafSNode_O*,FP>::isA(client)) {
      return reinterpret_cast<core::LeafSNode_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::PassManager_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 146 146 
    return (kindVal == 146);
  };
  static llvmo::PassManager_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::PassManager_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::PassManager_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<clbind::detail::class_map*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 10 10 
    return (kindVal == 10);
  };
  static clbind::detail::class_map* castOrNULL(FP client) {
    if (DynamicCast<clbind::detail::class_map*,FP>::isA(client)) {
      return reinterpret_cast<clbind::detail::class_map*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::LightUserData_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 207 208 
    return ((207 <= kindVal) && (kindVal <= 208));
  };
  static core::LightUserData_O* castOrNULL(FP client) {
    if (DynamicCast<core::LightUserData_O*,FP>::isA(client)) {
      return reinterpret_cast<core::LightUserData_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::FunctionType_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 157 157 
    return (kindVal == 157);
  };
  static llvmo::FunctionType_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::FunctionType_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::FunctionType_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::DICompileUnit_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 64 64 
    return (kindVal == 64);
  };
  static llvmo::DICompileUnit_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::DICompileUnit_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::DICompileUnit_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::Linker_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 158 158 
    return (kindVal == 158);
  };
  static llvmo::Linker_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::Linker_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::Linker_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::BranchInst_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 180 180 
    return (kindVal == 180);
  };
  static llvmo::BranchInst_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::BranchInst_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::BranchInst_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::Constant_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 185 198 
    return ((185 <= kindVal) && (kindVal <= 198));
  };
  static llvmo::Constant_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::Constant_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::Constant_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::ReturnInst_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 179 179 
    return (kindVal == 179);
  };
  static llvmo::ReturnInst_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::ReturnInst_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::ReturnInst_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::LexicalEnvironment_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 31 42 
    return ((31 <= kindVal) && (kindVal <= 42));
  };
  static core::LexicalEnvironment_O* castOrNULL(FP client) {
    if (DynamicCast<core::LexicalEnvironment_O*,FP>::isA(client)) {
      return reinterpret_cast<core::LexicalEnvironment_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::LoadTimeValues_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 206 206 
    return (kindVal == 206);
  };
  static core::LoadTimeValues_O* castOrNULL(FP client) {
    if (DynamicCast<core::LoadTimeValues_O*,FP>::isA(client)) {
      return reinterpret_cast<core::LoadTimeValues_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::Function_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 194 194 
    return (kindVal == 194);
  };
  static llvmo::Function_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::Function_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::Function_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::SNode_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 203 205 
    return ((203 <= kindVal) && (kindVal <= 205));
  };
  static core::SNode_O* castOrNULL(FP client) {
    if (DynamicCast<core::SNode_O*,FP>::isA(client)) {
      return reinterpret_cast<core::SNode_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::ExternalObject_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 130 202 
    return ((130 <= kindVal) && (kindVal <= 202));
  };
  static core::ExternalObject_O* castOrNULL(FP client) {
    if (DynamicCast<core::ExternalObject_O*,FP>::isA(client)) {
      return reinterpret_cast<core::ExternalObject_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::SourceManager_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 129 129 
    return (kindVal == 129);
  };
  static core::SourceManager_O* castOrNULL(FP client) {
    if (DynamicCast<core::SourceManager_O*,FP>::isA(client)) {
      return reinterpret_cast<core::SourceManager_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::StructType_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 155 155 
    return (kindVal == 155);
  };
  static llvmo::StructType_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::StructType_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::StructType_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::StandardChar_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 85 85 
    return (kindVal == 85);
  };
  static core::StandardChar_O* castOrNULL(FP client) {
    if (DynamicCast<core::StandardChar_O*,FP>::isA(client)) {
      return reinterpret_cast<core::StandardChar_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Null_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 225 225 
    return (kindVal == 225);
  };
  static core::Null_O* castOrNULL(FP client) {
    if (DynamicCast<core::Null_O*,FP>::isA(client)) {
      return reinterpret_cast<core::Null_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::User_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 164 198 
    return ((164 <= kindVal) && (kindVal <= 198));
  };
  static llvmo::User_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::User_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::User_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::InsertPoint_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 128 128 
    return (kindVal == 128);
  };
  static llvmo::InsertPoint_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::InsertPoint_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::InsertPoint_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::SequenceStepper*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 7 9 
    return ((7 <= kindVal) && (kindVal <= 9));
  };
  static core::SequenceStepper* castOrNULL(FP client) {
    if (DynamicCast<core::SequenceStepper*,FP>::isA(client)) {
      return reinterpret_cast<core::SequenceStepper*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::SpecialForm_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 92 92 
    return (kindVal == 92);
  };
  static core::SpecialForm_O* castOrNULL(FP client) {
    if (DynamicCast<core::SpecialForm_O*,FP>::isA(client)) {
      return reinterpret_cast<core::SpecialForm_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Specializer_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 214 222 
    return ((214 <= kindVal) && (kindVal <= 222));
  };
  static core::Specializer_O* castOrNULL(FP client) {
    if (DynamicCast<core::Specializer_O*,FP>::isA(client)) {
      return reinterpret_cast<core::Specializer_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::StructureClass_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 222 222 
    return (kindVal == 222);
  };
  static core::StructureClass_O* castOrNULL(FP client) {
    if (DynamicCast<core::StructureClass_O*,FP>::isA(client)) {
      return reinterpret_cast<core::StructureClass_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::ObjRef_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 127 127 
    return (kindVal == 127);
  };
  static core::ObjRef_O* castOrNULL(FP client) {
    if (DynamicCast<core::ObjRef_O*,FP>::isA(client)) {
      return reinterpret_cast<core::ObjRef_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::BuiltInClass_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 220 221 
    return ((220 <= kindVal) && (kindVal <= 221));
  };
  static core::BuiltInClass_O* castOrNULL(FP client) {
    if (DynamicCast<core::BuiltInClass_O*,FP>::isA(client)) {
      return reinterpret_cast<core::BuiltInClass_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::IntegerType_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 156 156 
    return (kindVal == 156);
  };
  static llvmo::IntegerType_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::IntegerType_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::IntegerType_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Reader_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 126 126 
    return (kindVal == 126);
  };
  static core::Reader_O* castOrNULL(FP client) {
    if (DynamicCast<core::Reader_O*,FP>::isA(client)) {
      return reinterpret_cast<core::Reader_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::Type_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 149 157 
    return ((149 <= kindVal) && (kindVal <= 157));
  };
  static llvmo::Type_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::Type_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::Type_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::RuntimeVisibleEnvironment_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 39 42 
    return ((39 <= kindVal) && (kindVal <= 42));
  };
  static core::RuntimeVisibleEnvironment_O* castOrNULL(FP client) {
    if (DynamicCast<core::RuntimeVisibleEnvironment_O*,FP>::isA(client)) {
      return reinterpret_cast<core::RuntimeVisibleEnvironment_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::SmallMap_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 125 125 
    return (kindVal == 125);
  };
  static core::SmallMap_O* castOrNULL(FP client) {
    if (DynamicCast<core::SmallMap_O*,FP>::isA(client)) {
      return reinterpret_cast<core::SmallMap_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::DataLayout_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 148 148 
    return (kindVal == 148);
  };
  static llvmo::DataLayout_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::DataLayout_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::DataLayout_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::CompositeType_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 150 155 
    return ((150 <= kindVal) && (kindVal <= 155));
  };
  static llvmo::CompositeType_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::CompositeType_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::CompositeType_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Instance_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 91 91 
    return (kindVal == 91);
  };
  static core::Instance_O* castOrNULL(FP client) {
    if (DynamicCast<core::Instance_O*,FP>::isA(client)) {
      return reinterpret_cast<core::Instance_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::DIDescriptor_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 63 63 
    return (kindVal == 63);
  };
  static llvmo::DIDescriptor_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::DIDescriptor_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::DIDescriptor_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::InvokeInst_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 178 178 
    return (kindVal == 178);
  };
  static llvmo::InvokeInst_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::InvokeInst_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::InvokeInst_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::PassManagerBase_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 145 147 
    return ((145 <= kindVal) && (kindVal <= 147));
  };
  static llvmo::PassManagerBase_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::PassManagerBase_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::PassManagerBase_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::DIFile_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 62 62 
    return (kindVal == 62);
  };
  static llvmo::DIFile_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::DIFile_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::DIFile_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::VAArgInst_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 173 173 
    return (kindVal == 173);
  };
  static llvmo::VAArgInst_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::VAArgInst_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::VAArgInst_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::ShortFloat_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 103 103 
    return (kindVal == 103);
  };
  static core::ShortFloat_O* castOrNULL(FP client) {
    if (DynamicCast<core::ShortFloat_O*,FP>::isA(client)) {
      return reinterpret_cast<core::ShortFloat_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Array_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 115 124 
    return ((115 <= kindVal) && (kindVal <= 124));
  };
  static core::Array_O* castOrNULL(FP client) {
    if (DynamicCast<core::Array_O*,FP>::isA(client)) {
      return reinterpret_cast<core::Array_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::PassManagerBuilder_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 144 144 
    return (kindVal == 144);
  };
  static llvmo::PassManagerBuilder_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::PassManagerBuilder_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::PassManagerBuilder_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::InstanceCreator*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 5 5 
    return (kindVal == 5);
  };
  static core::InstanceCreator* castOrNULL(FP client) {
    if (DynamicCast<core::InstanceCreator*,FP>::isA(client)) {
      return reinterpret_cast<core::InstanceCreator*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::UnwindProtectEnvironment_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 35 35 
    return (kindVal == 35);
  };
  static core::UnwindProtectEnvironment_O* castOrNULL(FP client) {
    if (DynamicCast<core::UnwindProtectEnvironment_O*,FP>::isA(client)) {
      return reinterpret_cast<core::UnwindProtectEnvironment_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Fixnum_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 110 110 
    return (kindVal == 110);
  };
  static core::Fixnum_O* castOrNULL(FP client) {
    if (DynamicCast<core::Fixnum_O*,FP>::isA(client)) {
      return reinterpret_cast<core::Fixnum_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::ForeignData_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 143 143 
    return (kindVal == 143);
  };
  static core::ForeignData_O* castOrNULL(FP client) {
    if (DynamicCast<core::ForeignData_O*,FP>::isA(client)) {
      return reinterpret_cast<core::ForeignData_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::EchoStream_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 25 25 
    return (kindVal == 25);
  };
  static core::EchoStream_O* castOrNULL(FP client) {
    if (DynamicCast<core::EchoStream_O*,FP>::isA(client)) {
      return reinterpret_cast<core::EchoStream_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::UndefValue_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 197 197 
    return (kindVal == 197);
  };
  static llvmo::UndefValue_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::UndefValue_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::UndefValue_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Creator*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 3 6 
    return ((3 <= kindVal) && (kindVal <= 6));
  };
  static core::Creator* castOrNULL(FP client) {
    if (DynamicCast<core::Creator*,FP>::isA(client)) {
      return reinterpret_cast<core::Creator*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::BasicBlock_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 163 163 
    return (kindVal == 163);
  };
  static llvmo::BasicBlock_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::BasicBlock_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::BasicBlock_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::UnreachableInst_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 177 177 
    return (kindVal == 177);
  };
  static llvmo::UnreachableInst_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::UnreachableInst_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::UnreachableInst_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::CompileTimeEnvironment_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 32 38 
    return ((32 <= kindVal) && (kindVal <= 38));
  };
  static core::CompileTimeEnvironment_O* castOrNULL(FP client) {
    if (DynamicCast<core::CompileTimeEnvironment_O*,FP>::isA(client)) {
      return reinterpret_cast<core::CompileTimeEnvironment_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::Attribute_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 114 114 
    return (kindVal == 114);
  };
  static llvmo::Attribute_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::Attribute_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::Attribute_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::VectorStepper*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 9 9 
    return (kindVal == 9);
  };
  static core::VectorStepper* castOrNULL(FP client) {
    if (DynamicCast<core::VectorStepper*,FP>::isA(client)) {
      return reinterpret_cast<core::VectorStepper*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::BranchSNode_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 204 204 
    return (kindVal == 204);
  };
  static core::BranchSNode_O* castOrNULL(FP client) {
    if (DynamicCast<core::BranchSNode_O*,FP>::isA(client)) {
      return reinterpret_cast<core::BranchSNode_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::ReadTable_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 113 113 
    return (kindVal == 113);
  };
  static core::ReadTable_O* castOrNULL(FP client) {
    if (DynamicCast<core::ReadTable_O*,FP>::isA(client)) {
      return reinterpret_cast<core::ReadTable_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::CompiledFunction_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 90 90 
    return (kindVal == 90);
  };
  static core::CompiledFunction_O* castOrNULL(FP client) {
    if (DynamicCast<core::CompiledFunction_O*,FP>::isA(client)) {
      return reinterpret_cast<core::CompiledFunction_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::DataLayoutPass_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 135 135 
    return (kindVal == 135);
  };
  static llvmo::DataLayoutPass_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::DataLayoutPass_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::DataLayoutPass_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::SynonymStream_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 24 24 
    return (kindVal == 24);
  };
  static core::SynonymStream_O* castOrNULL(FP client) {
    if (DynamicCast<core::SynonymStream_O*,FP>::isA(client)) {
      return reinterpret_cast<core::SynonymStream_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::PosixTime_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 112 112 
    return (kindVal == 112);
  };
  static core::PosixTime_O* castOrNULL(FP client) {
    if (DynamicCast<core::PosixTime_O*,FP>::isA(client)) {
      return reinterpret_cast<core::PosixTime_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::VectorObjectsWithFillPtr_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 122 122 
    return (kindVal == 122);
  };
  static core::VectorObjectsWithFillPtr_O* castOrNULL(FP client) {
    if (DynamicCast<core::VectorObjectsWithFillPtr_O*,FP>::isA(client)) {
      return reinterpret_cast<core::VectorObjectsWithFillPtr_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Number_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 100 111 
    return ((100 <= kindVal) && (kindVal <= 111));
  };
  static core::Number_O* castOrNULL(FP client) {
    if (DynamicCast<core::Number_O*,FP>::isA(client)) {
      return reinterpret_cast<core::Number_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::UnaryInstruction_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 171 174 
    return ((171 <= kindVal) && (kindVal <= 174));
  };
  static llvmo::UnaryInstruction_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::UnaryInstruction_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::UnaryInstruction_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::IntArray_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 99 99 
    return (kindVal == 99);
  };
  static core::IntArray_O* castOrNULL(FP client) {
    if (DynamicCast<core::IntArray_O*,FP>::isA(client)) {
      return reinterpret_cast<core::IntArray_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Float_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 102 105 
    return ((102 <= kindVal) && (kindVal <= 105));
  };
  static core::Float_O* castOrNULL(FP client) {
    if (DynamicCast<core::Float_O*,FP>::isA(client)) {
      return reinterpret_cast<core::Float_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Class_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 215 222 
    return ((215 <= kindVal) && (kindVal <= 222));
  };
  static core::Class_O* castOrNULL(FP client) {
    if (DynamicCast<core::Class_O*,FP>::isA(client)) {
      return reinterpret_cast<core::Class_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::MDNode_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 162 162 
    return (kindVal == 162);
  };
  static llvmo::MDNode_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::MDNode_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::MDNode_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::StringOutputStream_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 22 22 
    return (kindVal == 22);
  };
  static core::StringOutputStream_O* castOrNULL(FP client) {
    if (DynamicCast<core::StringOutputStream_O*,FP>::isA(client)) {
      return reinterpret_cast<core::StringOutputStream_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::IndirectBrInst_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 176 176 
    return (kindVal == 176);
  };
  static llvmo::IndirectBrInst_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::IndirectBrInst_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::IndirectBrInst_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::StringList_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 98 98 
    return (kindVal == 98);
  };
  static core::StringList_O* castOrNULL(FP client) {
    if (DynamicCast<core::StringList_O*,FP>::isA(client)) {
      return reinterpret_cast<core::StringList_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::MDString_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 161 161 
    return (kindVal == 161);
  };
  static llvmo::MDString_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::MDString_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::MDString_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::CandoException_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 97 97 
    return (kindVal == 97);
  };
  static core::CandoException_O* castOrNULL(FP client) {
    if (DynamicCast<core::CandoException_O*,FP>::isA(client)) {
      return reinterpret_cast<core::CandoException_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Vector_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 117 124 
    return ((117 <= kindVal) && (kindVal <= 124));
  };
  static core::Vector_O* castOrNULL(FP client) {
    if (DynamicCast<core::Vector_O*,FP>::isA(client)) {
      return reinterpret_cast<core::Vector_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::SequentialType_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 151 154 
    return ((151 <= kindVal) && (kindVal <= 154));
  };
  static llvmo::SequentialType_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::SequentialType_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::SequentialType_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::APFloat_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 142 142 
    return (kindVal == 142);
  };
  static llvmo::APFloat_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::APFloat_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::APFloat_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::ArrayType_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 154 154 
    return (kindVal == 154);
  };
  static llvmo::ArrayType_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::ArrayType_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::ArrayType_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::LandingPadInst_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 170 170 
    return (kindVal == 170);
  };
  static llvmo::LandingPadInst_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::LandingPadInst_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::LandingPadInst_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::ConstantExpr_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 196 196 
    return (kindVal == 196);
  };
  static llvmo::ConstantExpr_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::ConstantExpr_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::ConstantExpr_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::IOStreamStream_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 19 19 
    return (kindVal == 19);
  };
  static core::IOStreamStream_O* castOrNULL(FP client) {
    if (DynamicCast<core::IOStreamStream_O*,FP>::isA(client)) {
      return reinterpret_cast<core::IOStreamStream_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::VectorType_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 153 153 
    return (kindVal == 153);
  };
  static llvmo::VectorType_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::VectorType_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::VectorType_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Package_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 96 96 
    return (kindVal == 96);
  };
  static core::Package_O* castOrNULL(FP client) {
    if (DynamicCast<core::Package_O*,FP>::isA(client)) {
      return reinterpret_cast<core::Package_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::DIScope_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 61 61 
    return (kindVal == 61);
  };
  static llvmo::DIScope_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::DIScope_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::DIScope_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Regex_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 95 95 
    return (kindVal == 95);
  };
  static core::Regex_O* castOrNULL(FP client) {
    if (DynamicCast<core::Regex_O*,FP>::isA(client)) {
      return reinterpret_cast<core::Regex_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::DISubroutineType_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 60 60 
    return (kindVal == 60);
  };
  static llvmo::DISubroutineType_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::DISubroutineType_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::DISubroutineType_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::GlueEnvironment_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 30 30 
    return (kindVal == 30);
  };
  static core::GlueEnvironment_O* castOrNULL(FP client) {
    if (DynamicCast<core::GlueEnvironment_O*,FP>::isA(client)) {
      return reinterpret_cast<core::GlueEnvironment_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::StringStream_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 21 23 
    return ((21 <= kindVal) && (kindVal <= 23));
  };
  static core::StringStream_O* castOrNULL(FP client) {
    if (DynamicCast<core::StringStream_O*,FP>::isA(client)) {
      return reinterpret_cast<core::StringStream_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Complex_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 111 111 
    return (kindVal == 111);
  };
  static core::Complex_O* castOrNULL(FP client) {
    if (DynamicCast<core::Complex_O*,FP>::isA(client)) {
      return reinterpret_cast<core::Complex_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::SexpSaveArchive_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 77 77 
    return (kindVal == 77);
  };
  static core::SexpSaveArchive_O* castOrNULL(FP client) {
    if (DynamicCast<core::SexpSaveArchive_O*,FP>::isA(client)) {
      return reinterpret_cast<core::SexpSaveArchive_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::DebugLoc_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 94 94 
    return (kindVal == 94);
  };
  static llvmo::DebugLoc_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::DebugLoc_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::DebugLoc_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::GlobalValue_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 193 195 
    return ((193 <= kindVal) && (kindVal <= 195));
  };
  static llvmo::GlobalValue_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::GlobalValue_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::GlobalValue_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::WeakKeyMapping_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 93 93 
    return (kindVal == 93);
  };
  static core::WeakKeyMapping_O* castOrNULL(FP client) {
    if (DynamicCast<core::WeakKeyMapping_O*,FP>::isA(client)) {
      return reinterpret_cast<core::WeakKeyMapping_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Function_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 87 92 
    return ((87 <= kindVal) && (kindVal <= 92));
  };
  static core::Function_O* castOrNULL(FP client) {
    if (DynamicCast<core::Function_O*,FP>::isA(client)) {
      return reinterpret_cast<core::Function_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Metaobject_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 213 222 
    return ((213 <= kindVal) && (kindVal <= 222));
  };
  static core::Metaobject_O* castOrNULL(FP client) {
    if (DynamicCast<core::Metaobject_O*,FP>::isA(client)) {
      return reinterpret_cast<core::Metaobject_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::MicroHeap_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 86 86 
    return (kindVal == 86);
  };
  static core::MicroHeap_O* castOrNULL(FP client) {
    if (DynamicCast<core::MicroHeap_O*,FP>::isA(client)) {
      return reinterpret_cast<core::MicroHeap_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::BroadcastStream_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 20 20 
    return (kindVal == 20);
  };
  static core::BroadcastStream_O* castOrNULL(FP client) {
    if (DynamicCast<core::BroadcastStream_O*,FP>::isA(client)) {
      return reinterpret_cast<core::BroadcastStream_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::Argument_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 160 160 
    return (kindVal == 160);
  };
  static llvmo::Argument_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::Argument_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::Argument_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::DITypeArray_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 59 59 
    return (kindVal == 59);
  };
  static llvmo::DITypeArray_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::DITypeArray_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::DITypeArray_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::HashTableEql_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 234 234 
    return (kindVal == 234);
  };
  static core::HashTableEql_O* castOrNULL(FP client) {
    if (DynamicCast<core::HashTableEql_O*,FP>::isA(client)) {
      return reinterpret_cast<core::HashTableEql_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::SexpLoadArchive_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 79 79 
    return (kindVal == 79);
  };
  static core::SexpLoadArchive_O* castOrNULL(FP client) {
    if (DynamicCast<core::SexpLoadArchive_O*,FP>::isA(client)) {
      return reinterpret_cast<core::SexpLoadArchive_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::FunctionFrame_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 45 45 
    return (kindVal == 45);
  };
  static core::FunctionFrame_O* castOrNULL(FP client) {
    if (DynamicCast<core::FunctionFrame_O*,FP>::isA(client)) {
      return reinterpret_cast<core::FunctionFrame_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::DIArray_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 58 58 
    return (kindVal == 58);
  };
  static llvmo::DIArray_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::DIArray_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::DIArray_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Character_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 82 85 
    return ((82 <= kindVal) && (kindVal <= 85));
  };
  static core::Character_O* castOrNULL(FP client) {
    if (DynamicCast<core::Character_O*,FP>::isA(client)) {
      return reinterpret_cast<core::Character_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::ArrayObjects_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 116 116 
    return (kindVal == 116);
  };
  static core::ArrayObjects_O* castOrNULL(FP client) {
    if (DynamicCast<core::ArrayObjects_O*,FP>::isA(client)) {
      return reinterpret_cast<core::ArrayObjects_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::ConsStepper*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 8 8 
    return (kindVal == 8);
  };
  static core::ConsStepper* castOrNULL(FP client) {
    if (DynamicCast<core::ConsStepper*,FP>::isA(client)) {
      return reinterpret_cast<core::ConsStepper*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::SourcePosInfo_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 81 81 
    return (kindVal == 81);
  };
  static core::SourcePosInfo_O* castOrNULL(FP client) {
    if (DynamicCast<core::SourcePosInfo_O*,FP>::isA(client)) {
      return reinterpret_cast<core::SourcePosInfo_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::ConstantDataArray_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 187 187 
    return (kindVal == 187);
  };
  static llvmo::ConstantDataArray_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::ConstantDataArray_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::ConstantDataArray_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::ConstantFP_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 192 192 
    return (kindVal == 192);
  };
  static llvmo::ConstantFP_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::ConstantFP_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::ConstantFP_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::RegexMatch_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 80 80 
    return (kindVal == 80);
  };
  static core::RegexMatch_O* castOrNULL(FP client) {
    if (DynamicCast<core::RegexMatch_O*,FP>::isA(client)) {
      return reinterpret_cast<core::RegexMatch_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::WeakKeyHashTable_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 210 210 
    return (kindVal == 210);
  };
  static core::WeakKeyHashTable_O* castOrNULL(FP client) {
    if (DynamicCast<core::WeakKeyHashTable_O*,FP>::isA(client)) {
      return reinterpret_cast<core::WeakKeyHashTable_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Archive_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 75 79 
    return ((75 <= kindVal) && (kindVal <= 79));
  };
  static core::Archive_O* castOrNULL(FP client) {
    if (DynamicCast<core::Archive_O*,FP>::isA(client)) {
      return reinterpret_cast<core::Archive_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<clbind::ClassRegistry_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 74 74 
    return (kindVal == 74);
  };
  static clbind::ClassRegistry_O* castOrNULL(FP client) {
    if (DynamicCast<clbind::ClassRegistry_O*,FP>::isA(client)) {
      return reinterpret_cast<clbind::ClassRegistry_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::AtomicCmpXchgInst_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 169 169 
    return (kindVal == 169);
  };
  static llvmo::AtomicCmpXchgInst_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::AtomicCmpXchgInst_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::AtomicCmpXchgInst_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::BlockEnvironment_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 34 34 
    return (kindVal == 34);
  };
  static core::BlockEnvironment_O* castOrNULL(FP client) {
    if (DynamicCast<core::BlockEnvironment_O*,FP>::isA(client)) {
      return reinterpret_cast<core::BlockEnvironment_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::DirectoryIterator_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 70 70 
    return (kindVal == 70);
  };
  static core::DirectoryIterator_O* castOrNULL(FP client) {
    if (DynamicCast<core::DirectoryIterator_O*,FP>::isA(client)) {
      return reinterpret_cast<core::DirectoryIterator_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::FileStatus_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 73 73 
    return (kindVal == 73);
  };
  static core::FileStatus_O* castOrNULL(FP client) {
    if (DynamicCast<core::FileStatus_O*,FP>::isA(client)) {
      return reinterpret_cast<core::FileStatus_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::PosixTimeDuration_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 72 72 
    return (kindVal == 72);
  };
  static core::PosixTimeDuration_O* castOrNULL(FP client) {
    if (DynamicCast<core::PosixTimeDuration_O*,FP>::isA(client)) {
      return reinterpret_cast<core::PosixTimeDuration_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::TagbodyFrame_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 44 44 
    return (kindVal == 44);
  };
  static core::TagbodyFrame_O* castOrNULL(FP client) {
    if (DynamicCast<core::TagbodyFrame_O*,FP>::isA(client)) {
      return reinterpret_cast<core::TagbodyFrame_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Integer_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 108 110 
    return ((108 <= kindVal) && (kindVal <= 110));
  };
  static core::Integer_O* castOrNULL(FP client) {
    if (DynamicCast<core::Integer_O*,FP>::isA(client)) {
      return reinterpret_cast<core::Integer_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::ExtendedChar_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 83 83 
    return (kindVal == 83);
  };
  static core::ExtendedChar_O* castOrNULL(FP client) {
    if (DynamicCast<core::ExtendedChar_O*,FP>::isA(client)) {
      return reinterpret_cast<core::ExtendedChar_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::SaveArchive_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 76 77 
    return ((76 <= kindVal) && (kindVal <= 77));
  };
  static core::SaveArchive_O* castOrNULL(FP client) {
    if (DynamicCast<core::SaveArchive_O*,FP>::isA(client)) {
      return reinterpret_cast<core::SaveArchive_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Bignum_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 109 109 
    return (kindVal == 109);
  };
  static core::Bignum_O* castOrNULL(FP client) {
    if (DynamicCast<core::Bignum_O*,FP>::isA(client)) {
      return reinterpret_cast<core::Bignum_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::Instruction_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 165 184 
    return ((165 <= kindVal) && (kindVal <= 184));
  };
  static llvmo::Instruction_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::Instruction_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::Instruction_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::LogicalPathname_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 28 28 
    return (kindVal == 28);
  };
  static core::LogicalPathname_O* castOrNULL(FP client) {
    if (DynamicCast<core::LogicalPathname_O*,FP>::isA(client)) {
      return reinterpret_cast<core::LogicalPathname_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::StdClass_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 217 219 
    return ((217 <= kindVal) && (kindVal <= 219));
  };
  static core::StdClass_O* castOrNULL(FP client) {
    if (DynamicCast<core::StdClass_O*,FP>::isA(client)) {
      return reinterpret_cast<core::StdClass_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Real_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 101 110 
    return ((101 <= kindVal) && (kindVal <= 110));
  };
  static core::Real_O* castOrNULL(FP client) {
    if (DynamicCast<core::Real_O*,FP>::isA(client)) {
      return reinterpret_cast<core::Real_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::APInt_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 141 141 
    return (kindVal == 141);
  };
  static llvmo::APInt_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::APInt_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::APInt_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Iterator_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 69 71 
    return ((69 <= kindVal) && (kindVal <= 71));
  };
  static core::Iterator_O* castOrNULL(FP client) {
    if (DynamicCast<core::Iterator_O*,FP>::isA(client)) {
      return reinterpret_cast<core::Iterator_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::CatchEnvironment_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 33 33 
    return (kindVal == 33);
  };
  static core::CatchEnvironment_O* castOrNULL(FP client) {
    if (DynamicCast<core::CatchEnvironment_O*,FP>::isA(client)) {
      return reinterpret_cast<core::CatchEnvironment_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::DISubprogram_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 57 57 
    return (kindVal == 57);
  };
  static llvmo::DISubprogram_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::DISubprogram_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::DISubprogram_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::LambdaListHandler_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 68 68 
    return (kindVal == 68);
  };
  static core::LambdaListHandler_O* castOrNULL(FP client) {
    if (DynamicCast<core::LambdaListHandler_O*,FP>::isA(client)) {
      return reinterpret_cast<core::LambdaListHandler_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::ValueEnvironment_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 40 40 
    return (kindVal == 40);
  };
  static core::ValueEnvironment_O* castOrNULL(FP client) {
    if (DynamicCast<core::ValueEnvironment_O*,FP>::isA(client)) {
      return reinterpret_cast<core::ValueEnvironment_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::ConstantArray_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 191 191 
    return (kindVal == 191);
  };
  static llvmo::ConstantArray_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::ConstantArray_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::ConstantArray_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::FileStream_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 17 19 
    return ((17 <= kindVal) && (kindVal <= 19));
  };
  static core::FileStream_O* castOrNULL(FP client) {
    if (DynamicCast<core::FileStream_O*,FP>::isA(client)) {
      return reinterpret_cast<core::FileStream_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::StructureObject_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 67 67 
    return (kindVal == 67);
  };
  static core::StructureObject_O* castOrNULL(FP client) {
    if (DynamicCast<core::StructureObject_O*,FP>::isA(client)) {
      return reinterpret_cast<core::StructureObject_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::DebugInfo_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 53 66 
    return ((53 <= kindVal) && (kindVal <= 66));
  };
  static llvmo::DebugInfo_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::DebugInfo_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::DebugInfo_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Path_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 52 52 
    return (kindVal == 52);
  };
  static core::Path_O* castOrNULL(FP client) {
    if (DynamicCast<core::Path_O*,FP>::isA(client)) {
      return reinterpret_cast<core::Path_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::SingleDispatchGenericFunction_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 89 89 
    return (kindVal == 89);
  };
  static core::SingleDispatchGenericFunction_O* castOrNULL(FP client) {
    if (DynamicCast<core::SingleDispatchGenericFunction_O*,FP>::isA(client)) {
      return reinterpret_cast<core::SingleDispatchGenericFunction_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Ratio_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 107 107 
    return (kindVal == 107);
  };
  static core::Ratio_O* castOrNULL(FP client) {
    if (DynamicCast<core::Ratio_O*,FP>::isA(client)) {
      return reinterpret_cast<core::Ratio_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::DIType_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 56 56 
    return (kindVal == 56);
  };
  static llvmo::DIType_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::DIType_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::DIType_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::ConstantPointerNull_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 190 190 
    return (kindVal == 190);
  };
  static llvmo::ConstantPointerNull_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::ConstantPointerNull_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::ConstantPointerNull_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::SimpleBitVector_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 124 124 
    return (kindVal == 124);
  };
  static core::SimpleBitVector_O* castOrNULL(FP client) {
    if (DynamicCast<core::SimpleBitVector_O*,FP>::isA(client)) {
      return reinterpret_cast<core::SimpleBitVector_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::EngineBuilder_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 140 140 
    return (kindVal == 140);
  };
  static llvmo::EngineBuilder_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::EngineBuilder_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::EngineBuilder_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<asttooling::RegMap::RegistryMaps*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 2 2 
    return (kindVal == 2);
  };
  static asttooling::RegMap::RegistryMaps* castOrNULL(FP client) {
    if (DynamicCast<asttooling::RegMap::RegistryMaps*,FP>::isA(client)) {
      return reinterpret_cast<asttooling::RegMap::RegistryMaps*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<clbind::ConstructorCreator*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 4 4 
    return (kindVal == 4);
  };
  static clbind::ConstructorCreator* castOrNULL(FP client) {
    if (DynamicCast<clbind::ConstructorCreator*,FP>::isA(client)) {
      return reinterpret_cast<clbind::ConstructorCreator*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<clbind::ClassRep_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 221 221 
    return (kindVal == 221);
  };
  static clbind::ClassRep_O* castOrNULL(FP client) {
    if (DynamicCast<clbind::ClassRep_O*,FP>::isA(client)) {
      return reinterpret_cast<clbind::ClassRep_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::StandardClass_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 218 218 
    return (kindVal == 218);
  };
  static core::StandardClass_O* castOrNULL(FP client) {
    if (DynamicCast<core::StandardClass_O*,FP>::isA(client)) {
      return reinterpret_cast<core::StandardClass_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::HashTableEqualp_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 233 233 
    return (kindVal == 233);
  };
  static core::HashTableEqualp_O* castOrNULL(FP client) {
    if (DynamicCast<core::HashTableEqualp_O*,FP>::isA(client)) {
      return reinterpret_cast<core::HashTableEqualp_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::PointerType_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 152 152 
    return (kindVal == 152);
  };
  static llvmo::PointerType_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::PointerType_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::PointerType_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Pointer_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 51 51 
    return (kindVal == 51);
  };
  static core::Pointer_O* castOrNULL(FP client) {
    if (DynamicCast<core::Pointer_O*,FP>::isA(client)) {
      return reinterpret_cast<core::Pointer_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::DirectoryEntry_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 50 50 
    return (kindVal == 50);
  };
  static core::DirectoryEntry_O* castOrNULL(FP client) {
    if (DynamicCast<core::DirectoryEntry_O*,FP>::isA(client)) {
      return reinterpret_cast<core::DirectoryEntry_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::HashTableEqual_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 232 232 
    return (kindVal == 232);
  };
  static core::HashTableEqual_O* castOrNULL(FP client) {
    if (DynamicCast<core::HashTableEqual_O*,FP>::isA(client)) {
      return reinterpret_cast<core::HashTableEqual_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::ExecutionEngine_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 139 139 
    return (kindVal == 139);
  };
  static llvmo::ExecutionEngine_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::ExecutionEngine_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::ExecutionEngine_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::PHINode_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 168 168 
    return (kindVal == 168);
  };
  static llvmo::PHINode_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::PHINode_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::PHINode_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::TwoWayStream_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 16 16 
    return (kindVal == 16);
  };
  static core::TwoWayStream_O* castOrNULL(FP client) {
    if (DynamicCast<core::TwoWayStream_O*,FP>::isA(client)) {
      return reinterpret_cast<core::TwoWayStream_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::ForwardReferencedClass_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 216 216 
    return (kindVal == 216);
  };
  static core::ForwardReferencedClass_O* castOrNULL(FP client) {
    if (DynamicCast<core::ForwardReferencedClass_O*,FP>::isA(client)) {
      return reinterpret_cast<core::ForwardReferencedClass_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::ObjectSet_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 49 49 
    return (kindVal == 49);
  };
  static core::ObjectSet_O* castOrNULL(FP client) {
    if (DynamicCast<core::ObjectSet_O*,FP>::isA(client)) {
      return reinterpret_cast<core::ObjectSet_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::SourceFileInfo_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 48 48 
    return (kindVal == 48);
  };
  static core::SourceFileInfo_O* castOrNULL(FP client) {
    if (DynamicCast<core::SourceFileInfo_O*,FP>::isA(client)) {
      return reinterpret_cast<core::SourceFileInfo_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::SingleDispatchMethod_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 47 47 
    return (kindVal == 47);
  };
  static core::SingleDispatchMethod_O* castOrNULL(FP client) {
    if (DynamicCast<core::SingleDispatchMethod_O*,FP>::isA(client)) {
      return reinterpret_cast<core::SingleDispatchMethod_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::DIBuilder_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 138 138 
    return (kindVal == 138);
  };
  static llvmo::DIBuilder_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::DIBuilder_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::DIBuilder_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::DIBasicType_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 55 55 
    return (kindVal == 55);
  };
  static llvmo::DIBasicType_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::DIBasicType_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::DIBasicType_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::LoadInst_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 172 172 
    return (kindVal == 172);
  };
  static llvmo::LoadInst_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::LoadInst_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::LoadInst_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::IRBuilder_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 137 137 
    return (kindVal == 137);
  };
  static llvmo::IRBuilder_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::IRBuilder_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::IRBuilder_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Environment_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 29 46 
    return ((29 <= kindVal) && (kindVal <= 46));
  };
  static core::Environment_O* castOrNULL(FP client) {
    if (DynamicCast<core::Environment_O*,FP>::isA(client)) {
      return reinterpret_cast<core::Environment_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::IRBuilderBase_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 136 137 
    return ((136 <= kindVal) && (kindVal <= 137));
  };
  static llvmo::IRBuilderBase_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::IRBuilderBase_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::IRBuilderBase_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::BlockAddress_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 189 189 
    return (kindVal == 189);
  };
  static llvmo::BlockAddress_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::BlockAddress_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::BlockAddress_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Pathname_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 27 28 
    return ((27 <= kindVal) && (kindVal <= 28));
  };
  static core::Pathname_O* castOrNULL(FP client) {
    if (DynamicCast<core::Pathname_O*,FP>::isA(client)) {
      return reinterpret_cast<core::Pathname_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Lisp_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 1 1 
    return (kindVal == 1);
  };
  static core::Lisp_O* castOrNULL(FP client) {
    if (DynamicCast<core::Lisp_O*,FP>::isA(client)) {
      return reinterpret_cast<core::Lisp_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::DICompositeType_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 54 54 
    return (kindVal == 54);
  };
  static llvmo::DICompositeType_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::DICompositeType_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::DICompositeType_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::ModulePass_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 133 135 
    return ((133 <= kindVal) && (kindVal <= 135));
  };
  static llvmo::ModulePass_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::ModulePass_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::ModulePass_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::StoreInst_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 167 167 
    return (kindVal == 167);
  };
  static llvmo::StoreInst_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::StoreInst_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::StoreInst_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Stream_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 14 26 
    return ((14 <= kindVal) && (kindVal <= 26));
  };
  static core::Stream_O* castOrNULL(FP client) {
    if (DynamicCast<core::Stream_O*,FP>::isA(client)) {
      return reinterpret_cast<core::Stream_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::SingleDispatchEffectiveMethodFunction_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 88 88 
    return (kindVal == 88);
  };
  static core::SingleDispatchEffectiveMethodFunction_O* castOrNULL(FP client) {
    if (DynamicCast<core::SingleDispatchEffectiveMethodFunction_O*,FP>::isA(client)) {
      return reinterpret_cast<core::SingleDispatchEffectiveMethodFunction_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::ConstantStruct_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 188 188 
    return (kindVal == 188);
  };
  static llvmo::ConstantStruct_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::ConstantStruct_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::ConstantStruct_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::FunctionPass_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 132 132 
    return (kindVal == 132);
  };
  static llvmo::FunctionPass_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::FunctionPass_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::FunctionPass_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::AtomicRMWInst_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 166 166 
    return (kindVal == 166);
  };
  static llvmo::AtomicRMWInst_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::AtomicRMWInst_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::AtomicRMWInst_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<cffi::Pointer_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 13 13 
    return (kindVal == 13);
  };
  static cffi::Pointer_O* castOrNULL(FP client) {
    if (DynamicCast<cffi::Pointer_O*,FP>::isA(client)) {
      return reinterpret_cast<cffi::Pointer_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::IOFileStream_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 18 18 
    return (kindVal == 18);
  };
  static core::IOFileStream_O* castOrNULL(FP client) {
    if (DynamicCast<core::IOFileStream_O*,FP>::isA(client)) {
      return reinterpret_cast<core::IOFileStream_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::Cons_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 12 12 
    return (kindVal == 12);
  };
  static core::Cons_O* castOrNULL(FP client) {
    if (DynamicCast<core::Cons_O*,FP>::isA(client)) {
      return reinterpret_cast<core::Cons_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<core::AnsiStream_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 15 26 
    return ((15 <= kindVal) && (kindVal <= 26));
  };
  static core::AnsiStream_O* castOrNULL(FP client) {
    if (DynamicCast<core::AnsiStream_O*,FP>::isA(client)) {
      return reinterpret_cast<core::AnsiStream_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::Pass_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 131 135 
    return ((131 <= kindVal) && (kindVal <= 135));
  };
  static llvmo::Pass_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::Pass_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::Pass_O*>(client);
    }
    return NULL;
  };
};
template <typename FP> struct DynamicCast<llvmo::ConstantDataSequential_O*,FP> {
  static bool isA(FP client) {
    gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
    int kindVal = header->kind();
    // low high --> 186 187 
    return ((186 <= kindVal) && (kindVal <= 187));
  };
  static llvmo::ConstantDataSequential_O* castOrNULL(FP client) {
    if (DynamicCast<llvmo::ConstantDataSequential_O*,FP>::isA(client)) {
      return reinterpret_cast<llvmo::ConstantDataSequential_O*>(client);
    }
    return NULL;
  };
};
#endif // defined(GC_DYNAMIC_CAST)
#if defined(GC_KIND_NAME_MAP)
   case KIND_GCVECTOR_gctools__GCVector_moveable_core__DynamicBinding_: return "KIND_GCVECTOR_gctools__GCVector_moveable_core__DynamicBinding_";
   case KIND_CLASSALLOC_core__Cache: return "KIND_CLASSALLOC_core__Cache";
   case KIND_LISPALLOC_core__SingleFloat_O: return "KIND_LISPALLOC_core__SingleFloat_O";
   case KIND_LISPALLOC_core__Binder_O: return "KIND_LISPALLOC_core__Binder_O";
   case KIND_LISPALLOC_core__FuncallableStandardClass_O: return "KIND_LISPALLOC_core__FuncallableStandardClass_O";
   case KIND_LISPALLOC_core__RecursiveDirectoryIterator_O: return "KIND_LISPALLOC_core__RecursiveDirectoryIterator_O";
   case KIND_LISPALLOC_core__LoadArchive_O: return "KIND_LISPALLOC_core__LoadArchive_O";
   case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__SourceFileInfo_O__: return "KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__SourceFileInfo_O__";
   case KIND_LISPALLOC_core__BaseChar_O: return "KIND_LISPALLOC_core__BaseChar_O";
   case KIND_LISPALLOC_llvmo__ConstantInt_O: return "KIND_LISPALLOC_llvmo__ConstantInt_O";
   case KIND_LISPALLOC_llvmo__FunctionPassManager_O: return "KIND_LISPALLOC_llvmo__FunctionPassManager_O";
   case KIND_LISPALLOC_asttooling__DerivableFrontendActionFactory: return "KIND_LISPALLOC_asttooling__DerivableFrontendActionFactory";
   case KIND_LISPALLOC_llvmo__NamedMDNode_O: return "KIND_LISPALLOC_llvmo__NamedMDNode_O";
   case KIND_LISPALLOC_core__SymbolSet_O: return "KIND_LISPALLOC_core__SymbolSet_O";
   case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ContextFrame_: return "KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ContextFrame_";
   case KIND_LISPALLOC_core__HashTable_O: return "KIND_LISPALLOC_core__HashTable_O";
   case KIND_LISPALLOC_core__BitVector_O: return "KIND_LISPALLOC_core__BitVector_O";
   case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__Message_: return "KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__Message_";
   case KIND_LISPALLOC_core__VectorObjects_O: return "KIND_LISPALLOC_core__VectorObjects_O";
   case KIND_LISPALLOC_core__StrWithFillPtr_O: return "KIND_LISPALLOC_core__StrWithFillPtr_O";
   case KIND_LISPALLOC_llvmo__CallInst_O: return "KIND_LISPALLOC_llvmo__CallInst_O";
   case KIND_LISPALLOC_core__WeakPointer_O: return "KIND_LISPALLOC_core__WeakPointer_O";
   case KIND_LISPALLOC_core__ValueFrame_O: return "KIND_LISPALLOC_core__ValueFrame_O";
   case KIND_GCSTRING_gctools__GCString_moveable_char_: return "KIND_GCSTRING_gctools__GCString_moveable_char_";
   case KIND_LISPALLOC_core__SymbolList_O: return "KIND_LISPALLOC_core__SymbolList_O";
   case KIND_LISPALLOC_llvmo__SwitchInst_O: return "KIND_LISPALLOC_llvmo__SwitchInst_O";
   case KIND_LISPALLOC_core__TagbodyEnvironment_O: return "KIND_LISPALLOC_core__TagbodyEnvironment_O";
   case KIND_LISPALLOC_core__MacroletEnvironment_O: return "KIND_LISPALLOC_core__MacroletEnvironment_O";
   case KIND_LISPALLOC_core__MultiStringBuffer_O: return "KIND_LISPALLOC_core__MultiStringBuffer_O";
   case KIND_LISPALLOC_llvmo__AllocaInst_O: return "KIND_LISPALLOC_llvmo__AllocaInst_O";
   case KIND_LISPALLOC_core__DoubleFloat_O: return "KIND_LISPALLOC_core__DoubleFloat_O";
   case KIND_LISPALLOC_core__SymbolToEnumConverter_O: return "KIND_LISPALLOC_core__SymbolToEnumConverter_O";
   case KIND_LISPALLOC_llvmo__Module_O: return "KIND_LISPALLOC_llvmo__Module_O";
   case KIND_GCVECTOR_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__T_O__gctools__smart_ptr_core__T_O___: return "KIND_GCVECTOR_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__T_O__gctools__smart_ptr_core__T_O___";
   case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__internal__MatcherDescriptor_P_: return "KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__internal__MatcherDescriptor_P_";
   case KIND_LISPALLOC_core__StringSet_O: return "KIND_LISPALLOC_core__StringSet_O";
   case KIND_BOOTSTRAP_core__Symbol_O: return "KIND_BOOTSTRAP_core__Symbol_O";
   case KIND_LISPALLOC_core__UserData_O: return "KIND_LISPALLOC_core__UserData_O";
   case KIND_LISPALLOC_llvmo__FenceInst_O: return "KIND_LISPALLOC_llvmo__FenceInst_O";
   case KIND_BOOTSTRAP_core__Str_O: return "KIND_BOOTSTRAP_core__Str_O";
   case KIND_LISPALLOC_core__ActivationFrame_O: return "KIND_LISPALLOC_core__ActivationFrame_O";
   case KIND_BOOTSTRAP_core__T_O: return "KIND_BOOTSTRAP_core__T_O";
   case KIND_CLASSALLOC_clbind__DummyCreator: return "KIND_CLASSALLOC_clbind__DummyCreator";
   case KIND_LISPALLOC_core__FunctionValueEnvironment_O: return "KIND_LISPALLOC_core__FunctionValueEnvironment_O";
   case KIND_LISPALLOC_core__SymbolMacroletEnvironment_O: return "KIND_LISPALLOC_core__SymbolMacroletEnvironment_O";
   case KIND_LISPALLOC_core__HashTableEq_O: return "KIND_LISPALLOC_core__HashTableEq_O";
   case KIND_LISPALLOC_asttooling__AstVisitor_O: return "KIND_LISPALLOC_asttooling__AstVisitor_O";
   case KIND_LISPALLOC_llvmo__TerminatorInst_O: return "KIND_LISPALLOC_llvmo__TerminatorInst_O";
   case KIND_LISPALLOC_llvmo__DILexicalBlock_O: return "KIND_LISPALLOC_llvmo__DILexicalBlock_O";
   case KIND_LISPALLOC_core__String_O: return "KIND_LISPALLOC_core__String_O";
   case KIND_GCVECTOR_gctools__GCVector_moveable_core__ExceptionEntry_: return "KIND_GCVECTOR_gctools__GCVector_moveable_core__ExceptionEntry_";
   case KIND_BOOTSTRAP_core__StandardObject_O: return "KIND_BOOTSTRAP_core__StandardObject_O";
   case KIND_LISPALLOC_core__ConcatenatedStream_O: return "KIND_LISPALLOC_core__ConcatenatedStream_O";
   case KIND_TEMPLATED_LISPALLOC_core__WrappedPointer_O: return "KIND_TEMPLATED_LISPALLOC_core__WrappedPointer_O";
   case KIND_LISPALLOC_llvmo__ResumeInst_O: return "KIND_LISPALLOC_llvmo__ResumeInst_O";
   case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__: return "KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__";
   case KIND_LISPALLOC_core__WeakHashTable_O: return "KIND_LISPALLOC_core__WeakHashTable_O";
   case KIND_LISPALLOC_core__FunctionContainerEnvironment_O: return "KIND_LISPALLOC_core__FunctionContainerEnvironment_O";
   case KIND_LISPALLOC_llvmo__LLVMContext_O: return "KIND_LISPALLOC_llvmo__LLVMContext_O";
   case KIND_LISPALLOC_llvmo__TargetMachine_O: return "KIND_LISPALLOC_llvmo__TargetMachine_O";
   case KIND_LISPALLOC_core__Rational_O: return "KIND_LISPALLOC_core__Rational_O";
   case KIND_LISPALLOC_core__StringInputStream_O: return "KIND_LISPALLOC_core__StringInputStream_O";
   case KIND_LISPALLOC_llvmo__ImmutablePass_O: return "KIND_LISPALLOC_llvmo__ImmutablePass_O";
   case KIND_LISPALLOC_llvmo__Value_O: return "KIND_LISPALLOC_llvmo__Value_O";
   case KIND_LISPALLOC_llvmo__DIDerivedType_O: return "KIND_LISPALLOC_llvmo__DIDerivedType_O";
   case KIND_LISPALLOC_llvmo__GlobalVariable_O: return "KIND_LISPALLOC_llvmo__GlobalVariable_O";
   case KIND_LISPALLOC_core__LeafSNode_O: return "KIND_LISPALLOC_core__LeafSNode_O";
   case KIND_LISPALLOC_llvmo__PassManager_O: return "KIND_LISPALLOC_llvmo__PassManager_O";
   case KIND_ROOTCLASSALLOC_clbind__detail__class_map: return "KIND_ROOTCLASSALLOC_clbind__detail__class_map";
   case KIND_LISPALLOC_core__LightUserData_O: return "KIND_LISPALLOC_core__LightUserData_O";
   case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ErrorContent_: return "KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ErrorContent_";
   case KIND_LISPALLOC_llvmo__FunctionType_O: return "KIND_LISPALLOC_llvmo__FunctionType_O";
   case KIND_LISPALLOC_llvmo__DICompileUnit_O: return "KIND_LISPALLOC_llvmo__DICompileUnit_O";
   case KIND_LISPALLOC_llvmo__Linker_O: return "KIND_LISPALLOC_llvmo__Linker_O";
   case KIND_LISPALLOC_llvmo__BranchInst_O: return "KIND_LISPALLOC_llvmo__BranchInst_O";
   case KIND_LISPALLOC_llvmo__Constant_O: return "KIND_LISPALLOC_llvmo__Constant_O";
   case KIND_LISPALLOC_llvmo__ReturnInst_O: return "KIND_LISPALLOC_llvmo__ReturnInst_O";
   case KIND_LISPALLOC_core__LexicalEnvironment_O: return "KIND_LISPALLOC_core__LexicalEnvironment_O";
   case KIND_LISPALLOC_core__LoadTimeValues_O: return "KIND_LISPALLOC_core__LoadTimeValues_O";
   case KIND_LISPALLOC_llvmo__Function_O: return "KIND_LISPALLOC_llvmo__Function_O";
   case KIND_LISPALLOC_core__SNode_O: return "KIND_LISPALLOC_core__SNode_O";
   case KIND_LISPALLOC_core__ExternalObject_O: return "KIND_LISPALLOC_core__ExternalObject_O";
   case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__: return "KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__";
   case KIND_LISPALLOC_core__SourceManager_O: return "KIND_LISPALLOC_core__SourceManager_O";
   case KIND_LISPALLOC_llvmo__StructType_O: return "KIND_LISPALLOC_llvmo__StructType_O";
   case KIND_LISPALLOC_asttooling__DerivableSyntaxOnlyAction: return "KIND_LISPALLOC_asttooling__DerivableSyntaxOnlyAction";
   case KIND_LISPALLOC_core__StandardChar_O: return "KIND_LISPALLOC_core__StandardChar_O";
   case KIND_LISPALLOC_core__Null_O: return "KIND_LISPALLOC_core__Null_O";
   case KIND_LISPALLOC_llvmo__User_O: return "KIND_LISPALLOC_llvmo__User_O";
   case KIND_LISPALLOC_llvmo__InsertPoint_O: return "KIND_LISPALLOC_llvmo__InsertPoint_O";
   case KIND_CLASSALLOC_core__SequenceStepper: return "KIND_CLASSALLOC_core__SequenceStepper";
   case KIND_LISPALLOC_core__SpecialForm_O: return "KIND_LISPALLOC_core__SpecialForm_O";
   case KIND_TEMPLATED_CLASSALLOC_core__BuiltinClosure: return "KIND_TEMPLATED_CLASSALLOC_core__BuiltinClosure";
   case KIND_BOOTSTRAP_core__Specializer_O: return "KIND_BOOTSTRAP_core__Specializer_O";
   case KIND_BOOTSTRAP_core__StructureClass_O: return "KIND_BOOTSTRAP_core__StructureClass_O";
   case KIND_CLASSALLOC_llvmo__CompiledClosure: return "KIND_CLASSALLOC_llvmo__CompiledClosure";
   case KIND_CLASSALLOC_core__InterpretedClosure: return "KIND_CLASSALLOC_core__InterpretedClosure";
   case KIND_LISPALLOC_core__ObjRef_O: return "KIND_LISPALLOC_core__ObjRef_O";
   case KIND_BOOTSTRAP_core__BuiltInClass_O: return "KIND_BOOTSTRAP_core__BuiltInClass_O";
   case KIND_LISPALLOC_llvmo__IntegerType_O: return "KIND_LISPALLOC_llvmo__IntegerType_O";
   case KIND_LISPALLOC_core__Reader_O: return "KIND_LISPALLOC_core__Reader_O";
   case KIND_LISPALLOC_llvmo__Type_O: return "KIND_LISPALLOC_llvmo__Type_O";
   case KIND_LISPALLOC_core__RuntimeVisibleEnvironment_O: return "KIND_LISPALLOC_core__RuntimeVisibleEnvironment_O";
   case KIND_LISPALLOC_core__SmallMap_O: return "KIND_LISPALLOC_core__SmallMap_O";
   case KIND_LISPALLOC_llvmo__DataLayout_O: return "KIND_LISPALLOC_llvmo__DataLayout_O";
   case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ParserValue_: return "KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ParserValue_";
   case KIND_CLASSALLOC_asttooling__internal__OverloadedMatcherDescriptor: return "KIND_CLASSALLOC_asttooling__internal__OverloadedMatcherDescriptor";
   case KIND_LISPALLOC_llvmo__CompositeType_O: return "KIND_LISPALLOC_llvmo__CompositeType_O";
   case KIND_LISPALLOC_core__Instance_O: return "KIND_LISPALLOC_core__Instance_O";
   case KIND_LISPALLOC_asttooling__DerivableMatchCallback: return "KIND_LISPALLOC_asttooling__DerivableMatchCallback";
   case KIND_LISPALLOC_llvmo__DIDescriptor_O: return "KIND_LISPALLOC_llvmo__DIDescriptor_O";
   case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__SingleDispatchMethod_O__: return "KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__SingleDispatchMethod_O__";
   case KIND_LISPALLOC_llvmo__InvokeInst_O: return "KIND_LISPALLOC_llvmo__InvokeInst_O";
   case KIND_LISPALLOC_llvmo__PassManagerBase_O: return "KIND_LISPALLOC_llvmo__PassManagerBase_O";
   case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__: return "KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__";
   case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Character_O__: return "KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Character_O__";
   case KIND_LISPALLOC_llvmo__DIFile_O: return "KIND_LISPALLOC_llvmo__DIFile_O";
   case KIND_LISPALLOC_llvmo__VAArgInst_O: return "KIND_LISPALLOC_llvmo__VAArgInst_O";
   case KIND_LISPALLOC_core__ShortFloat_O: return "KIND_LISPALLOC_core__ShortFloat_O";
   case KIND_GCVECTOR_gctools__GCVector_moveable_core__SequenceStepper_P_: return "KIND_GCVECTOR_gctools__GCVector_moveable_core__SequenceStepper_P_";
   case KIND_LISPALLOC_core__Array_O: return "KIND_LISPALLOC_core__Array_O";
   case KIND_LISPALLOC_llvmo__PassManagerBuilder_O: return "KIND_LISPALLOC_llvmo__PassManagerBuilder_O";
   case KIND_CLASSALLOC_core__CoreExposer: return "KIND_CLASSALLOC_core__CoreExposer";
   case KIND_CLASSALLOC_core__SingleDispatchGenericFunctionClosure: return "KIND_CLASSALLOC_core__SingleDispatchGenericFunctionClosure";
   case KIND_CLASSALLOC_core__InstanceCreator: return "KIND_CLASSALLOC_core__InstanceCreator";
   case KIND_LISPALLOC_core__UnwindProtectEnvironment_O: return "KIND_LISPALLOC_core__UnwindProtectEnvironment_O";
   case KIND_GCVECTOR_gctools__GCVector_moveable_core__SymbolStorage_: return "KIND_GCVECTOR_gctools__GCVector_moveable_core__SymbolStorage_";
   case KIND_LISPALLOC_core__Fixnum_O: return "KIND_LISPALLOC_core__Fixnum_O";
   case KIND_LISPALLOC_core__ForeignData_O: return "KIND_LISPALLOC_core__ForeignData_O";
   case KIND_LISPALLOC_core__EchoStream_O: return "KIND_LISPALLOC_core__EchoStream_O";
   case KIND_LISPALLOC_llvmo__UndefValue_O: return "KIND_LISPALLOC_llvmo__UndefValue_O";
   case KIND_TEMPLATED_CLASSALLOC_core__Creator: return "KIND_TEMPLATED_CLASSALLOC_core__Creator";
   case KIND_LISPALLOC_llvmo__BasicBlock_O: return "KIND_LISPALLOC_llvmo__BasicBlock_O";
   case KIND_LISPALLOC_llvmo__UnreachableInst_O: return "KIND_LISPALLOC_llvmo__UnreachableInst_O";
   case KIND_LISPALLOC_core__CompileTimeEnvironment_O: return "KIND_LISPALLOC_core__CompileTimeEnvironment_O";
   case KIND_GCVECTOR_gctools__GCVector_moveable_core__OptionalArgument_: return "KIND_GCVECTOR_gctools__GCVector_moveable_core__OptionalArgument_";
   case KIND_LISPALLOC_llvmo__Attribute_O: return "KIND_LISPALLOC_llvmo__Attribute_O";
   case KIND_CLASSALLOC_core__VectorStepper: return "KIND_CLASSALLOC_core__VectorStepper";
   case KIND_LISPALLOC_core__BranchSNode_O: return "KIND_LISPALLOC_core__BranchSNode_O";
   case KIND_LISPALLOC_core__ReadTable_O: return "KIND_LISPALLOC_core__ReadTable_O";
   case KIND_LISPALLOC_core__CompiledFunction_O: return "KIND_LISPALLOC_core__CompiledFunction_O";
   case KIND_LISPALLOC_llvmo__DataLayoutPass_O: return "KIND_LISPALLOC_llvmo__DataLayoutPass_O";
   case KIND_LISPALLOC_core__SynonymStream_O: return "KIND_LISPALLOC_core__SynonymStream_O";
   case KIND_LISPALLOC_core__PosixTime_O: return "KIND_LISPALLOC_core__PosixTime_O";
   case KIND_LISPALLOC_core__VectorObjectsWithFillPtr_O: return "KIND_LISPALLOC_core__VectorObjectsWithFillPtr_O";
   case KIND_LISPALLOC_core__Number_O: return "KIND_LISPALLOC_core__Number_O";
   case KIND_LISPALLOC_llvmo__UnaryInstruction_O: return "KIND_LISPALLOC_llvmo__UnaryInstruction_O";
   case KIND_LISPALLOC_core__IntArray_O: return "KIND_LISPALLOC_core__IntArray_O";
   case KIND_LISPALLOC_core__Float_O: return "KIND_LISPALLOC_core__Float_O";
   case KIND_BOOTSTRAP_core__Class_O: return "KIND_BOOTSTRAP_core__Class_O";
   case KIND_LISPALLOC_llvmo__MDNode_O: return "KIND_LISPALLOC_llvmo__MDNode_O";
   case KIND_LISPALLOC_core__StringOutputStream_O: return "KIND_LISPALLOC_core__StringOutputStream_O";
   case KIND_LISPALLOC_llvmo__IndirectBrInst_O: return "KIND_LISPALLOC_llvmo__IndirectBrInst_O";
   case KIND_LISPALLOC_core__StringList_O: return "KIND_LISPALLOC_core__StringList_O";
   case KIND_LISPALLOC_llvmo__MDString_O: return "KIND_LISPALLOC_llvmo__MDString_O";
   case KIND_LISPALLOC_core__CandoException_O: return "KIND_LISPALLOC_core__CandoException_O";
   case KIND_LISPALLOC_core__Vector_O: return "KIND_LISPALLOC_core__Vector_O";
   case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__0_: return "KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__0_";
   case KIND_LISPALLOC_llvmo__SequentialType_O: return "KIND_LISPALLOC_llvmo__SequentialType_O";
   case KIND_LISPALLOC_llvmo__APFloat_O: return "KIND_LISPALLOC_llvmo__APFloat_O";
   case KIND_LISPALLOC_llvmo__ArrayType_O: return "KIND_LISPALLOC_llvmo__ArrayType_O";
   case KIND_LISPALLOC_llvmo__LandingPadInst_O: return "KIND_LISPALLOC_llvmo__LandingPadInst_O";
   case KIND_LISPALLOC_llvmo__ConstantExpr_O: return "KIND_LISPALLOC_llvmo__ConstantExpr_O";
   case KIND_LISPALLOC_core__IOStreamStream_O: return "KIND_LISPALLOC_core__IOStreamStream_O";
   case KIND_LISPALLOC_llvmo__VectorType_O: return "KIND_LISPALLOC_llvmo__VectorType_O";
   case KIND_LISPALLOC_asttooling__DerivableArgumentsAdjuster: return "KIND_LISPALLOC_asttooling__DerivableArgumentsAdjuster";
   case KIND_LISPALLOC_core__Package_O: return "KIND_LISPALLOC_core__Package_O";
   case KIND_LISPALLOC_llvmo__DIScope_O: return "KIND_LISPALLOC_llvmo__DIScope_O";
   case KIND_LISPALLOC_core__Regex_O: return "KIND_LISPALLOC_core__Regex_O";
   case KIND_LISPALLOC_llvmo__DISubroutineType_O: return "KIND_LISPALLOC_llvmo__DISubroutineType_O";
   case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__3_: return "KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__3_";
   case KIND_LISPALLOC_core__GlueEnvironment_O: return "KIND_LISPALLOC_core__GlueEnvironment_O";
   case KIND_LISPALLOC_core__StringStream_O: return "KIND_LISPALLOC_core__StringStream_O";
   case KIND_LISPALLOC_core__Complex_O: return "KIND_LISPALLOC_core__Complex_O";
   case KIND_LISPALLOC_core__SexpSaveArchive_O: return "KIND_LISPALLOC_core__SexpSaveArchive_O";
   case KIND_LISPALLOC_llvmo__DebugLoc_O: return "KIND_LISPALLOC_llvmo__DebugLoc_O";
   case KIND_LISPALLOC_llvmo__GlobalValue_O: return "KIND_LISPALLOC_llvmo__GlobalValue_O";
   case KIND_CLASSALLOC_core__MacroClosure: return "KIND_CLASSALLOC_core__MacroClosure";
   case KIND_LISPALLOC_core__WeakKeyMapping_O: return "KIND_LISPALLOC_core__WeakKeyMapping_O";
   case KIND_LISPALLOC_core__Function_O: return "KIND_LISPALLOC_core__Function_O";
   case KIND_BOOTSTRAP_core__Metaobject_O: return "KIND_BOOTSTRAP_core__Metaobject_O";
   case KIND_LISPALLOC_core__MicroHeap_O: return "KIND_LISPALLOC_core__MicroHeap_O";
   case KIND_LISPALLOC_core__BroadcastStream_O: return "KIND_LISPALLOC_core__BroadcastStream_O";
   case KIND_LISPALLOC_llvmo__Argument_O: return "KIND_LISPALLOC_llvmo__Argument_O";
   case KIND_LISPALLOC_asttooling__DerivableASTFrontendAction: return "KIND_LISPALLOC_asttooling__DerivableASTFrontendAction";
   case KIND_LISPALLOC_llvmo__DITypeArray_O: return "KIND_LISPALLOC_llvmo__DITypeArray_O";
   case KIND_LISPALLOC_core__HashTableEql_O: return "KIND_LISPALLOC_core__HashTableEql_O";
   case KIND_LISPALLOC_core__SexpLoadArchive_O: return "KIND_LISPALLOC_core__SexpLoadArchive_O";
   case KIND_LISPALLOC_core__FunctionFrame_O: return "KIND_LISPALLOC_core__FunctionFrame_O";
   case KIND_LISPALLOC_llvmo__DIArray_O: return "KIND_LISPALLOC_llvmo__DIArray_O";
   case KIND_LISPALLOC_core__Character_O: return "KIND_LISPALLOC_core__Character_O";
   case KIND_LISPALLOC_core__ArrayObjects_O: return "KIND_LISPALLOC_core__ArrayObjects_O";
   case KIND_CLASSALLOC_core__ConsStepper: return "KIND_CLASSALLOC_core__ConsStepper";
   case KIND_CLASSALLOC_asttooling__internal__FixedArgCountMatcherDescriptor: return "KIND_CLASSALLOC_asttooling__internal__FixedArgCountMatcherDescriptor";
   case KIND_LISPALLOC_core__SourcePosInfo_O: return "KIND_LISPALLOC_core__SourcePosInfo_O";
   case KIND_LISPALLOC_llvmo__ConstantDataArray_O: return "KIND_LISPALLOC_llvmo__ConstantDataArray_O";
   case KIND_LISPALLOC_llvmo__ConstantFP_O: return "KIND_LISPALLOC_llvmo__ConstantFP_O";
   case KIND_LISPALLOC_core__RegexMatch_O: return "KIND_LISPALLOC_core__RegexMatch_O";
   case KIND_LISPALLOC_core__WeakKeyHashTable_O: return "KIND_LISPALLOC_core__WeakKeyHashTable_O";
   case KIND_CLASSALLOC_asttooling__internal__FreeFuncMatcherDescriptor: return "KIND_CLASSALLOC_asttooling__internal__FreeFuncMatcherDescriptor";
   case KIND_GCVECTOR_gctools__GCVector_moveable_core__AuxArgument_: return "KIND_GCVECTOR_gctools__GCVector_moveable_core__AuxArgument_";
   case KIND_LISPALLOC_core__Archive_O: return "KIND_LISPALLOC_core__Archive_O";
   case KIND_LISPALLOC_clbind__ClassRegistry_O: return "KIND_LISPALLOC_clbind__ClassRegistry_O";
   case KIND_LISPALLOC_llvmo__AtomicCmpXchgInst_O: return "KIND_LISPALLOC_llvmo__AtomicCmpXchgInst_O";
   case KIND_LISPALLOC_core__BlockEnvironment_O: return "KIND_LISPALLOC_core__BlockEnvironment_O";
   case KIND_GCVECTOR_gctools__GCVector_moveable_core__SymbolClassPair_: return "KIND_GCVECTOR_gctools__GCVector_moveable_core__SymbolClassPair_";
   case KIND_LISPALLOC_core__DirectoryIterator_O: return "KIND_LISPALLOC_core__DirectoryIterator_O";
   case KIND_LISPALLOC_core__FileStatus_O: return "KIND_LISPALLOC_core__FileStatus_O";
   case KIND_LISPALLOC_core__PosixTimeDuration_O: return "KIND_LISPALLOC_core__PosixTimeDuration_O";
   case KIND_LISPALLOC_core__TagbodyFrame_O: return "KIND_LISPALLOC_core__TagbodyFrame_O";
   case KIND_LISPALLOC_core__Integer_O: return "KIND_LISPALLOC_core__Integer_O";
   case KIND_LISPALLOC_core__ExtendedChar_O: return "KIND_LISPALLOC_core__ExtendedChar_O";
   case KIND_LISPALLOC_core__SaveArchive_O: return "KIND_LISPALLOC_core__SaveArchive_O";
   case KIND_LISPALLOC_core__Bignum_O: return "KIND_LISPALLOC_core__Bignum_O";
   case KIND_LISPALLOC_llvmo__Instruction_O: return "KIND_LISPALLOC_llvmo__Instruction_O";
   case KIND_LISPALLOC_core__LogicalPathname_O: return "KIND_LISPALLOC_core__LogicalPathname_O";
   case KIND_BOOTSTRAP_core__StdClass_O: return "KIND_BOOTSTRAP_core__StdClass_O";
   case KIND_GCVECTOR_gctools__GCVector_moveable_core__KeywordArgument_: return "KIND_GCVECTOR_gctools__GCVector_moveable_core__KeywordArgument_";
   case KIND_LISPALLOC_core__Real_O: return "KIND_LISPALLOC_core__Real_O";
   case KIND_GCVECTOR_gctools__GCVector_moveable_core__CacheRecord_: return "KIND_GCVECTOR_gctools__GCVector_moveable_core__CacheRecord_";
   case KIND_LISPALLOC_llvmo__APInt_O: return "KIND_LISPALLOC_llvmo__APInt_O";
   case KIND_TEMPLATED_LISPALLOC_core__Iterator_O: return "KIND_TEMPLATED_LISPALLOC_core__Iterator_O";
   case KIND_LISPALLOC_core__CatchEnvironment_O: return "KIND_LISPALLOC_core__CatchEnvironment_O";
   case KIND_LISPALLOC_llvmo__DISubprogram_O: return "KIND_LISPALLOC_llvmo__DISubprogram_O";
   case KIND_LISPALLOC_core__LambdaListHandler_O: return "KIND_LISPALLOC_core__LambdaListHandler_O";
   case KIND_LISPALLOC_core__ValueEnvironment_O: return "KIND_LISPALLOC_core__ValueEnvironment_O";
   case KIND_LISPALLOC_llvmo__ConstantArray_O: return "KIND_LISPALLOC_llvmo__ConstantArray_O";
   case KIND_LISPALLOC_core__FileStream_O: return "KIND_LISPALLOC_core__FileStream_O";
   case KIND_LISPALLOC_core__StructureObject_O: return "KIND_LISPALLOC_core__StructureObject_O";
   case KIND_LISPALLOC_llvmo__DebugInfo_O: return "KIND_LISPALLOC_llvmo__DebugInfo_O";
   case KIND_LISPALLOC_core__Path_O: return "KIND_LISPALLOC_core__Path_O";
   case KIND_LISPALLOC_core__SingleDispatchGenericFunction_O: return "KIND_LISPALLOC_core__SingleDispatchGenericFunction_O";
   case KIND_CLASSALLOC_core__InstanceClosure: return "KIND_CLASSALLOC_core__InstanceClosure";
   case KIND_GCVECTOR_gctools__GCVector_moveable_core__RequiredArgument_: return "KIND_GCVECTOR_gctools__GCVector_moveable_core__RequiredArgument_";
   case KIND_LISPALLOC_core__Ratio_O: return "KIND_LISPALLOC_core__Ratio_O";
   case KIND_LISPALLOC_llvmo__DIType_O: return "KIND_LISPALLOC_llvmo__DIType_O";
   case KIND_LISPALLOC_llvmo__ConstantPointerNull_O: return "KIND_LISPALLOC_llvmo__ConstantPointerNull_O";
   case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Symbol_O__: return "KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Symbol_O__";
   case KIND_LISPALLOC_core__SimpleBitVector_O: return "KIND_LISPALLOC_core__SimpleBitVector_O";
   case KIND_LISPALLOC_llvmo__EngineBuilder_O: return "KIND_LISPALLOC_llvmo__EngineBuilder_O";
   case KIND_ROOTCLASSALLOC_asttooling__RegMap__RegistryMaps: return "KIND_ROOTCLASSALLOC_asttooling__RegMap__RegistryMaps";
   case KIND_TEMPLATED_CLASSALLOC_clbind__ConstructorCreator: return "KIND_TEMPLATED_CLASSALLOC_clbind__ConstructorCreator";
   case KIND_LISPALLOC_clbind__ClassRep_O: return "KIND_LISPALLOC_clbind__ClassRep_O";
   case KIND_BOOTSTRAP_core__StandardClass_O: return "KIND_BOOTSTRAP_core__StandardClass_O";
   case KIND_LISPALLOC_core__HashTableEqualp_O: return "KIND_LISPALLOC_core__HashTableEqualp_O";
   case KIND_LISPALLOC_llvmo__PointerType_O: return "KIND_LISPALLOC_llvmo__PointerType_O";
   case KIND_LISPALLOC_core__Pointer_O: return "KIND_LISPALLOC_core__Pointer_O";
   case KIND_LISPALLOC_core__DirectoryEntry_O: return "KIND_LISPALLOC_core__DirectoryEntry_O";
   case KIND_LISPALLOC_core__HashTableEqual_O: return "KIND_LISPALLOC_core__HashTableEqual_O";
   case KIND_LISPALLOC_llvmo__ExecutionEngine_O: return "KIND_LISPALLOC_llvmo__ExecutionEngine_O";
   case KIND_LISPALLOC_llvmo__PHINode_O: return "KIND_LISPALLOC_llvmo__PHINode_O";
   case KIND_LISPALLOC_core__TwoWayStream_O: return "KIND_LISPALLOC_core__TwoWayStream_O";
   case KIND_LISPALLOC_core__ForwardReferencedClass_O: return "KIND_LISPALLOC_core__ForwardReferencedClass_O";
   case KIND_LISPALLOC_core__ObjectSet_O: return "KIND_LISPALLOC_core__ObjectSet_O";
   case KIND_LISPALLOC_core__SourceFileInfo_O: return "KIND_LISPALLOC_core__SourceFileInfo_O";
   case KIND_LISPALLOC_core__SingleDispatchMethod_O: return "KIND_LISPALLOC_core__SingleDispatchMethod_O";
   case KIND_CLASSALLOC_asttooling__internal__VariadicOperatorMatcherDescriptor: return "KIND_CLASSALLOC_asttooling__internal__VariadicOperatorMatcherDescriptor";
   case KIND_LISPALLOC_llvmo__DIBuilder_O: return "KIND_LISPALLOC_llvmo__DIBuilder_O";
   case KIND_LISPALLOC_llvmo__DIBasicType_O: return "KIND_LISPALLOC_llvmo__DIBasicType_O";
   case KIND_LISPALLOC_llvmo__LoadInst_O: return "KIND_LISPALLOC_llvmo__LoadInst_O";
   case KIND_LISPALLOC_llvmo__IRBuilder_O: return "KIND_LISPALLOC_llvmo__IRBuilder_O";
   case KIND_LISPALLOC_core__Environment_O: return "KIND_LISPALLOC_core__Environment_O";
   case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_clbind__ClassRep_O__: return "KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_clbind__ClassRep_O__";
   case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__RegMap__SymbolMatcherDescriptorPair_: return "KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__RegMap__SymbolMatcherDescriptorPair_";
   case KIND_LISPALLOC_llvmo__IRBuilderBase_O: return "KIND_LISPALLOC_llvmo__IRBuilderBase_O";
   case KIND_LISPALLOC_llvmo__BlockAddress_O: return "KIND_LISPALLOC_llvmo__BlockAddress_O";
   case KIND_LISPALLOC_core__Pathname_O: return "KIND_LISPALLOC_core__Pathname_O";
   case KIND_ROOTCLASSALLOC_core__Lisp_O: return "KIND_ROOTCLASSALLOC_core__Lisp_O";
   case KIND_LISPALLOC_llvmo__DICompositeType_O: return "KIND_LISPALLOC_llvmo__DICompositeType_O";
   case KIND_LISPALLOC_llvmo__ModulePass_O: return "KIND_LISPALLOC_llvmo__ModulePass_O";
   case KIND_LISPALLOC_llvmo__StoreInst_O: return "KIND_LISPALLOC_llvmo__StoreInst_O";
   case KIND_LISPALLOC_core__Stream_O: return "KIND_LISPALLOC_core__Stream_O";
   case KIND_LISPALLOC_core__SingleDispatchEffectiveMethodFunction_O: return "KIND_LISPALLOC_core__SingleDispatchEffectiveMethodFunction_O";
   case KIND_LISPALLOC_llvmo__ConstantStruct_O: return "KIND_LISPALLOC_llvmo__ConstantStruct_O";
   case KIND_LISPALLOC_llvmo__FunctionPass_O: return "KIND_LISPALLOC_llvmo__FunctionPass_O";
   case KIND_LISPALLOC_llvmo__AtomicRMWInst_O: return "KIND_LISPALLOC_llvmo__AtomicRMWInst_O";
   case KIND_LISPALLOC_cffi__Pointer_O: return "KIND_LISPALLOC_cffi__Pointer_O";
   case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Str_O__: return "KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Str_O__";
   case KIND_LISPALLOC_core__IOFileStream_O: return "KIND_LISPALLOC_core__IOFileStream_O";
   case KIND_LISPALLOC_core__Cons_O: return "KIND_LISPALLOC_core__Cons_O";
   case KIND_LISPALLOC_core__AnsiStream_O: return "KIND_LISPALLOC_core__AnsiStream_O";
   case KIND_LISPALLOC_llvmo__Pass_O: return "KIND_LISPALLOC_llvmo__Pass_O";
   case KIND_LISPALLOC_llvmo__ConstantDataSequential_O: return "KIND_LISPALLOC_llvmo__ConstantDataSequential_O";
#endif // defined(GC_KIND_NAME_MAP)
#if defined(GC_KIND_SELECTORS)
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="gctools::GCVector_moveable<core::DynamicBinding>" :#3=NAME "KIND_GCVECTOR_gctools__GCVector_moveable_core__DynamicBinding_" :VALUE 239 :#4=CCLASS #S(#4# :#1# "gctools::GCVector_moveable<core::DynamicBinding>" :TEMPLATE-SPECIALIZER T :#5=LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Data" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:48:9" :#8=CTYPE #S(CONSTANT-ARRAY-CTYPE :#1# NIL :ELEMENT-TYPE #S(#9=CXXRECORD-CTYPE :#1# "core::DynamicBinding" :#3# "DynamicBinding"))) #S(#6# :#7# "_End" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:47:9" :#8# #S(#10=UNCLASSIFIED-CTYPE :#1# "unsigned long")) #S(#6# :#7# "_Capacity" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:46:9" :#8# #S(#10# :#1# "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" #11="NO-NAME" #11# "capacity" "size" "data" #11# #11# #11#) :METADATA NIL) :#12=SPECIES #S(#12# :#3# :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :DUMP DUMPER-FOR-GCCONTAINER :#13=INDEX 3) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CONTAINERALLOC :#1# #2# :#3# "GCVector_moveable" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#8# #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::DynamicBinding>" :#3# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#13# 0 :#8# #S(#9# :#1# "core::DynamicBinding" :#3# "DynamicBinding"))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<core::DynamicBinding>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_core__DynamicBinding_ ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::Cache" :#3=NAME "KIND_CLASSALLOC_core__Cache" :VALUE 238 :#4=CCLASS #S(#4# :#1# "core::Cache" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/cache.h:53:5" :BASES NIL :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_generation" :#5# "/home/meister/Development/clasp/src/core/cache.h:58:2" :#8=CTYPE #S(UNCLASSIFIED-CTYPE :#1# "int")) #S(#6# :#7# "_table" :#5# "/home/meister/Development/clasp/src/core/cache.h:57:9" :#8# #S(#9=CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "gctools::Vec0<core::CacheRecord>" :#3# NIL :#10=ARGUMENTS (#S(#11=GC-TEMPLATE-ARGUMENT :#12=INDEX 0 :#8# #S(#13=CXXRECORD-CTYPE :#1# "core::CacheRecord" :#3# "CacheRecord"))))) #S(#6# :#7# "_keys" :#5# "/home/meister/Development/clasp/src/core/cache.h:56:2" :#8# #S(#9# :#1# "gctools::Vec0<gctools::smart_ptr<core::T_O>>" :#3# NIL :#10# (#S(#11# :#12# 0 :#8# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")))))) :METHOD-NAMES ("keys" "keys" "vector_hash_key" "removeOne" "search_cache" "setup" "NO-NAME" "empty" "clearOneFromCache") :METADATA NIL) :#14=SPECIES #S(#14# :#3# :CLASSALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#12# 6) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(CLASSALLOC :#1# #2# :#3# "Cache" :#5# "/home/meister/Development/clasp/src/core/cache.h:53:5" :#8# #S(#13# :#1# "core::Cache" :#3# "Cache")))
template <> class gctools::GCKind<core::Cache> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_CLASSALLOC_core__Cache ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::SingleFloat_O" :#3=NAME "KIND_LISPALLOC_core__SingleFloat_O" :VALUE 105 :#4=CCLASS #S(#4# :#1# "core::SingleFloat_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/numbers.h:450:5" :BASES ("core::Float_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Value" :#5# "/home/meister/Development/clasp/src/core/numbers.h:462:2" :#6=CTYPE #S(UNCLASSIFIED-CTYPE :#1# "float"))) :METHOD-NAMES (#7="NO-NAME" #7# #7# #7# "castToInteger" "as_long_float" "as_double" "as_float" "tanh" "cosh" "sinh" "tan" "cos" "sin" "exp" "oneMinus" "onePlus" "sqrt" "log1p" "log1" "minusp" "plusp" "negate" "zerop" "reciprocal" "eql" "eqn" "setFromString" "valueAsString" "isnan" "abs" "signum" "copy" "__repr__" "get" "sxhash" "number_type" "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "SingleFloat_O" :#5# "/home/meister/Development/clasp/src/core/numbers.h:450:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::SingleFloat_O" :#3# "SingleFloat_O")))
template <> class gctools::GCKind<core::SingleFloat_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__SingleFloat_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::Binder_O" :#3=NAME "KIND_LISPALLOC_core__Binder_O" :VALUE 237 :#4=CCLASS #S(#4# :#1# "core::Binder_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/binder.h:56:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Values" :#5# "/home/meister/Development/clasp/src/core/binder.h:69:9" :#8=CTYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::VectorObjects_O>" :#10=SPECIALIZER "class core::VectorObjects_O")) #S(#6# :#7# "_Bindings" :#5# "/home/meister/Development/clasp/src/core/binder.h:68:9" :#8# #S(#9# :#1# "gctools::smart_ptr<core::HashTableEq_O>" :#10# "class core::HashTableEq_O"))) :METHOD-NAMES (#11="NO-NAME" #11# #11# #11# "setStringValueIfAvailable" "setIntValueIfAvailable" "setBoolValueIfAvailable" "stringValueOrDefault" "intValueOrDefault" "intValueOrDefault" "boolValueOrDefault" "valueOrDefault" "valueSymbolFromString" "containsSymbolFromString" "summaryOfContents" "contains" "lookup" "lookupSymbol" "lookup" "extend" "erase" "indexed_value" "size" "archiveBase" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#12=SPECIES #S(#12# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Binder_O" :#5# "/home/meister/Development/clasp/src/core/binder.h:56:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::Binder_O" :#3# "Binder_O")))
template <> class gctools::GCKind<core::Binder_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Binder_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::FuncallableStandardClass_O" :#3=NAME "KIND_LISPALLOC_core__FuncallableStandardClass_O" :VALUE 219 :#4=CCLASS #S(#4# :#1# "core::FuncallableStandardClass_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/funcallableStandardClass.h:54:5" :BASES ("core::StdClass_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_InstanceCoreClass" :#5# "/home/meister/Development/clasp/src/core/funcallableStandardClass.h:65:2" :#6=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Class_O>" :SPECIALIZER "class core::Class_O"))) :METHOD-NAMES (#7="NO-NAME" #7# #7# #7# "create" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "FuncallableStandardClass_O" :#5# "/home/meister/Development/clasp/src/core/funcallableStandardClass.h:54:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::FuncallableStandardClass_O" :#3# "FuncallableStandardClass_O")))
template <> class gctools::GCKind<core::FuncallableStandardClass_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__FuncallableStandardClass_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::RecursiveDirectoryIterator_O" :#3=NAME "KIND_LISPALLOC_core__RecursiveDirectoryIterator_O" :VALUE 71 :#4=CCLASS #S(#4# :#1# "core::RecursiveDirectoryIterator_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/fileSystem.h:168:5" :BASES ("core::Iterator_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_EndIterator" :#5# "/home/meister/Development/clasp/src/core/fileSystem.h:182:5" :#8=CTYPE #S(#9=CXXRECORD-CTYPE :#1# "boost::filesystem::recursive_directory_iterator" :#3# "recursive_directory_iterator")) #S(#6# :#7# "_CurrentIterator" :#5# "/home/meister/Development/clasp/src/core/fileSystem.h:181:5" :#8# #S(POINTER-CTYPE :#1# NIL :POINTEE #S(#9# :#1# "boost::filesystem::recursive_directory_iterator" :#3# "recursive_directory_iterator"))) #S(#6# :#7# "_EnterHidden" :#5# "/home/meister/Development/clasp/src/core/fileSystem.h:177:2" :#8# #S(UNCLASSIFIED-CTYPE :#1# "_Bool")) #S(#6# :#7# "_Path" :#5# "/home/meister/Development/clasp/src/core/fileSystem.h:176:2" :#8# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Path_O>" :SPECIALIZER "class core::Path_O"))) :METHOD-NAMES (#10="NO-NAME" #10# #10# #10# "currentObject" "isDone" "next" "first" "setHidden" "setPath" "setupCurrentIterator" "create" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#11=SPECIES #S(#11# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "RecursiveDirectoryIterator_O" :#5# "/home/meister/Development/clasp/src/core/fileSystem.h:168:5" :#8# #S(#9# :#1# "core::RecursiveDirectoryIterator_O" :#3# "RecursiveDirectoryIterator_O")))
template <> class gctools::GCKind<core::RecursiveDirectoryIterator_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__RecursiveDirectoryIterator_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::LoadArchive_O" :#3=NAME "KIND_LISPALLOC_core__LoadArchive_O" :VALUE 78 :#4=CCLASS #S(#4# :#1# "core::LoadArchive_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/serialize.h:610:5" :BASES ("core::Archive_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_NodesToFinalize" :#5# "/home/meister/Development/clasp/src/core/serialize.h:620:2" :#8=CTYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::HashTable_O>" :#10=SPECIALIZER "class core::HashTable_O")) #S(#6# :#7# "_ObjectForSNode" :#5# "/home/meister/Development/clasp/src/core/serialize.h:619:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::HashTable_O>" :#10# "class core::HashTable_O"))) :METHOD-NAMES (#11="NO-NAME" #11# #11# #11# #11# #11# "keys" "getContents" "get" "contains" "parseFromStream" "parseFromObject" "finalizeObjects" "createContents" "needsFinalization" "loadObjectDirectly" "addNodeToFinalize" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#12=SPECIES #S(#12# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("core::SexpLoadArchive_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "LoadArchive_O" :#5# "/home/meister/Development/clasp/src/core/serialize.h:610:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::LoadArchive_O" :#3# "LoadArchive_O")))
template <> class gctools::GCKind<core::LoadArchive_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__LoadArchive_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>" :#3=NAME "KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__SourceFileInfo_O__" :VALUE 240 :#4=CCLASS #S(#4# :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>" :TEMPLATE-SPECIALIZER T :#5=LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Data" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:48:9" :#8=CTYPE #S(CONSTANT-ARRAY-CTYPE :#1# NIL :ELEMENT-TYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::SourceFileInfo_O>" :#10=SPECIALIZER "class core::SourceFileInfo_O"))) #S(#6# :#7# "_End" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:47:9" :#8# #S(#11=UNCLASSIFIED-CTYPE :#1# "unsigned long")) #S(#6# :#7# "_Capacity" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:46:9" :#8# #S(#11# :#1# "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" #12="NO-NAME" #12# "capacity" "size" "data" #12# #12# #12#) :METADATA NIL) :#13=SPECIES #S(#13# :#3# :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :DUMP DUMPER-FOR-GCCONTAINER :#14=INDEX 3) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CONTAINERALLOC :#1# #2# :#3# "GCVector_moveable" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#8# #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>" :#3# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#14# 0 :#8# #S(#9# :#1# "gctools::smart_ptr<core::SourceFileInfo_O>" :#10# "class core::SourceFileInfo_O"))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__SourceFileInfo_O__ ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::BaseChar_O" :#3=NAME "KIND_LISPALLOC_core__BaseChar_O" :VALUE 84 :#4=CCLASS #S(#4# :#1# "core::BaseChar_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/character.h:101:5" :BASES ("core::Character_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "initialize" #6# #6# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("core::StandardChar_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "BaseChar_O" :#5# "/home/meister/Development/clasp/src/core/character.h:101:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::BaseChar_O" :#3# "BaseChar_O")))
template <> class gctools::GCKind<core::BaseChar_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__BaseChar_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::ConstantInt_O" :#3=NAME "KIND_LISPALLOC_llvmo__ConstantInt_O" :VALUE 198 :#4=CCLASS #S(#4# :#1# "llvmo::ConstantInt_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2912:5" :BASES ("llvmo::Constant_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "__repr__" #6# #6# "create" "set_wrapped" "wrappedPtr" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "ConstantInt_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2912:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::ConstantInt_O" :#3# "ConstantInt_O")))
template <> class gctools::GCKind<llvmo::ConstantInt_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__ConstantInt_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::FunctionPassManager_O" :#3=NAME "KIND_LISPALLOC_llvmo__FunctionPassManager_O" :VALUE 147 :#4=CCLASS #S(#4# :#1# "llvmo::FunctionPassManager_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1480:5" :BASES ("llvmo::PassManagerBase_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "set_wrapped" "wrappedPtr" "make" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "FunctionPassManager_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1480:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::FunctionPassManager_O" :#3# "FunctionPassManager_O")))
template <> class gctools::GCKind<llvmo::FunctionPassManager_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__FunctionPassManager_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="asttooling::DerivableFrontendActionFactory" :#3=NAME "KIND_LISPALLOC_asttooling__DerivableFrontendActionFactory" :VALUE 241 :#4=CCLASS #S(#4# :#1# "asttooling::DerivableFrontendActionFactory" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/asttooling/clangTooling.h:155:5" :BASES ("clbind::Derivable<clang::tooling::FrontendActionFactory>") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# #6# #6# "default_create" "create") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(LISPALLOC :#1# #2# :#3# "DerivableFrontendActionFactory" :#5# "/home/meister/Development/clasp/src/asttooling/clangTooling.h:155:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "asttooling::DerivableFrontendActionFactory" :#3# "DerivableFrontendActionFactory")))
template <> class gctools::GCKind<asttooling::DerivableFrontendActionFactory> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_asttooling__DerivableFrontendActionFactory ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::NamedMDNode_O" :#3=NAME "KIND_LISPALLOC_llvmo__NamedMDNode_O" :VALUE 202 :#4=CCLASS #S(#4# :#1# "llvmo::NamedMDNode_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3218:5" :BASES ("core::ExternalObject_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_ptr" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3224:2" :#6=CTYPE #S(POINTER-CTYPE :#1# NIL :POINTEE #S(#7=CXXRECORD-CTYPE :#1# "llvm::NamedMDNode" :#3# "NamedMDNode")))) :METHOD-NAMES (#8="NO-NAME" #8# "getName" "addOperand" "getNumOperands" "getOperand" #8# #8# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#9=SPECIES #S(#9# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "NamedMDNode_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3218:5" :#6# #S(#7# :#1# "llvmo::NamedMDNode_O" :#3# "NamedMDNode_O")))
template <> class gctools::GCKind<llvmo::NamedMDNode_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__NamedMDNode_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::SymbolSet_O" :#3=NAME "KIND_LISPALLOC_core__SymbolSet_O" :VALUE 236 :#4=CCLASS #S(#4# :#1# "core::SymbolSet_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/symbolSet.h:66:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Symbols" :#5# "/home/meister/Development/clasp/src/core/symbolSet.h:77:2" :#6=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::HashTableEq_O>" :SPECIALIZER "class core::HashTableEq_O"))) :METHOD-NAMES (#7="NO-NAME" #7# #7# "map" "map" #7# "__repr__" "dumpToStream" "asString" "first" "cartesianProductWrapped" "cartesianProduct" "removeAll" "relativeComplement" "intersection" "setUnion" "equal" "asCons" "clear" "insertVector" "insertVectorStrings" "insertConsSymbols" "insertSymbolList" "insertSymbolSet" "insert" "containsSubset" "contains" "remove" "size" "copy" "make" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "SymbolSet_O" :#5# "/home/meister/Development/clasp/src/core/symbolSet.h:66:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::SymbolSet_O" :#3# "SymbolSet_O")))
template <> class gctools::GCKind<core::SymbolSet_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__SymbolSet_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="gctools::GCVector_moveable<asttooling::ContextFrame>" :#3=NAME "KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ContextFrame_" :VALUE 242 :#4=CCLASS #S(#4# :#1# "gctools::GCVector_moveable<asttooling::ContextFrame>" :TEMPLATE-SPECIALIZER T :#5=LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Data" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:48:9" :#8=CTYPE #S(CONSTANT-ARRAY-CTYPE :#1# NIL :ELEMENT-TYPE #S(#9=CXXRECORD-CTYPE :#1# "asttooling::ContextFrame" :#3# "ContextFrame"))) #S(#6# :#7# "_End" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:47:9" :#8# #S(#10=UNCLASSIFIED-CTYPE :#1# "unsigned long")) #S(#6# :#7# "_Capacity" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:46:9" :#8# #S(#10# :#1# "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" #11="NO-NAME" #11# "capacity" "size" "data" #11# #11# #11#) :METADATA NIL) :#12=SPECIES #S(#12# :#3# :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :DUMP DUMPER-FOR-GCCONTAINER :#13=INDEX 3) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CONTAINERALLOC :#1# #2# :#3# "GCVector_moveable" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#8# #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::ContextFrame>" :#3# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#13# 0 :#8# #S(#9# :#1# "asttooling::ContextFrame" :#3# "ContextFrame"))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<asttooling::ContextFrame>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ContextFrame_ ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::HashTable_O" :#3=NAME "KIND_LISPALLOC_core__HashTable_O" :VALUE 231 :#4=CCLASS #S(#4# :#1# "core::HashTable_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/hashTable.h:45:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_LocationDependencyTracker" :#5# "/home/meister/Development/clasp/src/core/hashTable.h:75:9" :#8=CTYPE #S(#9=CXXRECORD-CTYPE :#1# "mps_ld_s" :#3# "mps_ld_s")) #S(#6# :#7# "_HashTableCount" :#5# "/home/meister/Development/clasp/src/core/hashTable.h:72:2" :#8# #S(#10=UNCLASSIFIED-CTYPE :#1# "unsigned int")) #S(#6# :#7# "_HashTable" :#5# "/home/meister/Development/clasp/src/core/hashTable.h:71:2" :#8# #S(#11=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::VectorObjects_O>" :#12=SPECIALIZER "class core::VectorObjects_O")) #S(#6# :#7# "_RehashThreshold" :#5# "/home/meister/Development/clasp/src/core/hashTable.h:70:2" :#8# #S(#10# :#1# "double")) #S(#6# :#7# "_RehashSize" :#5# "/home/meister/Development/clasp/src/core/hashTable.h:69:2" :#8# #S(#11# :#1# "gctools::smart_ptr<core::Number_O>" :#12# "class core::Number_O")) #S(#6# :#7# "_InitialSize" :#5# "/home/meister/Development/clasp/src/core/hashTable.h:68:2" :#8# #S(#10# :#1# "unsigned int"))) :METHOD-NAMES (#13="NO-NAME" #13# "keysAsString" "hashTableAlistAtHash" "hashTableNumberOfHashes" "terminatingMapHash" "maphash" "mapHash" "lowLevelMapHash" "hash_table_dump" "__repr__" "remhash" "clrhash" "setf_gethash" "hash_table_setf_gethash" "gethash" "find" "contains" "findAssoc" "tableRef" "bucketsFind" "keyTest" "sxhashKey" "hashTableSize" "hashTableRehashThreshold" "hashTableRehashSize" "size" "hashTableCount" "hashTableTest" "equalp" "rehash" "calculateHashTableCount" "resizeEmptyTable" "setup" "sxhash_equalp" "sxhash_equal" "sxhash_eql" "sxhash_eq" "create" #13# #13# "archiveBase" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA (:METADATA_BOOTSTRAP_CLASS)) :#14=SPECIES #S(#14# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("core::HashTableEqual_O" "core::HashTableEqualp_O" "core::HashTableEql_O" "core::HashTableEq_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "HashTable_O" :#5# "/home/meister/Development/clasp/src/core/hashTable.h:45:5" :#8# #S(#9# :#1# "core::HashTable_O" :#3# "HashTable_O")))
template <> class gctools::GCKind<core::HashTable_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__HashTable_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::BitVector_O" :#3=NAME "KIND_LISPALLOC_core__BitVector_O" :VALUE 123 :#4=CCLASS #S(#4# :#1# "core::BitVector_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/bitVector.h:51:1" :BASES ("core::Vector_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "bitVectorP" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("core::SimpleBitVector_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "BitVector_O" :#5# "/home/meister/Development/clasp/src/core/bitVector.h:51:1" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::BitVector_O" :#3# "BitVector_O")))
template <> class gctools::GCKind<core::BitVector_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__BitVector_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="gctools::GCVector_moveable<asttooling::Message>" :#3=NAME "KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__Message_" :VALUE 243 :#4=CCLASS #S(#4# :#1# "gctools::GCVector_moveable<asttooling::Message>" :TEMPLATE-SPECIALIZER T :#5=LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Data" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:48:9" :#8=CTYPE #S(CONSTANT-ARRAY-CTYPE :#1# NIL :ELEMENT-TYPE #S(#9=CXXRECORD-CTYPE :#1# "asttooling::Message" :#3# "Message"))) #S(#6# :#7# "_End" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:47:9" :#8# #S(#10=UNCLASSIFIED-CTYPE :#1# "unsigned long")) #S(#6# :#7# "_Capacity" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:46:9" :#8# #S(#10# :#1# "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" #11="NO-NAME" #11# "capacity" "size" "data" #11# #11# #11#) :METADATA NIL) :#12=SPECIES #S(#12# :#3# :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :DUMP DUMPER-FOR-GCCONTAINER :#13=INDEX 3) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CONTAINERALLOC :#1# #2# :#3# "GCVector_moveable" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#8# #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::Message>" :#3# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#13# 0 :#8# #S(#9# :#1# "asttooling::Message" :#3# "Message"))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<asttooling::Message>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__Message_ ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::VectorObjects_O" :#3=NAME "KIND_LISPALLOC_core__VectorObjects_O" :VALUE 121 :#4=CCLASS #S(#4# :#1# "core::VectorObjects_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/vectorObjects.h:46:5" :BASES ("core::Vector_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Values" :#5# "/home/meister/Development/clasp/src/core/vectorObjects.h:64:9" :#8=CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "gctools::Vec0<gctools::smart_ptr<core::T_O>>" :#3# NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#9=INDEX 0 :#8# #S(#10=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :#11=SPECIALIZER "class core::T_O"))))) #S(#6# :#7# "_Adjustable" :#5# "/home/meister/Development/clasp/src/core/vectorObjects.h:63:2" :#8# #S(UNCLASSIFIED-CTYPE :#1# "_Bool")) #S(#6# :#7# "_ElementType" :#5# "/home/meister/Development/clasp/src/core/vectorObjects.h:62:2" :#8# #S(#10# :#1# "gctools::smart_ptr<core::T_O>" :#11# "class core::T_O"))) :METHOD-NAMES (#12="NO-NAME" #12# "setf_subseq" "subseq" "__repr__" "length" "fillArrayWithElt" "setf_svref" "svref" "setf_elt" "elt" "setf_aref" "aref" "swap" "swapElements" #12# "arrayRowMajorIndex" "rowMajorAref" "rowMajorAset" "dimension" "adjustableArrayP" "elementType" "setElementType" "adjust" "setup" "create" "make" "create" "end" "begin" "fillInitialContents" #12# #12# "archiveBase" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#13=SPECIES #S(#13# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#9# 1) :CHILDREN ("core::VectorObjectsWithFillPtr_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "VectorObjects_O" :#5# "/home/meister/Development/clasp/src/core/vectorObjects.h:46:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::VectorObjects_O" :#3# "VectorObjects_O")))
template <> class gctools::GCKind<core::VectorObjects_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__VectorObjects_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::StrWithFillPtr_O" :#3=NAME "KIND_LISPALLOC_core__StrWithFillPtr_O" :VALUE 120 :#4=CCLASS #S(#4# :#1# "core::StrWithFillPtr_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/strWithFillPtr.h:40:5" :BASES ("core::Str_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Adjustable" :#5# "/home/meister/Development/clasp/src/core/strWithFillPtr.h:48:2" :#8=CTYPE #S(#9=UNCLASSIFIED-CTYPE :#1# "_Bool")) #S(#6# :#7# "_FillPointer" :#5# "/home/meister/Development/clasp/src/core/strWithFillPtr.h:47:2" :#8# #S(#9# :#1# "int"))) :METHOD-NAMES (#10="NO-NAME" #10# #10# #10# "__repr__" "pushString" "pushString" "pushSubString" "pushCharExtend" "vectorPushExtend" "vectorPush" "incrementFillPtr" "addressOfFillPtr" "ensureSpaceAfterFillPointer" "setSize" "adjustSize" "arrayHasFillPointerP" "setFillPointer" "incrementFillPointer" "hasFillPointerP" "fillPointer" "size" "get" "setFromChars" "set" "adjustableArrayP" "createBufferString" "create" "create" "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#11=SPECIES #S(#11# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "StrWithFillPtr_O" :#5# "/home/meister/Development/clasp/src/core/strWithFillPtr.h:40:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::StrWithFillPtr_O" :#3# "StrWithFillPtr_O")))
template <> class gctools::GCKind<core::StrWithFillPtr_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__StrWithFillPtr_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::CallInst_O" :#3=NAME "KIND_LISPALLOC_llvmo__CallInst_O" :VALUE 184 :#4=CCLASS #S(#4# :#1# "llvmo::CallInst_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2231:1" :BASES ("llvmo::Instruction_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "CallInst_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2231:1" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::CallInst_O" :#3# "CallInst_O")))
template <> class gctools::GCKind<llvmo::CallInst_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__CallInst_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::WeakPointer_O" :#3=NAME "KIND_LISPALLOC_core__WeakPointer_O" :VALUE 230 :#4=CCLASS #S(#4# :#1# "core::WeakPointer_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/weakPointer.h:36:1" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_WeakObject" :#5# "/home/meister/Development/clasp/src/core/weakPointer.h:53:5" :#6=CTYPE #S(#7=CXXRECORD-CTYPE :#1# "gctools::WeakPointerManager" :#3# "WeakPointerManager"))) :METHOD-NAMES (#8="NO-NAME" #8# #8# #8# #8# "valid" "value" "make" #8# #8# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#9=SPECIES #S(#9# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "WeakPointer_O" :#5# "/home/meister/Development/clasp/src/core/weakPointer.h:36:1" :#6# #S(#7# :#1# "core::WeakPointer_O" :#3# "WeakPointer_O")))
template <> class gctools::GCKind<core::WeakPointer_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__WeakPointer_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::ValueFrame_O" :#3=NAME "KIND_LISPALLOC_core__ValueFrame_O" :VALUE 46 :#4=CCLASS #S(#4# :#1# "core::ValueFrame_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/activationFrame.h:147:5" :BASES ("core::ActivationFrame_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_DebuggingInfo" :#5# "/home/meister/Development/clasp/src/core/activationFrame.h:155:2" :#8=CTYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :#10=SPECIALIZER "class core::T_O")) #S(#6# :#7# "_Objects" :#5# "/home/meister/Development/clasp/src/core/activationFrame.h:153:9" :#8# #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "gctools::Frame0<gctools::smart_ptr<core::T_O>>" :#3# NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#11=INDEX 0 :#8# #S(#9# :#1# "gctools::smart_ptr<core::T_O>" :#10# "class core::T_O"))))) #S(#6# :#7# "_ParentFrame" :#5# "/home/meister/Development/clasp/src/core/activationFrame.h:152:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::ActivationFrame_O>" :#10# "class core::ActivationFrame_O"))) :METHOD-NAMES (#12="NO-NAME" #12# "asString" "summaryOfContents" "fillRestOfEntries" "entry" "set_entry" "boundp_entry" "_findValue" "_updateValue" "lookupValueReference" "_lookupValue" "length" "argArray" #12# #12# "debuggingInfo" "attachDebuggingInfo" "parentFrame" "parentFrameRef" #12# #12# "createForLambdaListHandler" "createFromReversedCons" "create" "create" "create" "createForArgArray" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#13=SPECIES #S(#13# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#11# 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "ValueFrame_O" :#5# "/home/meister/Development/clasp/src/core/activationFrame.h:147:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::ValueFrame_O" :#3# "ValueFrame_O")))
template <> class gctools::GCKind<core::ValueFrame_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__ValueFrame_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="gctools::GCString_moveable<char>" :#3=NAME "KIND_GCSTRING_gctools__GCString_moveable_char_" :VALUE 244 :#4=CCLASS #S(#4# :#1# "gctools::GCString_moveable<char>" :TEMPLATE-SPECIALIZER T :#5=LOCATION "/home/meister/Development/clasp/src/gctools/gcstring.h:40:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Data" :#5# "/home/meister/Development/clasp/src/gctools/gcstring.h:53:9" :#8=CTYPE #S(CONSTANT-ARRAY-CTYPE :#1# NIL :ELEMENT-TYPE #S(#9=UNCLASSIFIED-CTYPE :#1# "char"))) #S(#6# :#7# "_End" :#5# "/home/meister/Development/clasp/src/gctools/gcstring.h:52:9" :#8# #S(#9# :#1# "unsigned long")) #S(#6# :#7# "_Capacity" :#5# "/home/meister/Development/clasp/src/gctools/gcstring.h:51:9" :#8# #S(#9# :#1# "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" #10="NO-NAME" #10# "capacity" "size" "data" #10# #10# #10#) :METADATA NIL) :#11=SPECIES #S(#11# :#3# :GCSTRING :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN #12=SKIPPER-FOR-GCSTRING :SKIP #12# :FINALIZE FINALIZER-FOR-GCSTRING :DUMP DUMPER-FOR-GCSTRING :#13=INDEX 5) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CONTAINERALLOC :#1# #2# :#3# "GCString_moveable" :#5# "/home/meister/Development/clasp/src/gctools/gcstring.h:40:5" :#8# #S(GCSTRING-MOVEABLE-CTYPE :#1# "gctools::GCString_moveable<char>" :#3# "GCString_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#13# 0 :#8# #S(#9# :#1# "char"))))))
template <> class gctools::GCKind<gctools::GCString_moveable<char>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCSTRING_gctools__GCString_moveable_char_ ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::SymbolList_O" :#3=NAME "KIND_LISPALLOC_core__SymbolList_O" :VALUE 229 :#4=CCLASS #S(#4# :#1# "core::SymbolList_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/symbolList.h:56:1" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Contents" :#5# "/home/meister/Development/clasp/src/core/symbolList.h:65:5" :#6=CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "gctools::Vec0<gctools::smart_ptr<core::Symbol_O>>" :#3# NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#7=INDEX 0 :#6# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O")))))) :METHOD-NAMES (#8="NO-NAME" #8# #8# #8# "map" "asStringSet" "asString" "setFromVectorStrings" "clear" "get" "indexOf" "contains" "appendConsOfStrings" "appendSymbolList" "append" "prepend" "size" "end" "begin" "end" "begin" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#9=SPECIES #S(#9# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#7# 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "SymbolList_O" :#5# "/home/meister/Development/clasp/src/core/symbolList.h:56:1" :#6# #S(CXXRECORD-CTYPE :#1# "core::SymbolList_O" :#3# "SymbolList_O")))
template <> class gctools::GCKind<core::SymbolList_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__SymbolList_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::SwitchInst_O" :#3=NAME "KIND_LISPALLOC_llvmo__SwitchInst_O" :VALUE 182 :#4=CCLASS #S(#4# :#1# "llvmo::SwitchInst_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2569:5" :BASES ("llvmo::TerminatorInst_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "addCase" #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "SwitchInst_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2569:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::SwitchInst_O" :#3# "SwitchInst_O")))
template <> class gctools::GCKind<llvmo::SwitchInst_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__SwitchInst_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::TagbodyEnvironment_O" :#3=NAME "KIND_LISPALLOC_core__TagbodyEnvironment_O" :VALUE 42 :#4=CCLASS #S(#4# :#1# "core::TagbodyEnvironment_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/environment.h:719:5" :BASES ("core::RuntimeVisibleEnvironment_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_ActivationFrame" :#5# "/home/meister/Development/clasp/src/core/environment.h:735:2" :#8=CTYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::ActivationFrame_O>" :#10=SPECIALIZER "class core::ActivationFrame_O")) #S(#6# :#7# "_TagCode" :#5# "/home/meister/Development/clasp/src/core/environment.h:734:9" :#8# #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "gctools::Vec0<gctools::smart_ptr<core::Cons_O>>" :#3# NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#11=INDEX 0 :#8# #S(#9# :#1# "gctools::smart_ptr<core::Cons_O>" :#10# "class core::Cons_O"))))) #S(#6# :#7# "_Tags" :#5# "/home/meister/Development/clasp/src/core/environment.h:733:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::HashTableEq_O>" :#10# "class core::HashTableEq_O"))) :METHOD-NAMES (#12="NO-NAME" #12# "find_tagbody_tag_environment" "tagsAsString" "find" "addTag" "summaryOfContents" "_findTag" "codePos" "getActivationFrame" "make" "initialize" #12# #12# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#13=SPECIES #S(#13# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#11# 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "TagbodyEnvironment_O" :#5# "/home/meister/Development/clasp/src/core/environment.h:719:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::TagbodyEnvironment_O" :#3# "TagbodyEnvironment_O")))
template <> class gctools::GCKind<core::TagbodyEnvironment_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__TagbodyEnvironment_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::MacroletEnvironment_O" :#3=NAME "KIND_LISPALLOC_core__MacroletEnvironment_O" :VALUE 38 :#4=CCLASS #S(#4# :#1# "core::MacroletEnvironment_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/environment.h:786:5" :BASES ("core::CompileTimeEnvironment_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Macros" :#5# "/home/meister/Development/clasp/src/core/environment.h:800:9" :#6=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::HashTableEq_O>" :SPECIALIZER "class core::HashTableEq_O"))) :METHOD-NAMES (#7="NO-NAME" #7# "summaryOfContents" "_findMacro" "addMacro" "make" "initialize" #7# #7# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "MacroletEnvironment_O" :#5# "/home/meister/Development/clasp/src/core/environment.h:786:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::MacroletEnvironment_O" :#3# "MacroletEnvironment_O")))
template <> class gctools::GCKind<core::MacroletEnvironment_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__MacroletEnvironment_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::MultiStringBuffer_O" :#3=NAME "KIND_LISPALLOC_core__MultiStringBuffer_O" :VALUE 228 :#4=CCLASS #S(#4# :#1# "core::MultiStringBuffer_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/multiStringBuffer.h:81:1" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Blocks" :#5# "/home/meister/Development/clasp/src/core/multiStringBuffer.h:94:2" :#6=CTYPE #S(#7=CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "std::vector<core::MultiStringBlock *,std::allocator<core::MultiStringBlock *>>" :#3# NIL :#8=ARGUMENTS (#S(#9=GC-TEMPLATE-ARGUMENT :#10=INDEX 0 :#6# #S(#11=POINTER-CTYPE :#1# NIL :#12=POINTEE #S(#13=CXXRECORD-CTYPE :#1# "core::MultiStringBlock" :#3# "MultiStringBlock"))) #S(#9# :#10# 1 :#6# #S(#7# :#1# "std::allocator<core::MultiStringBlock *>" :#3# NIL :#8# (#S(#9# :#10# 0 :#6# #S(#11# :#1# NIL :#12# #S(#13# :#1# "core::MultiStringBlock" :#3# "MultiStringBlock")))))))))) :METHOD-NAMES (#14="NO-NAME" #14# #14# #14# "describeMemoryUsage" "dump" "dumpToStream" "getString" "getCharacters" "addString" "addNumberOfCharacters" "addCharacters" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#15=SPECIES #S(#15# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#10# 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "MultiStringBuffer_O" :#5# "/home/meister/Development/clasp/src/core/multiStringBuffer.h:81:1" :#6# #S(#13# :#1# "core::MultiStringBuffer_O" :#3# "MultiStringBuffer_O")))
template <> class gctools::GCKind<core::MultiStringBuffer_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__MultiStringBuffer_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::AllocaInst_O" :#3=NAME "KIND_LISPALLOC_llvmo__AllocaInst_O" :VALUE 174 :#4=CCLASS #S(#4# :#1# "llvmo::AllocaInst_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2353:5" :BASES ("llvmo::UnaryInstruction_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "AllocaInst_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2353:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::AllocaInst_O" :#3# "AllocaInst_O")))
template <> class gctools::GCKind<llvmo::AllocaInst_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__AllocaInst_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::DoubleFloat_O" :#3=NAME "KIND_LISPALLOC_core__DoubleFloat_O" :VALUE 104 :#4=CCLASS #S(#4# :#1# "core::DoubleFloat_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/numbers.h:530:5" :BASES ("core::Float_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Value" :#5# "/home/meister/Development/clasp/src/core/numbers.h:542:2" :#6=CTYPE #S(UNCLASSIFIED-CTYPE :#1# "double"))) :METHOD-NAMES (#7="NO-NAME" #7# #7# #7# "tanh" "cosh" "sinh" "tan" "cos" "sin" "exp" "castToInteger" "as_long_float" "as_double" "as_float" "log1p" "log1" "oneMinus" "onePlus" "sqrt" "minusp" "plusp" "negate" "zerop" "eql" "eqn" "setFromString" "valueAsString" "isnan" "abs" "signum" "get" "set" "__repr__" "copy" "sxhash" "number_type" "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "DoubleFloat_O" :#5# "/home/meister/Development/clasp/src/core/numbers.h:530:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::DoubleFloat_O" :#3# "DoubleFloat_O")))
template <> class gctools::GCKind<core::DoubleFloat_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__DoubleFloat_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::SymbolToEnumConverter_O" :#3=NAME "KIND_LISPALLOC_core__SymbolToEnumConverter_O" :VALUE 227 :#4=CCLASS #S(#4# :#1# "core::SymbolToEnumConverter_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/symbolToEnumConverter.h:45:1" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_SymbolToEnum" :#5# "/home/meister/Development/clasp/src/core/symbolToEnumConverter.h:63:5" :#8=CTYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::HashTableEq_O>" :#10=SPECIALIZER "class core::HashTableEq_O")) #S(#6# :#7# "_EnumToArchiveSymbol" :#5# "/home/meister/Development/clasp/src/core/symbolToEnumConverter.h:62:5" :#8# #S(#9# :#1# "gctools::smart_ptr<core::HashTableEql_O>" :#10# "class core::HashTableEql_O")) #S(#6# :#7# "_ArchiveSymbolToEnum" :#5# "/home/meister/Development/clasp/src/core/symbolToEnumConverter.h:61:5" :#8# #S(#9# :#1# "gctools::smart_ptr<core::HashTableEq_O>" :#10# "class core::HashTableEq_O")) #S(#6# :#7# "_EnumToSymbol" :#5# "/home/meister/Development/clasp/src/core/symbolToEnumConverter.h:60:5" :#8# #S(#9# :#1# "gctools::smart_ptr<core::HashTableEql_O>" :#10# "class core::HashTableEql_O")) #S(#6# :#7# "_WhatTheEnumsRepresent" :#5# "/home/meister/Development/clasp/src/core/symbolToEnumConverter.h:59:5" :#8# #S(#11=CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "gctools::GCString<char,gctools::GCStringAllocator<gctools::GCString_moveable<char>>>" :#3# NIL :#12=ARGUMENTS (#S(#13=GC-TEMPLATE-ARGUMENT :#14=INDEX 0 :#8# #S(#15=UNCLASSIFIED-CTYPE :#1# "char")) #S(#13# :#14# 1 :#8# #S(#11# :#1# "gctools::GCStringAllocator<gctools::GCString_moveable<char>>" :#3# NIL :#12# (#S(#13# :#14# 0 :#8# #S(GCSTRING-MOVEABLE-CTYPE :#1# "gctools::GCString_moveable<char>" :#3# "GCString_moveable" :#12# (#S(#13# :#14# 0 :#8# #S(#15# :#1# "char")))))))))))) :METHOD-NAMES (#16="NO-NAME" #16# #16# #16# "__repr__" "recognizesSymbol" "recognizesEnumIndex" "throwIfUnrecognizedEnumIndex" "legalEnumValuesAndSymbols" "symbolForEnumIndex" "enumIndexForSymbol" "addSymbolEnumPair" "setWhatTheEnumsRepresent" "initialize" "create" "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#17=SPECIES #S(#17# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#14# 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "SymbolToEnumConverter_O" :#5# "/home/meister/Development/clasp/src/core/symbolToEnumConverter.h:45:1" :#8# #S(CXXRECORD-CTYPE :#1# "core::SymbolToEnumConverter_O" :#3# "SymbolToEnumConverter_O")))
template <> class gctools::GCKind<core::SymbolToEnumConverter_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__SymbolToEnumConverter_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::Module_O" :#3=NAME "KIND_LISPALLOC_llvmo__Module_O" :VALUE 201 :#4=CCLASS #S(#4# :#1# "llvmo::Module_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1204:5" :BASES ("core::ExternalObject_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_UniqueGlobalVariableStrings" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1212:9" :#8=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::HashTableEqual_O>" :SPECIALIZER "class core::HashTableEqual_O")) #S(#6# :#7# "_ptr" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1211:2" :#8# #S(POINTER-CTYPE :#1# NIL :POINTEE #S(#9=CXXRECORD-CTYPE :#1# "llvm::Module" :#3# "Module")))) :METHOD-NAMES (#10="NO-NAME" #10# "dump_namedMDList" "moduleDelete" "getOrCreateUniquedStringGlobalVariable" "getFunction" "getFunctionList" "getGlobalList" "valid" "make" #10# #10# "set_wrapped" "wrappedPtr" "wrappedPtr" "externalObject" "initialize" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#11=SPECIES #S(#11# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Module_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1204:5" :#8# #S(#9# :#1# "llvmo::Module_O" :#3# "Module_O")))
template <> class gctools::GCKind<llvmo::Module_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__Module_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>" :#3=NAME "KIND_GCVECTOR_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__T_O__gctools__smart_ptr_core__T_O___" :VALUE 245 :#4=CCLASS #S(#4# :#1# "gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>" :TEMPLATE-SPECIALIZER T :#5=LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Data" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:48:9" :#8=CTYPE #S(CONSTANT-ARRAY-CTYPE :#1# NIL :ELEMENT-TYPE #S(#9=CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>" :#3# NIL :#10=ARGUMENTS (#S(#11=GC-TEMPLATE-ARGUMENT :#12=INDEX 0 :#8# #S(#13=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :#14=SPECIALIZER "class core::T_O")) #S(#11# :#12# 1 :#8# #S(#13# :#1# "gctools::smart_ptr<core::T_O>" :#14# "class core::T_O")))))) #S(#6# :#7# "_End" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:47:9" :#8# #S(#15=UNCLASSIFIED-CTYPE :#1# "unsigned long")) #S(#6# :#7# "_Capacity" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:46:9" :#8# #S(#15# :#1# "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" #16="NO-NAME" #16# "capacity" "size" "data" #16# #16# #16#) :METADATA NIL) :#17=SPECIES #S(#17# :#3# :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :DUMP DUMPER-FOR-GCCONTAINER :#12# 3) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CONTAINERALLOC :#1# #2# :#3# "GCVector_moveable" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#8# #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>" :#3# "GCVector_moveable" :#10# (#S(#11# :#12# 0 :#8# #S(#9# :#1# "std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>" :#3# NIL :#10# (#S(#11# :#12# 0 :#8# #S(#13# :#1# "gctools::smart_ptr<core::T_O>" :#14# "class core::T_O")) #S(#11# :#12# 1 :#8# #S(#13# :#1# "gctools::smart_ptr<core::T_O>" :#14# "class core::T_O")))))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__T_O__gctools__smart_ptr_core__T_O___ ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="gctools::GCVector_moveable<asttooling::internal::MatcherDescriptor *>" :#3=NAME "KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__internal__MatcherDescriptor_P_" :VALUE 246 :#4=CCLASS #S(#4# :#1# "gctools::GCVector_moveable<asttooling::internal::MatcherDescriptor *>" :TEMPLATE-SPECIALIZER T :#5=LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Data" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:48:9" :#8=CTYPE #S(CONSTANT-ARRAY-CTYPE :#1# NIL :ELEMENT-TYPE #S(#9=POINTER-CTYPE :#1# NIL :#10=POINTEE #S(#11=CXXRECORD-CTYPE :#1# "asttooling::internal::MatcherDescriptor" :#3# "MatcherDescriptor")))) #S(#6# :#7# "_End" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:47:9" :#8# #S(#12=UNCLASSIFIED-CTYPE :#1# "unsigned long")) #S(#6# :#7# "_Capacity" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:46:9" :#8# #S(#12# :#1# "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" #13="NO-NAME" #13# "capacity" "size" "data" #13# #13# #13#) :METADATA NIL) :#14=SPECIES #S(#14# :#3# :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :DUMP DUMPER-FOR-GCCONTAINER :#15=INDEX 3) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CONTAINERALLOC :#1# #2# :#3# "GCVector_moveable" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#8# #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::internal::MatcherDescriptor *>" :#3# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#15# 0 :#8# #S(#9# :#1# NIL :#10# #S(#11# :#1# "asttooling::internal::MatcherDescriptor" :#3# "MatcherDescriptor")))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<asttooling::internal::MatcherDescriptor *>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__internal__MatcherDescriptor_P_ ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::StringSet_O" :#3=NAME "KIND_LISPALLOC_core__StringSet_O" :VALUE 226 :#4=CCLASS #S(#4# :#1# "core::StringSet_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/stringSet.h:59:1" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "rest" :#5# "/home/meister/Development/clasp/src/core/stringSet.h:70:2" :#8=CTYPE #S(#9=UNCLASSIFIED-CTYPE :#1# "_Bool")) #S(#6# :#7# "strs" :#5# "/home/meister/Development/clasp/src/core/stringSet.h:69:2" :#8# #S(#10=CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>" :#3# NIL :#11=ARGUMENTS (#S(#12=GC-TEMPLATE-ARGUMENT :#13=INDEX 0 :#8# #S(#10# :#1# "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char")) #S(#12# :#13# 1 :#8# #S(#10# :#1# "std::char_traits<char>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char"))))) #S(#12# :#13# 2 :#8# #S(#10# :#1# "std::allocator<char>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char")))))))) #S(#12# :#13# 1 :#8# #S(#10# :#1# "std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#10# :#1# "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char")) #S(#12# :#13# 1 :#8# #S(#10# :#1# "std::char_traits<char>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char"))))) #S(#12# :#13# 2 :#8# #S(#10# :#1# "std::allocator<char>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char"))))))))))) #S(#12# :#13# 2 :#8# #S(#10# :#1# "std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#10# :#1# "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char")) #S(#12# :#13# 1 :#8# #S(#10# :#1# "std::char_traits<char>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char"))))) #S(#12# :#13# 2 :#8# #S(#10# :#1# "std::allocator<char>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char"))))))))))))))) :METHOD-NAMES (#14="NO-NAME" #14# #14# #14# "__repr__" "dumpToStream" "asString" "setFromString" "cartesianProductInsert" "cartesianProduct" "removeAll" "relativeComplement" "intersection" "setUnion" "equal" "asVector" "asCons" "clear" "insertConsStrings" "insertStringList" "insertStringSet" "insertVectorStrings" "insert" "containsSubset" "contains" "remove" "size" "first" "copy" "end" "begin" "archiveBase" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#15=SPECIES #S(#15# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#13# 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "StringSet_O" :#5# "/home/meister/Development/clasp/src/core/stringSet.h:59:1" :#8# #S(CXXRECORD-CTYPE :#1# "core::StringSet_O" :#3# "StringSet_O")))
template <> class gctools::GCKind<core::StringSet_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__StringSet_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::Symbol_O" :#3=NAME "KIND_BOOTSTRAP_core__Symbol_O" :VALUE 224 :#4=CCLASS #S(#4# :#1# "core::Symbol_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/symbol.h:56:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_PropertyList" :#5# "/home/meister/Development/clasp/src/core/symbol.h:68:2" :#8=CTYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Cons_O>" :#10=SPECIALIZER "class core::Cons_O")) #S(#6# :#7# "_ReadOnlyFunction" :#5# "/home/meister/Development/clasp/src/core/symbol.h:67:2" :#8# #S(#11=UNCLASSIFIED-CTYPE :#1# "_Bool")) #S(#6# :#7# "_IsConstant" :#5# "/home/meister/Development/clasp/src/core/symbol.h:66:2" :#8# #S(#11# :#1# "_Bool")) #S(#6# :#7# "_IsSpecial" :#5# "/home/meister/Development/clasp/src/core/symbol.h:65:2" :#8# #S(#11# :#1# "_Bool")) #S(#6# :#7# "_Function" :#5# "/home/meister/Development/clasp/src/core/symbol.h:64:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::Function_O>" :#10# "class core::Function_O")) #S(#6# :#7# "_Value" :#5# "/home/meister/Development/clasp/src/core/symbol.h:63:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::T_O>" :#10# "class core::T_O")) #S(#6# :#7# "_HomePackage" :#5# "/home/meister/Development/clasp/src/core/symbol.h:62:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::Package_O>" :#10# "class core::Package_O")) #S(#6# :#7# "_Name" :#5# "/home/meister/Development/clasp/src/core/symbol.h:61:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::Str_O>" :#10# "class core::Str_O"))) :METHOD-NAMES (#12="NO-NAME" #12# #12# #12# "finish_setup" #12# "__str__" "__repr__" "__write__" "dump" "exportYourself" "fullName" "currentName" "setPackage" "homePackage" "getPackage" "identifierName" "symbolName" "symbolNameAsString" "permanentName" "fboundp" "symbolFunction" "setf_symbolFunction" "isConstant" "setf_symbolValueReadOnlyOverRide" "setf_symbolValue" "defconstant" "defparameter" "makunbound" "boundP" "makeConstant" "makeSpecial" "symbolValueUnsafe" "symbolValue" "isExported" "copy_symbol" "specialP" "getReadOnlyFunction" "setReadOnlyFunction" "getReadOnly" "setReadOnly" "valueReference" "amp_symbol_p" "asKeywordSymbol" "isKeywordSymbol" "sxhash" "funcall" "apply" "formattedName" "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA (:METADATA_GC_DO_NOT_MOVE :METADATA_BOOTSTRAP_CLASS)) :#13=SPECIES #S(#13# :#3# :BOOTSTRAP :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 0) :CHILDREN ("core::Null_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Symbol_O" :#5# "/home/meister/Development/clasp/src/core/symbol.h:56:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::Symbol_O" :#3# "Symbol_O")))
template <> class gctools::GCKind<core::Symbol_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_BOOTSTRAP_core__Symbol_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::UserData_O" :#3=NAME "KIND_LISPALLOC_core__UserData_O" :VALUE 208 :#4=CCLASS #S(#4# :#1# "core::UserData_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/userData.h:73:5" :BASES ("core::LightUserData_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Dtor" :#5# "/home/meister/Development/clasp/src/core/userData.h:78:9" :#6=CTYPE #S(POINTER-CTYPE :#1# NIL :POINTEE #S(UNCLASSIFIED-CTYPE :#1# "void (void *)")))) :METHOD-NAMES (#7="NO-NAME" #7# #7# #7# "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "UserData_O" :#5# "/home/meister/Development/clasp/src/core/userData.h:73:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::UserData_O" :#3# "UserData_O")))
template <> class gctools::GCKind<core::UserData_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__UserData_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::FenceInst_O" :#3=NAME "KIND_LISPALLOC_llvmo__FenceInst_O" :VALUE 183 :#4=CCLASS #S(#4# :#1# "llvmo::FenceInst_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2039:1" :BASES ("llvmo::Instruction_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "FenceInst_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2039:1" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::FenceInst_O" :#3# "FenceInst_O")))
template <> class gctools::GCKind<llvmo::FenceInst_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__FenceInst_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::Str_O" :#3=NAME "KIND_BOOTSTRAP_core__Str_O" :VALUE 119 :#4=CCLASS #S(#4# :#1# "core::Str_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/str.h:40:5" :BASES ("core::String_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Contents" :#5# "/home/meister/Development/clasp/src/core/str.h:53:9" :#6=CTYPE #S(#7=CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "gctools::GCString<char,gctools::GCStringAllocator<gctools::GCString_moveable<char>>>" :#3# NIL :#8=ARGUMENTS (#S(#9=GC-TEMPLATE-ARGUMENT :#10=INDEX 0 :#6# #S(#11=UNCLASSIFIED-CTYPE :#1# "char")) #S(#9# :#10# 1 :#6# #S(#7# :#1# "gctools::GCStringAllocator<gctools::GCString_moveable<char>>" :#3# NIL :#8# (#S(#9# :#10# 0 :#6# #S(GCSTRING-MOVEABLE-CTYPE :#1# "gctools::GCString_moveable<char>" :#3# "GCString_moveable" :#8# (#S(#9# :#10# 0 :#6# #S(#11# :#1# "char")))))))))))) :METHOD-NAMES (#12="NO-NAME" #12# #12# #12# "fillInitialContents" "elementSizeInBytes" "addressOfBuffer" "fillArrayWithElt" "setf_subseq" "subseq" "setf_svref" "svref" "setf_elt" "elt" "__write__" "setf_aref" "aref" "string_not_lessp" "string_not_greaterp" "string_greaterp" "string_lessp" "string_not_equal" "string_equal" "string_GE_" "string_LE_" "string_GT_" "string_LT_" "string_NE_" "string_EQ_" "dimension" #12# #12# #12# #12# "eql" "equalp" "equal" "elementType" "length" "find" "scharSet" "schar" "end" "begin" "end" "begin" #12# #12# "sxhash" "substr" "right" "left" "asKeywordSymbol" "asSymbol" "asReal" "parseInteger" "asInt" #12# #12# "split" "splitAtWhiteSpace" "countOccurances" "__repr__" "contents" "asetUnsafe" "setFromChars" "setFromChars" "set" "get" "__str__" "c_str" "size" "adjustableArrayP" "stringToBignum" "create" "create" "create" "create" "create" "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#13=SPECIES #S(#13# :#3# :BOOTSTRAP :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#10# 0) :CHILDREN ("core::StrWithFillPtr_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Str_O" :#5# "/home/meister/Development/clasp/src/core/str.h:40:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::Str_O" :#3# "Str_O")))
template <> class gctools::GCKind<core::Str_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_BOOTSTRAP_core__Str_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::ActivationFrame_O" :#3=NAME "KIND_LISPALLOC_core__ActivationFrame_O" :VALUE 43 :#4=CCLASS #S(#4# :#1# "core::ActivationFrame_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/activationFrame.h:57:5" :BASES ("core::Environment_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "asCons" "function" "dump" "__repr__" "asString" "entryReference" "entry" "set_entry" "boundp_entry" "length" "setParentFrame" "summaryOfContents" "getParentEnvironment" "parentFrame" "parentFrameRef" "_findFunction" "_findValue" "_findTag" "_lookupTagbodyId" "_lookupFunction" "lookupValueReference" "_lookupValue" "getActivationFrame" "currentVisibleEnvironment" #6# #6# "argArray" #6# #6# "clasp_asString" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("core::TagbodyFrame_O" "core::FunctionFrame_O" "core::ValueFrame_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "ActivationFrame_O" :#5# "/home/meister/Development/clasp/src/core/activationFrame.h:57:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::ActivationFrame_O" :#3# "ActivationFrame_O")))
template <> class gctools::GCKind<core::ActivationFrame_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__ActivationFrame_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::T_O" :#3=NAME "KIND_BOOTSTRAP_core__T_O" :VALUE 11 :#4=CCLASS #S(#4# :#1# "core::T_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/object.h:438:5" :BASES ("_RootDummyClass") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# "oGetReference" "funcallableInstanceP" "ofuncallableInstanceP" "genericFunctionP" "instancep" "oinstancep" "oinstancepSTAR" "instanceSig" "instanceSigSet" "instanceSet" "instanceRef" "adoptSlots" "initializeSlots" "instanceClassSet" "_instanceClass" #6# #6# #6# #6# "nequal" "neql" "equalp" "equal" "eql" "eq" "descriptionNonConst" "dump" "describe" "__str__" "__write__" "__repr__" "descriptionNoConst" "descriptionOfContents" "description" "propagateSignal" "catchSignal" "asXmlString" "sameAs" "save" "loadFinalize" "archiveBase" "isAssignableToClass" "isAssignableToByClassSymbol" "isAInstanceOf" "isStandardObject" "initialize" "setTrackNameUsingAddress" "setTrackName" "className" "sxhash" "deepCopy" "shallowCopy" "lisp" "lisp" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr" #6#) :METADATA NIL) :#7=SPECIES #S(#7# :#3# :BOOTSTRAP :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 0) :CHILDREN ("core::Cons_O" "cffi::Pointer_O" "core::Stream_O" "core::Pathname_O" "core::Environment_O" "core::SingleDispatchMethod_O" "core::SourceFileInfo_O" "core::ObjectSet_O" "core::DirectoryEntry_O" "core::Pointer_O" "core::Path_O" "llvmo::DebugInfo_O" "core::StructureObject_O" "core::LambdaListHandler_O" "core::Iterator_O" "core::PosixTimeDuration_O" "core::FileStatus_O" "clbind::ClassRegistry_O" "core::Archive_O" "core::RegexMatch_O" "core::SourcePosInfo_O" "core::Character_O" "core::MicroHeap_O" "core::Function_O" "core::WeakKeyMapping_O" "llvmo::DebugLoc_O" "core::Regex_O" "core::Package_O" "core::CandoException_O" "core::StringList_O" "core::IntArray_O" "core::Number_O" "core::PosixTime_O" "core::ReadTable_O" "llvmo::Attribute_O" "core::Array_O" "core::SmallMap_O" "core::Reader_O" "core::ObjRef_O" "llvmo::InsertPoint_O" "core::SourceManager_O" "core::ExternalObject_O" "core::SNode_O" "core::LoadTimeValues_O" "core::LightUserData_O" "core::WeakHashTable_O" "core::WrappedPointer_O" "core::StandardObject_O" "asttooling::AstVisitor_O" "core::Symbol_O" "core::StringSet_O" "core::SymbolToEnumConverter_O" "core::MultiStringBuffer_O" "core::SymbolList_O" "core::WeakPointer_O" "core::HashTable_O" "core::SymbolSet_O" "core::Binder_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "T_O" :#5# "/home/meister/Development/clasp/src/core/object.h:438:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::T_O" :#3# "T_O")))
template <> class gctools::GCKind<core::T_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_BOOTSTRAP_core__T_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="clbind::DummyCreator" :#3=NAME "KIND_CLASSALLOC_clbind__DummyCreator" :VALUE 6 :#4=CCLASS #S(#4# :#1# "clbind::DummyCreator" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/clbind/class.h:170:5" :BASES ("core::Creator") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_name" :#5# "/home/meister/Development/clasp/src/clbind/class.h:172:9" :#6=CTYPE #S(#7=CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" :#3# NIL :#8=ARGUMENTS (#S(#9=GC-TEMPLATE-ARGUMENT :#10=INDEX 0 :#6# #S(#11=UNCLASSIFIED-CTYPE :#1# "char")) #S(#9# :#10# 1 :#6# #S(#7# :#1# "std::char_traits<char>" :#3# NIL :#8# (#S(#9# :#10# 0 :#6# #S(#11# :#1# "char"))))) #S(#9# :#10# 2 :#6# #S(#7# :#1# "std::allocator<char>" :#3# NIL :#8# (#S(#9# :#10# 0 :#6# #S(#11# :#1# "char"))))))))) :METHOD-NAMES (#12="NO-NAME" #12# #12# #12# #12# "duplicateForClassName" "allocate" "describe" "allocates" "templatedSizeof" #12# #12# #12# #12#) :METADATA NIL) :#13=SPECIES #S(#13# :#3# :CLASSALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#10# 6) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(CLASSALLOC :#1# #2# :#3# "DummyCreator" :#5# "/home/meister/Development/clasp/src/clbind/class.h:170:5" :#6# #S(CXXRECORD-CTYPE :#1# "clbind::DummyCreator" :#3# "DummyCreator")))
template <> class gctools::GCKind<clbind::DummyCreator> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_CLASSALLOC_clbind__DummyCreator ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::FunctionValueEnvironment_O" :#3=NAME "KIND_LISPALLOC_core__FunctionValueEnvironment_O" :VALUE 41 :#4=CCLASS #S(#4# :#1# "core::FunctionValueEnvironment_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/environment.h:448:5" :BASES ("core::RuntimeVisibleEnvironment_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_FunctionFrame" :#5# "/home/meister/Development/clasp/src/core/environment.h:461:2" :#8=CTYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::FunctionFrame_O>" :#10=SPECIALIZER "class core::FunctionFrame_O")) #S(#6# :#7# "_FunctionIndices" :#5# "/home/meister/Development/clasp/src/core/environment.h:460:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::HashTableEqual_O>" :#10# "class core::HashTableEqual_O"))) :METHOD-NAMES (#11="NO-NAME" #11# #11# #11# "_findFunction" "bind_function" "summaryOfContents" "getActivationFrame" "createForEntries" "createEmpty" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#12=SPECIES #S(#12# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "FunctionValueEnvironment_O" :#5# "/home/meister/Development/clasp/src/core/environment.h:448:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::FunctionValueEnvironment_O" :#3# "FunctionValueEnvironment_O")))
template <> class gctools::GCKind<core::FunctionValueEnvironment_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__FunctionValueEnvironment_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::SymbolMacroletEnvironment_O" :#3=NAME "KIND_LISPALLOC_core__SymbolMacroletEnvironment_O" :VALUE 37 :#4=CCLASS #S(#4# :#1# "core::SymbolMacroletEnvironment_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/environment.h:832:5" :BASES ("core::CompileTimeEnvironment_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Macros" :#5# "/home/meister/Development/clasp/src/core/environment.h:846:2" :#6=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::HashTableEq_O>" :SPECIALIZER "class core::HashTableEq_O"))) :METHOD-NAMES (#7="NO-NAME" #7# "summaryOfContents" "throwErrorIfSymbolMacrosDeclaredSpecial" "_findSymbolMacro" "addSymbolMacro" "make" "initialize" #7# #7# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "SymbolMacroletEnvironment_O" :#5# "/home/meister/Development/clasp/src/core/environment.h:832:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::SymbolMacroletEnvironment_O" :#3# "SymbolMacroletEnvironment_O")))
template <> class gctools::GCKind<core::SymbolMacroletEnvironment_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__SymbolMacroletEnvironment_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::HashTableEq_O" :#3=NAME "KIND_LISPALLOC_core__HashTableEq_O" :VALUE 235 :#4=CCLASS #S(#4# :#1# "core::HashTableEq_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/hashTableEq.h:40:5" :BASES ("core::HashTable_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "sxhashKey" "keyTest" "hashTableTest" "sxhash_eq" "createFromPList" "create_default" "create" #6# #6# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "HashTableEq_O" :#5# "/home/meister/Development/clasp/src/core/hashTableEq.h:40:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::HashTableEq_O" :#3# "HashTableEq_O")))
template <> class gctools::GCKind<core::HashTableEq_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__HashTableEq_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="asttooling::AstVisitor_O" :#3=NAME "KIND_LISPALLOC_asttooling__AstVisitor_O" :VALUE 223 :#4=CCLASS #S(#4# :#1# "asttooling::AstVisitor_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/asttooling/astVisitor.h:41:5" :BASES ("clang::RecursiveASTVisitor<asttooling::AstVisitor_O>" "core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Target" :#5# "/home/meister/Development/clasp/src/asttooling/astVisitor.h:47:9" :#6=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O"))) :METHOD-NAMES (#7="NO-NAME" #7# "VisitStmt" "create" #7# #7# #7# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "AstVisitor_O" :#5# "/home/meister/Development/clasp/src/asttooling/astVisitor.h:41:5" :#6# #S(CXXRECORD-CTYPE :#1# "asttooling::AstVisitor_O" :#3# "AstVisitor_O")))
template <> class gctools::GCKind<asttooling::AstVisitor_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_asttooling__AstVisitor_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::TerminatorInst_O" :#3=NAME "KIND_LISPALLOC_llvmo__TerminatorInst_O" :VALUE 175 :#4=CCLASS #S(#4# :#1# "llvmo::TerminatorInst_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2496:5" :BASES ("llvmo::Instruction_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("llvmo::IndirectBrInst_O" "llvmo::UnreachableInst_O" "llvmo::InvokeInst_O" "llvmo::ReturnInst_O" "llvmo::BranchInst_O" "llvmo::ResumeInst_O" "llvmo::SwitchInst_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "TerminatorInst_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2496:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::TerminatorInst_O" :#3# "TerminatorInst_O")))
template <> class gctools::GCKind<llvmo::TerminatorInst_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__TerminatorInst_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::DILexicalBlock_O" :#3=NAME "KIND_LISPALLOC_llvmo__DILexicalBlock_O" :VALUE 66 :#4=CCLASS #S(#4# :#1# "llvmo::DILexicalBlock_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/debugInfoExpose.h:652:5" :BASES ("llvm::DILexicalBlock" "llvmo::DebugInfo_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# #6# #6# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "DILexicalBlock_O" :#5# "/home/meister/Development/clasp/src/llvmo/debugInfoExpose.h:652:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::DILexicalBlock_O" :#3# "DILexicalBlock_O")))
template <> class gctools::GCKind<llvmo::DILexicalBlock_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__DILexicalBlock_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::String_O" :#3=NAME "KIND_LISPALLOC_core__String_O" :VALUE 118 :#4=CCLASS #S(#4# :#1# "core::String_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/lispString.h:38:1" :BASES ("core::Vector_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "fillPointer" "pushCharExtend" "initialize" #6# #6# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("core::Str_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "String_O" :#5# "/home/meister/Development/clasp/src/core/lispString.h:38:1" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::String_O" :#3# "String_O")))
template <> class gctools::GCKind<core::String_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__String_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="gctools::GCVector_moveable<core::ExceptionEntry>" :#3=NAME "KIND_GCVECTOR_gctools__GCVector_moveable_core__ExceptionEntry_" :VALUE 247 :#4=CCLASS #S(#4# :#1# "gctools::GCVector_moveable<core::ExceptionEntry>" :TEMPLATE-SPECIALIZER T :#5=LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Data" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:48:9" :#8=CTYPE #S(CONSTANT-ARRAY-CTYPE :#1# NIL :ELEMENT-TYPE #S(#9=CXXRECORD-CTYPE :#1# "core::ExceptionEntry" :#3# "ExceptionEntry"))) #S(#6# :#7# "_End" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:47:9" :#8# #S(#10=UNCLASSIFIED-CTYPE :#1# "unsigned long")) #S(#6# :#7# "_Capacity" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:46:9" :#8# #S(#10# :#1# "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" #11="NO-NAME" #11# "capacity" "size" "data" #11# #11# #11#) :METADATA NIL) :#12=SPECIES #S(#12# :#3# :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :DUMP DUMPER-FOR-GCCONTAINER :#13=INDEX 3) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CONTAINERALLOC :#1# #2# :#3# "GCVector_moveable" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#8# #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::ExceptionEntry>" :#3# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#13# 0 :#8# #S(#9# :#1# "core::ExceptionEntry" :#3# "ExceptionEntry"))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<core::ExceptionEntry>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_core__ExceptionEntry_ ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::StandardObject_O" :#3=NAME "KIND_BOOTSTRAP_core__StandardObject_O" :VALUE 212 :#4=CCLASS #S(#4# :#1# "core::StandardObject_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/standardObject.h:49:1" :BASES ("core::T_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "__repr__" "create" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :BOOTSTRAP :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 0) :CHILDREN ("core::Metaobject_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "StandardObject_O" :#5# "/home/meister/Development/clasp/src/core/standardObject.h:49:1" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::StandardObject_O" :#3# "StandardObject_O")))
template <> class gctools::GCKind<core::StandardObject_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_BOOTSTRAP_core__StandardObject_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::ConcatenatedStream_O" :#3=NAME "KIND_LISPALLOC_core__ConcatenatedStream_O" :VALUE 26 :#4=CCLASS #S(#4# :#1# "core::ConcatenatedStream_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/lispStream.h:677:5" :BASES ("core::AnsiStream_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_List" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:687:9" :#6=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O"))) :METHOD-NAMES (#7="NO-NAME" #7# #7# #7# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "ConcatenatedStream_O" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:677:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::ConcatenatedStream_O" :#3# "ConcatenatedStream_O")))
template <> class gctools::GCKind<core::ConcatenatedStream_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__ConcatenatedStream_O ;
};
//GCTemplatedKind for #S(TEMPLATED-ENUM :#1=KEY #2="core::WrappedPointer_O" :#3=NAME "KIND_TEMPLATED_LISPALLOC_core__WrappedPointer_O" :VALUE 211 :#4=CCLASS #S(#4# :#1# #2# :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/wrappedPointer.h:40:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Class" :#5# "/home/meister/Development/clasp/src/core/wrappedPointer.h:46:9" :#6=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Class_O>" :SPECIALIZER "class core::Class_O"))) :METHOD-NAMES (#7="NO-NAME" #7# #7# #7# "pointerDelete" "pointerRelease" "classId" "castTo" "address" "mostDerivedPointer" "eq" "templatedSizeof" "validp" "setInstanceClassUsingSymbol" "instanceClassSet" "_instanceClass" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :TEMPLATED-LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-TEMPLATED-LISPALLOCS :SKIP SKIPPER-FOR-TEMPLATED-LISPALLOCS :FINALIZE FINALIZER-FOR-TEMPLATED-LISPALLOCS :DUMP DUMPER-FOR-TEMPLATED-LISPALLOCS :#9=INDEX 2) :CHILDREN NIL :IN-HIERARCHY T :ALL-ALLOCS (#S(#10=LISPALLOC :#1# "clbind::Wrapper<clang::CXXDeleteExpr,clang::CXXDeleteExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11=CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "clbind::Wrapper<clang::CXXDeleteExpr,clang::CXXDeleteExpr *>" :#3# NIL :#12=ARGUMENTS (#S(#13=GC-TEMPLATE-ARGUMENT :#9# 0 :#6# #S(#14=CXXRECORD-CTYPE :#1# "clang::CXXDeleteExpr" :#3# "CXXDeleteExpr")) #S(#13# :#9# 1 :#6# #S(#15=POINTER-CTYPE :#1# NIL :#16=POINTEE #S(#14# :#1# "clang::CXXDeleteExpr" :#3# "CXXDeleteExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::SourceRange,std::unique_ptr<clang::SourceRange,std::default_delete<clang::SourceRange>>>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::SourceRange,std::unique_ptr<clang::SourceRange,std::default_delete<clang::SourceRange>>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::SourceRange" :#3# "SourceRange")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::unique_ptr<clang::SourceRange,std::default_delete<clang::SourceRange>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::SourceRange" :#3# "SourceRange")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::default_delete<clang::SourceRange>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::SourceRange" :#3# "SourceRange"))))))))))) #S(#10# :#1# "clbind::Wrapper<clang::ImplicitParamDecl,clang::ImplicitParamDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ImplicitParamDecl,clang::ImplicitParamDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ImplicitParamDecl" :#3# "ImplicitParamDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ImplicitParamDecl" :#3# "ImplicitParamDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::VariableArrayType,clang::VariableArrayType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::VariableArrayType,clang::VariableArrayType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::VariableArrayType" :#3# "VariableArrayType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::VariableArrayType" :#3# "VariableArrayType")))))) #S(#10# :#1# "clbind::Wrapper<clang::AttributedStmt,clang::AttributedStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::AttributedStmt,clang::AttributedStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::AttributedStmt" :#3# "AttributedStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::AttributedStmt" :#3# "AttributedStmt")))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCIvarDecl,clang::ObjCIvarDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCIvarDecl,clang::ObjCIvarDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCIvarDecl" :#3# "ObjCIvarDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCIvarDecl" :#3# "ObjCIvarDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::LinkageSpecDecl,clang::LinkageSpecDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::LinkageSpecDecl,clang::LinkageSpecDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::LinkageSpecDecl" :#3# "LinkageSpecDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::LinkageSpecDecl" :#3# "LinkageSpecDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::EnumConstantDecl,clang::EnumConstantDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::EnumConstantDecl,clang::EnumConstantDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::EnumConstantDecl" :#3# "EnumConstantDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::EnumConstantDecl" :#3# "EnumConstantDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::ContinueStmt,clang::ContinueStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ContinueStmt,clang::ContinueStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ContinueStmt" :#3# "ContinueStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ContinueStmt" :#3# "ContinueStmt")))))) #S(#10# :#1# "clbind::Wrapper<clang::BuiltinType,clang::BuiltinType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::BuiltinType,clang::BuiltinType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::BuiltinType" :#3# "BuiltinType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::BuiltinType" :#3# "BuiltinType")))))) #S(#10# :#1# "clbind::Wrapper<clang::ParenExpr,clang::ParenExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ParenExpr,clang::ParenExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ParenExpr" :#3# "ParenExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ParenExpr" :#3# "ParenExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::TypeOfExprType,clang::TypeOfExprType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::TypeOfExprType,clang::TypeOfExprType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::TypeOfExprType" :#3# "TypeOfExprType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::TypeOfExprType" :#3# "TypeOfExprType")))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXBaseSpecifier,clang::CXXBaseSpecifier *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXBaseSpecifier,clang::CXXBaseSpecifier *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXBaseSpecifier" :#3# "CXXBaseSpecifier")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXBaseSpecifier" :#3# "CXXBaseSpecifier")))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXDestructorDecl,clang::CXXDestructorDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXDestructorDecl,clang::CXXDestructorDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXDestructorDecl" :#3# "CXXDestructorDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXDestructorDecl" :#3# "CXXDestructorDecl")))))) #S(#10# :#1# "clbind::Wrapper<llvm::ArrayRef<clang::TemplateArgument>,std::unique_ptr<llvm::ArrayRef<clang::TemplateArgument>,std::default_delete<llvm::ArrayRef<clang::TemplateArgument>>>>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<llvm::ArrayRef<clang::TemplateArgument>,std::unique_ptr<llvm::ArrayRef<clang::TemplateArgument>,std::default_delete<llvm::ArrayRef<clang::TemplateArgument>>>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "llvm::ArrayRef<clang::TemplateArgument>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::TemplateArgument" :#3# "TemplateArgument"))))) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::unique_ptr<llvm::ArrayRef<clang::TemplateArgument>,std::default_delete<llvm::ArrayRef<clang::TemplateArgument>>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "llvm::ArrayRef<clang::TemplateArgument>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::TemplateArgument" :#3# "TemplateArgument"))))) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::default_delete<llvm::ArrayRef<clang::TemplateArgument>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "llvm::ArrayRef<clang::TemplateArgument>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::TemplateArgument" :#3# "TemplateArgument")))))))))))))) #S(#10# :#1# "clbind::Wrapper<clang::MemberExpr,clang::MemberExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::MemberExpr,clang::MemberExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::MemberExpr" :#3# "MemberExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::MemberExpr" :#3# "MemberExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::FrontendAction,clang::FrontendAction *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::FrontendAction,clang::FrontendAction *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::FrontendAction" :#3# "FrontendAction")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::FrontendAction" :#3# "FrontendAction")))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCAtDefsFieldDecl,clang::ObjCAtDefsFieldDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCAtDefsFieldDecl,clang::ObjCAtDefsFieldDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCAtDefsFieldDecl" :#3# "ObjCAtDefsFieldDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCAtDefsFieldDecl" :#3# "ObjCAtDefsFieldDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXDefaultArgExpr,clang::CXXDefaultArgExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXDefaultArgExpr,clang::CXXDefaultArgExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXDefaultArgExpr" :#3# "CXXDefaultArgExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXDefaultArgExpr" :#3# "CXXDefaultArgExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXNewExpr,clang::CXXNewExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXNewExpr,clang::CXXNewExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXNewExpr" :#3# "CXXNewExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXNewExpr" :#3# "CXXNewExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::ParenListExpr,clang::ParenListExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ParenListExpr,clang::ParenListExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ParenListExpr" :#3# "ParenListExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ParenListExpr" :#3# "ParenListExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::IndirectFieldDecl,clang::IndirectFieldDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::IndirectFieldDecl,clang::IndirectFieldDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::IndirectFieldDecl" :#3# "IndirectFieldDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::IndirectFieldDecl" :#3# "IndirectFieldDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::RecordType,clang::RecordType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::RecordType,clang::RecordType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::RecordType" :#3# "RecordType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::RecordType" :#3# "RecordType")))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCPropertyRefExpr,clang::ObjCPropertyRefExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCPropertyRefExpr,clang::ObjCPropertyRefExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCPropertyRefExpr" :#3# "ObjCPropertyRefExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCPropertyRefExpr" :#3# "ObjCPropertyRefExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCObjectType,clang::ObjCObjectType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCObjectType,clang::ObjCObjectType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCObjectType" :#3# "ObjCObjectType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCObjectType" :#3# "ObjCObjectType")))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCProtocolDecl,clang::ObjCProtocolDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCProtocolDecl,clang::ObjCProtocolDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCProtocolDecl" :#3# "ObjCProtocolDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCProtocolDecl" :#3# "ObjCProtocolDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::ImplicitValueInitExpr,clang::ImplicitValueInitExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ImplicitValueInitExpr,clang::ImplicitValueInitExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ImplicitValueInitExpr" :#3# "ImplicitValueInitExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ImplicitValueInitExpr" :#3# "ImplicitValueInitExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::ImaginaryLiteral,clang::ImaginaryLiteral *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ImaginaryLiteral,clang::ImaginaryLiteral *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ImaginaryLiteral" :#3# "ImaginaryLiteral")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ImaginaryLiteral" :#3# "ImaginaryLiteral")))))) #S(#10# :#1# "clbind::Wrapper<clang::CUDAKernelCallExpr,clang::CUDAKernelCallExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CUDAKernelCallExpr,clang::CUDAKernelCallExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CUDAKernelCallExpr" :#3# "CUDAKernelCallExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CUDAKernelCallExpr" :#3# "CUDAKernelCallExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::ast_matchers::BoundNodes,const clang::ast_matchers::BoundNodes *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ast_matchers::BoundNodes,const clang::ast_matchers::BoundNodes *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ast_matchers::BoundNodes" :#3# "BoundNodes")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ast_matchers::BoundNodes" :#3# "BoundNodes")))))) #S(#10# :#1# "clbind::Wrapper<clang::EnumDecl,clang::EnumDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::EnumDecl,clang::EnumDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::EnumDecl" :#3# "EnumDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::EnumDecl" :#3# "EnumDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::tooling::Replacement,std::unique_ptr<clang::tooling::Replacement,std::default_delete<clang::tooling::Replacement>>>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::tooling::Replacement,std::unique_ptr<clang::tooling::Replacement,std::default_delete<clang::tooling::Replacement>>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::tooling::Replacement" :#3# "Replacement")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::unique_ptr<clang::tooling::Replacement,std::default_delete<clang::tooling::Replacement>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::tooling::Replacement" :#3# "Replacement")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::default_delete<clang::tooling::Replacement>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::tooling::Replacement" :#3# "Replacement"))))))))))) #S(#10# :#1# "clbind::Wrapper<clang::AttributedType,clang::AttributedType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::AttributedType,clang::AttributedType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::AttributedType" :#3# "AttributedType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::AttributedType" :#3# "AttributedType")))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCEncodeExpr,clang::ObjCEncodeExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCEncodeExpr,clang::ObjCEncodeExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCEncodeExpr" :#3# "ObjCEncodeExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCEncodeExpr" :#3# "ObjCEncodeExpr")))))) #S(#10# :#1# "clbind::Wrapper<std::set<clang::tooling::Replacement,std::less<clang::tooling::Replacement>,std::allocator<clang::tooling::Replacement>>,std::set<clang::tooling::Replacement, std::less<clang::tooling::Replacement>, std::allocator<clang::tooling::Replacement> > *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<std::set<clang::tooling::Replacement,std::less<clang::tooling::Replacement>,std::allocator<clang::tooling::Replacement>>,std::set<clang::tooling::Replacement, std::less<clang::tooling::Replacement>, std::allocator<clang::tooling::Replacement> > *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "std::set<clang::tooling::Replacement,std::less<clang::tooling::Replacement>,std::allocator<clang::tooling::Replacement>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::tooling::Replacement" :#3# "Replacement")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::less<clang::tooling::Replacement>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::tooling::Replacement" :#3# "Replacement"))))) #S(#13# :#9# 2 :#6# #S(#11# :#1# "std::allocator<clang::tooling::Replacement>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::tooling::Replacement" :#3# "Replacement")))))))) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#11# :#1# "std::set<clang::tooling::Replacement,std::less<clang::tooling::Replacement>,std::allocator<clang::tooling::Replacement>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::tooling::Replacement" :#3# "Replacement")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::less<clang::tooling::Replacement>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::tooling::Replacement" :#3# "Replacement"))))) #S(#13# :#9# 2 :#6# #S(#11# :#1# "std::allocator<clang::tooling::Replacement>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::tooling::Replacement" :#3# "Replacement")))))))))))) #S(#10# :#1# "clbind::Wrapper<clang::AtomicExpr,clang::AtomicExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::AtomicExpr,clang::AtomicExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::AtomicExpr" :#3# "AtomicExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::AtomicExpr" :#3# "AtomicExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCSubscriptRefExpr,clang::ObjCSubscriptRefExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCSubscriptRefExpr,clang::ObjCSubscriptRefExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCSubscriptRefExpr" :#3# "ObjCSubscriptRefExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCSubscriptRefExpr" :#3# "ObjCSubscriptRefExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::CallExpr,clang::CallExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CallExpr,clang::CallExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CallExpr" :#3# "CallExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CallExpr" :#3# "CallExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::ASTConsumer,std::unique_ptr<clang::ASTConsumer,std::default_delete<clang::ASTConsumer>>>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ASTConsumer,std::unique_ptr<clang::ASTConsumer,std::default_delete<clang::ASTConsumer>>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ASTConsumer" :#3# "ASTConsumer")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::unique_ptr<clang::ASTConsumer,std::default_delete<clang::ASTConsumer>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ASTConsumer" :#3# "ASTConsumer")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::default_delete<clang::ASTConsumer>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ASTConsumer" :#3# "ASTConsumer"))))))))))) #S(#10# :#1# "clbind::Wrapper<clang::FunctionNoProtoType,clang::FunctionNoProtoType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::FunctionNoProtoType,clang::FunctionNoProtoType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::FunctionNoProtoType" :#3# "FunctionNoProtoType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::FunctionNoProtoType" :#3# "FunctionNoProtoType")))))) #S(#10# :#1# "clbind::Wrapper<clang::IncompleteArrayType,clang::IncompleteArrayType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::IncompleteArrayType,clang::IncompleteArrayType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::IncompleteArrayType" :#3# "IncompleteArrayType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::IncompleteArrayType" :#3# "IncompleteArrayType")))))) #S(#10# :#1# "clbind::Wrapper<clang::OMPSectionsDirective,clang::OMPSectionsDirective *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::OMPSectionsDirective,clang::OMPSectionsDirective *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::OMPSectionsDirective" :#3# "OMPSectionsDirective")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::OMPSectionsDirective" :#3# "OMPSectionsDirective")))))) #S(#10# :#1# "clbind::Wrapper<clang::OMPSectionDirective,clang::OMPSectionDirective *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::OMPSectionDirective,clang::OMPSectionDirective *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::OMPSectionDirective" :#3# "OMPSectionDirective")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::OMPSectionDirective" :#3# "OMPSectionDirective")))))) #S(#10# :#1# "clbind::Wrapper<clang::ParmVarDecl,clang::ParmVarDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ParmVarDecl,clang::ParmVarDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ParmVarDecl" :#3# "ParmVarDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ParmVarDecl" :#3# "ParmVarDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::SubstTemplateTypeParmPackType,clang::SubstTemplateTypeParmPackType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::SubstTemplateTypeParmPackType,clang::SubstTemplateTypeParmPackType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::SubstTemplateTypeParmPackType" :#3# "SubstTemplateTypeParmPackType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::SubstTemplateTypeParmPackType" :#3# "SubstTemplateTypeParmPackType")))))) #S(#10# :#1# "clbind::Wrapper<clang::UnresolvedUsingValueDecl,clang::UnresolvedUsingValueDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::UnresolvedUsingValueDecl,clang::UnresolvedUsingValueDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::UnresolvedUsingValueDecl" :#3# "UnresolvedUsingValueDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::UnresolvedUsingValueDecl" :#3# "UnresolvedUsingValueDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCArrayLiteral,clang::ObjCArrayLiteral *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCArrayLiteral,clang::ObjCArrayLiteral *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCArrayLiteral" :#3# "ObjCArrayLiteral")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCArrayLiteral" :#3# "ObjCArrayLiteral")))))) #S(#10# :#1# "clbind::Wrapper<clang::VectorType,clang::VectorType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::VectorType,clang::VectorType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::VectorType" :#3# "VectorType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::VectorType" :#3# "VectorType")))))) #S(#10# :#1# "clbind::Wrapper<clang::DependentScopeDeclRefExpr,clang::DependentScopeDeclRefExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::DependentScopeDeclRefExpr,clang::DependentScopeDeclRefExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::DependentScopeDeclRefExpr" :#3# "DependentScopeDeclRefExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::DependentScopeDeclRefExpr" :#3# "DependentScopeDeclRefExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXBoolLiteralExpr,clang::CXXBoolLiteralExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXBoolLiteralExpr,clang::CXXBoolLiteralExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXBoolLiteralExpr" :#3# "CXXBoolLiteralExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXBoolLiteralExpr" :#3# "CXXBoolLiteralExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::SEHExceptStmt,clang::SEHExceptStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::SEHExceptStmt,clang::SEHExceptStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::SEHExceptStmt" :#3# "SEHExceptStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::SEHExceptStmt" :#3# "SEHExceptStmt")))))) #S(#10# :#1# "clbind::Wrapper<clang::PresumedLoc,std::unique_ptr<clang::PresumedLoc,std::default_delete<clang::PresumedLoc>>>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::PresumedLoc,std::unique_ptr<clang::PresumedLoc,std::default_delete<clang::PresumedLoc>>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::PresumedLoc" :#3# "PresumedLoc")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::unique_ptr<clang::PresumedLoc,std::default_delete<clang::PresumedLoc>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::PresumedLoc" :#3# "PresumedLoc")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::default_delete<clang::PresumedLoc>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::PresumedLoc" :#3# "PresumedLoc"))))))))))) #S(#10# :#1# "clbind::Wrapper<clang::IndirectGotoStmt,clang::IndirectGotoStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::IndirectGotoStmt,clang::IndirectGotoStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::IndirectGotoStmt" :#3# "IndirectGotoStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::IndirectGotoStmt" :#3# "IndirectGotoStmt")))))) #S(#10# :#1# "clbind::Wrapper<clang::BinaryConditionalOperator,clang::BinaryConditionalOperator *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::BinaryConditionalOperator,clang::BinaryConditionalOperator *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::BinaryConditionalOperator" :#3# "BinaryConditionalOperator")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::BinaryConditionalOperator" :#3# "BinaryConditionalOperator")))))) #S(#10# :#1# "clbind::Wrapper<clang::NamespaceDecl,clang::NamespaceDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::NamespaceDecl,clang::NamespaceDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::NamespaceDecl" :#3# "NamespaceDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::NamespaceDecl" :#3# "NamespaceDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::OMPForDirective,clang::OMPForDirective *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::OMPForDirective,clang::OMPForDirective *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::OMPForDirective" :#3# "OMPForDirective")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::OMPForDirective" :#3# "OMPForDirective")))))) #S(#10# :#1# "clbind::Wrapper<clang::TypeAliasDecl,clang::TypeAliasDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::TypeAliasDecl,clang::TypeAliasDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::TypeAliasDecl" :#3# "TypeAliasDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::TypeAliasDecl" :#3# "TypeAliasDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::BinaryOperator,clang::BinaryOperator *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::BinaryOperator,clang::BinaryOperator *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::BinaryOperator" :#3# "BinaryOperator")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::BinaryOperator" :#3# "BinaryOperator")))))) #S(#10# :#1# "clbind::Wrapper<clang::tooling::ClangStripOutputAdjuster,clang::tooling::ClangStripOutputAdjuster *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::tooling::ClangStripOutputAdjuster,clang::tooling::ClangStripOutputAdjuster *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::tooling::ClangStripOutputAdjuster" :#3# "ClangStripOutputAdjuster")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::tooling::ClangStripOutputAdjuster" :#3# "ClangStripOutputAdjuster")))))) #S(#10# :#1# "clbind::Wrapper<clang::MSPropertyRefExpr,clang::MSPropertyRefExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::MSPropertyRefExpr,clang::MSPropertyRefExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::MSPropertyRefExpr" :#3# "MSPropertyRefExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::MSPropertyRefExpr" :#3# "MSPropertyRefExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::CompoundStmt,clang::CompoundStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CompoundStmt,clang::CompoundStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CompoundStmt" :#3# "CompoundStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CompoundStmt" :#3# "CompoundStmt")))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXThisExpr,clang::CXXThisExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXThisExpr,clang::CXXThisExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXThisExpr" :#3# "CXXThisExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXThisExpr" :#3# "CXXThisExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::TemplateSpecializationType,clang::TemplateSpecializationType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::TemplateSpecializationType,clang::TemplateSpecializationType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::TemplateSpecializationType" :#3# "TemplateSpecializationType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::TemplateSpecializationType" :#3# "TemplateSpecializationType")))))) #S(#10# :#1# "clbind::Wrapper<clang::FunctionProtoType,clang::FunctionProtoType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::FunctionProtoType,clang::FunctionProtoType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::FunctionProtoType" :#3# "FunctionProtoType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::FunctionProtoType" :#3# "FunctionProtoType")))))) #S(#10# :#1# "clbind::Wrapper<clang::CharSourceRange,std::unique_ptr<clang::CharSourceRange,std::default_delete<clang::CharSourceRange>>>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CharSourceRange,std::unique_ptr<clang::CharSourceRange,std::default_delete<clang::CharSourceRange>>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CharSourceRange" :#3# "CharSourceRange")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::unique_ptr<clang::CharSourceRange,std::default_delete<clang::CharSourceRange>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CharSourceRange" :#3# "CharSourceRange")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::default_delete<clang::CharSourceRange>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CharSourceRange" :#3# "CharSourceRange"))))))))))) #S(#10# :#1# "clbind::Wrapper<clang::ConstantArrayType,clang::ConstantArrayType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ConstantArrayType,clang::ConstantArrayType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ConstantArrayType" :#3# "ConstantArrayType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ConstantArrayType" :#3# "ConstantArrayType")))))) #S(#10# :#1# "clbind::Wrapper<clang::CompoundLiteralExpr,clang::CompoundLiteralExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CompoundLiteralExpr,clang::CompoundLiteralExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CompoundLiteralExpr" :#3# "CompoundLiteralExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CompoundLiteralExpr" :#3# "CompoundLiteralExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXCatchStmt,clang::CXXCatchStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXCatchStmt,clang::CXXCatchStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXCatchStmt" :#3# "CXXCatchStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXCatchStmt" :#3# "CXXCatchStmt")))))) #S(#10# :#1# "clbind::Wrapper<clang::MSAsmStmt,clang::MSAsmStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::MSAsmStmt,clang::MSAsmStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::MSAsmStmt" :#3# "MSAsmStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::MSAsmStmt" :#3# "MSAsmStmt")))))) #S(#10# :#1# "clbind::Wrapper<clang::MaterializeTemporaryExpr,clang::MaterializeTemporaryExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::MaterializeTemporaryExpr,clang::MaterializeTemporaryExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::MaterializeTemporaryExpr" :#3# "MaterializeTemporaryExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::MaterializeTemporaryExpr" :#3# "MaterializeTemporaryExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCStringLiteral,clang::ObjCStringLiteral *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCStringLiteral,clang::ObjCStringLiteral *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCStringLiteral" :#3# "ObjCStringLiteral")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCStringLiteral" :#3# "ObjCStringLiteral")))))) #S(#10# :#1# "clbind::Wrapper<clang::ast_matchers::MatchFinderMatchResult,const clang::ast_matchers::MatchFinderMatchResult *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ast_matchers::MatchFinderMatchResult,const clang::ast_matchers::MatchFinderMatchResult *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ast_matchers::MatchFinderMatchResult" :#3# "MatchFinderMatchResult")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ast_matchers::MatchFinderMatchResult" :#3# "MatchFinderMatchResult")))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCInterfaceDecl,clang::ObjCInterfaceDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCInterfaceDecl,clang::ObjCInterfaceDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCInterfaceDecl" :#3# "ObjCInterfaceDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCInterfaceDecl" :#3# "ObjCInterfaceDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::SubstNonTypeTemplateParmPackExpr,clang::SubstNonTypeTemplateParmPackExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::SubstNonTypeTemplateParmPackExpr,clang::SubstNonTypeTemplateParmPackExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::SubstNonTypeTemplateParmPackExpr" :#3# "SubstNonTypeTemplateParmPackExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::SubstNonTypeTemplateParmPackExpr" :#3# "SubstNonTypeTemplateParmPackExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::BreakStmt,clang::BreakStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::BreakStmt,clang::BreakStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::BreakStmt" :#3# "BreakStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::BreakStmt" :#3# "BreakStmt")))))) #S(#10# :#1# "clbind::Wrapper<clang::VarTemplatePartialSpecializationDecl,clang::VarTemplatePartialSpecializationDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::VarTemplatePartialSpecializationDecl,clang::VarTemplatePartialSpecializationDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::VarTemplatePartialSpecializationDecl" :#3# "VarTemplatePartialSpecializationDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::VarTemplatePartialSpecializationDecl" :#3# "VarTemplatePartialSpecializationDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::NullStmt,clang::NullStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::NullStmt,clang::NullStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::NullStmt" :#3# "NullStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::NullStmt" :#3# "NullStmt")))))) #S(#10# :#1# "clbind::Wrapper<clang::UserDefinedLiteral,clang::UserDefinedLiteral *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::UserDefinedLiteral,clang::UserDefinedLiteral *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::UserDefinedLiteral" :#3# "UserDefinedLiteral")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::UserDefinedLiteral" :#3# "UserDefinedLiteral")))))) #S(#10# :#1# "clbind::Wrapper<clang::TemplateArgumentList,const clang::TemplateArgumentList *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::TemplateArgumentList,const clang::TemplateArgumentList *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::TemplateArgumentList" :#3# "TemplateArgumentList")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::TemplateArgumentList" :#3# "TemplateArgumentList")))))) #S(#10# :#1# "clbind::Wrapper<clang::MSPropertyDecl,clang::MSPropertyDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::MSPropertyDecl,clang::MSPropertyDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::MSPropertyDecl" :#3# "MSPropertyDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::MSPropertyDecl" :#3# "MSPropertyDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXTryStmt,clang::CXXTryStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXTryStmt,clang::CXXTryStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXTryStmt" :#3# "CXXTryStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXTryStmt" :#3# "CXXTryStmt")))))) #S(#10# :#1# "clbind::Wrapper<clang::TypeLoc,std::unique_ptr<clang::TypeLoc,std::default_delete<clang::TypeLoc>>>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::TypeLoc,std::unique_ptr<clang::TypeLoc,std::default_delete<clang::TypeLoc>>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::TypeLoc" :#3# "TypeLoc")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::unique_ptr<clang::TypeLoc,std::default_delete<clang::TypeLoc>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::TypeLoc" :#3# "TypeLoc")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::default_delete<clang::TypeLoc>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::TypeLoc" :#3# "TypeLoc"))))))))))) #S(#10# :#1# "clbind::Wrapper<clang::DecltypeType,clang::DecltypeType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::DecltypeType,clang::DecltypeType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::DecltypeType" :#3# "DecltypeType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::DecltypeType" :#3# "DecltypeType")))))) #S(#10# :#1# "clbind::Wrapper<clang::Rewriter,clang::Rewriter *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::Rewriter,clang::Rewriter *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::Rewriter" :#3# "Rewriter")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::Rewriter" :#3# "Rewriter")))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXReinterpretCastExpr,clang::CXXReinterpretCastExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXReinterpretCastExpr,clang::CXXReinterpretCastExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXReinterpretCastExpr" :#3# "CXXReinterpretCastExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXReinterpretCastExpr" :#3# "CXXReinterpretCastExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::CompoundAssignOperator,clang::CompoundAssignOperator *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CompoundAssignOperator,clang::CompoundAssignOperator *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CompoundAssignOperator" :#3# "CompoundAssignOperator")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CompoundAssignOperator" :#3# "CompoundAssignOperator")))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCIndirectCopyRestoreExpr,clang::ObjCIndirectCopyRestoreExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCIndirectCopyRestoreExpr,clang::ObjCIndirectCopyRestoreExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCIndirectCopyRestoreExpr" :#3# "ObjCIndirectCopyRestoreExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCIndirectCopyRestoreExpr" :#3# "ObjCIndirectCopyRestoreExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::StringLiteral,clang::StringLiteral *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::StringLiteral,clang::StringLiteral *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::StringLiteral" :#3# "StringLiteral")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::StringLiteral" :#3# "StringLiteral")))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCAtThrowStmt,clang::ObjCAtThrowStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCAtThrowStmt,clang::ObjCAtThrowStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCAtThrowStmt" :#3# "ObjCAtThrowStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCAtThrowStmt" :#3# "ObjCAtThrowStmt")))))) #S(#10# :#1# "clbind::Wrapper<clang::OMPThreadPrivateDecl,clang::OMPThreadPrivateDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::OMPThreadPrivateDecl,clang::OMPThreadPrivateDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::OMPThreadPrivateDecl" :#3# "OMPThreadPrivateDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::OMPThreadPrivateDecl" :#3# "OMPThreadPrivateDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::AutoType,clang::AutoType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::AutoType,clang::AutoType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::AutoType" :#3# "AutoType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::AutoType" :#3# "AutoType")))))) #S(#10# :#1# "clbind::Wrapper<clang::IntegerLiteral,clang::IntegerLiteral *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::IntegerLiteral,clang::IntegerLiteral *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::IntegerLiteral" :#3# "IntegerLiteral")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::IntegerLiteral" :#3# "IntegerLiteral")))))) #S(#10# :#1# "clbind::Wrapper<clang::ConditionalOperator,clang::ConditionalOperator *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ConditionalOperator,clang::ConditionalOperator *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ConditionalOperator" :#3# "ConditionalOperator")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ConditionalOperator" :#3# "ConditionalOperator")))))) #S(#10# :#1# "clbind::Wrapper<clang::CapturedDecl,clang::CapturedDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CapturedDecl,clang::CapturedDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CapturedDecl" :#3# "CapturedDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CapturedDecl" :#3# "CapturedDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCProtocolExpr,clang::ObjCProtocolExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCProtocolExpr,clang::ObjCProtocolExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCProtocolExpr" :#3# "ObjCProtocolExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCProtocolExpr" :#3# "ObjCProtocolExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::RecordDecl,clang::RecordDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::RecordDecl,clang::RecordDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::RecordDecl" :#3# "RecordDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::RecordDecl" :#3# "RecordDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::LValueReferenceType,clang::LValueReferenceType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::LValueReferenceType,clang::LValueReferenceType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::LValueReferenceType" :#3# "LValueReferenceType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::LValueReferenceType" :#3# "LValueReferenceType")))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXBindTemporaryExpr,clang::CXXBindTemporaryExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXBindTemporaryExpr,clang::CXXBindTemporaryExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXBindTemporaryExpr" :#3# "CXXBindTemporaryExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXBindTemporaryExpr" :#3# "CXXBindTemporaryExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::GCCAsmStmt,clang::GCCAsmStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::GCCAsmStmt,clang::GCCAsmStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::GCCAsmStmt" :#3# "GCCAsmStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::GCCAsmStmt" :#3# "GCCAsmStmt")))))) #S(#10# :#1# "clbind::Wrapper<clang::ClassTemplateSpecializationDecl,clang::ClassTemplateSpecializationDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ClassTemplateSpecializationDecl,clang::ClassTemplateSpecializationDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ClassTemplateSpecializationDecl" :#3# "ClassTemplateSpecializationDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ClassTemplateSpecializationDecl" :#3# "ClassTemplateSpecializationDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::InjectedClassNameType,clang::InjectedClassNameType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::InjectedClassNameType,clang::InjectedClassNameType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::InjectedClassNameType" :#3# "InjectedClassNameType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::InjectedClassNameType" :#3# "InjectedClassNameType")))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXConstCastExpr,clang::CXXConstCastExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXConstCastExpr,clang::CXXConstCastExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXConstCastExpr" :#3# "CXXConstCastExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXConstCastExpr" :#3# "CXXConstCastExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::IfStmt,clang::IfStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::IfStmt,clang::IfStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::IfStmt" :#3# "IfStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::IfStmt" :#3# "IfStmt")))))) #S(#10# :#1# "clbind::Wrapper<clang::OpaqueValueExpr,clang::OpaqueValueExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::OpaqueValueExpr,clang::OpaqueValueExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::OpaqueValueExpr" :#3# "OpaqueValueExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::OpaqueValueExpr" :#3# "OpaqueValueExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::CStyleCastExpr,clang::CStyleCastExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CStyleCastExpr,clang::CStyleCastExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CStyleCastExpr" :#3# "CStyleCastExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CStyleCastExpr" :#3# "CStyleCastExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::tooling::CompileCommand,std::unique_ptr<clang::tooling::CompileCommand,std::default_delete<clang::tooling::CompileCommand>>>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::tooling::CompileCommand,std::unique_ptr<clang::tooling::CompileCommand,std::default_delete<clang::tooling::CompileCommand>>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::tooling::CompileCommand" :#3# "CompileCommand")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::unique_ptr<clang::tooling::CompileCommand,std::default_delete<clang::tooling::CompileCommand>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::tooling::CompileCommand" :#3# "CompileCommand")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::default_delete<clang::tooling::CompileCommand>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::tooling::CompileCommand" :#3# "CompileCommand"))))))))))) #S(#10# :#1# "clbind::Wrapper<clang::TemplateTypeParmDecl,clang::TemplateTypeParmDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::TemplateTypeParmDecl,clang::TemplateTypeParmDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::TemplateTypeParmDecl" :#3# "TemplateTypeParmDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::TemplateTypeParmDecl" :#3# "TemplateTypeParmDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::tooling::Replacement,clang::tooling::Replacement *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::tooling::Replacement,clang::tooling::Replacement *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::tooling::Replacement" :#3# "Replacement")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::tooling::Replacement" :#3# "Replacement")))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCForCollectionStmt,clang::ObjCForCollectionStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCForCollectionStmt,clang::ObjCForCollectionStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCForCollectionStmt" :#3# "ObjCForCollectionStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCForCollectionStmt" :#3# "ObjCForCollectionStmt")))))) #S(#10# :#1# "clbind::Wrapper<clang::LambdaExpr,clang::LambdaExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::LambdaExpr,clang::LambdaExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::LambdaExpr" :#3# "LambdaExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::LambdaExpr" :#3# "LambdaExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::SEHFinallyStmt,clang::SEHFinallyStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::SEHFinallyStmt,clang::SEHFinallyStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::SEHFinallyStmt" :#3# "SEHFinallyStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::SEHFinallyStmt" :#3# "SEHFinallyStmt")))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXMethodDecl,clang::CXXMethodDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXMethodDecl,clang::CXXMethodDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXMethodDecl" :#3# "CXXMethodDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXMethodDecl" :#3# "CXXMethodDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::IdentifierInfo,clang::IdentifierInfo *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::IdentifierInfo,clang::IdentifierInfo *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::IdentifierInfo" :#3# "IdentifierInfo")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::IdentifierInfo" :#3# "IdentifierInfo")))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCAutoreleasePoolStmt,clang::ObjCAutoreleasePoolStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCAutoreleasePoolStmt,clang::ObjCAutoreleasePoolStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCAutoreleasePoolStmt" :#3# "ObjCAutoreleasePoolStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCAutoreleasePoolStmt" :#3# "ObjCAutoreleasePoolStmt")))))) #S(#10# :#1# "clbind::Wrapper<clang::ExtVectorType,clang::ExtVectorType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ExtVectorType,clang::ExtVectorType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ExtVectorType" :#3# "ExtVectorType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ExtVectorType" :#3# "ExtVectorType")))))) #S(#10# :#1# "clbind::Wrapper<clang::ExtVectorElementExpr,clang::ExtVectorElementExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ExtVectorElementExpr,clang::ExtVectorElementExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ExtVectorElementExpr" :#3# "ExtVectorElementExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ExtVectorElementExpr" :#3# "ExtVectorElementExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::RValueReferenceType,clang::RValueReferenceType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::RValueReferenceType,clang::RValueReferenceType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::RValueReferenceType" :#3# "RValueReferenceType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::RValueReferenceType" :#3# "RValueReferenceType")))))) #S(#10# :#1# "clbind::Wrapper<clang::ImportDecl,clang::ImportDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ImportDecl,clang::ImportDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ImportDecl" :#3# "ImportDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ImportDecl" :#3# "ImportDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::InitListExpr,clang::InitListExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::InitListExpr,clang::InitListExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::InitListExpr" :#3# "InitListExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::InitListExpr" :#3# "InitListExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXNoexceptExpr,clang::CXXNoexceptExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXNoexceptExpr,clang::CXXNoexceptExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXNoexceptExpr" :#3# "CXXNoexceptExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXNoexceptExpr" :#3# "CXXNoexceptExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::OffsetOfExpr,clang::OffsetOfExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::OffsetOfExpr,clang::OffsetOfExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::OffsetOfExpr" :#3# "OffsetOfExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::OffsetOfExpr" :#3# "OffsetOfExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::MemberPointerType,clang::MemberPointerType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::MemberPointerType,clang::MemberPointerType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::MemberPointerType" :#3# "MemberPointerType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::MemberPointerType" :#3# "MemberPointerType")))))) #S(#10# :#1# "clbind::Wrapper<clang::DependentNameType,clang::DependentNameType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::DependentNameType,clang::DependentNameType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::DependentNameType" :#3# "DependentNameType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::DependentNameType" :#3# "DependentNameType")))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCCategoryImplDecl,clang::ObjCCategoryImplDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCCategoryImplDecl,clang::ObjCCategoryImplDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCCategoryImplDecl" :#3# "ObjCCategoryImplDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCCategoryImplDecl" :#3# "ObjCCategoryImplDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::PseudoObjectExpr,clang::PseudoObjectExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::PseudoObjectExpr,clang::PseudoObjectExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::PseudoObjectExpr" :#3# "PseudoObjectExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::PseudoObjectExpr" :#3# "PseudoObjectExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::UnresolvedUsingTypenameDecl,clang::UnresolvedUsingTypenameDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::UnresolvedUsingTypenameDecl,clang::UnresolvedUsingTypenameDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::UnresolvedUsingTypenameDecl" :#3# "UnresolvedUsingTypenameDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::UnresolvedUsingTypenameDecl" :#3# "UnresolvedUsingTypenameDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::TypeTraitExpr,clang::TypeTraitExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::TypeTraitExpr,clang::TypeTraitExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::TypeTraitExpr" :#3# "TypeTraitExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::TypeTraitExpr" :#3# "TypeTraitExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXOperatorCallExpr,clang::CXXOperatorCallExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXOperatorCallExpr,clang::CXXOperatorCallExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXOperatorCallExpr" :#3# "CXXOperatorCallExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXOperatorCallExpr" :#3# "CXXOperatorCallExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXMemberCallExpr,clang::CXXMemberCallExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXMemberCallExpr,clang::CXXMemberCallExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXMemberCallExpr" :#3# "CXXMemberCallExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXMemberCallExpr" :#3# "CXXMemberCallExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::EnumType,clang::EnumType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::EnumType,clang::EnumType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::EnumType" :#3# "EnumType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::EnumType" :#3# "EnumType")))))) #S(#10# :#1# "clbind::Wrapper<clang::DependentSizedExtVectorType,clang::DependentSizedExtVectorType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::DependentSizedExtVectorType,clang::DependentSizedExtVectorType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::DependentSizedExtVectorType" :#3# "DependentSizedExtVectorType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::DependentSizedExtVectorType" :#3# "DependentSizedExtVectorType")))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCObjectPointerType,clang::ObjCObjectPointerType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCObjectPointerType,clang::ObjCObjectPointerType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCObjectPointerType" :#3# "ObjCObjectPointerType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCObjectPointerType" :#3# "ObjCObjectPointerType")))))) #S(#10# :#1# "clbind::Wrapper<clang::ElaboratedType,clang::ElaboratedType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ElaboratedType,clang::ElaboratedType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ElaboratedType" :#3# "ElaboratedType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ElaboratedType" :#3# "ElaboratedType")))))) #S(#10# :#1# "clbind::Wrapper<clang::FloatingLiteral,clang::FloatingLiteral *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::FloatingLiteral,clang::FloatingLiteral *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::FloatingLiteral" :#3# "FloatingLiteral")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::FloatingLiteral" :#3# "FloatingLiteral")))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCBoxedExpr,clang::ObjCBoxedExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCBoxedExpr,clang::ObjCBoxedExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCBoxedExpr" :#3# "ObjCBoxedExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCBoxedExpr" :#3# "ObjCBoxedExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::ast_matchers::dynamic::VariantMatcher,std::unique_ptr<clang::ast_matchers::dynamic::VariantMatcher,std::default_delete<clang::ast_matchers::dynamic::VariantMatcher>>>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ast_matchers::dynamic::VariantMatcher,std::unique_ptr<clang::ast_matchers::dynamic::VariantMatcher,std::default_delete<clang::ast_matchers::dynamic::VariantMatcher>>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ast_matchers::dynamic::VariantMatcher" :#3# "VariantMatcher")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::unique_ptr<clang::ast_matchers::dynamic::VariantMatcher,std::default_delete<clang::ast_matchers::dynamic::VariantMatcher>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ast_matchers::dynamic::VariantMatcher" :#3# "VariantMatcher")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::default_delete<clang::ast_matchers::dynamic::VariantMatcher>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ast_matchers::dynamic::VariantMatcher" :#3# "VariantMatcher"))))))))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXConstructExpr,clang::CXXConstructExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXConstructExpr,clang::CXXConstructExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXConstructExpr" :#3# "CXXConstructExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXConstructExpr" :#3# "CXXConstructExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::CompilerInstance,clang::CompilerInstance *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CompilerInstance,clang::CompilerInstance *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CompilerInstance" :#3# "CompilerInstance")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CompilerInstance" :#3# "CompilerInstance")))))) #S(#10# :#1# "clbind::Wrapper<clang::NonTypeTemplateParmDecl,clang::NonTypeTemplateParmDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::NonTypeTemplateParmDecl,clang::NonTypeTemplateParmDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::NonTypeTemplateParmDecl" :#3# "NonTypeTemplateParmDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::NonTypeTemplateParmDecl" :#3# "NonTypeTemplateParmDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::TypedefDecl,clang::TypedefDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::TypedefDecl,clang::TypedefDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::TypedefDecl" :#3# "TypedefDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::TypedefDecl" :#3# "TypedefDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::DesignatedInitExpr,clang::DesignatedInitExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::DesignatedInitExpr,clang::DesignatedInitExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::DesignatedInitExpr" :#3# "DesignatedInitExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::DesignatedInitExpr" :#3# "DesignatedInitExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::UsingDirectiveDecl,clang::UsingDirectiveDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::UsingDirectiveDecl,clang::UsingDirectiveDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::UsingDirectiveDecl" :#3# "UsingDirectiveDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::UsingDirectiveDecl" :#3# "UsingDirectiveDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::LabelStmt,clang::LabelStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::LabelStmt,clang::LabelStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::LabelStmt" :#3# "LabelStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::LabelStmt" :#3# "LabelStmt")))))) #S(#10# :#1# "clbind::Wrapper<clang::AddrLabelExpr,clang::AddrLabelExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::AddrLabelExpr,clang::AddrLabelExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::AddrLabelExpr" :#3# "AddrLabelExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::AddrLabelExpr" :#3# "AddrLabelExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::StaticAssertDecl,clang::StaticAssertDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::StaticAssertDecl,clang::StaticAssertDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::StaticAssertDecl" :#3# "StaticAssertDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::StaticAssertDecl" :#3# "StaticAssertDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::UsingShadowDecl,clang::UsingShadowDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::UsingShadowDecl,clang::UsingShadowDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::UsingShadowDecl" :#3# "UsingShadowDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::UsingShadowDecl" :#3# "UsingShadowDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::SEHTryStmt,clang::SEHTryStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::SEHTryStmt,clang::SEHTryStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::SEHTryStmt" :#3# "SEHTryStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::SEHTryStmt" :#3# "SEHTryStmt")))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXPseudoDestructorExpr,clang::CXXPseudoDestructorExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXPseudoDestructorExpr,clang::CXXPseudoDestructorExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXPseudoDestructorExpr" :#3# "CXXPseudoDestructorExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXPseudoDestructorExpr" :#3# "CXXPseudoDestructorExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::GenericSelectionExpr,clang::GenericSelectionExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::GenericSelectionExpr,clang::GenericSelectionExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::GenericSelectionExpr" :#3# "GenericSelectionExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::GenericSelectionExpr" :#3# "GenericSelectionExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::AccessSpecDecl,clang::AccessSpecDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::AccessSpecDecl,clang::AccessSpecDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::AccessSpecDecl" :#3# "AccessSpecDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::AccessSpecDecl" :#3# "AccessSpecDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXConversionDecl,clang::CXXConversionDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXConversionDecl,clang::CXXConversionDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXConversionDecl" :#3# "CXXConversionDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXConversionDecl" :#3# "CXXConversionDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::DoStmt,clang::DoStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::DoStmt,clang::DoStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::DoStmt" :#3# "DoStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::DoStmt" :#3# "DoStmt")))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCIsaExpr,clang::ObjCIsaExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCIsaExpr,clang::ObjCIsaExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCIsaExpr" :#3# "ObjCIsaExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCIsaExpr" :#3# "ObjCIsaExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCSelectorExpr,clang::ObjCSelectorExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCSelectorExpr,clang::ObjCSelectorExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCSelectorExpr" :#3# "ObjCSelectorExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCSelectorExpr" :#3# "ObjCSelectorExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::TemplateSpecializationType,const clang::TemplateSpecializationType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::TemplateSpecializationType,const clang::TemplateSpecializationType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::TemplateSpecializationType" :#3# "TemplateSpecializationType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::TemplateSpecializationType" :#3# "TemplateSpecializationType")))))) #S(#10# :#1# "clbind::Wrapper<clang::SubstTemplateTypeParmType,clang::SubstTemplateTypeParmType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::SubstTemplateTypeParmType,clang::SubstTemplateTypeParmType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::SubstTemplateTypeParmType" :#3# "SubstTemplateTypeParmType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::SubstTemplateTypeParmType" :#3# "SubstTemplateTypeParmType")))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXFunctionalCastExpr,clang::CXXFunctionalCastExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXFunctionalCastExpr,clang::CXXFunctionalCastExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXFunctionalCastExpr" :#3# "CXXFunctionalCastExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXFunctionalCastExpr" :#3# "CXXFunctionalCastExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::WhileStmt,clang::WhileStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::WhileStmt,clang::WhileStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::WhileStmt" :#3# "WhileStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::WhileStmt" :#3# "WhileStmt")))))) #S(#10# :#1# "clbind::Wrapper<clang::LangOptions,const clang::LangOptions *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::LangOptions,const clang::LangOptions *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::LangOptions" :#3# "LangOptions")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::LangOptions" :#3# "LangOptions")))))) #S(#10# :#1# "clbind::Wrapper<clang::SwitchStmt,clang::SwitchStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::SwitchStmt,clang::SwitchStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::SwitchStmt" :#3# "SwitchStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::SwitchStmt" :#3# "SwitchStmt")))))) #S(#10# :#1# "clbind::Wrapper<llvm::APSInt,std::unique_ptr<llvm::APSInt,std::default_delete<llvm::APSInt>>>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<llvm::APSInt,std::unique_ptr<llvm::APSInt,std::default_delete<llvm::APSInt>>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "llvm::APSInt" :#3# "APSInt")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::unique_ptr<llvm::APSInt,std::default_delete<llvm::APSInt>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "llvm::APSInt" :#3# "APSInt")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::default_delete<llvm::APSInt>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "llvm::APSInt" :#3# "APSInt"))))))))))) #S(#10# :#1# "clbind::Wrapper<clang::PredefinedExpr,clang::PredefinedExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::PredefinedExpr,clang::PredefinedExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::PredefinedExpr" :#3# "PredefinedExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::PredefinedExpr" :#3# "PredefinedExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXDefaultInitExpr,clang::CXXDefaultInitExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXDefaultInitExpr,clang::CXXDefaultInitExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXDefaultInitExpr" :#3# "CXXDefaultInitExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXDefaultInitExpr" :#3# "CXXDefaultInitExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::ComplexType,clang::ComplexType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ComplexType,clang::ComplexType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ComplexType" :#3# "ComplexType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ComplexType" :#3# "ComplexType")))))) #S(#10# :#1# "clbind::Wrapper<clang::PackExpansionType,clang::PackExpansionType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::PackExpansionType,clang::PackExpansionType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::PackExpansionType" :#3# "PackExpansionType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::PackExpansionType" :#3# "PackExpansionType")))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXConstructorDecl,clang::CXXConstructorDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXConstructorDecl,clang::CXXConstructorDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXConstructorDecl" :#3# "CXXConstructorDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXConstructorDecl" :#3# "CXXConstructorDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::TypeAliasTemplateDecl,clang::TypeAliasTemplateDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::TypeAliasTemplateDecl,clang::TypeAliasTemplateDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::TypeAliasTemplateDecl" :#3# "TypeAliasTemplateDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::TypeAliasTemplateDecl" :#3# "TypeAliasTemplateDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::PackExpansionExpr,clang::PackExpansionExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::PackExpansionExpr,clang::PackExpansionExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::PackExpansionExpr" :#3# "PackExpansionExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::PackExpansionExpr" :#3# "PackExpansionExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::ConvertVectorExpr,clang::ConvertVectorExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ConvertVectorExpr,clang::ConvertVectorExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ConvertVectorExpr" :#3# "ConvertVectorExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ConvertVectorExpr" :#3# "ConvertVectorExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::PointerType,clang::PointerType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::PointerType,clang::PointerType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::PointerType" :#3# "PointerType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::PointerType" :#3# "PointerType")))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXThrowExpr,clang::CXXThrowExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXThrowExpr,clang::CXXThrowExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXThrowExpr" :#3# "CXXThrowExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXThrowExpr" :#3# "CXXThrowExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXStdInitializerListExpr,clang::CXXStdInitializerListExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXStdInitializerListExpr,clang::CXXStdInitializerListExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXStdInitializerListExpr" :#3# "CXXStdInitializerListExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXStdInitializerListExpr" :#3# "CXXStdInitializerListExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCPropertyImplDecl,clang::ObjCPropertyImplDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCPropertyImplDecl,clang::ObjCPropertyImplDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCPropertyImplDecl" :#3# "ObjCPropertyImplDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCPropertyImplDecl" :#3# "ObjCPropertyImplDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXTypeidExpr,clang::CXXTypeidExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXTypeidExpr,clang::CXXTypeidExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXTypeidExpr" :#3# "CXXTypeidExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXTypeidExpr" :#3# "CXXTypeidExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::GotoStmt,clang::GotoStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::GotoStmt,clang::GotoStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::GotoStmt" :#3# "GotoStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::GotoStmt" :#3# "GotoStmt")))))) #S(#10# :#1# "clbind::Wrapper<clang::FriendTemplateDecl,clang::FriendTemplateDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::FriendTemplateDecl,clang::FriendTemplateDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::FriendTemplateDecl" :#3# "FriendTemplateDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::FriendTemplateDecl" :#3# "FriendTemplateDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXScalarValueInitExpr,clang::CXXScalarValueInitExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXScalarValueInitExpr,clang::CXXScalarValueInitExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXScalarValueInitExpr" :#3# "CXXScalarValueInitExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXScalarValueInitExpr" :#3# "CXXScalarValueInitExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::GNUNullExpr,clang::GNUNullExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::GNUNullExpr,clang::GNUNullExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::GNUNullExpr" :#3# "GNUNullExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::GNUNullExpr" :#3# "GNUNullExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::ParenType,clang::ParenType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ParenType,clang::ParenType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ParenType" :#3# "ParenType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ParenType" :#3# "ParenType")))))) #S(#10# :#1# "clbind::Wrapper<clang::UnaryTransformType,clang::UnaryTransformType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::UnaryTransformType,clang::UnaryTransformType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::UnaryTransformType" :#3# "UnaryTransformType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::UnaryTransformType" :#3# "UnaryTransformType")))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCAtFinallyStmt,clang::ObjCAtFinallyStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCAtFinallyStmt,clang::ObjCAtFinallyStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCAtFinallyStmt" :#3# "ObjCAtFinallyStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCAtFinallyStmt" :#3# "ObjCAtFinallyStmt")))))) #S(#10# :#1# "clbind::Wrapper<clang::SubstNonTypeTemplateParmExpr,clang::SubstNonTypeTemplateParmExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::SubstNonTypeTemplateParmExpr,clang::SubstNonTypeTemplateParmExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::SubstNonTypeTemplateParmExpr" :#3# "SubstNonTypeTemplateParmExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::SubstNonTypeTemplateParmExpr" :#3# "SubstNonTypeTemplateParmExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::DeclStmt,clang::DeclStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::DeclStmt,clang::DeclStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::DeclStmt" :#3# "DeclStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::DeclStmt" :#3# "DeclStmt")))))) #S(#10# :#1# "clbind::Wrapper<clang::TemplateArgument,const clang::TemplateArgument *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::TemplateArgument,const clang::TemplateArgument *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::TemplateArgument" :#3# "TemplateArgument")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::TemplateArgument" :#3# "TemplateArgument")))))) #S(#10# :#1# "clbind::Wrapper<clang::AdjustedType,clang::AdjustedType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::AdjustedType,clang::AdjustedType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::AdjustedType" :#3# "AdjustedType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::AdjustedType" :#3# "AdjustedType")))))) #S(#10# :#1# "clbind::Wrapper<clang::TypeSourceInfo,clang::TypeSourceInfo *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::TypeSourceInfo,clang::TypeSourceInfo *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::TypeSourceInfo" :#3# "TypeSourceInfo")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::TypeSourceInfo" :#3# "TypeSourceInfo")))))) #S(#10# :#1# "clbind::Wrapper<clang::QualType,std::unique_ptr<clang::QualType,std::default_delete<clang::QualType>>>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::QualType,std::unique_ptr<clang::QualType,std::default_delete<clang::QualType>>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::QualType" :#3# "QualType")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::unique_ptr<clang::QualType,std::default_delete<clang::QualType>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::QualType" :#3# "QualType")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::default_delete<clang::QualType>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::QualType" :#3# "QualType"))))))))))) #S(#10# :#1# "clbind::Wrapper<clang::tooling::ClangTool,clang::tooling::ClangTool *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::tooling::ClangTool,clang::tooling::ClangTool *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::tooling::ClangTool" :#3# "ClangTool")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::tooling::ClangTool" :#3# "ClangTool")))))) #S(#10# :#1# "clbind::Wrapper<clang::TypedefType,clang::TypedefType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::TypedefType,clang::TypedefType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::TypedefType" :#3# "TypedefType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::TypedefType" :#3# "TypedefType")))))) #S(#10# :#1# "clbind::Wrapper<clang::SizeOfPackExpr,clang::SizeOfPackExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::SizeOfPackExpr,clang::SizeOfPackExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::SizeOfPackExpr" :#3# "SizeOfPackExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::SizeOfPackExpr" :#3# "SizeOfPackExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::BlockPointerType,clang::BlockPointerType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::BlockPointerType,clang::BlockPointerType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::BlockPointerType" :#3# "BlockPointerType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::BlockPointerType" :#3# "BlockPointerType")))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXDependentScopeMemberExpr,clang::CXXDependentScopeMemberExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXDependentScopeMemberExpr,clang::CXXDependentScopeMemberExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXDependentScopeMemberExpr" :#3# "CXXDependentScopeMemberExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXDependentScopeMemberExpr" :#3# "CXXDependentScopeMemberExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::ExpressionTraitExpr,clang::ExpressionTraitExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ExpressionTraitExpr,clang::ExpressionTraitExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ExpressionTraitExpr" :#3# "ExpressionTraitExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ExpressionTraitExpr" :#3# "ExpressionTraitExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::ast_matchers::MatchFinder,clang::ast_matchers::MatchFinder *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ast_matchers::MatchFinder,clang::ast_matchers::MatchFinder *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ast_matchers::MatchFinder" :#3# "MatchFinder")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ast_matchers::MatchFinder" :#3# "MatchFinder")))))) #S(#10# :#1# "clbind::Wrapper<clang::ArraySubscriptExpr,clang::ArraySubscriptExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ArraySubscriptExpr,clang::ArraySubscriptExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ArraySubscriptExpr" :#3# "ArraySubscriptExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ArraySubscriptExpr" :#3# "ArraySubscriptExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::tooling::ClangSyntaxOnlyAdjuster,clang::tooling::ClangSyntaxOnlyAdjuster *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::tooling::ClangSyntaxOnlyAdjuster,clang::tooling::ClangSyntaxOnlyAdjuster *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::tooling::ClangSyntaxOnlyAdjuster" :#3# "ClangSyntaxOnlyAdjuster")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::tooling::ClangSyntaxOnlyAdjuster" :#3# "ClangSyntaxOnlyAdjuster")))))) #S(#10# :#1# "clbind::Wrapper<clang::UnresolvedLookupExpr,clang::UnresolvedLookupExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::UnresolvedLookupExpr,clang::UnresolvedLookupExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::UnresolvedLookupExpr" :#3# "UnresolvedLookupExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::UnresolvedLookupExpr" :#3# "UnresolvedLookupExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::FieldDecl,clang::FieldDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::FieldDecl,clang::FieldDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::FieldDecl" :#3# "FieldDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::FieldDecl" :#3# "FieldDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::AtomicType,clang::AtomicType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::AtomicType,clang::AtomicType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::AtomicType" :#3# "AtomicType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::AtomicType" :#3# "AtomicType")))))) #S(#10# :#1# "clbind::Wrapper<clang::ImplicitCastExpr,clang::ImplicitCastExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ImplicitCastExpr,clang::ImplicitCastExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ImplicitCastExpr" :#3# "ImplicitCastExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ImplicitCastExpr" :#3# "ImplicitCastExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::FunctionDecl,clang::FunctionDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::FunctionDecl,clang::FunctionDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::FunctionDecl" :#3# "FunctionDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::FunctionDecl" :#3# "FunctionDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::ExprWithCleanups,clang::ExprWithCleanups *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ExprWithCleanups,clang::ExprWithCleanups *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ExprWithCleanups" :#3# "ExprWithCleanups")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ExprWithCleanups" :#3# "ExprWithCleanups")))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXStaticCastExpr,clang::CXXStaticCastExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXStaticCastExpr,clang::CXXStaticCastExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXStaticCastExpr" :#3# "CXXStaticCastExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXStaticCastExpr" :#3# "CXXStaticCastExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::ShuffleVectorExpr,clang::ShuffleVectorExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ShuffleVectorExpr,clang::ShuffleVectorExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ShuffleVectorExpr" :#3# "ShuffleVectorExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ShuffleVectorExpr" :#3# "ShuffleVectorExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::tooling::FrontendActionFactory,std::unique_ptr<clang::tooling::FrontendActionFactory,std::default_delete<clang::tooling::FrontendActionFactory>>>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::tooling::FrontendActionFactory,std::unique_ptr<clang::tooling::FrontendActionFactory,std::default_delete<clang::tooling::FrontendActionFactory>>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::tooling::FrontendActionFactory" :#3# "FrontendActionFactory")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::unique_ptr<clang::tooling::FrontendActionFactory,std::default_delete<clang::tooling::FrontendActionFactory>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::tooling::FrontendActionFactory" :#3# "FrontendActionFactory")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::default_delete<clang::tooling::FrontendActionFactory>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::tooling::FrontendActionFactory" :#3# "FrontendActionFactory"))))))))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCBridgedCastExpr,clang::ObjCBridgedCastExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCBridgedCastExpr,clang::ObjCBridgedCastExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCBridgedCastExpr" :#3# "ObjCBridgedCastExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCBridgedCastExpr" :#3# "ObjCBridgedCastExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::CharacterLiteral,clang::CharacterLiteral *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CharacterLiteral,clang::CharacterLiteral *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CharacterLiteral" :#3# "CharacterLiteral")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CharacterLiteral" :#3# "CharacterLiteral")))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXUuidofExpr,clang::CXXUuidofExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXUuidofExpr,clang::CXXUuidofExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXUuidofExpr" :#3# "CXXUuidofExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXUuidofExpr" :#3# "CXXUuidofExpr")))))) #S(#10# :#1# "clbind::Wrapper<llvm::StringRef,std::unique_ptr<llvm::StringRef,std::default_delete<llvm::StringRef>>>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<llvm::StringRef,std::unique_ptr<llvm::StringRef,std::default_delete<llvm::StringRef>>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "llvm::StringRef" :#3# "StringRef")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::unique_ptr<llvm::StringRef,std::default_delete<llvm::StringRef>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "llvm::StringRef" :#3# "StringRef")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::default_delete<llvm::StringRef>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "llvm::StringRef" :#3# "StringRef"))))))))))) #S(#10# :#1# "clbind::Wrapper<clang::SourceManager,clang::SourceManager *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::SourceManager,clang::SourceManager *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::SourceManager" :#3# "SourceManager")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::SourceManager" :#3# "SourceManager")))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXRecordDecl,clang::CXXRecordDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXRecordDecl,clang::CXXRecordDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXRecordDecl" :#3# "CXXRecordDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXRecordDecl" :#3# "CXXRecordDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::ClassScopeFunctionSpecializationDecl,clang::ClassScopeFunctionSpecializationDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ClassScopeFunctionSpecializationDecl,clang::ClassScopeFunctionSpecializationDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ClassScopeFunctionSpecializationDecl" :#3# "ClassScopeFunctionSpecializationDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ClassScopeFunctionSpecializationDecl" :#3# "ClassScopeFunctionSpecializationDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::tooling::RefactoringTool,clang::tooling::RefactoringTool *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::tooling::RefactoringTool,clang::tooling::RefactoringTool *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::tooling::RefactoringTool" :#3# "RefactoringTool")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::tooling::RefactoringTool" :#3# "RefactoringTool")))))) #S(#10# :#1# "clbind::Wrapper<clang::FileScopeAsmDecl,clang::FileScopeAsmDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::FileScopeAsmDecl,clang::FileScopeAsmDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::FileScopeAsmDecl" :#3# "FileScopeAsmDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::FileScopeAsmDecl" :#3# "FileScopeAsmDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::EmptyDecl,clang::EmptyDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::EmptyDecl,clang::EmptyDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::EmptyDecl" :#3# "EmptyDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::EmptyDecl" :#3# "EmptyDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::UnaryExprOrTypeTraitExpr,clang::UnaryExprOrTypeTraitExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::UnaryExprOrTypeTraitExpr,clang::UnaryExprOrTypeTraitExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::UnaryExprOrTypeTraitExpr" :#3# "UnaryExprOrTypeTraitExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::UnaryExprOrTypeTraitExpr" :#3# "UnaryExprOrTypeTraitExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::UnresolvedMemberExpr,clang::UnresolvedMemberExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::UnresolvedMemberExpr,clang::UnresolvedMemberExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::UnresolvedMemberExpr" :#3# "UnresolvedMemberExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::UnresolvedMemberExpr" :#3# "UnresolvedMemberExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::Stmt,clang::Stmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::Stmt,clang::Stmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::Stmt" :#3# "Stmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::Stmt" :#3# "Stmt")))))) #S(#10# :#1# "clbind::Wrapper<clang::TypeOfType,clang::TypeOfType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::TypeOfType,clang::TypeOfType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::TypeOfType" :#3# "TypeOfType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::TypeOfType" :#3# "TypeOfType")))))) #S(#10# :#1# "clbind::Wrapper<clang::TemplateTemplateParmDecl,clang::TemplateTemplateParmDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::TemplateTemplateParmDecl,clang::TemplateTemplateParmDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::TemplateTemplateParmDecl" :#3# "TemplateTemplateParmDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::TemplateTemplateParmDecl" :#3# "TemplateTemplateParmDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::OMPParallelDirective,clang::OMPParallelDirective *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::OMPParallelDirective,clang::OMPParallelDirective *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::OMPParallelDirective" :#3# "OMPParallelDirective")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::OMPParallelDirective" :#3# "OMPParallelDirective")))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXForRangeStmt,clang::CXXForRangeStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXForRangeStmt,clang::CXXForRangeStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXForRangeStmt" :#3# "CXXForRangeStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXForRangeStmt" :#3# "CXXForRangeStmt")))))) #S(#10# :#1# "clbind::Wrapper<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>,std::unique_ptr<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>,std::default_delete<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>>>>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>,std::unique_ptr<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>,std::default_delete<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>>>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#17=UNCLASSIFIED-CTYPE :#1# "char")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::char_traits<char>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#17# :#1# "char"))))) #S(#13# :#9# 2 :#6# #S(#11# :#1# "std::allocator<char>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#17# :#1# "char")))))))) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#17# :#1# "char")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::char_traits<char>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#17# :#1# "char"))))) #S(#13# :#9# 2 :#6# #S(#11# :#1# "std::allocator<char>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#17# :#1# "char")))))))))))))) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::unique_ptr<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>,std::default_delete<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#17# :#1# "char")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::char_traits<char>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#17# :#1# "char"))))) #S(#13# :#9# 2 :#6# #S(#11# :#1# "std::allocator<char>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#17# :#1# "char")))))))) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#17# :#1# "char")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::char_traits<char>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#17# :#1# "char"))))) #S(#13# :#9# 2 :#6# #S(#11# :#1# "std::allocator<char>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#17# :#1# "char")))))))))))))) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::default_delete<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#17# :#1# "char")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::char_traits<char>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#17# :#1# "char"))))) #S(#13# :#9# 2 :#6# #S(#11# :#1# "std::allocator<char>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#17# :#1# "char")))))))) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#17# :#1# "char")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::char_traits<char>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#17# :#1# "char"))))) #S(#13# :#9# 2 :#6# #S(#11# :#1# "std::allocator<char>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#17# :#1# "char"))))))))))))))))))))))) #S(#10# :#1# "clbind::Wrapper<clang::UsingDecl,clang::UsingDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::UsingDecl,clang::UsingDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::UsingDecl" :#3# "UsingDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::UsingDecl" :#3# "UsingDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::DependentTemplateSpecializationType,clang::DependentTemplateSpecializationType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::DependentTemplateSpecializationType,clang::DependentTemplateSpecializationType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::DependentTemplateSpecializationType" :#3# "DependentTemplateSpecializationType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::DependentTemplateSpecializationType" :#3# "DependentTemplateSpecializationType")))))) #S(#10# :#1# "clbind::Wrapper<clang::LabelDecl,clang::LabelDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::LabelDecl,clang::LabelDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::LabelDecl" :#3# "LabelDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::LabelDecl" :#3# "LabelDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::VarDecl,clang::VarDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::VarDecl,clang::VarDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::VarDecl" :#3# "VarDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::VarDecl" :#3# "VarDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::CaseStmt,clang::CaseStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CaseStmt,clang::CaseStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CaseStmt" :#3# "CaseStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CaseStmt" :#3# "CaseStmt")))))) #S(#10# :#1# "clbind::Wrapper<clang::TemplateName,std::unique_ptr<clang::TemplateName,std::default_delete<clang::TemplateName>>>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::TemplateName,std::unique_ptr<clang::TemplateName,std::default_delete<clang::TemplateName>>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::TemplateName" :#3# "TemplateName")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::unique_ptr<clang::TemplateName,std::default_delete<clang::TemplateName>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::TemplateName" :#3# "TemplateName")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::default_delete<clang::TemplateName>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::TemplateName" :#3# "TemplateName"))))))))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCPropertyDecl,clang::ObjCPropertyDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCPropertyDecl,clang::ObjCPropertyDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCPropertyDecl" :#3# "ObjCPropertyDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCPropertyDecl" :#3# "ObjCPropertyDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::DeclRefExpr,clang::DeclRefExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::DeclRefExpr,clang::DeclRefExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::DeclRefExpr" :#3# "DeclRefExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::DeclRefExpr" :#3# "DeclRefExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCMessageExpr,clang::ObjCMessageExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCMessageExpr,clang::ObjCMessageExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCMessageExpr" :#3# "ObjCMessageExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCMessageExpr" :#3# "ObjCMessageExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCCompatibleAliasDecl,clang::ObjCCompatibleAliasDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCCompatibleAliasDecl,clang::ObjCCompatibleAliasDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCCompatibleAliasDecl" :#3# "ObjCCompatibleAliasDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCCompatibleAliasDecl" :#3# "ObjCCompatibleAliasDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCDictionaryLiteral,clang::ObjCDictionaryLiteral *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCDictionaryLiteral,clang::ObjCDictionaryLiteral *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCDictionaryLiteral" :#3# "ObjCDictionaryLiteral")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCDictionaryLiteral" :#3# "ObjCDictionaryLiteral")))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCInterfaceType,clang::ObjCInterfaceType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCInterfaceType,clang::ObjCInterfaceType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCInterfaceType" :#3# "ObjCInterfaceType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCInterfaceType" :#3# "ObjCInterfaceType")))))) #S(#10# :#1# "clbind::Wrapper<clang::TranslationUnitDecl,clang::TranslationUnitDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::TranslationUnitDecl,clang::TranslationUnitDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::TranslationUnitDecl" :#3# "TranslationUnitDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::TranslationUnitDecl" :#3# "TranslationUnitDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::OMPSingleDirective,clang::OMPSingleDirective *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::OMPSingleDirective,clang::OMPSingleDirective *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::OMPSingleDirective" :#3# "OMPSingleDirective")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::OMPSingleDirective" :#3# "OMPSingleDirective")))))) #S(#10# :#1# "clbind::Wrapper<clang::AsTypeExpr,clang::AsTypeExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::AsTypeExpr,clang::AsTypeExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::AsTypeExpr" :#3# "AsTypeExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::AsTypeExpr" :#3# "AsTypeExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::comments::FullComment,clang::comments::FullComment *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::comments::FullComment,clang::comments::FullComment *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::comments::FullComment" :#3# "FullComment")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::comments::FullComment" :#3# "FullComment")))))) #S(#10# :#1# "clbind::Wrapper<clang::VAArgExpr,clang::VAArgExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::VAArgExpr,clang::VAArgExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::VAArgExpr" :#3# "VAArgExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::VAArgExpr" :#3# "VAArgExpr")))))) #S(#10# :#1# "clbind::Wrapper<asttooling::Diagnostics,asttooling::Diagnostics *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<asttooling::Diagnostics,asttooling::Diagnostics *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "asttooling::Diagnostics" :#3# "Diagnostics")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "asttooling::Diagnostics" :#3# "Diagnostics")))))) #S(#10# :#1# "clbind::Wrapper<clang::ReturnStmt,clang::ReturnStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ReturnStmt,clang::ReturnStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ReturnStmt" :#3# "ReturnStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ReturnStmt" :#3# "ReturnStmt")))))) #S(#10# :#1# "clbind::Wrapper<clang::StmtExpr,clang::StmtExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::StmtExpr,clang::StmtExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::StmtExpr" :#3# "StmtExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::StmtExpr" :#3# "StmtExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCAtTryStmt,clang::ObjCAtTryStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCAtTryStmt,clang::ObjCAtTryStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCAtTryStmt" :#3# "ObjCAtTryStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCAtTryStmt" :#3# "ObjCAtTryStmt")))))) #S(#10# :#1# "clbind::Wrapper<clang::OMPSimdDirective,clang::OMPSimdDirective *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::OMPSimdDirective,clang::OMPSimdDirective *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::OMPSimdDirective" :#3# "OMPSimdDirective")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::OMPSimdDirective" :#3# "OMPSimdDirective")))))) #S(#10# :#1# "clbind::Wrapper<clang::DecayedType,clang::DecayedType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::DecayedType,clang::DecayedType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::DecayedType" :#3# "DecayedType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::DecayedType" :#3# "DecayedType")))))) #S(#10# :#1# "clbind::Wrapper<clang::UnaryOperator,clang::UnaryOperator *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::UnaryOperator,clang::UnaryOperator *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::UnaryOperator" :#3# "UnaryOperator")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::UnaryOperator" :#3# "UnaryOperator")))))) #S(#10# :#1# "clbind::Wrapper<clang::ArrayTypeTraitExpr,clang::ArrayTypeTraitExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ArrayTypeTraitExpr,clang::ArrayTypeTraitExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ArrayTypeTraitExpr" :#3# "ArrayTypeTraitExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ArrayTypeTraitExpr" :#3# "ArrayTypeTraitExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::VarTemplateSpecializationDecl,clang::VarTemplateSpecializationDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::VarTemplateSpecializationDecl,clang::VarTemplateSpecializationDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::VarTemplateSpecializationDecl" :#3# "VarTemplateSpecializationDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::VarTemplateSpecializationDecl" :#3# "VarTemplateSpecializationDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::NamespaceAliasDecl,clang::NamespaceAliasDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::NamespaceAliasDecl,clang::NamespaceAliasDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::NamespaceAliasDecl" :#3# "NamespaceAliasDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::NamespaceAliasDecl" :#3# "NamespaceAliasDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCBoolLiteralExpr,clang::ObjCBoolLiteralExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCBoolLiteralExpr,clang::ObjCBoolLiteralExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCBoolLiteralExpr" :#3# "ObjCBoolLiteralExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCBoolLiteralExpr" :#3# "ObjCBoolLiteralExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCCategoryDecl,clang::ObjCCategoryDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCCategoryDecl,clang::ObjCCategoryDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCCategoryDecl" :#3# "ObjCCategoryDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCCategoryDecl" :#3# "ObjCCategoryDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::FunctionTemplateDecl,clang::FunctionTemplateDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::FunctionTemplateDecl,clang::FunctionTemplateDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::FunctionTemplateDecl" :#3# "FunctionTemplateDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::FunctionTemplateDecl" :#3# "FunctionTemplateDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXUnresolvedConstructExpr,clang::CXXUnresolvedConstructExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXUnresolvedConstructExpr,clang::CXXUnresolvedConstructExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXUnresolvedConstructExpr" :#3# "CXXUnresolvedConstructExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXUnresolvedConstructExpr" :#3# "CXXUnresolvedConstructExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::ast_matchers::dynamic::VariantValue,clang::ast_matchers::dynamic::VariantValue *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ast_matchers::dynamic::VariantValue,clang::ast_matchers::dynamic::VariantValue *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ast_matchers::dynamic::VariantValue" :#3# "VariantValue")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ast_matchers::dynamic::VariantValue" :#3# "VariantValue")))))) #S(#10# :#1# "clbind::Wrapper<clang::MSDependentExistsStmt,clang::MSDependentExistsStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::MSDependentExistsStmt,clang::MSDependentExistsStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::MSDependentExistsStmt" :#3# "MSDependentExistsStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::MSDependentExistsStmt" :#3# "MSDependentExistsStmt")))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCMethodDecl,clang::ObjCMethodDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCMethodDecl,clang::ObjCMethodDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCMethodDecl" :#3# "ObjCMethodDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCMethodDecl" :#3# "ObjCMethodDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::ASTContext,clang::ASTContext *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ASTContext,clang::ASTContext *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ASTContext" :#3# "ASTContext")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ASTContext" :#3# "ASTContext")))))) #S(#10# :#1# "clbind::Wrapper<clang::ClassTemplateDecl,clang::ClassTemplateDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ClassTemplateDecl,clang::ClassTemplateDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ClassTemplateDecl" :#3# "ClassTemplateDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ClassTemplateDecl" :#3# "ClassTemplateDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCImplementationDecl,clang::ObjCImplementationDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCImplementationDecl,clang::ObjCImplementationDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCImplementationDecl" :#3# "ObjCImplementationDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCImplementationDecl" :#3# "ObjCImplementationDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::VarTemplateDecl,clang::VarTemplateDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::VarTemplateDecl,clang::VarTemplateDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::VarTemplateDecl" :#3# "VarTemplateDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::VarTemplateDecl" :#3# "VarTemplateDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::TemplateTypeParmType,clang::TemplateTypeParmType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::TemplateTypeParmType,clang::TemplateTypeParmType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::TemplateTypeParmType" :#3# "TemplateTypeParmType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::TemplateTypeParmType" :#3# "TemplateTypeParmType")))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXDynamicCastExpr,clang::CXXDynamicCastExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXDynamicCastExpr,clang::CXXDynamicCastExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXDynamicCastExpr" :#3# "CXXDynamicCastExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXDynamicCastExpr" :#3# "CXXDynamicCastExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::DefaultStmt,clang::DefaultStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::DefaultStmt,clang::DefaultStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::DefaultStmt" :#3# "DefaultStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::DefaultStmt" :#3# "DefaultStmt")))))) #S(#10# :#1# "clbind::Wrapper<clang::ChooseExpr,clang::ChooseExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ChooseExpr,clang::ChooseExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ChooseExpr" :#3# "ChooseExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ChooseExpr" :#3# "ChooseExpr")))))) #S(#10# :#1# "clbind::Wrapper<asttooling::ParserValue,asttooling::ParserValue *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<asttooling::ParserValue,asttooling::ParserValue *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "asttooling::ParserValue" :#3# "ParserValue")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "asttooling::ParserValue" :#3# "ParserValue")))))) #S(#10# :#1# "clbind::Wrapper<clang::UnresolvedUsingType,clang::UnresolvedUsingType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::UnresolvedUsingType,clang::UnresolvedUsingType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::UnresolvedUsingType" :#3# "UnresolvedUsingType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::UnresolvedUsingType" :#3# "UnresolvedUsingType")))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCAtCatchStmt,clang::ObjCAtCatchStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCAtCatchStmt,clang::ObjCAtCatchStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCAtCatchStmt" :#3# "ObjCAtCatchStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCAtCatchStmt" :#3# "ObjCAtCatchStmt")))))) #S(#10# :#1# "clbind::Wrapper<clang::BlockDecl,clang::BlockDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::BlockDecl,clang::BlockDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::BlockDecl" :#3# "BlockDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::BlockDecl" :#3# "BlockDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::SourceLocation,std::unique_ptr<clang::SourceLocation,std::default_delete<clang::SourceLocation>>>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::SourceLocation,std::unique_ptr<clang::SourceLocation,std::default_delete<clang::SourceLocation>>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::SourceLocation" :#3# "SourceLocation")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::unique_ptr<clang::SourceLocation,std::default_delete<clang::SourceLocation>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::SourceLocation" :#3# "SourceLocation")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::default_delete<clang::SourceLocation>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::SourceLocation" :#3# "SourceLocation"))))))))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXTemporaryObjectExpr,clang::CXXTemporaryObjectExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXTemporaryObjectExpr,clang::CXXTemporaryObjectExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXTemporaryObjectExpr" :#3# "CXXTemporaryObjectExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXTemporaryObjectExpr" :#3# "CXXTemporaryObjectExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::ClassTemplatePartialSpecializationDecl,clang::ClassTemplatePartialSpecializationDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ClassTemplatePartialSpecializationDecl,clang::ClassTemplatePartialSpecializationDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ClassTemplatePartialSpecializationDecl" :#3# "ClassTemplatePartialSpecializationDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ClassTemplatePartialSpecializationDecl" :#3# "ClassTemplatePartialSpecializationDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::ForStmt,clang::ForStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ForStmt,clang::ForStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ForStmt" :#3# "ForStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ForStmt" :#3# "ForStmt")))))) #S(#10# :#1# "clbind::Wrapper<clang::CapturedStmt,clang::CapturedStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CapturedStmt,clang::CapturedStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CapturedStmt" :#3# "CapturedStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CapturedStmt" :#3# "CapturedStmt")))))) #S(#10# :#1# "clbind::Wrapper<clang::FriendDecl,clang::FriendDecl *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::FriendDecl,clang::FriendDecl *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::FriendDecl" :#3# "FriendDecl")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::FriendDecl" :#3# "FriendDecl")))))) #S(#10# :#1# "clbind::Wrapper<clang::ast_matchers::internal::DynTypedMatcher,clang::ast_matchers::internal::DynTypedMatcher *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ast_matchers::internal::DynTypedMatcher,clang::ast_matchers::internal::DynTypedMatcher *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ast_matchers::internal::DynTypedMatcher" :#3# "DynTypedMatcher")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ast_matchers::internal::DynTypedMatcher" :#3# "DynTypedMatcher")))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCAtSynchronizedStmt,clang::ObjCAtSynchronizedStmt *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCAtSynchronizedStmt,clang::ObjCAtSynchronizedStmt *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCAtSynchronizedStmt" :#3# "ObjCAtSynchronizedStmt")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCAtSynchronizedStmt" :#3# "ObjCAtSynchronizedStmt")))))) #S(#10# :#1# "clbind::Wrapper<clang::BlockExpr,clang::BlockExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::BlockExpr,clang::BlockExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::BlockExpr" :#3# "BlockExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::BlockExpr" :#3# "BlockExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::FunctionParmPackExpr,clang::FunctionParmPackExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::FunctionParmPackExpr,clang::FunctionParmPackExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::FunctionParmPackExpr" :#3# "FunctionParmPackExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::FunctionParmPackExpr" :#3# "FunctionParmPackExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::DependentSizedArrayType,clang::DependentSizedArrayType *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::DependentSizedArrayType,clang::DependentSizedArrayType *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::DependentSizedArrayType" :#3# "DependentSizedArrayType")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::DependentSizedArrayType" :#3# "DependentSizedArrayType")))))) #S(#10# :#1# "clbind::Wrapper<clang::tooling::Range,std::unique_ptr<clang::tooling::Range,std::default_delete<clang::tooling::Range>>>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::tooling::Range,std::unique_ptr<clang::tooling::Range,std::default_delete<clang::tooling::Range>>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::tooling::Range" :#3# "Range")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::unique_ptr<clang::tooling::Range,std::default_delete<clang::tooling::Range>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::tooling::Range" :#3# "Range")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::default_delete<clang::tooling::Range>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::tooling::Range" :#3# "Range"))))))))))) #S(#10# :#1# "clbind::Wrapper<clang::ObjCIvarRefExpr,clang::ObjCIvarRefExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::ObjCIvarRefExpr,clang::ObjCIvarRefExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ObjCIvarRefExpr" :#3# "ObjCIvarRefExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::ObjCIvarRefExpr" :#3# "ObjCIvarRefExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::CXXNullPtrLiteralExpr,clang::CXXNullPtrLiteralExpr *>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::CXXNullPtrLiteralExpr,clang::CXXNullPtrLiteralExpr *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CXXNullPtrLiteralExpr" :#3# "CXXNullPtrLiteralExpr")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CXXNullPtrLiteralExpr" :#3# "CXXNullPtrLiteralExpr")))))) #S(#10# :#1# "clbind::Wrapper<clang::tooling::JSONCompilationDatabase,std::unique_ptr<clang::tooling::JSONCompilationDatabase,std::default_delete<clang::tooling::JSONCompilationDatabase>>>" :#3# "Wrapper" :#5# "/home/meister/Development/clasp/src/clbind/clbind_wrappers.h:107:5" :#6# #S(#11# :#1# "clbind::Wrapper<clang::tooling::JSONCompilationDatabase,std::unique_ptr<clang::tooling::JSONCompilationDatabase,std::default_delete<clang::tooling::JSONCompilationDatabase>>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::tooling::JSONCompilationDatabase" :#3# "JSONCompilationDatabase")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::unique_ptr<clang::tooling::JSONCompilationDatabase,std::default_delete<clang::tooling::JSONCompilationDatabase>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::tooling::JSONCompilationDatabase" :#3# "JSONCompilationDatabase")) #S(#13# :#9# 1 :#6# #S(#11# :#1# "std::default_delete<clang::tooling::JSONCompilationDatabase>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::tooling::JSONCompilationDatabase" :#3# "JSONCompilationDatabase")))))))))))))
template <> class gctools::GCKind<core::WrappedPointer_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_TEMPLATED_LISPALLOC_core__WrappedPointer_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::ResumeInst_O" :#3=NAME "KIND_LISPALLOC_llvmo__ResumeInst_O" :VALUE 181 :#4=CCLASS #S(#4# :#1# "llvmo::ResumeInst_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2715:1" :BASES ("llvmo::TerminatorInst_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "ResumeInst_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2715:1" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::ResumeInst_O" :#3# "ResumeInst_O")))
template <> class gctools::GCKind<llvmo::ResumeInst_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__ResumeInst_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>" :#3=NAME "KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__" :VALUE 248 :#4=CCLASS #S(#4# :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>" :TEMPLATE-SPECIALIZER T :#5=LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Data" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:48:9" :#8=CTYPE #S(CONSTANT-ARRAY-CTYPE :#1# NIL :ELEMENT-TYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Package_O>" :#10=SPECIALIZER "class core::Package_O"))) #S(#6# :#7# "_End" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:47:9" :#8# #S(#11=UNCLASSIFIED-CTYPE :#1# "unsigned long")) #S(#6# :#7# "_Capacity" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:46:9" :#8# #S(#11# :#1# "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" #12="NO-NAME" #12# "capacity" "size" "data" #12# #12# #12#) :METADATA NIL) :#13=SPECIES #S(#13# :#3# :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :DUMP DUMPER-FOR-GCCONTAINER :#14=INDEX 3) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CONTAINERALLOC :#1# #2# :#3# "GCVector_moveable" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#8# #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>" :#3# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#14# 0 :#8# #S(#9# :#1# "gctools::smart_ptr<core::Package_O>" :#10# "class core::Package_O"))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__ ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::WeakHashTable_O" :#3=NAME "KIND_LISPALLOC_core__WeakHashTable_O" :VALUE 209 :#4=CCLASS #S(#4# :#1# "core::WeakHashTable_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/weakHashTable.h:41:5" :BASES ("core::T_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("core::WeakKeyHashTable_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "WeakHashTable_O" :#5# "/home/meister/Development/clasp/src/core/weakHashTable.h:41:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::WeakHashTable_O" :#3# "WeakHashTable_O")))
template <> class gctools::GCKind<core::WeakHashTable_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__WeakHashTable_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::FunctionContainerEnvironment_O" :#3=NAME "KIND_LISPALLOC_core__FunctionContainerEnvironment_O" :VALUE 36 :#4=CCLASS #S(#4# :#1# "core::FunctionContainerEnvironment_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/environment.h:682:5" :BASES ("core::CompileTimeEnvironment_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "countFunctionContainerEnvironments" "find_current_code_environment" "summaryOfContents" "make" "create" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "FunctionContainerEnvironment_O" :#5# "/home/meister/Development/clasp/src/core/environment.h:682:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::FunctionContainerEnvironment_O" :#3# "FunctionContainerEnvironment_O")))
template <> class gctools::GCKind<core::FunctionContainerEnvironment_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__FunctionContainerEnvironment_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::LLVMContext_O" :#3=NAME "KIND_LISPALLOC_llvmo__LLVMContext_O" :VALUE 200 :#4=CCLASS #S(#4# :#1# "llvmo::LLVMContext_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:80:5" :BASES ("core::ExternalObject_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_ptr" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:87:2" :#6=CTYPE #S(POINTER-CTYPE :#1# NIL :POINTEE #S(#7=CXXRECORD-CTYPE :#1# "llvm::LLVMContext" :#3# "LLVMContext")))) :METHOD-NAMES (#8="NO-NAME" #8# #8# #8# "get_global_context" "set_wrapped" "wrappedPtr" "externalObject" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#9=SPECIES #S(#9# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "LLVMContext_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:80:5" :#6# #S(#7# :#1# "llvmo::LLVMContext_O" :#3# "LLVMContext_O")))
template <> class gctools::GCKind<llvmo::LLVMContext_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__LLVMContext_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::TargetMachine_O" :#3=NAME "KIND_LISPALLOC_llvmo__TargetMachine_O" :VALUE 199 :#4=CCLASS #S(#4# :#1# "llvmo::TargetMachine_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:242:5" :BASES ("core::ExternalObject_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_ptr" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:249:2" :#6=CTYPE #S(POINTER-CTYPE :#1# NIL :POINTEE #S(#7=CXXRECORD-CTYPE :#1# "llvm::TargetMachine" :#3# "TargetMachine")))) :METHOD-NAMES (#8="NO-NAME" #8# #8# #8# "set_wrapped" "wrappedPtr" "externalObject" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#9=SPECIES #S(#9# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "TargetMachine_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:242:5" :#6# #S(#7# :#1# "llvmo::TargetMachine_O" :#3# "TargetMachine_O")))
template <> class gctools::GCKind<llvmo::TargetMachine_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__TargetMachine_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::Rational_O" :#3=NAME "KIND_LISPALLOC_core__Rational_O" :VALUE 106 :#4=CCLASS #S(#4# :#1# "core::Rational_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/numbers.h:178:5" :BASES ("core::Real_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "tanh" "cosh" "sinh" "tan" "cos" "sin" "exp" "sqrt" "log1p" "log1" "as_int" "create" "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("core::Ratio_O" "core::Integer_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Rational_O" :#5# "/home/meister/Development/clasp/src/core/numbers.h:178:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::Rational_O" :#3# "Rational_O")))
template <> class gctools::GCKind<core::Rational_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Rational_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::StringInputStream_O" :#3=NAME "KIND_LISPALLOC_core__StringInputStream_O" :VALUE 23 :#4=CCLASS #S(#4# :#1# "core::StringInputStream_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/lispStream.h:542:5" :BASES ("core::StringStream_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_InputLimit" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:559:9" :#8=CTYPE #S(#9=UNCLASSIFIED-CTYPE :#1# "int")) #S(#6# :#7# "_InputPosition" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:558:9" :#8# #S(#9# :#1# "int")) #S(#6# :#7# "_Contents" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:557:9" :#8# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Str_O>" :SPECIALIZER "class core::Str_O"))) :METHOD-NAMES (#10="NO-NAME" #10# "make" #10# #10# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#11=SPECIES #S(#11# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "StringInputStream_O" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:542:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::StringInputStream_O" :#3# "StringInputStream_O")))
template <> class gctools::GCKind<core::StringInputStream_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__StringInputStream_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::ImmutablePass_O" :#3=NAME "KIND_LISPALLOC_llvmo__ImmutablePass_O" :VALUE 134 :#4=CCLASS #S(#4# :#1# "llvmo::ImmutablePass_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:397:1" :BASES ("llvmo::ModulePass_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("llvmo::DataLayoutPass_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "ImmutablePass_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:397:1" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::ImmutablePass_O" :#3# "ImmutablePass_O")))
template <> class gctools::GCKind<llvmo::ImmutablePass_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__ImmutablePass_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::Value_O" :#3=NAME "KIND_LISPALLOC_llvmo__Value_O" :VALUE 159 :#4=CCLASS #S(#4# :#1# "llvmo::Value_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:512:5" :BASES ("core::ExternalObject_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_ptr" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:519:2" :#6=CTYPE #S(POINTER-CTYPE :#1# NIL :POINTEE #S(#7=CXXRECORD-CTYPE :#1# "llvm::Value" :#3# "Value")))) :METHOD-NAMES (#8="NO-NAME" #8# "valid" "__repr__" "llvm_sys_value_p" #8# #8# "create" "set_wrapped" "wrappedPtr" "externalObject" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#9=SPECIES #S(#9# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("llvmo::Argument_O" "llvmo::MDString_O" "llvmo::MDNode_O" "llvmo::BasicBlock_O" "llvmo::User_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Value_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:512:5" :#6# #S(#7# :#1# "llvmo::Value_O" :#3# "Value_O")))
template <> class gctools::GCKind<llvmo::Value_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__Value_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::DIDerivedType_O" :#3=NAME "KIND_LISPALLOC_llvmo__DIDerivedType_O" :VALUE 65 :#4=CCLASS #S(#4# :#1# "llvmo::DIDerivedType_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/debugInfoExpose.h:445:5" :BASES ("llvm::DIDerivedType" "llvmo::DebugInfo_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# #6# #6# #6# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "DIDerivedType_O" :#5# "/home/meister/Development/clasp/src/llvmo/debugInfoExpose.h:445:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::DIDerivedType_O" :#3# "DIDerivedType_O")))
template <> class gctools::GCKind<llvmo::DIDerivedType_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__DIDerivedType_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::GlobalVariable_O" :#3=NAME "KIND_LISPALLOC_llvmo__GlobalVariable_O" :VALUE 195 :#4=CCLASS #S(#4# :#1# "llvmo::GlobalVariable_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1077:5" :BASES ("llvmo::GlobalValue_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "set_wrapped" "wrappedPtr" "make" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "GlobalVariable_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1077:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::GlobalVariable_O" :#3# "GlobalVariable_O")))
template <> class gctools::GCKind<llvmo::GlobalVariable_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__GlobalVariable_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::LeafSNode_O" :#3=NAME "KIND_LISPALLOC_core__LeafSNode_O" :VALUE 205 :#4=CCLASS #S(#4# :#1# "core::LeafSNode_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/serialize.h:487:5" :BASES ("core::SNode_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Object" :#5# "/home/meister/Development/clasp/src/core/serialize.h:492:2" :#6=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O"))) :METHOD-NAMES (#7="NO-NAME" #7# #7# #7# "setAttributesUnsafe" "setKind" "__repr__" "keys" "object" "getAttribute" "getAttributes" "addAttribute" "getKind" "leafSNodeP" "noAttributes" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "LeafSNode_O" :#5# "/home/meister/Development/clasp/src/core/serialize.h:487:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::LeafSNode_O" :#3# "LeafSNode_O")))
template <> class gctools::GCKind<core::LeafSNode_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__LeafSNode_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::PassManager_O" :#3=NAME "KIND_LISPALLOC_llvmo__PassManager_O" :VALUE 146 :#4=CCLASS #S(#4# :#1# "llvmo::PassManager_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1538:5" :BASES ("llvmo::PassManagerBase_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "set_wrapped" "wrappedPtr" "make" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "PassManager_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1538:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::PassManager_O" :#3# "PassManager_O")))
template <> class gctools::GCKind<llvmo::PassManager_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__PassManager_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="clbind::detail::class_map" :#3=NAME "KIND_ROOTCLASSALLOC_clbind__detail__class_map" :VALUE 10 :#4=CCLASS #S(#4# :#1# "clbind::detail::class_map" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/clbind/inheritance.h:130:9" :BASES NIL :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "m_classes" :#5# "/home/meister/Development/clasp/src/clbind/inheritance.h:139:13" :#6=CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "gctools::Vec0<gctools::smart_ptr<clbind::ClassRep_O>>" :#3# NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#7=INDEX 0 :#6# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<clbind::ClassRep_O>" :SPECIALIZER "class clbind::ClassRep_O")))))) :METHOD-NAMES (#8="NO-NAME" #8# "put" "get") :METADATA NIL) :#9=SPECIES #S(#9# :#3# :ROOTCLASSALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#7# 7) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(ROOTCLASSALLOC :#1# #2# :#3# "class_map" :#5# "/home/meister/Development/clasp/src/clbind/inheritance.h:130:9" :#6# #S(CXXRECORD-CTYPE :#1# "clbind::detail::class_map" :#3# "class_map")))
template <> class gctools::GCKind<clbind::detail::class_map> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_ROOTCLASSALLOC_clbind__detail__class_map ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::LightUserData_O" :#3=NAME "KIND_LISPALLOC_core__LightUserData_O" :VALUE 207 :#4=CCLASS #S(#4# :#1# "core::LightUserData_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/userData.h:39:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_ptr" :#5# "/home/meister/Development/clasp/src/core/userData.h:44:9" :#6=CTYPE #S(POINTER-CTYPE :#1# NIL :POINTEE #S(UNCLASSIFIED-CTYPE :#1# "void")))) :METHOD-NAMES (#7="NO-NAME" #7# #7# #7# "ptr" "eq" "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("core::UserData_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "LightUserData_O" :#5# "/home/meister/Development/clasp/src/core/userData.h:39:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::LightUserData_O" :#3# "LightUserData_O")))
template <> class gctools::GCKind<core::LightUserData_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__LightUserData_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="gctools::GCVector_moveable<asttooling::ErrorContent>" :#3=NAME "KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ErrorContent_" :VALUE 249 :#4=CCLASS #S(#4# :#1# "gctools::GCVector_moveable<asttooling::ErrorContent>" :TEMPLATE-SPECIALIZER T :#5=LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Data" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:48:9" :#8=CTYPE #S(CONSTANT-ARRAY-CTYPE :#1# NIL :ELEMENT-TYPE #S(#9=CXXRECORD-CTYPE :#1# "asttooling::ErrorContent" :#3# "ErrorContent"))) #S(#6# :#7# "_End" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:47:9" :#8# #S(#10=UNCLASSIFIED-CTYPE :#1# "unsigned long")) #S(#6# :#7# "_Capacity" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:46:9" :#8# #S(#10# :#1# "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" #11="NO-NAME" #11# "capacity" "size" "data" #11# #11# #11#) :METADATA NIL) :#12=SPECIES #S(#12# :#3# :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :DUMP DUMPER-FOR-GCCONTAINER :#13=INDEX 3) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CONTAINERALLOC :#1# #2# :#3# "GCVector_moveable" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#8# #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::ErrorContent>" :#3# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#13# 0 :#8# #S(#9# :#1# "asttooling::ErrorContent" :#3# "ErrorContent"))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<asttooling::ErrorContent>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ErrorContent_ ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::FunctionType_O" :#3=NAME "KIND_LISPALLOC_llvmo__FunctionType_O" :VALUE 157 :#4=CCLASS #S(#4# :#1# "llvmo::FunctionType_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3600:5" :BASES ("llvmo::Type_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "get" #6# #6# "set_wrapped" "wrapped" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "FunctionType_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3600:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::FunctionType_O" :#3# "FunctionType_O")))
template <> class gctools::GCKind<llvmo::FunctionType_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__FunctionType_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::DICompileUnit_O" :#3=NAME "KIND_LISPALLOC_llvmo__DICompileUnit_O" :VALUE 64 :#4=CCLASS #S(#4# :#1# "llvmo::DICompileUnit_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/debugInfoExpose.h:701:5" :BASES ("llvm::DICompileUnit" "llvmo::DebugInfo_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# #6# #6# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "DICompileUnit_O" :#5# "/home/meister/Development/clasp/src/llvmo/debugInfoExpose.h:701:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::DICompileUnit_O" :#3# "DICompileUnit_O")))
template <> class gctools::GCKind<llvmo::DICompileUnit_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__DICompileUnit_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::Linker_O" :#3=NAME "KIND_LISPALLOC_llvmo__Linker_O" :VALUE 158 :#4=CCLASS #S(#4# :#1# "llvmo::Linker_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:132:5" :BASES ("core::ExternalObject_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_ptr" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:139:2" :#6=CTYPE #S(POINTER-CTYPE :#1# NIL :POINTEE #S(#7=CXXRECORD-CTYPE :#1# "llvm::Linker" :#3# "Linker")))) :METHOD-NAMES (#8="NO-NAME" #8# #8# #8# "set_wrapped" "wrappedPtr" "externalObject" "make" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#9=SPECIES #S(#9# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Linker_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:132:5" :#6# #S(#7# :#1# "llvmo::Linker_O" :#3# "Linker_O")))
template <> class gctools::GCKind<llvmo::Linker_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__Linker_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::BranchInst_O" :#3=NAME "KIND_LISPALLOC_llvmo__BranchInst_O" :VALUE 180 :#4=CCLASS #S(#4# :#1# "llvmo::BranchInst_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2521:1" :BASES ("llvmo::TerminatorInst_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "BranchInst_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2521:1" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::BranchInst_O" :#3# "BranchInst_O")))
template <> class gctools::GCKind<llvmo::BranchInst_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__BranchInst_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::Constant_O" :#3=NAME "KIND_LISPALLOC_llvmo__Constant_O" :VALUE 185 :#4=CCLASS #S(#4# :#1# "llvmo::Constant_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:811:5" :BASES ("llvmo::User_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "create" "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("llvmo::ConstantDataSequential_O" "llvmo::ConstantStruct_O" "llvmo::BlockAddress_O" "llvmo::ConstantPointerNull_O" "llvmo::ConstantArray_O" "llvmo::ConstantFP_O" "llvmo::GlobalValue_O" "llvmo::ConstantExpr_O" "llvmo::UndefValue_O" "llvmo::ConstantInt_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Constant_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:811:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::Constant_O" :#3# "Constant_O")))
template <> class gctools::GCKind<llvmo::Constant_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__Constant_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::ReturnInst_O" :#3=NAME "KIND_LISPALLOC_llvmo__ReturnInst_O" :VALUE 179 :#4=CCLASS #S(#4# :#1# "llvmo::ReturnInst_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2811:1" :BASES ("llvmo::TerminatorInst_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "ReturnInst_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2811:1" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::ReturnInst_O" :#3# "ReturnInst_O")))
template <> class gctools::GCKind<llvmo::ReturnInst_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__ReturnInst_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::LexicalEnvironment_O" :#3=NAME "KIND_LISPALLOC_core__LexicalEnvironment_O" :VALUE 31 :#4=CCLASS #S(#4# :#1# "core::LexicalEnvironment_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/environment.h:242:5" :BASES ("core::Environment_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Metadata" :#5# "/home/meister/Development/clasp/src/core/environment.h:251:2" :#8=CTYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::HashTableEq_O>" :#10=SPECIALIZER "class core::HashTableEq_O")) #S(#6# :#7# "_ParentEnvironment" :#5# "/home/meister/Development/clasp/src/core/environment.h:248:6" :#8# #S(#9# :#1# "gctools::smart_ptr<core::Environment_O>" :#10# "class core::Environment_O"))) :METHOD-NAMES (#11="NO-NAME" #11# "lookupMetadata" "localMetadata" "push_metadata" "gather_metadata" "setf_metadata" "summaryOfContents" "getParentEnvironment" "setupParent" #11# #11# "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#12=SPECIES #S(#12# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("core::CompileTimeEnvironment_O" "core::RuntimeVisibleEnvironment_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "LexicalEnvironment_O" :#5# "/home/meister/Development/clasp/src/core/environment.h:242:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::LexicalEnvironment_O" :#3# "LexicalEnvironment_O")))
template <> class gctools::GCKind<core::LexicalEnvironment_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__LexicalEnvironment_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::LoadTimeValues_O" :#3=NAME "KIND_LISPALLOC_core__LoadTimeValues_O" :VALUE 206 :#4=CCLASS #S(#4# :#1# "core::LoadTimeValues_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/loadTimeValues.h:39:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Symbols" :#5# "/home/meister/Development/clasp/src/core/loadTimeValues.h:54:9" :#8=CTYPE #S(#9=CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "gctools::Vec0<gctools::smart_ptr<core::Symbol_O>>" :#3# NIL :#10=ARGUMENTS (#S(#11=GC-TEMPLATE-ARGUMENT :#12=INDEX 0 :#8# #S(#13=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Symbol_O>" :#14=SPECIALIZER "class core::Symbol_O"))))) #S(#6# :#7# "_Objects" :#5# "/home/meister/Development/clasp/src/core/loadTimeValues.h:53:9" :#8# #S(#9# :#1# "gctools::Vec0<gctools::smart_ptr<core::T_O>>" :#3# NIL :#10# (#S(#11# :#12# 0 :#8# #S(#13# :#1# "gctools::smart_ptr<core::T_O>" :#14# "class core::T_O")))))) :METHOD-NAMES (#15="NO-NAME" #15# "symbols_vectorPushExtend" "symbols_element" "symbols_setFillPointer" "data_vectorPushExtend" "data_element" "dump" "numberOfSymbols" "numberOfValues" "make" #15# #15# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#16=SPECIES #S(#16# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#12# 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "LoadTimeValues_O" :#5# "/home/meister/Development/clasp/src/core/loadTimeValues.h:39:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::LoadTimeValues_O" :#3# "LoadTimeValues_O")))
template <> class gctools::GCKind<core::LoadTimeValues_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__LoadTimeValues_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::Function_O" :#3=NAME "KIND_LISPALLOC_llvmo__Function_O" :VALUE 194 :#4=CCLASS #S(#4# :#1# "llvmo::Function_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3284:5" :BASES ("llvmo::GlobalValue_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_RunTimeValues" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3291:2" :#6=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::LoadTimeValues_O>" :SPECIALIZER "class core::LoadTimeValues_O"))) :METHOD-NAMES (#7="NO-NAME" #7# "appendBasicBlock" "getArgumentList" #7# #7# "set_wrapped" "wrappedPtr" "wrappedPtr" "literals" "setLiterals" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Function_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3284:5" :#6# #S(CXXRECORD-CTYPE :#1# "llvmo::Function_O" :#3# "Function_O")))
template <> class gctools::GCKind<llvmo::Function_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__Function_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::SNode_O" :#3=NAME "KIND_LISPALLOC_core__SNode_O" :VALUE 203 :#4=CCLASS #S(#4# :#1# "core::SNode_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/serialize.h:55:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_RefCount" :#5# "/home/meister/Development/clasp/src/core/serialize.h:62:2" :#6=CTYPE #S(UNCLASSIFIED-CTYPE :#1# "int"))) :METHOD-NAMES (#7="NO-NAME" #7# #7# #7# "vector" "archiveObject" "archiveObject" "pushVector" "pushVectorSNode" "saveVector" "setAttributesUnsafe" "setVectorSNodesUnsafe" "setKind" "needsFinalization" "mapVector" "mapVectorSNodes" "loadVector" "vectorSize" #7# "getVectorSNodes" "childWithUniqueId" "getUniqueId" "addAttribute" "addAttributeSNode" "getAttributes" "loadVectorSNodes" "getKind" "getAttributeOrError" "getAttribute" "getAttributeSNodeOrError" "getAttributeSNode" "refCount" "incRefCount" "keys" "object" "loading" "saving" "leafSNodeP" "archiveBase" "createObject" "makeAppropriateSNode" "createBranchSNode" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("core::BranchSNode_O" "core::LeafSNode_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "SNode_O" :#5# "/home/meister/Development/clasp/src/core/serialize.h:55:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::SNode_O" :#3# "SNode_O")))
template <> class gctools::GCKind<core::SNode_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__SNode_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::ExternalObject_O" :#3=NAME "KIND_LISPALLOC_core__ExternalObject_O" :VALUE 130 :#4=CCLASS #S(#4# :#1# "core::ExternalObject_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/externalObject.h:63:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Class" :#5# "/home/meister/Development/clasp/src/core/externalObject.h:68:9" :#6=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Class_O>" :SPECIALIZER "class core::Class_O"))) :METHOD-NAMES (#7="NO-NAME" #7# #7# #7# "set_externalObject" "externalObject" "isUndefined" "eq" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("llvmo::Pass_O" "llvmo::IRBuilderBase_O" "llvmo::DIBuilder_O" "llvmo::ExecutionEngine_O" "llvmo::EngineBuilder_O" "llvmo::APInt_O" "llvmo::APFloat_O" "core::ForeignData_O" "llvmo::PassManagerBuilder_O" "llvmo::PassManagerBase_O" "llvmo::DataLayout_O" "llvmo::Type_O" "llvmo::Linker_O" "llvmo::Value_O" "llvmo::TargetMachine_O" "llvmo::LLVMContext_O" "llvmo::Module_O" "llvmo::NamedMDNode_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "ExternalObject_O" :#5# "/home/meister/Development/clasp/src/core/externalObject.h:63:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::ExternalObject_O" :#3# "ExternalObject_O")))
template <> class gctools::GCKind<core::ExternalObject_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__ExternalObject_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>" :#3=NAME "KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__" :VALUE 250 :#4=CCLASS #S(#4# :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>" :TEMPLATE-SPECIALIZER T :#5=LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Data" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:48:9" :#8=CTYPE #S(CONSTANT-ARRAY-CTYPE :#1# NIL :ELEMENT-TYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :#10=SPECIALIZER "class core::T_O"))) #S(#6# :#7# "_End" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:47:9" :#8# #S(#11=UNCLASSIFIED-CTYPE :#1# "unsigned long")) #S(#6# :#7# "_Capacity" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:46:9" :#8# #S(#11# :#1# "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" #12="NO-NAME" #12# "capacity" "size" "data" #12# #12# #12#) :METADATA NIL) :#13=SPECIES #S(#13# :#3# :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :DUMP DUMPER-FOR-GCCONTAINER :#14=INDEX 3) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CONTAINERALLOC :#1# #2# :#3# "GCVector_moveable" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#8# #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>" :#3# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#14# 0 :#8# #S(#9# :#1# "gctools::smart_ptr<core::T_O>" :#10# "class core::T_O"))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__ ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::SourceManager_O" :#3=NAME "KIND_LISPALLOC_core__SourceManager_O" :VALUE 129 :#4=CCLASS #S(#4# :#1# "core::SourceManager_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/sourceFileInfo.h:125:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_SourcePosInfo" :#5# "/home/meister/Development/clasp/src/core/sourceFileInfo.h:137:9" :#6=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::HashTableEq_O>" :SPECIALIZER "class core::HashTableEq_O"))) :METHOD-NAMES (#7="NO-NAME" #7# "lookupSourcePosInfo" "lookupSourceInfo" "duplicateSourceInfoForMacroExpansion" "duplicateSourceInfo" "searchForSourceInfoAndDuplicateIt" "registerSourceInfoFromStream" "registerSourceInfo" "availablep" #7# #7# "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "SourceManager_O" :#5# "/home/meister/Development/clasp/src/core/sourceFileInfo.h:125:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::SourceManager_O" :#3# "SourceManager_O")))
template <> class gctools::GCKind<core::SourceManager_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__SourceManager_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::StructType_O" :#3=NAME "KIND_LISPALLOC_llvmo__StructType_O" :VALUE 155 :#4=CCLASS #S(#4# :#1# "llvmo::StructType_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3759:5" :BASES ("llvmo::CompositeType_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "setBody" "get" "make" #6# #6# "set_wrapped" "wrapped" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "StructType_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3759:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::StructType_O" :#3# "StructType_O")))
template <> class gctools::GCKind<llvmo::StructType_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__StructType_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="asttooling::DerivableSyntaxOnlyAction" :#3=NAME "KIND_LISPALLOC_asttooling__DerivableSyntaxOnlyAction" :VALUE 251 :#4=CCLASS #S(#4# :#1# "asttooling::DerivableSyntaxOnlyAction" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/asttooling/clangTooling.h:129:5" :BASES ("clbind::Derivable<clang::SyntaxOnlyAction>") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# #6# #6# "ExecuteAction" "default_CreateASTConsumer" "CreateASTConsumer") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(LISPALLOC :#1# #2# :#3# "DerivableSyntaxOnlyAction" :#5# "/home/meister/Development/clasp/src/asttooling/clangTooling.h:129:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "asttooling::DerivableSyntaxOnlyAction" :#3# "DerivableSyntaxOnlyAction")))
template <> class gctools::GCKind<asttooling::DerivableSyntaxOnlyAction> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_asttooling__DerivableSyntaxOnlyAction ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::StandardChar_O" :#3=NAME "KIND_LISPALLOC_core__StandardChar_O" :VALUE 85 :#4=CCLASS #S(#4# :#1# "core::StandardChar_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/character.h:131:5" :BASES ("core::BaseChar_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Value" :#5# "/home/meister/Development/clasp/src/core/character.h:143:2" :#6=CTYPE #S(UNCLASSIFIED-CTYPE :#1# "unsigned char"))) :METHOD-NAMES (#7="NO-NAME" #7# #7# #7# "graphicCharP" "alphanumericp" "alpha_char_p" "both_case_p" "lower_case_p" "upper_case_p" "char_downcase" "char_upcase" "toInt" "setFromString" "valueAsString" #7# #7# #7# #7# "eql" "eqn" #7# #7# #7# #7# #7# "increment" "set" "__repr__" "deepCopy" "sxhash" "get" "asChar" "create_from_name" "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "StandardChar_O" :#5# "/home/meister/Development/clasp/src/core/character.h:131:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::StandardChar_O" :#3# "StandardChar_O")))
template <> class gctools::GCKind<core::StandardChar_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__StandardChar_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::Null_O" :#3=NAME "KIND_LISPALLOC_core__Null_O" :VALUE 225 :#4=CCLASS #S(#4# :#1# "core::Null_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/null.h:39:5" :BASES ("core::Symbol_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "__repr__" "initialize" #6# #6# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Null_O" :#5# "/home/meister/Development/clasp/src/core/null.h:39:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::Null_O" :#3# "Null_O")))
template <> class gctools::GCKind<core::Null_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Null_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::User_O" :#3=NAME "KIND_LISPALLOC_llvmo__User_O" :VALUE 164 :#4=CCLASS #S(#4# :#1# "llvmo::User_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:602:1" :BASES ("llvmo::Value_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("llvmo::Instruction_O" "llvmo::Constant_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "User_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:602:1" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::User_O" :#3# "User_O")))
template <> class gctools::GCKind<llvmo::User_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__User_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::InsertPoint_O" :#3=NAME "KIND_LISPALLOC_llvmo__InsertPoint_O" :VALUE 128 :#4=CCLASS #S(#4# :#1# "llvmo::InsertPoint_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/insertPoint.h:46:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_InsertPoint" :#5# "/home/meister/Development/clasp/src/llvmo/insertPoint.h:56:2" :#6=CTYPE #S(#7=CXXRECORD-CTYPE :#1# "llvm::IRBuilderBase::InsertPoint" :#3# "InsertPoint"))) :METHOD-NAMES (#8="NO-NAME" #8# "insertPoint" "create" #8# #8# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#9=SPECIES #S(#9# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "InsertPoint_O" :#5# "/home/meister/Development/clasp/src/llvmo/insertPoint.h:46:5" :#6# #S(#7# :#1# "llvmo::InsertPoint_O" :#3# "InsertPoint_O")))
template <> class gctools::GCKind<llvmo::InsertPoint_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__InsertPoint_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::SequenceStepper" :#3=NAME "KIND_CLASSALLOC_core__SequenceStepper" :VALUE 7 :#4=CCLASS #S(#4# :#1# "core::SequenceStepper" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/primitives.h:82:5" :BASES NIL :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "element" "advance") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :CLASSALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 6) :CHILDREN ("core::ConsStepper" "core::VectorStepper") :IN-HIERARCHY T :ALLOC #S(CLASSALLOC :#1# #2# :#3# "SequenceStepper" :#5# "/home/meister/Development/clasp/src/core/primitives.h:82:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::SequenceStepper" :#3# "SequenceStepper")))
template <> class gctools::GCKind<core::SequenceStepper> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_CLASSALLOC_core__SequenceStepper ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::SpecialForm_O" :#3=NAME "KIND_LISPALLOC_core__SpecialForm_O" :VALUE 92 :#4=CCLASS #S(#4# :#1# "core::SpecialForm_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/specialForm.h:46:5" :BASES ("core::Function_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_fptr" :#5# "/home/meister/Development/clasp/src/core/specialForm.h:60:2" :#8=CTYPE #S(POINTER-CTYPE :#1# NIL :POINTEE #S(UNCLASSIFIED-CTYPE :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>)"))) #S(#6# :#7# "_SpecialSymbol" :#5# "/home/meister/Development/clasp/src/core/specialForm.h:59:2" :#8# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O"))) :METHOD-NAMES (#9="NO-NAME" #9# #9# #9# "evaluate" "__repr__" "isSpecialForm" "create" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#10=SPECIES #S(#10# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "SpecialForm_O" :#5# "/home/meister/Development/clasp/src/core/specialForm.h:46:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::SpecialForm_O" :#3# "SpecialForm_O")))
template <> class gctools::GCKind<core::SpecialForm_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__SpecialForm_O ;
};
//GCTemplatedKind for #S(TEMPLATED-ENUM :#1=KEY #2="core::BuiltinClosure" :#3=NAME "KIND_TEMPLATED_CLASSALLOC_core__BuiltinClosure" :VALUE 252 :#4=CCLASS #S(#4# :#1# #2# :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/executables.h:180:5" :BASES ("core::FunctionClosure") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_lambdaListHandler" :#5# "/home/meister/Development/clasp/src/core/executables.h:183:9" :#6=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::LambdaListHandler_O>" :SPECIALIZER "class core::LambdaListHandler_O"))) :METHOD-NAMES (#7="NO-NAME" #7# #7# #7# #7# "lambdaListHandler" "builtinP" "invoke" "describe" "templatedSizeof" "finishSetup" #7# #7# #7# #7# #7#) :METADATA NIL) :#8=SPECIES #S(#8# :#3# :TEMPLATED-CLASSALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-TEMPLATED-LISPALLOCS :SKIP SKIPPER-FOR-TEMPLATED-LISPALLOCS :FINALIZE FINALIZER-FOR-TEMPLATED-LISPALLOCS :DUMP DUMPER-FOR-TEMPLATED-LISPALLOCS :#9=INDEX 8) :CHILDREN ("core::MacroClosure") :IN-HIERARCHY NIL :ALL-ALLOCS (#S(#10=CLASSALLOC :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::Package_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11=CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::Package_O::*)(void) const>" :#3# NIL :#12=ARGUMENTS (#S(#13=GC-TEMPLATE-ARGUMENT :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14=UNCLASSIFIED-CTYPE :#1# "std::basic_string<char> (core::Package_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Class_O> (gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Class_O> (gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Class_O> (gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (llvmo::SwitchInst_O::*)(gctools::smart_ptr<llvmo::ConstantInt_O>, gctools::smart_ptr<llvmo::BasicBlock_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1462:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (llvmo::SwitchInst_O::*)(gctools::smart_ptr<llvmo::ConstantInt_O>, gctools::smart_ptr<llvmo::BasicBlock_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (llvmo::SwitchInst_O::*)(gctools::smart_ptr<llvmo::ConstantInt_O>, gctools::smart_ptr<llvmo::BasicBlock_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (const std::basic_string<char> &)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (const std::basic_string<char> &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (const std::basic_string<char> &)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Cons_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Cons_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::FunctionPassManager_O> (llvm::Module *)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::FunctionPassManager_O> (llvm::Module *)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::FunctionPassManager_O> (llvm::Module *)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::tooling::CompilationDatabase,std::vector<clang::tooling::CompileCommand, std::allocator<clang::tooling::CompileCommand> > (clang::tooling::CompilationDatabase::*)(llvm::StringRef) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2119:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::tooling::CompilationDatabase,std::vector<clang::tooling::CompileCommand, std::allocator<clang::tooling::CompileCommand> > (clang::tooling::CompilationDatabase::*)(llvm::StringRef) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15=CXXRECORD-CTYPE :#1# "clang::tooling::CompilationDatabase" :#3# "CompilationDatabase")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "std::vector<clang::tooling::CompileCommand, std::allocator<clang::tooling::CompileCommand> > (clang::tooling::CompilationDatabase::*)(llvm::StringRef) const"))))) #S(#10# :#1# "clbind::VariadicConstructorFunctoid<clbind::policies<>,clang::Rewriter *,clang::Rewriter,clbind::constructor<TEMPLATE_ARG_PACK_SIZE2>>" :#3# "VariadicConstructorFunctoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_constructor_functoids.h:409:1" :#6# #S(#11# :#1# "clbind::VariadicConstructorFunctoid<clbind::policies<>,clang::Rewriter *,clang::Rewriter,clbind::constructor<TEMPLATE_ARG_PACK_SIZE2>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#16=POINTER-CTYPE :#1# NIL :#17=POINTEE #S(#15# :#1# "clang::Rewriter" :#3# "Rewriter"))) #S(#13# :#9# 2 :#6# #S(#15# :#1# "clang::Rewriter" :#3# "Rewriter")) #S(#13# :#9# 3 :#6# #S(#11# :#1# "clbind::constructor<TEMPLATE_ARG_PACK_SIZE2>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL))))))) #S(#10# :#1# "core::VariadicMethoid<0,unsigned int (core::SimpleBitVector_O::*)(unsigned int) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3077:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,unsigned int (core::SimpleBitVector_O::*)(unsigned int) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "unsigned int (core::SimpleBitVector_O::*)(unsigned int) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Integer_O> (gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Integer_O> (gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Integer_O> (gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "clbind::VariadicFunctoid<void (*)(gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>),clbind::policies<>>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_functoids.h:2912:1" :#6# #S(#11# :#1# "clbind::VariadicFunctoid<void (*)(gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>),clbind::policies<>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#16# :#1# NIL :#17# #S(#14# :#1# "void (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))) #S(#13# :#9# 1 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL))))))) #S(#10# :#1# "core::VariadicMethoid<0,int (core::TagbodyEnvironment_O::*)(gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:681:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,int (core::TagbodyEnvironment_O::*)(gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "int (core::TagbodyEnvironment_O::*)(gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::HashTable_O::*)(int) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3077:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::HashTable_O::*)(int) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (core::HashTable_O::*)(int) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Str_O>, unsigned int, gctools::smart_ptr<core::T_O>, unsigned int, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2132:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Str_O>, unsigned int, gctools::smart_ptr<core::T_O>, unsigned int, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Str_O>, unsigned int, gctools::smart_ptr<core::T_O>, unsigned int, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TypeSourceInfo,clang::TypeLoc (clang::TypeSourceInfo::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TypeSourceInfo,clang::TypeLoc (clang::TypeSourceInfo::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::TypeSourceInfo" :#3# "TypeSourceInfo")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::TypeLoc (clang::TypeSourceInfo::*)(void) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Module_O,void (llvm::Module::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:5388:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Module_O,void (llvm::Module::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::Module_O" :#3# "Module_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "void (llvm::Module::*)(void) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::ExecutionEngine_O,void (llvm::ExecutionEngine::*)(void)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:2674:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::ExecutionEngine_O,void (llvm::ExecutionEngine::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::ExecutionEngine_O" :#3# "ExecutionEngine_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "void (llvm::ExecutionEngine::*)(void)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::Stmt,void (clang::Stmt::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2712:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::Stmt,void (clang::Stmt::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::Stmt" :#3# "Stmt")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "void (clang::Stmt::*)(void) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::PHINode_O,void (llvm::PHINode::*)(llvm::Value *, llvm::BasicBlock *)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:2560:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::PHINode_O,void (llvm::PHINode::*)(llvm::Value *, llvm::BasicBlock *)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::PHINode_O" :#3# "PHINode_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "void (llvm::PHINode::*)(llvm::Value *, llvm::BasicBlock *)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2251:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (cffi::Pointer_O::*)(gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::Integer_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:681:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (cffi::Pointer_O::*)(gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::Integer_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (cffi::Pointer_O::*)(gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::Integer_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::Symbol_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2251:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::Symbol_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::Symbol_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::SNode_O> (core::SNode_O::*)(gctools::smart_ptr<core::Symbol_O>) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3077:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::SNode_O> (core::SNode_O::*)(gctools::smart_ptr<core::Symbol_O>) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::SNode_O> (core::SNode_O::*)(gctools::smart_ptr<core::Symbol_O>) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (core::Array_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (core::Array_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (core::Array_O::*)(void) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Module_O,llvm::GlobalVariable *(llvm::Module::*)(llvm::StringRef)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1266:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Module_O,llvm::GlobalVariable *(llvm::Module::*)(llvm::StringRef)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::Module_O" :#3# "Module_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::GlobalVariable *(llvm::Module::*)(llvm::StringRef)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<llvmo::DataLayout_O> (llvmo::DataLayout_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<llvmo::DataLayout_O> (llvmo::DataLayout_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::DataLayout_O> (llvmo::DataLayout_O::*)(void) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Module_O,const std::basic_string<char> &(llvm::Module::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:4033:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Module_O,const std::basic_string<char> &(llvm::Module::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::Module_O" :#3# "Module_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "const std::basic_string<char> &(llvm::Module::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Cons_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:648:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Cons_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<_Bool (int, int, int, double)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:608:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<_Bool (int, int, int, double)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "_Bool (int, int, int, double)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::Symbol_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1541:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::Symbol_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::Symbol_O::*)(void)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::StoreInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, _Bool)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1143:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::StoreInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, _Bool)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::StoreInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, _Bool)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Function_O,_Bool (llvm::Function::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:4033:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Function_O,_Bool (llvm::Function::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::Function_O" :#3# "Function_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "_Bool (llvm::Function::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<_Bool (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Symbol_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<_Bool (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Symbol_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "_Bool (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Symbol_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<llvmo::ExecutionEngine_O> (llvmo::EngineBuilder_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:760:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<llvmo::ExecutionEngine_O> (llvmo::EngineBuilder_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::ExecutionEngine_O> (llvmo::EngineBuilder_O::*)(void)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<llvmo::DIArray_O> (llvmo::DIBuilder_O::*)(gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<llvmo::DIArray_O> (llvmo::DIBuilder_O::*)(gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::DIArray_O> (llvmo::DIBuilder_O::*)(gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::multiple_values<core::T_O> (core::Function_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:4690:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::multiple_values<core::T_O> (core::Function_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (core::Function_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<int (gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<int (gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "int (gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::AllocaInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Type *, llvm::Value *, const llvm::Twine &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1143:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::AllocaInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Type *, llvm::Value *, const llvm::Twine &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::AllocaInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Type *, llvm::Value *, const llvm::Twine &)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::APInt_O> (gctools::smart_ptr<core::Integer_O>, unsigned int, _Bool)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:648:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::APInt_O> (gctools::smart_ptr<core::Integer_O>, unsigned int, _Bool)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::APInt_O> (gctools::smart_ptr<core::Integer_O>, unsigned int, _Bool)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::LoadInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, const llvm::Twine &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1207:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::LoadInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, const llvm::Twine &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::LoadInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, const llvm::Twine &)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Integer_O> (core::Float_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Integer_O> (core::Float_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Integer_O> (core::Float_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,int (core::Environment_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,int (core::Environment_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "int (core::Environment_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (llvmo::Module_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3897:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (llvmo::Module_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (llvmo::Module_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::VectorObjectsWithFillPtr_O::*)(int)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1502:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::VectorObjectsWithFillPtr_O::*)(int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::VectorObjectsWithFillPtr_O::*)(int)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::SmallMap_O::*)(gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:681:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::SmallMap_O::*)(gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (core::SmallMap_O::*)(gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (int)"))))) #S(#10# :#1# "core::VariadicMethoid<0,int (core::RegexMatch_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,int (core::RegexMatch_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "int (core::RegexMatch_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,unsigned int (core::PosixTimeDuration_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:760:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,unsigned int (core::PosixTimeDuration_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "unsigned int (core::PosixTimeDuration_O::*)(void)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::SymbolSet_O> (core::SymbolSet_O::*)(gctools::smart_ptr<core::SymbolSet_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::SymbolSet_O> (core::SymbolSet_O::*)(gctools::smart_ptr<core::SymbolSet_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::SymbolSet_O> (core::SymbolSet_O::*)(gctools::smart_ptr<core::SymbolSet_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (const std::basic_string<char> &, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Function_O>, gctools::smart_ptr<core::Function_O>, gctools::smart_ptr<core::Function_O>, gctools::smart_ptr<core::Function_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:524:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (const std::basic_string<char> &, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Function_O>, gctools::smart_ptr<core::Function_O>, gctools::smart_ptr<core::Function_O>, gctools::smart_ptr<core::Function_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (const std::basic_string<char> &, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Function_O>, gctools::smart_ptr<core::Function_O>, gctools::smart_ptr<core::Function_O>, gctools::smart_ptr<core::Function_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::tooling::ClangTool,int (clang::tooling::ClangTool::*)(clang::tooling::ToolAction *)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:470:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::tooling::ClangTool,int (clang::tooling::ClangTool::*)(clang::tooling::ToolAction *)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::tooling::ClangTool" :#3# "ClangTool")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "int (clang::tooling::ClangTool::*)(clang::tooling::ToolAction *)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::SubstTemplateTypeParmType,clang::QualType (clang::SubstTemplateTypeParmType::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::SubstTemplateTypeParmType,clang::QualType (clang::SubstTemplateTypeParmType::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::SubstTemplateTypeParmType" :#3# "SubstTemplateTypeParmType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::QualType (clang::SubstTemplateTypeParmType::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Character_O> (gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Character_O> (gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Character_O> (gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<void (int, gctools::smart_ptr<core::ForeignData_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1464:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (int, gctools::smart_ptr<core::ForeignData_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (int, gctools::smart_ptr<core::ForeignData_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Symbol_O> (core::SingleDispatchMethod_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Symbol_O> (core::SingleDispatchMethod_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Symbol_O> (core::SingleDispatchMethod_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Number_O> (gctools::smart_ptr<core::Number_O>, gctools::smart_ptr<core::Number_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Number_O> (gctools::smart_ptr<core::Number_O>, gctools::smart_ptr<core::Number_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Number_O> (gctools::smart_ptr<core::Number_O>, gctools::smart_ptr<core::Number_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (int, int, int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:648:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (int, int, int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (int, int, int)"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (core::FileStatus_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:760:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (core::FileStatus_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (core::FileStatus_O::*)(void)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::StrWithFillPtr_O> (gctools::smart_ptr<core::StrWithFillPtr_O>, gctools::smart_ptr<core::Integer_O>, gctools::smart_ptr<core::Fixnum_O>, _Bool, _Bool)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:567:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::StrWithFillPtr_O> (gctools::smart_ptr<core::StrWithFillPtr_O>, gctools::smart_ptr<core::Integer_O>, gctools::smart_ptr<core::Fixnum_O>, _Bool, _Bool)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::StrWithFillPtr_O> (gctools::smart_ptr<core::StrWithFillPtr_O>, gctools::smart_ptr<core::Integer_O>, gctools::smart_ptr<core::Fixnum_O>, _Bool, _Bool)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Symbol_O> (gctools::smart_ptr<core::T_O>, _Bool)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Symbol_O> (gctools::smart_ptr<core::T_O>, _Bool)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Symbol_O> (gctools::smart_ptr<core::T_O>, _Bool)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (llvmo::Instruction_O::*)(gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<llvmo::MDNode_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1462:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (llvmo::Instruction_O::*)(gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<llvmo::MDNode_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (llvmo::Instruction_O::*)(gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<llvmo::MDNode_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::SymbolSet_O::*)(gctools::smart_ptr<core::Symbol_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1502:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::SymbolSet_O::*)(gctools::smart_ptr<core::Symbol_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::SymbolSet_O::*)(gctools::smart_ptr<core::Symbol_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::Type,_Bool (clang::Type::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::Type,_Bool (clang::Type::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::Type" :#3# "Type")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "_Bool (clang::Type::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::Array_O::*)(gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::Array_O::*)(gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (core::Array_O::*)(gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::CallInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, llvm::Value *, llvm::Value *, llvm::Value *, llvm::Value *, const llvm::Twine &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:841:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::CallInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, llvm::Value *, llvm::Value *, llvm::Value *, llvm::Value *, const llvm::Twine &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::CallInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, llvm::Value *, llvm::Value *, llvm::Value *, llvm::Value *, const llvm::Twine &)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::LoadInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, _Bool, const llvm::Twine &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1143:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::LoadInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, _Bool, const llvm::Twine &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::LoadInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, _Bool, const llvm::Twine &)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::LandingPadInst_O,void (llvm::LandingPadInst::*)(_Bool)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:2619:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::LandingPadInst_O,void (llvm::LandingPadInst::*)(_Bool)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::LandingPadInst_O" :#3# "LandingPadInst_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "void (llvm::LandingPadInst::*)(_Bool)"))))) #S(#10# :#1# "core::VariadicFunctoid<llvm::ModulePass *(void)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:759:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<llvm::ModulePass *(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "llvm::ModulePass *(void)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TypedefType,clang::QualType (clang::TypedefType::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TypedefType,clang::QualType (clang::TypedefType::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::TypedefType" :#3# "TypedefType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::QualType (clang::TypedefType::*)(void) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::DIBuilder_O,llvm::DISubroutineType (llvm::DIBuilder::*)(llvm::DIFile, llvm::DITypedArray<llvm::DIRef<llvm::DIType> >, unsigned int)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1143:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::DIBuilder_O,llvm::DISubroutineType (llvm::DIBuilder::*)(llvm::DIFile, llvm::DITypedArray<llvm::DIRef<llvm::DIType> >, unsigned int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::DIBuilder_O" :#3# "DIBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::DISubroutineType (llvm::DIBuilder::*)(llvm::DIFile, llvm::DITypedArray<llvm::DIRef<llvm::DIType> >, unsigned int)"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (core::Real_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (core::Real_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (core::Real_O::*)(void) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::CallInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, llvm::Value *, llvm::Value *, const llvm::Twine &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1002:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::CallInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, llvm::Value *, llvm::Value *, const llvm::Twine &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::CallInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, llvm::Value *, llvm::Value *, const llvm::Twine &)"))))) #S(#10# :#1# "core::VariadicMethoid<0,int (core::Array_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,int (core::Array_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "int (core::Array_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Cons_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:648:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Cons_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::Array_O::*)(int, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1462:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::Array_O::*)(int, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::Array_O::*)(int, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::LambdaListHandler_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::LambdaListHandler_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (core::LambdaListHandler_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::StringSet_O> (core::StringSet_O::*)(gctools::smart_ptr<core::StringSet_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::StringSet_O> (core::StringSet_O::*)(gctools::smart_ptr<core::StringSet_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::StringSet_O> (core::StringSet_O::*)(gctools::smart_ptr<core::StringSet_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::DoubleFloat_O> (int, int, int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:648:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::DoubleFloat_O> (int, int, int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::DoubleFloat_O> (int, int, int)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<_Bool (gctools::smart_ptr<llvmo::Value_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<_Bool (gctools::smart_ptr<llvmo::Value_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "_Bool (gctools::smart_ptr<llvmo::Value_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TypedefNameDecl,clang::TypedefNameDecl *(clang::TypedefNameDecl::*)(void)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:523:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TypedefNameDecl,clang::TypedefNameDecl *(clang::TypedefNameDecl::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::TypedefNameDecl" :#3# "TypedefNameDecl")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::TypedefNameDecl *(clang::TypedefNameDecl::*)(void)"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (core::StringSet_O::*)(const std::basic_string<char> &)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (core::StringSet_O::*)(const std::basic_string<char> &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (core::StringSet_O::*)(const std::basic_string<char> &)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::tooling::Replacement,std::basic_string<char> (clang::tooling::Replacement::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::tooling::Replacement,std::basic_string<char> (clang::tooling::Replacement::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::tooling::Replacement" :#3# "Replacement")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "std::basic_string<char> (clang::tooling::Replacement::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::CatchEnvironment_O> (gctools::smart_ptr<core::Environment_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::CatchEnvironment_O> (gctools::smart_ptr<core::Environment_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::CatchEnvironment_O> (gctools::smart_ptr<core::Environment_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,int (core::SymbolToEnumConverter_O::*)(gctools::smart_ptr<core::Symbol_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,int (core::SymbolToEnumConverter_O::*)(gctools::smart_ptr<core::Symbol_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "int (core::SymbolToEnumConverter_O::*)(gctools::smart_ptr<core::Symbol_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Ratio_O> (void)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:759:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Ratio_O> (void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Ratio_O> (void)"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (core::SymbolSet_O::*)(gctools::smart_ptr<core::SymbolSet_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (core::SymbolSet_O::*)(gctools::smart_ptr<core::SymbolSet_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (core::SymbolSet_O::*)(gctools::smart_ptr<core::SymbolSet_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<cffi::Pointer_O> (gctools::smart_ptr<core::Number_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<cffi::Pointer_O> (gctools::smart_ptr<core::Number_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<cffi::Pointer_O> (gctools::smart_ptr<core::Number_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Symbol_O> (core::Str_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Symbol_O> (core::Str_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Symbol_O> (core::Str_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2213:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Environment_O> (int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Environment_O> (int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Environment_O> (int)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::InjectedClassNameType,clang::CXXRecordDecl *(clang::InjectedClassNameType::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::InjectedClassNameType,clang::CXXRecordDecl *(clang::InjectedClassNameType::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::InjectedClassNameType" :#3# "InjectedClassNameType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::CXXRecordDecl *(clang::InjectedClassNameType::*)(void) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Argument_O,_Bool (llvm::Argument::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:4033:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Argument_O,_Bool (llvm::Argument::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::Argument_O" :#3# "Argument_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "_Bool (llvm::Argument::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Function_O> (gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2288:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Function_O> (gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::Function_O> (gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::FenceInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(enum llvm::AtomicOrdering, enum llvm::SynchronizationScope, const llvm::Twine &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1143:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::FenceInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(enum llvm::AtomicOrdering, enum llvm::SynchronizationScope, const llvm::Twine &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::FenceInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(enum llvm::AtomicOrdering, enum llvm::SynchronizationScope, const llvm::Twine &)"))))) #S(#10# :#1# "clbind::VariadicFunctoid<clang::CharSourceRange (*)(clang::SourceLocation, clang::SourceLocation),clbind::policies<>>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_functoids.h:1437:1" :#6# #S(#11# :#1# "clbind::VariadicFunctoid<clang::CharSourceRange (*)(clang::SourceLocation, clang::SourceLocation),clbind::policies<>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#16# :#1# NIL :#17# #S(#14# :#1# "clang::CharSourceRange (clang::SourceLocation, clang::SourceLocation)"))) #S(#13# :#9# 1 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL))))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateArgument,clang::QualType (clang::TemplateArgument::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateArgument,clang::QualType (clang::TemplateArgument::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::TemplateArgument" :#3# "TemplateArgument")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::QualType (clang::TemplateArgument::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<int (gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<int (gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "int (gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::GlobalVariable_O> (gctools::smart_ptr<llvmo::Module_O>, gctools::smart_ptr<llvmo::Type_O>, _Bool, gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<llvmo::Constant_O>, gctools::smart_ptr<core::Str_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:524:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::GlobalVariable_O> (gctools::smart_ptr<llvmo::Module_O>, gctools::smart_ptr<llvmo::Type_O>, _Bool, gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<llvmo::Constant_O>, gctools::smart_ptr<core::Str_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::GlobalVariable_O> (gctools::smart_ptr<llvmo::Module_O>, gctools::smart_ptr<llvmo::Type_O>, _Bool, gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<llvmo::Constant_O>, gctools::smart_ptr<core::Str_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Str_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Str_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Str_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::ValueEnvironment_O> (gctools::smart_ptr<core::LambdaListHandler_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::ValueEnvironment_O> (gctools::smart_ptr<core::LambdaListHandler_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::ValueEnvironment_O> (gctools::smart_ptr<core::LambdaListHandler_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Integer_O> (gctools::smart_ptr<core::Integer_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Integer_O> (gctools::smart_ptr<core::Integer_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Integer_O> (gctools::smart_ptr<core::Integer_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::VectorObjects_O> (core::LambdaListHandler_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:760:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::VectorObjects_O> (core::LambdaListHandler_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::VectorObjects_O> (core::LambdaListHandler_O::*)(void)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ASTUnit,clang::ASTContext &(clang::ASTUnit::*)(void)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:523:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ASTUnit,clang::ASTContext &(clang::ASTUnit::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::ASTUnit" :#3# "ASTUnit")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::ASTContext &(clang::ASTUnit::*)(void)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,asttooling::DerivableSyntaxOnlyAction,std::unique_ptr<clang::ASTConsumer, std::default_delete<clang::ASTConsumer> > (asttooling::DerivableSyntaxOnlyAction::*)(clang::CompilerInstance &, llvm::StringRef)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:1505:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,asttooling::DerivableSyntaxOnlyAction,std::unique_ptr<clang::ASTConsumer, std::default_delete<clang::ASTConsumer> > (asttooling::DerivableSyntaxOnlyAction::*)(clang::CompilerInstance &, llvm::StringRef)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "asttooling::DerivableSyntaxOnlyAction" :#3# "DerivableSyntaxOnlyAction")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "std::unique_ptr<clang::ASTConsumer, std::default_delete<clang::ASTConsumer> > (asttooling::DerivableSyntaxOnlyAction::*)(clang::CompilerInstance &, llvm::StringRef)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Symbol_O> (gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2288:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Symbol_O> (gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::Symbol_O> (gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Class_O> (gctools::smart_ptr<core::Symbol_O>, _Bool, gctools::smart_ptr<core::Environment_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2213:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Class_O> (gctools::smart_ptr<core::Symbol_O>, _Bool, gctools::smart_ptr<core::Environment_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::Class_O> (gctools::smart_ptr<core::Symbol_O>, _Bool, gctools::smart_ptr<core::Environment_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:648:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,unsigned int (core::SymbolSet_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,unsigned int (core::SymbolSet_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "unsigned int (core::SymbolSet_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::Function_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::Function_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (core::Function_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::CompiledFunction_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1464:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::CompiledFunction_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (gctools::smart_ptr<core::CompiledFunction_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Symbol_O>, int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:648:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Symbol_O>, int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Symbol_O>, int)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::APInt_O> (gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::APInt_O> (gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::APInt_O> (gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::Array_O::*)(int) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3077:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::Array_O::*)(int) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (core::Array_O::*)(int) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Fixnum_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Vector_O>, int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:648:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Fixnum_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Vector_O>, int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Fixnum_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Vector_O>, int)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::EngineBuilder_O> (gctools::smart_ptr<llvmo::Module_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::EngineBuilder_O> (gctools::smart_ptr<llvmo::Module_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::EngineBuilder_O> (gctools::smart_ptr<llvmo::Module_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ASTContext,clang::comments::FullComment *(clang::ASTContext::*)(const clang::Decl *, const clang::Preprocessor *) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2060:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ASTContext,clang::comments::FullComment *(clang::ASTContext::*)(const clang::Decl *, const clang::Preprocessor *) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::ASTContext" :#3# "ASTContext")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::comments::FullComment *(clang::ASTContext::*)(const clang::Decl *, const clang::Preprocessor *) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (core::WrappedPointer_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (core::WrappedPointer_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (core::WrappedPointer_O::*)(void) const"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ClassTemplateSpecializationDecl,const clang::TemplateArgumentList &(clang::ClassTemplateSpecializationDecl::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ClassTemplateSpecializationDecl,const clang::TemplateArgumentList &(clang::ClassTemplateSpecializationDecl::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::ClassTemplateSpecializationDecl" :#3# "ClassTemplateSpecializationDecl")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "const clang::TemplateArgumentList &(clang::ClassTemplateSpecializationDecl::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::Class_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1464:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::Class_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (gctools::smart_ptr<core::Class_O>, gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, llvm::Value *, const llvm::Twine &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1075:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, llvm::Value *, const llvm::Twine &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, llvm::Value *, const llvm::Twine &)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::CallInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, llvm::Value *, const llvm::Twine &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1075:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::CallInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, llvm::Value *, const llvm::Twine &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::CallInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, llvm::Value *, const llvm::Twine &)"))))) #S(#10# :#1# "clbind::VariadicFunctoid<gctools::smart_ptr<core::T_O> (*)(clang::QualType),clbind::policies<>>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_functoids.h:1490:1" :#6# #S(#11# :#1# "clbind::VariadicFunctoid<gctools::smart_ptr<core::T_O> (*)(clang::QualType),clbind::policies<>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#16# :#1# NIL :#17# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (clang::QualType)"))) #S(#13# :#9# 1 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL))))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::StrWithFillPtr_O>, gctools::smart_ptr<core::Float_O>, gctools::smart_ptr<core::Real_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2173:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::StrWithFillPtr_O>, gctools::smart_ptr<core::Float_O>, gctools::smart_ptr<core::Real_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::StrWithFillPtr_O>, gctools::smart_ptr<core::Float_O>, gctools::smart_ptr<core::Real_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::ValueEnvironment_O::*)(gctools::smart_ptr<core::Symbol_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1502:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::ValueEnvironment_O::*)(gctools::smart_ptr<core::Symbol_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::ValueEnvironment_O::*)(gctools::smart_ptr<core::Symbol_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ConstantArrayType,clang::QualType (clang::ConstantArrayType::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ConstantArrayType,clang::QualType (clang::ConstantArrayType::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::ConstantArrayType" :#3# "ConstantArrayType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::QualType (clang::ConstantArrayType::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Cons_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:567:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Cons_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Number_O> (core::Number_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Number_O> (core::Number_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Number_O> (core::Number_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::APFloat_O> (gctools::smart_ptr<core::DoubleFloat_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::APFloat_O> (gctools::smart_ptr<core::DoubleFloat_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::APFloat_O> (gctools::smart_ptr<core::DoubleFloat_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (int, gctools::smart_ptr<core::T_O>, int, _Bool, _Bool, _Bool)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2089:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (int, gctools::smart_ptr<core::T_O>, int, _Bool, _Bool, _Bool)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (int, gctools::smart_ptr<core::T_O>, int, _Bool, _Bool, _Bool)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Integer_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Integer_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Integer_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Path_O> (core::DirectoryEntry_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:760:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Path_O> (core::DirectoryEntry_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Path_O> (core::DirectoryEntry_O::*)(void)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TypeLoc,clang::SourceLocation (clang::TypeLoc::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TypeLoc,clang::SourceLocation (clang::TypeLoc::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::TypeLoc" :#3# "TypeLoc")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::SourceLocation (clang::TypeLoc::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::HashTable_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2251:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::HashTable_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::HashTable_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::MultiStringBuffer_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1541:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::MultiStringBuffer_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::MultiStringBuffer_O::*)(void)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Integer_O> (int, int, int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:648:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Integer_O> (int, int, int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Integer_O> (int, int, int)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::multiple_values<core::T_O> (core::WeakPointer_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:4690:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::multiple_values<core::T_O> (core::WeakPointer_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (core::WeakPointer_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<void (unsigned int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1501:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (unsigned int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (unsigned int)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, const llvm::Twine &, _Bool, _Bool)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1002:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, const llvm::Twine &, _Bool, _Bool)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, const llvm::Twine &, _Bool, _Bool)"))))) #S(#10# :#1# "core::VariadicFunctoid<unsigned int (gctools::smart_ptr<core::Symbol_O>, unsigned int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<unsigned int (gctools::smart_ptr<core::Symbol_O>, unsigned int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "unsigned int (gctools::smart_ptr<core::Symbol_O>, unsigned int)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::Iterator_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:760:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::Iterator_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (core::Iterator_O::*)(void)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(enum llvm::Instruction::CastOps, llvm::Value *, llvm::Type *, const llvm::Twine &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1075:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(enum llvm::Instruction::CastOps, llvm::Value *, llvm::Type *, const llvm::Twine &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(enum llvm::Instruction::CastOps, llvm::Value *, llvm::Type *, const llvm::Twine &)"))))) #S(#10# :#1# "core::VariadicMethoid<0,int (core::Array_O::*)(int) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3077:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,int (core::Array_O::*)(int) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "int (core::Array_O::*)(int) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::SNode_O::*)(gctools::smart_ptr<core::Vector_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1502:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::SNode_O::*)(gctools::smart_ptr<core::Vector_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::SNode_O::*)(gctools::smart_ptr<core::Vector_O>)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Module_O,llvm::GlobalVariable *(llvm::Module::*)(llvm::StringRef, _Bool)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1207:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Module_O,llvm::GlobalVariable *(llvm::Module::*)(llvm::StringRef, _Bool)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::Module_O" :#3# "Module_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::GlobalVariable *(llvm::Module::*)(llvm::StringRef, _Bool)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::PassManagerBuilder_O> (void)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:759:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::PassManagerBuilder_O> (void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::PassManagerBuilder_O> (void)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::Cons_O::*)(gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:681:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::Cons_O::*)(gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (core::Cons_O::*)(gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::StringRef, const llvm::Twine &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1207:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::StringRef, const llvm::Twine &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::StringRef, const llvm::Twine &)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Str_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2288:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Str_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Str_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ClassTemplateSpecializationDecl,clang::TypeSourceInfo *(clang::ClassTemplateSpecializationDecl::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ClassTemplateSpecializationDecl,clang::TypeSourceInfo *(clang::ClassTemplateSpecializationDecl::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::ClassTemplateSpecializationDecl" :#3# "ClassTemplateSpecializationDecl")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::TypeSourceInfo *(clang::ClassTemplateSpecializationDecl::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<llvm::BasicBlock *(llvm::LLVMContext &, const llvm::Twine &, llvm::Function *, llvm::BasicBlock *)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:608:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<llvm::BasicBlock *(llvm::LLVMContext &, const llvm::Twine &, llvm::Function *, llvm::BasicBlock *)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "llvm::BasicBlock *(llvm::LLVMContext &, const llvm::Twine &, llvm::Function *, llvm::BasicBlock *)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Bignum_O> (unsigned int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2288:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Bignum_O> (unsigned int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::Bignum_O> (unsigned int)"))))) #S(#10# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::Class_O>, gctools::smart_ptr<core::LambdaListHandler_O>, gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::Function_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1302:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::Class_O>, gctools::smart_ptr<core::LambdaListHandler_O>, gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::Function_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::Class_O>, gctools::smart_ptr<core::LambdaListHandler_O>, gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::Function_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<_Bool (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<_Bool (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "_Bool (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,unsigned int (core::StringSet_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:760:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,unsigned int (core::StringSet_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "unsigned int (core::StringSet_O::*)(void)"))))) #S(#10# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::Str_O::*)(int) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3077:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::Str_O::*)(int) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "std::basic_string<char> (core::Str_O::*)(int) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Package_O> (gctools::smart_ptr<core::Symbol_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Package_O> (gctools::smart_ptr<core::Symbol_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Package_O> (gctools::smart_ptr<core::Symbol_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<llvm::FunctionPass *(int, _Bool, int, int, int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:567:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<llvm::FunctionPass *(int, _Bool, int, int, int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "llvm::FunctionPass *(int, _Bool, int, int, int)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Function_O> (gctools::smart_ptr<llvmo::ExecutionEngine_O>, gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<llvmo::Function_O>, gctools::smart_ptr<core::ActivationFrame_O>, gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::T_O>, int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:433:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Function_O> (gctools::smart_ptr<llvmo::ExecutionEngine_O>, gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<llvmo::Function_O>, gctools::smart_ptr<core::ActivationFrame_O>, gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::T_O>, int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Function_O> (gctools::smart_ptr<llvmo::ExecutionEngine_O>, gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<llvmo::Function_O>, gctools::smart_ptr<core::ActivationFrame_O>, gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::T_O>, int)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2213:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2173:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::ObjectSet_O::*)(gctools::smart_ptr<core::T_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1502:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::ObjectSet_O::*)(gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::ObjectSet_O::*)(gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Symbol_O> (core::Symbol_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:760:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Symbol_O> (core::Symbol_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Symbol_O> (core::Symbol_O::*)(void)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Symbol_O> (gctools::smart_ptr<core::Str_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2288:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Symbol_O> (gctools::smart_ptr<core::Str_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::Symbol_O> (gctools::smart_ptr<core::Str_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<unsigned int (gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<unsigned int (gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "unsigned int (gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (llvmo::ExecutionEngine_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (llvmo::ExecutionEngine_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (llvmo::ExecutionEngine_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,int (core::Array_O::*)(gctools::smart_ptr<core::Cons_O>) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3077:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,int (core::Array_O::*)(gctools::smart_ptr<core::Cons_O>) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "int (core::Array_O::*)(gctools::smart_ptr<core::Cons_O>) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::Function_O> (gctools::smart_ptr<llvmo::FunctionType_O>, enum llvm::GlobalValue::LinkageTypes, gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<llvmo::Module_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:608:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::Function_O> (gctools::smart_ptr<llvmo::FunctionType_O>, enum llvm::GlobalValue::LinkageTypes, gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<llvmo::Module_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::Function_O> (gctools::smart_ptr<llvmo::FunctionType_O>, enum llvm::GlobalValue::LinkageTypes, gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<llvmo::Module_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::ReadTable_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2173:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::ReadTable_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::ReadTable_O>)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, const llvm::Twine &, llvm::MDNode *)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1143:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, const llvm::Twine &, llvm::MDNode *)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, const llvm::Twine &, llvm::MDNode *)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (llvmo::IRBuilderBase_O::*)(gctools::smart_ptr<llvmo::DebugLoc_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1502:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (llvmo::IRBuilderBase_O::*)(gctools::smart_ptr<llvmo::DebugLoc_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (llvmo::IRBuilderBase_O::*)(gctools::smart_ptr<llvmo::DebugLoc_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::UnwindProtectEnvironment_O> (gctools::smart_ptr<core::Environment_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::UnwindProtectEnvironment_O> (gctools::smart_ptr<core::Environment_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::UnwindProtectEnvironment_O> (gctools::smart_ptr<core::Environment_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (int, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (int, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (int, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Symbol_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Symbol_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Symbol_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::WeakKeyHashTable_O> (gctools::smart_ptr<core::Fixnum_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::WeakKeyHashTable_O> (gctools::smart_ptr<core::Fixnum_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::WeakKeyHashTable_O> (gctools::smart_ptr<core::Fixnum_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,double (core::HashTable_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,double (core::HashTable_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "double (core::HashTable_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (llvmo::Function_O::*)(gctools::smart_ptr<llvmo::BasicBlock_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1502:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (llvmo::Function_O::*)(gctools::smart_ptr<llvmo::BasicBlock_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (llvmo::Function_O::*)(gctools::smart_ptr<llvmo::BasicBlock_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::multiple_values<core::T_O> (core::Environment_O::*)(gctools::smart_ptr<core::Symbol_O>) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:4651:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::multiple_values<core::T_O> (core::Environment_O::*)(gctools::smart_ptr<core::Symbol_O>) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (core::Environment_O::*)(gctools::smart_ptr<core::Symbol_O>) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::BlockAddress_O> (gctools::smart_ptr<llvmo::Function_O>, gctools::smart_ptr<llvmo::BasicBlock_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::BlockAddress_O> (gctools::smart_ptr<llvmo::Function_O>, gctools::smart_ptr<llvmo::BasicBlock_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::BlockAddress_O> (gctools::smart_ptr<llvmo::Function_O>, gctools::smart_ptr<llvmo::BasicBlock_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::WeakKeyMapping_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::WeakKeyMapping_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::WeakKeyMapping_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "clbind::VariadicConstructorFunctoid<clbind::policies<>,clang::tooling::ClangSyntaxOnlyAdjuster *,clang::tooling::ClangSyntaxOnlyAdjuster,clbind::constructor<>>" :#3# "VariadicConstructorFunctoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_constructor_functoids.h:498:1" :#6# #S(#11# :#1# "clbind::VariadicConstructorFunctoid<clbind::policies<>,clang::tooling::ClangSyntaxOnlyAdjuster *,clang::tooling::ClangSyntaxOnlyAdjuster,clbind::constructor<>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#16# :#1# NIL :#17# #S(#15# :#1# "clang::tooling::ClangSyntaxOnlyAdjuster" :#3# "ClangSyntaxOnlyAdjuster"))) #S(#13# :#9# 2 :#6# #S(#15# :#1# "clang::tooling::ClangSyntaxOnlyAdjuster" :#3# "ClangSyntaxOnlyAdjuster")) #S(#13# :#9# 3 :#6# #S(#11# :#1# "clbind::constructor<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL))))))) #S(#10# :#1# "core::VariadicMethoid<0,int (core::LoadTimeValues_O::*)(gctools::smart_ptr<core::T_O>, int)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:681:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,int (core::LoadTimeValues_O::*)(gctools::smart_ptr<core::T_O>, int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "int (core::LoadTimeValues_O::*)(gctools::smart_ptr<core::T_O>, int)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::DIBuilder_O,void (llvm::DIBuilder::*)(void)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:2674:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::DIBuilder_O,void (llvm::DIBuilder::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::DIBuilder_O" :#3# "DIBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "void (llvm::DIBuilder::*)(void)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (llvmo::ExecutionEngine_O::*)(gctools::smart_ptr<llvmo::GlobalValue_O>, gctools::smart_ptr<core::Pointer_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1462:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (llvmo::ExecutionEngine_O::*)(gctools::smart_ptr<llvmo::GlobalValue_O>, gctools::smart_ptr<core::Pointer_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (llvmo::ExecutionEngine_O::*)(gctools::smart_ptr<llvmo::GlobalValue_O>, gctools::smart_ptr<core::Pointer_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,unsigned int (core::MultiStringBuffer_O::*)(const std::basic_string<char> &)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,unsigned int (core::MultiStringBuffer_O::*)(const std::basic_string<char> &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "unsigned int (core::MultiStringBuffer_O::*)(const std::basic_string<char> &)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::SymbolSet_O::*)(gctools::smart_ptr<core::SymbolSet_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1502:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::SymbolSet_O::*)(gctools::smart_ptr<core::SymbolSet_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::SymbolSet_O::*)(gctools::smart_ptr<core::SymbolSet_O>)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Type_O,llvm::Type *(llvm::Type::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:4033:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Type_O,llvm::Type *(llvm::Type::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::Type_O" :#3# "Type_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::Type *(llvm::Type::*)(void) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::DIBuilder_O,llvm::DIFile (llvm::DIBuilder::*)(llvm::StringRef, llvm::StringRef)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1207:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::DIBuilder_O,llvm::DIFile (llvm::DIBuilder::*)(llvm::StringRef, llvm::StringRef)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::DIBuilder_O" :#3# "DIBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::DIFile (llvm::DIBuilder::*)(llvm::StringRef, llvm::StringRef)"))))) #S(#10# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1501:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Real_O> (gctools::smart_ptr<core::Real_O>, gctools::smart_ptr<core::Real_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2251:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Real_O> (gctools::smart_ptr<core::Real_O>, gctools::smart_ptr<core::Real_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::Real_O> (gctools::smart_ptr<core::Real_O>, gctools::smart_ptr<core::Real_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::ValueEnvironment_O> (int, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::ValueEnvironment_O> (int, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::ValueEnvironment_O> (int, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::VarDecl,clang::SourceRange (clang::VarDecl::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::VarDecl,clang::SourceRange (clang::VarDecl::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::VarDecl" :#3# "VarDecl")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::SourceRange (clang::VarDecl::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (core::Cons_O::*)(gctools::smart_ptr<core::Cons_O>) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3077:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (core::Cons_O::*)(gctools::smart_ptr<core::Cons_O>) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (core::Cons_O::*)(gctools::smart_ptr<core::Cons_O>) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Path_O> (core::Path_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Path_O> (core::Path_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Path_O> (core::Path_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::Environment_O::*)(gctools::smart_ptr<core::T_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1502:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::Environment_O::*)(gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::Environment_O::*)(gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::PresumedLoc,clang::SourceLocation (clang::PresumedLoc::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::PresumedLoc,clang::SourceLocation (clang::PresumedLoc::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::PresumedLoc" :#3# "PresumedLoc")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::SourceLocation (clang::PresumedLoc::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::Constant_O> (gctools::smart_ptr<llvmo::Constant_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::Constant_O> (gctools::smart_ptr<llvmo::Constant_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::Constant_O> (gctools::smart_ptr<llvmo::Constant_O>, gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::Type,void (clang::Type::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2712:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::Type,void (clang::Type::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::Type" :#3# "Type")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "void (clang::Type::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<_Bool (int, int, int, int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:608:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<_Bool (int, int, int, int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "_Bool (int, int, int, int)"))))) #S(#10# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<llvmo::ExecutionEngine_O>, const std::basic_string<char> &, gctools::smart_ptr<core::Str_O>, int, gctools::smart_ptr<core::Str_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1345:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<llvmo::ExecutionEngine_O>, const std::basic_string<char> &, gctools::smart_ptr<core::Str_O>, int, gctools::smart_ptr<core::Str_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (gctools::smart_ptr<llvmo::ExecutionEngine_O>, const std::basic_string<char> &, gctools::smart_ptr<core::Str_O>, int, gctools::smart_ptr<core::Str_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<int (void)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:759:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<int (void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "int (void)"))))) #S(#10# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::Bignum_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::Bignum_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "std::basic_string<char> (core::Bignum_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::SimpleBitVector_O::*)(gctools::smart_ptr<core::SimpleBitVector_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1502:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::SimpleBitVector_O::*)(gctools::smart_ptr<core::SimpleBitVector_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::SimpleBitVector_O::*)(gctools::smart_ptr<core::SimpleBitVector_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Integer_O> (gctools::smart_ptr<core::ForeignData_O>, gctools::smart_ptr<core::ForeignData_O>, int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2213:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Integer_O> (gctools::smart_ptr<core::ForeignData_O>, gctools::smart_ptr<core::ForeignData_O>, int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::Integer_O> (gctools::smart_ptr<core::ForeignData_O>, gctools::smart_ptr<core::ForeignData_O>, int)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (int, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2251:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (int, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (int, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::SNode_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::SNode_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (core::SNode_O::*)(void) const"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TypeSourceInfo,clang::QualType (clang::TypeSourceInfo::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TypeSourceInfo,clang::QualType (clang::TypeSourceInfo::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::TypeSourceInfo" :#3# "TypeSourceInfo")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::QualType (clang::TypeSourceInfo::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Bignum_O> (const std::basic_string<char> &)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Bignum_O> (const std::basic_string<char> &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Bignum_O> (const std::basic_string<char> &)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilderBase_O,void (llvm::IRBuilderBase::*)(llvm::Instruction *)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:2619:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilderBase_O,void (llvm::IRBuilderBase::*)(llvm::Instruction *)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilderBase_O" :#3# "IRBuilderBase_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "void (llvm::IRBuilderBase::*)(llvm::Instruction *)"))))) #S(#10# :#1# "core::VariadicFunctoid<llvm::UndefValue *(llvm::Type *)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<llvm::UndefValue *(llvm::Type *)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "llvm::UndefValue *(llvm::Type *)"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (core::DoubleFloat_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (core::DoubleFloat_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (core::DoubleFloat_O::*)(void) const"))))) #S(#10# :#1# "clbind::VariadicFunctoid<clang::CharSourceRange (*)(clang::SourceRange),clbind::policies<>>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_functoids.h:1490:1" :#6# #S(#11# :#1# "clbind::VariadicFunctoid<clang::CharSourceRange (*)(clang::SourceRange),clbind::policies<>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#16# :#1# NIL :#17# #S(#14# :#1# "clang::CharSourceRange (clang::SourceRange)"))) #S(#13# :#9# 1 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL))))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ast_matchers::MatchFinder,void (clang::ast_matchers::MatchFinder::*)(clang::ASTContext &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:1012:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ast_matchers::MatchFinder,void (clang::ast_matchers::MatchFinder::*)(clang::ASTContext &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::ast_matchers::MatchFinder" :#3# "MatchFinder")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "void (clang::ast_matchers::MatchFinder::*)(clang::ASTContext &)"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (core::Path_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:760:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (core::Path_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (core::Path_O::*)(void)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::SNode_O::*)(gctools::smart_ptr<core::Symbol_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1502:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::SNode_O::*)(gctools::smart_ptr<core::Symbol_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::SNode_O::*)(gctools::smart_ptr<core::Symbol_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::FunctionDecl,_Bool (clang::FunctionDecl::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::FunctionDecl,_Bool (clang::FunctionDecl::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::FunctionDecl" :#3# "FunctionDecl")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "_Bool (clang::FunctionDecl::*)(void) const"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::LValueReferenceType,clang::QualType (clang::LValueReferenceType::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::LValueReferenceType,clang::QualType (clang::LValueReferenceType::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::LValueReferenceType" :#3# "LValueReferenceType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::QualType (clang::LValueReferenceType::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::Environment_O::*)(gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:681:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::Environment_O::*)(gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (core::Environment_O::*)(gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Str_O> (gctools::smart_ptr<core::Str_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Str_O> (gctools::smart_ptr<core::Str_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Str_O> (gctools::smart_ptr<core::Str_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Integer_O>, gctools::smart_ptr<core::Integer_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2251:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Integer_O>, gctools::smart_ptr<core::Integer_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Integer_O>, gctools::smart_ptr<core::Integer_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<llvmo::DITypeArray_O> (llvmo::DIBuilder_O::*)(gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<llvmo::DITypeArray_O> (llvmo::DIBuilder_O::*)(gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::DITypeArray_O> (llvmo::DIBuilder_O::*)(gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::Array_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::Array_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (core::Array_O::*)(void) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::FunctionPassManager_O,_Bool (llvm::legacy::FunctionPassManager::*)(llvm::Function &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1266:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::FunctionPassManager_O,_Bool (llvm::legacy::FunctionPassManager::*)(llvm::Function &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::FunctionPassManager_O" :#3# "FunctionPassManager_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "_Bool (llvm::legacy::FunctionPassManager::*)(llvm::Function &)"))))) #S(#10# :#1# "core::VariadicFunctoid<std::basic_string<char> (gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<std::basic_string<char> (gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "std::basic_string<char> (gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,int (core::HashTable_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,int (core::HashTable_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "int (core::HashTable_O::*)(void) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IndirectBrInst_O,void (llvm::IndirectBrInst::*)(llvm::BasicBlock *)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:2619:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IndirectBrInst_O,void (llvm::IndirectBrInst::*)(llvm::BasicBlock *)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IndirectBrInst_O" :#3# "IndirectBrInst_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "void (llvm::IndirectBrInst::*)(llvm::BasicBlock *)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:524:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2089:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::LoadArchive_O::*)(gctools::smart_ptr<core::Symbol_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::LoadArchive_O::*)(gctools::smart_ptr<core::Symbol_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (core::LoadArchive_O::*)(gctools::smart_ptr<core::Symbol_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<int (gctools::smart_ptr<core::Environment_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<int (gctools::smart_ptr<core::Environment_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "int (gctools::smart_ptr<core::Environment_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (core::Function_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (core::Function_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (core::Function_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::Str_O::*)(const std::basic_string<char> &)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::Str_O::*)(const std::basic_string<char> &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (core::Str_O::*)(const std::basic_string<char> &)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2251:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::WeakPointer_O> (gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::WeakPointer_O> (gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::WeakPointer_O> (gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Package_O> (gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2288:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Package_O> (gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::Package_O> (gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (void)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:759:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (void)"))))) #S(#10# :#1# "core::VariadicFunctoid<llvm::ConstantInt *(llvm::LLVMContext &, const llvm::APInt &)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<llvm::ConstantInt *(llvm::LLVMContext &, const llvm::APInt &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "llvm::ConstantInt *(llvm::LLVMContext &, const llvm::APInt &)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ArrayType,clang::QualType (clang::ArrayType::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ArrayType,clang::QualType (clang::ArrayType::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::ArrayType" :#3# "ArrayType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::QualType (clang::ArrayType::*)(void) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, const llvm::Twine &, _Bool, _Bool)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1075:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, const llvm::Twine &, _Bool, _Bool)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, const llvm::Twine &, _Bool, _Bool)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (cffi::Pointer_O::*)(gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:681:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (cffi::Pointer_O::*)(gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (cffi::Pointer_O::*)(gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Str_O> (gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::T_O>, int, gctools::smart_ptr<core::Fixnum_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:608:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Str_O> (gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::T_O>, int, gctools::smart_ptr<core::Fixnum_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Str_O> (gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::T_O>, int, gctools::smart_ptr<core::Fixnum_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,unsigned int (core::SimpleBitVector_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:760:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,unsigned int (core::SimpleBitVector_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "unsigned int (core::SimpleBitVector_O::*)(void)"))))) #S(#10# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<llvmo::Module_O>, gctools::smart_ptr<core::Str_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1464:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<llvmo::Module_O>, gctools::smart_ptr<core::Str_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (gctools::smart_ptr<llvmo::Module_O>, gctools::smart_ptr<core::Str_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,int (core::Environment_O::*)(gctools::smart_ptr<core::Symbol_O>) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3077:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,int (core::Environment_O::*)(gctools::smart_ptr<core::Symbol_O>) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "int (core::Environment_O::*)(gctools::smart_ptr<core::Symbol_O>) const"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ParenType,clang::QualType (clang::ParenType::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ParenType,clang::QualType (clang::ParenType::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::ParenType" :#3# "ParenType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::QualType (clang::ParenType::*)(void) const"))))) #S(#10# :#1# "clbind::VariadicConstructorFunctoid<clbind::policies<>,clang::tooling::RefactoringTool *,clang::tooling::RefactoringTool,clbind::constructor<TEMPLATE_ARG_PACK_SIZE2>>" :#3# "VariadicConstructorFunctoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_constructor_functoids.h:409:1" :#6# #S(#11# :#1# "clbind::VariadicConstructorFunctoid<clbind::policies<>,clang::tooling::RefactoringTool *,clang::tooling::RefactoringTool,clbind::constructor<TEMPLATE_ARG_PACK_SIZE2>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#16# :#1# NIL :#17# #S(#15# :#1# "clang::tooling::RefactoringTool" :#3# "RefactoringTool"))) #S(#13# :#9# 2 :#6# #S(#15# :#1# "clang::tooling::RefactoringTool" :#3# "RefactoringTool")) #S(#13# :#9# 3 :#6# #S(#11# :#1# "clbind::constructor<TEMPLATE_ARG_PACK_SIZE2>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL))))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (llvmo::Module_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (llvmo::Module_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (llvmo::Module_O::*)(void) const"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::Decl,unsigned int (clang::Decl::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::Decl,unsigned int (clang::Decl::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::Decl" :#3# "Decl")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "unsigned int (clang::Decl::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Number_O> (gctools::smart_ptr<core::Number_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Number_O> (gctools::smart_ptr<core::Number_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Number_O> (gctools::smart_ptr<core::Number_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ValueDecl,clang::QualType (clang::ValueDecl::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ValueDecl,clang::QualType (clang::ValueDecl::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::ValueDecl" :#3# "ValueDecl")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::QualType (clang::ValueDecl::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<double (void)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:759:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<double (void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "double (void)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Vector_O> (core::SNode_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Vector_O> (core::SNode_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Vector_O> (core::SNode_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<llvm::ConstantPointerNull *(llvm::PointerType *)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<llvm::ConstantPointerNull *(llvm::PointerType *)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "llvm::ConstantPointerNull *(llvm::PointerType *)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::StructType_O> (gctools::smart_ptr<llvmo::LLVMContext_O>, gctools::smart_ptr<core::T_O>, _Bool)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:648:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::StructType_O> (gctools::smart_ptr<llvmo::LLVMContext_O>, gctools::smart_ptr<core::T_O>, _Bool)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::StructType_O> (gctools::smart_ptr<llvmo::LLVMContext_O>, gctools::smart_ptr<core::T_O>, _Bool)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::SourceManager,llvm::StringRef (clang::SourceManager::*)(clang::SourceLocation) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2119:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::SourceManager,llvm::StringRef (clang::SourceManager::*)(clang::SourceLocation) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::SourceManager" :#3# "SourceManager")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::StringRef (clang::SourceManager::*)(clang::SourceLocation) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Cons_O> (void)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:759:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Cons_O> (void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (void)"))))) #S(#10# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::PosixTimeDuration_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:760:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::PosixTimeDuration_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "std::basic_string<char> (core::PosixTimeDuration_O::*)(void)"))))) #S(#10# :#1# "core::VariadicMethoid<0,int (core::SmallMap_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,int (core::SmallMap_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "int (core::SmallMap_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (core::Bignum_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:760:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (core::Bignum_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (core::Bignum_O::*)(void)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Number_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2251:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Number_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Number_O>, gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,int (core::LambdaListHandler_O::*)(gctools::smart_ptr<core::Symbol_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,int (core::LambdaListHandler_O::*)(gctools::smart_ptr<core::Symbol_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "int (core::LambdaListHandler_O::*)(gctools::smart_ptr<core::Symbol_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<void (const std::basic_string<char> &, int, gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::T_O>, int, gctools::smart_ptr<core::T_O>, int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1258:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (const std::basic_string<char> &, int, gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::T_O>, int, gctools::smart_ptr<core::T_O>, int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (const std::basic_string<char> &, int, gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::T_O>, int, gctools::smart_ptr<core::T_O>, int)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::QualType,clang::QualType (clang::QualType::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::QualType,clang::QualType (clang::QualType::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::QualType" :#3# "QualType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::QualType (clang::QualType::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::StringSet_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1541:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::StringSet_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::StringSet_O::*)(void)"))))) #S(#10# :#1# "core::VariadicFunctoid<int (int, gctools::smart_ptr<core::Vector_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<int (int, gctools::smart_ptr<core::Vector_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "int (int, gctools::smart_ptr<core::Vector_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::Stmt,clang::SourceLocation (clang::Stmt::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::Stmt,clang::SourceLocation (clang::Stmt::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::Stmt" :#3# "Stmt")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::SourceLocation (clang::Stmt::*)(void) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, unsigned long, const llvm::Twine &, _Bool, _Bool)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1002:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, unsigned long, const llvm::Twine &, _Bool, _Bool)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, unsigned long, const llvm::Twine &, _Bool, _Bool)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Stream_O>, gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::Fixnum_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2213:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Stream_O>, gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::Fixnum_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Stream_O>, gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::Fixnum_O>)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Value_O,void (llvm::Value::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:5388:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Value_O,void (llvm::Value::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::Value_O" :#3# "Value_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "void (llvm::Value::*)(void) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, const llvm::Twine &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1207:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, const llvm::Twine &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, const llvm::Twine &)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Function_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2251:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Function_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Function_O>, gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::SimpleBitVector_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:760:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::SimpleBitVector_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "std::basic_string<char> (core::SimpleBitVector_O::*)(void)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, int)"))))) #S(#10# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::Symbol_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1501:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::Symbol_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (gctools::smart_ptr<core::Symbol_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::SimpleBitVector_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1541:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::SimpleBitVector_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::SimpleBitVector_O::*)(void)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::Cons_O::*)(gctools::smart_ptr<core::Symbol_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::Cons_O::*)(gctools::smart_ptr<core::Symbol_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (core::Cons_O::*)(gctools::smart_ptr<core::Symbol_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Pathname_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:648:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Pathname_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Pathname_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Symbol_O> (core::Class_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Symbol_O> (core::Class_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Symbol_O> (core::Class_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<void (clang::ast_matchers::MatchFinder::MatchCallback *)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1501:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (clang::ast_matchers::MatchFinder::MatchCallback *)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (clang::ast_matchers::MatchFinder::MatchCallback *)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2213:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ast_matchers::dynamic::VariantMatcher,std::basic_string<char> (clang::ast_matchers::dynamic::VariantMatcher::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ast_matchers::dynamic::VariantMatcher,std::basic_string<char> (clang::ast_matchers::dynamic::VariantMatcher::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::ast_matchers::dynamic::VariantMatcher" :#3# "VariantMatcher")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "std::basic_string<char> (clang::ast_matchers::dynamic::VariantMatcher::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Regex_O> (const std::basic_string<char> &)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Regex_O> (const std::basic_string<char> &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Regex_O> (const std::basic_string<char> &)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:648:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, int)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TypedefType,_Bool (clang::TypedefType::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TypedefType,_Bool (clang::TypedefType::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::TypedefType" :#3# "TypedefType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "_Bool (clang::TypedefType::*)(void) const"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateSpecializationType,const clang::TemplateArgument &(clang::TemplateSpecializationType::*)(unsigned int) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2119:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateSpecializationType,const clang::TemplateArgument &(clang::TemplateSpecializationType::*)(unsigned int) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::TemplateSpecializationType" :#3# "TemplateSpecializationType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "const clang::TemplateArgument &(clang::TemplateSpecializationType::*)(unsigned int) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (core::WeakPointer_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (core::WeakPointer_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (core::WeakPointer_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<llvm::Pass *(void)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:759:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<llvm::Pass *(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "llvm::Pass *(void)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:648:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<int (int, gctools::smart_ptr<core::ForeignData_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<int (int, gctools::smart_ptr<core::ForeignData_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "int (int, gctools::smart_ptr<core::ForeignData_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Environment_O> (core::Environment_O::*)(gctools::smart_ptr<core::Symbol_O>) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3077:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Environment_O> (core::Environment_O::*)(gctools::smart_ptr<core::Symbol_O>) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Environment_O> (core::Environment_O::*)(gctools::smart_ptr<core::Symbol_O>) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (core::LoadArchive_O::*)(gctools::smart_ptr<core::Symbol_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (core::LoadArchive_O::*)(gctools::smart_ptr<core::Symbol_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (core::LoadArchive_O::*)(gctools::smart_ptr<core::Symbol_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateArgument,clang::TemplateName (clang::TemplateArgument::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateArgument,clang::TemplateName (clang::TemplateArgument::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::TemplateArgument" :#3# "TemplateArgument")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::TemplateName (clang::TemplateArgument::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (llvmo::BasicBlock_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:760:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (llvmo::BasicBlock_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (llvmo::BasicBlock_O::*)(void)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::Symbol_O::*)(gctools::smart_ptr<core::Function_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1502:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::Symbol_O::*)(gctools::smart_ptr<core::Function_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::Symbol_O::*)(gctools::smart_ptr<core::Function_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Cons_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Cons_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::BuiltinType,clang::QualType (clang::BuiltinType::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::BuiltinType,clang::QualType (clang::BuiltinType::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::BuiltinType" :#3# "BuiltinType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::QualType (clang::BuiltinType::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<int (const std::basic_string<char> &)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<int (const std::basic_string<char> &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "int (const std::basic_string<char> &)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ClassTemplateSpecializationDecl,clang::ClassTemplateDecl *(clang::ClassTemplateSpecializationDecl::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ClassTemplateSpecializationDecl,clang::ClassTemplateDecl *(clang::ClassTemplateSpecializationDecl::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::ClassTemplateSpecializationDecl" :#3# "ClassTemplateSpecializationDecl")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::ClassTemplateDecl *(clang::ClassTemplateSpecializationDecl::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::SaveArchive_O::*)(gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1462:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::SaveArchive_O::*)(gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::SaveArchive_O::*)(gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::ResumeInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1266:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::ResumeInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::ResumeInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *)"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (core::ExternalObject_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (core::ExternalObject_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (core::ExternalObject_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::StringSet_O> (core::StringSet_O::*)(gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::StringSet_O> (core::StringSet_O::*)(gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::StringSet_O> (core::StringSet_O::*)(gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateArgument,unsigned int (clang::TemplateArgument::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateArgument,unsigned int (clang::TemplateArgument::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::TemplateArgument" :#3# "TemplateArgument")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "unsigned int (clang::TemplateArgument::*)(void) const"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateTypeParmType,clang::QualType (clang::TemplateTypeParmType::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateTypeParmType,clang::QualType (clang::TemplateTypeParmType::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::TemplateTypeParmType" :#3# "TemplateTypeParmType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::QualType (clang::TemplateTypeParmType::*)(void) const"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::CompilerInstance,clang::ASTContext &(clang::CompilerInstance::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::CompilerInstance,clang::ASTContext &(clang::CompilerInstance::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::CompilerInstance" :#3# "CompilerInstance")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::ASTContext &(clang::CompilerInstance::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Fixnum_O> (core::Str_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Fixnum_O> (core::Str_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Fixnum_O> (core::Str_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Str_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2213:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Str_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Str_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<llvmo::InsertPoint_O> (llvmo::IRBuilderBase_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:760:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<llvmo::InsertPoint_O> (llvmo::IRBuilderBase_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::InsertPoint_O> (llvmo::IRBuilderBase_O::*)(void)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (int, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:648:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (int, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (int, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Str_O> (gctools::smart_ptr<core::Character_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Str_O> (gctools::smart_ptr<core::Character_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Str_O> (gctools::smart_ptr<core::Character_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1426:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::IRBuilder_O> (gctools::smart_ptr<llvmo::LLVMContext_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::IRBuilder_O> (gctools::smart_ptr<llvmo::LLVMContext_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::IRBuilder_O> (gctools::smart_ptr<llvmo::LLVMContext_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::Array_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Array_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1345:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::Array_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Array_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (gctools::smart_ptr<core::Array_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Array_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<_Bool (int, int, int, _Bool)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:608:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<_Bool (int, int, int, _Bool)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "_Bool (int, int, int, _Bool)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Cons_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2213:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Cons_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::Cons_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<_Bool (gctools::smart_ptr<core::Character_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<_Bool (gctools::smart_ptr<core::Character_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "_Bool (gctools::smart_ptr<core::Character_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<_Bool (gctools::smart_ptr<core::Integer_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<_Bool (gctools::smart_ptr<core::Integer_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "_Bool (gctools::smart_ptr<core::Integer_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::ForeignData_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1501:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::ForeignData_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (gctools::smart_ptr<core::ForeignData_O>)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::PHINode *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Type *, unsigned int, const llvm::Twine &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1143:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::PHINode *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Type *, unsigned int, const llvm::Twine &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::PHINode *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Type *, unsigned int, const llvm::Twine &)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::CXXNewExpr,unsigned int (clang::CXXNewExpr::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::CXXNewExpr,unsigned int (clang::CXXNewExpr::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::CXXNewExpr" :#3# "CXXNewExpr")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "unsigned int (clang::CXXNewExpr::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::Str_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:760:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::Str_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (core::Str_O::*)(void)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,asttooling::Diagnostics,std::basic_string<char> (asttooling::Diagnostics::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,asttooling::Diagnostics,std::basic_string<char> (asttooling::Diagnostics::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "asttooling::Diagnostics" :#3# "Diagnostics")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "std::basic_string<char> (asttooling::Diagnostics::*)(void) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Linker_O,llvm::Module *(llvm::Linker::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:4033:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Linker_O,llvm::Module *(llvm::Linker::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::Linker_O" :#3# "Linker_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::Module *(llvm::Linker::*)(void) const"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::Decl,void (clang::Decl::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2712:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::Decl,void (clang::Decl::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::Decl" :#3# "Decl")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "void (clang::Decl::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, int, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:648:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, int, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, int, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (core::Symbol_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (core::Symbol_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (core::Symbol_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::SimpleBitVector_O> (core::SimpleBitVector_O::*)(gctools::smart_ptr<core::SimpleBitVector_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::SimpleBitVector_O> (core::SimpleBitVector_O::*)(gctools::smart_ptr<core::SimpleBitVector_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::SimpleBitVector_O> (core::SimpleBitVector_O::*)(gctools::smart_ptr<core::SimpleBitVector_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::Type,clang::QualType (clang::Type::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::Type,clang::QualType (clang::Type::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::Type" :#3# "Type")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::QualType (clang::Type::*)(void) const"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::Decl,clang::SourceLocation (clang::Decl::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::Decl,clang::SourceLocation (clang::Decl::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::Decl" :#3# "Decl")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::SourceLocation (clang::Decl::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (core::RegexMatch_O::*)(int) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3077:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (core::RegexMatch_O::*)(int) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (core::RegexMatch_O::*)(int) const"))))) #S(#10# :#1# "core::VariadicFunctoid<llvm::Constant *(llvm::StructType *, llvm::ArrayRef<llvm::Constant *>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<llvm::Constant *(llvm::StructType *, llvm::ArrayRef<llvm::Constant *>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "llvm::Constant *(llvm::StructType *, llvm::ArrayRef<llvm::Constant *>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateName,clang::TemplateDecl *(clang::TemplateName::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateName,clang::TemplateDecl *(clang::TemplateName::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::TemplateName" :#3# "TemplateName")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::TemplateDecl *(clang::TemplateName::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::HashTable_O> (void)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:759:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::HashTable_O> (void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::HashTable_O> (void)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::ExecutionEngine_O,const llvm::DataLayout *(llvm::ExecutionEngine::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:4033:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::ExecutionEngine_O,const llvm::DataLayout *(llvm::ExecutionEngine::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::ExecutionEngine_O" :#3# "ExecutionEngine_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "const llvm::DataLayout *(llvm::ExecutionEngine::*)(void) const"))))) #S(#10# :#1# "clbind::VariadicFunctoid<clang::QualType (*)(clang::Type *),clbind::policies<>>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_functoids.h:1490:1" :#6# #S(#11# :#1# "clbind::VariadicFunctoid<clang::QualType (*)(clang::Type *),clbind::policies<>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#16# :#1# NIL :#17# #S(#14# :#1# "clang::QualType (clang::Type *)"))) #S(#13# :#9# 1 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL))))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Symbol_O> (void)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:759:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Symbol_O> (void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Symbol_O> (void)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::NamedDecl,llvm::StringRef (clang::NamedDecl::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::NamedDecl,llvm::StringRef (clang::NamedDecl::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::NamedDecl" :#3# "NamedDecl")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::StringRef (clang::NamedDecl::*)(void) const"))))) #S(#10# :#1# "clbind::VariadicFunctoid<_Bool (*)(std::set<clang::tooling::Replacement, std::less<clang::tooling::Replacement>, std::allocator<clang::tooling::Replacement> > &, const clang::tooling::Replacement &),clbind::policies<>>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_functoids.h:1437:1" :#6# #S(#11# :#1# "clbind::VariadicFunctoid<_Bool (*)(std::set<clang::tooling::Replacement, std::less<clang::tooling::Replacement>, std::allocator<clang::tooling::Replacement> > &, const clang::tooling::Replacement &),clbind::policies<>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#16# :#1# NIL :#17# #S(#14# :#1# "_Bool (std::set<clang::tooling::Replacement, std::less<clang::tooling::Replacement>, std::allocator<clang::tooling::Replacement> > &, const clang::tooling::Replacement &)"))) #S(#13# :#9# 1 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL))))))) #S(#10# :#1# "core::VariadicFunctoid<void (void)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1537:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (void)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<llvmo::Linker_O>, gctools::smart_ptr<llvmo::Module_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2251:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<llvmo::Linker_O>, gctools::smart_ptr<llvmo::Module_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<llvmo::Linker_O>, gctools::smart_ptr<llvmo::Module_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::DependentNameType,_Bool (clang::DependentNameType::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::DependentNameType,_Bool (clang::DependentNameType::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::DependentNameType" :#3# "DependentNameType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "_Bool (clang::DependentNameType::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (core::Path_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (core::Path_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (core::Path_O::*)(void) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(enum llvm::CmpInst::Predicate, llvm::Value *, llvm::Value *, const llvm::Twine &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1075:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(enum llvm::CmpInst::Predicate, llvm::Value *, llvm::Value *, const llvm::Twine &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(enum llvm::CmpInst::Predicate, llvm::Value *, llvm::Value *, const llvm::Twine &)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Symbol_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Symbol_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Symbol_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Cons_O> (gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2288:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Cons_O> (gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::Cons_O> (gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2213:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::StringSet_O> (core::StringSet_O::*)(std::basic_string<char>, gctools::smart_ptr<core::StringSet_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:681:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::StringSet_O> (core::StringSet_O::*)(std::basic_string<char>, gctools::smart_ptr<core::StringSet_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::StringSet_O> (core::StringSet_O::*)(std::basic_string<char>, gctools::smart_ptr<core::StringSet_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateArgument,clang::Expr *(clang::TemplateArgument::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateArgument,clang::Expr *(clang::TemplateArgument::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::TemplateArgument" :#3# "TemplateArgument")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::Expr *(clang::TemplateArgument::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<unsigned int (void)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:759:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<unsigned int (void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "unsigned int (void)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::AtomicCmpXchgInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, llvm::Value *, enum llvm::AtomicOrdering, enum llvm::AtomicOrdering, enum llvm::SynchronizationScope)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:924:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::AtomicCmpXchgInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, llvm::Value *, enum llvm::AtomicOrdering, enum llvm::AtomicOrdering, enum llvm::SynchronizationScope)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::AtomicCmpXchgInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, llvm::Value *, enum llvm::AtomicOrdering, enum llvm::AtomicOrdering, enum llvm::SynchronizationScope)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Str_O> (core::SingleDispatchMethod_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Str_O> (core::SingleDispatchMethod_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Str_O> (core::SingleDispatchMethod_O::*)(void) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, unsigned long, unsigned long, const llvm::Twine &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1075:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, unsigned long, unsigned long, const llvm::Twine &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, unsigned long, unsigned long, const llvm::Twine &)"))))) #S(#10# :#1# "core::VariadicFunctoid<llvm::Constant *(llvm::Type *, double)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<llvm::Constant *(llvm::Type *, double)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "llvm::Constant *(llvm::Type *, double)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Symbol_O> (core::Function_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Symbol_O> (core::Function_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Symbol_O> (core::Function_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:567:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:524:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Vector_O> (gctools::smart_ptr<core::Symbol_O>, int, _Bool, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:433:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Vector_O> (gctools::smart_ptr<core::Symbol_O>, int, _Bool, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Vector_O> (gctools::smart_ptr<core::Symbol_O>, int, _Bool, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Cons_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:567:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Cons_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:10:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1345:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Vector_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:524:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Vector_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Vector_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TypeLoc,clang::SourceRange (clang::TypeLoc::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TypeLoc,clang::SourceRange (clang::TypeLoc::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::TypeLoc" :#3# "TypeLoc")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::SourceRange (clang::TypeLoc::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Pathname_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>, _Bool)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2089:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Pathname_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>, _Bool)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::Pathname_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>, _Bool)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::ObjectSet_O> (core::ObjectSet_O::*)(gctools::smart_ptr<core::ObjectSet_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::ObjectSet_O> (core::ObjectSet_O::*)(gctools::smart_ptr<core::ObjectSet_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::ObjectSet_O> (core::ObjectSet_O::*)(gctools::smart_ptr<core::ObjectSet_O>)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, const llvm::APInt &, const llvm::Twine &, _Bool, _Bool)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1002:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, const llvm::APInt &, const llvm::Twine &, _Bool, _Bool)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, const llvm::APInt &, const llvm::Twine &, _Bool, _Bool)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Integer_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2251:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Integer_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Integer_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Str_O> (int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Str_O> (int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Str_O> (int)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, const llvm::APInt &, const llvm::Twine &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1143:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, const llvm::APInt &, const llvm::Twine &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, const llvm::APInt &, const llvm::Twine &)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateArgument,enum clang::TemplateArgument::ArgKind (clang::TemplateArgument::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateArgument,enum clang::TemplateArgument::ArgKind (clang::TemplateArgument::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::TemplateArgument" :#3# "TemplateArgument")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "enum clang::TemplateArgument::ArgKind (clang::TemplateArgument::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::HashTable_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2288:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::HashTable_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::HashTable_O>)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilderBase_O,llvm::BasicBlock *(llvm::IRBuilderBase::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:4033:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilderBase_O,llvm::BasicBlock *(llvm::IRBuilderBase::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilderBase_O" :#3# "IRBuilderBase_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::BasicBlock *(llvm::IRBuilderBase::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Float_O> (gctools::smart_ptr<core::Real_O>, gctools::smart_ptr<core::Float_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Float_O> (gctools::smart_ptr<core::Real_O>, gctools::smart_ptr<core::Float_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Float_O> (gctools::smart_ptr<core::Real_O>, gctools::smart_ptr<core::Float_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Symbol_O> (core::Symbol_O::*)(gctools::smart_ptr<core::T_O>) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3077:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Symbol_O> (core::Symbol_O::*)(gctools::smart_ptr<core::T_O>) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Symbol_O> (core::Symbol_O::*)(gctools::smart_ptr<core::T_O>) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Rational_O> (core::Str_O::*)(const std::basic_string<char> &, int)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:681:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Rational_O> (core::Str_O::*)(const std::basic_string<char> &, int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Rational_O> (core::Str_O::*)(const std::basic_string<char> &, int)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::SymbolSet_O> (core::SymbolSet_O::*)(gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::SymbolSet_O> (core::SymbolSet_O::*)(gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::SymbolSet_O> (core::SymbolSet_O::*)(gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Function_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2288:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Function_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Function_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<llvm::Pass *(int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<llvm::Pass *(int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "llvm::Pass *(int)"))))) #S(#10# :#1# "clbind::VariadicConstructorFunctoid<clbind::policies<>,clang::tooling::ClangStripOutputAdjuster *,clang::tooling::ClangStripOutputAdjuster,clbind::constructor<>>" :#3# "VariadicConstructorFunctoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_constructor_functoids.h:498:1" :#6# #S(#11# :#1# "clbind::VariadicConstructorFunctoid<clbind::policies<>,clang::tooling::ClangStripOutputAdjuster *,clang::tooling::ClangStripOutputAdjuster,clbind::constructor<>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#16# :#1# NIL :#17# #S(#15# :#1# "clang::tooling::ClangStripOutputAdjuster" :#3# "ClangStripOutputAdjuster"))) #S(#13# :#9# 2 :#6# #S(#15# :#1# "clang::tooling::ClangStripOutputAdjuster" :#3# "ClangStripOutputAdjuster")) #S(#13# :#9# 3 :#6# #S(#11# :#1# "clbind::constructor<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL))))))) #S(#10# :#1# "core::VariadicMethoid<0,void (llvmo::StructType_O::*)(gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1462:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (llvmo::StructType_O::*)(gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (llvmo::StructType_O::*)(gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::HashTable_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::HashTable_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (core::HashTable_O::*)(void) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Module_O,llvm::Constant *(llvm::Module::*)(llvm::StringRef, llvm::Type *)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1207:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Module_O,llvm::Constant *(llvm::Module::*)(llvm::StringRef, llvm::Type *)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::Module_O" :#3# "Module_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::Constant *(llvm::Module::*)(llvm::StringRef, llvm::Type *)"))))) #S(#10# :#1# "core::VariadicFunctoid<llvm::ImmutablePass *(void)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:759:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<llvm::ImmutablePass *(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "llvm::ImmutablePass *(void)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::Cons_O::*)(gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::Cons_O::*)(gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (core::Cons_O::*)(gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::GlobalVariable_O,void (llvm::GlobalVariable::*)(llvm::Constant *)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:2619:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::GlobalVariable_O,void (llvm::GlobalVariable::*)(llvm::Constant *)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::GlobalVariable_O" :#3# "GlobalVariable_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "void (llvm::GlobalVariable::*)(llvm::Constant *)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,asttooling::DerivableMatchCallback,void (asttooling::DerivableMatchCallback::*)(void)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:1063:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,asttooling::DerivableMatchCallback,void (asttooling::DerivableMatchCallback::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "asttooling::DerivableMatchCallback" :#3# "DerivableMatchCallback")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "void (asttooling::DerivableMatchCallback::*)(void)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, const llvm::APInt &, const llvm::Twine &, _Bool)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1075:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, const llvm::APInt &, const llvm::Twine &, _Bool)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, const llvm::APInt &, const llvm::Twine &, _Bool)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::PassManagerBuilder_O,void (llvm::PassManagerBuilder::*)(llvm::legacy::PassManagerBase &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:2619:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::PassManagerBuilder_O,void (llvm::PassManagerBuilder::*)(llvm::legacy::PassManagerBase &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::PassManagerBuilder_O" :#3# "PassManagerBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "void (llvm::PassManagerBuilder::*)(llvm::legacy::PassManagerBase &)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::CallInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, const llvm::Twine &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1143:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::CallInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, const llvm::Twine &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::CallInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, const llvm::Twine &)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::PointerType_O> (gctools::smart_ptr<llvmo::Type_O>, unsigned int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::PointerType_O> (gctools::smart_ptr<llvmo::Type_O>, unsigned int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::PointerType_O> (gctools::smart_ptr<llvmo::Type_O>, unsigned int)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::VAArgInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Type *, const llvm::Twine &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1143:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::VAArgInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Type *, const llvm::Twine &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::VAArgInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Type *, const llvm::Twine &)"))))) #S(#10# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<llvmo::PassManager_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1501:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<llvmo::PassManager_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (gctools::smart_ptr<llvmo::PassManager_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::Symbol_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::Symbol_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "std::basic_string<char> (core::Symbol_O::*)(void) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::CallInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, llvm::Value *, llvm::Value *, llvm::Value *, const llvm::Twine &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:924:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::CallInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, llvm::Value *, llvm::Value *, llvm::Value *, const llvm::Twine &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::CallInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, llvm::Value *, llvm::Value *, llvm::Value *, const llvm::Twine &)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::LambdaListHandler_O> (core::Function_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::LambdaListHandler_O> (core::Function_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::LambdaListHandler_O> (core::Function_O::*)(void) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Value_O,llvm::StringRef (llvm::Value::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:4033:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Value_O,llvm::StringRef (llvm::Value::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::Value_O" :#3# "Value_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::StringRef (llvm::Value::*)(void) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilderBase_O,void (llvm::IRBuilderBase::*)(llvm::BasicBlock *)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:2619:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilderBase_O,void (llvm::IRBuilderBase::*)(llvm::BasicBlock *)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilderBase_O" :#3# "IRBuilderBase_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "void (llvm::IRBuilderBase::*)(llvm::BasicBlock *)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Pathname_O> (gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Pathname_O> (gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Pathname_O> (gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Number_O> (gctools::smart_ptr<core::Real_O>, gctools::smart_ptr<core::Real_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2251:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Number_O> (gctools::smart_ptr<core::Real_O>, gctools::smart_ptr<core::Real_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::Number_O> (gctools::smart_ptr<core::Real_O>, gctools::smart_ptr<core::Real_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::Array_O::*)(int, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:681:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::Array_O::*)(int, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (core::Array_O::*)(int, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::DoubleFloat_O> (void)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2324:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::DoubleFloat_O> (void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::DoubleFloat_O> (void)"))))) #S(#10# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::Regex_O::*)(const std::basic_string<char> &, const std::basic_string<char> &) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3037:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::Regex_O::*)(const std::basic_string<char> &, const std::basic_string<char> &) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "std::basic_string<char> (core::Regex_O::*)(const std::basic_string<char> &, const std::basic_string<char> &) const"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::SourceLocation,_Bool (clang::SourceLocation::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::SourceLocation,_Bool (clang::SourceLocation::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::SourceLocation" :#3# "SourceLocation")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "_Bool (clang::SourceLocation::*)(void) const"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::MemberPointerType,clang::QualType (clang::MemberPointerType::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::MemberPointerType,clang::QualType (clang::MemberPointerType::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::MemberPointerType" :#3# "MemberPointerType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::QualType (clang::MemberPointerType::*)(void) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::DIBuilder_O,llvm::DISubprogram (llvm::DIBuilder::*)(llvm::DIDescriptor, llvm::StringRef, llvm::StringRef, llvm::DIFile, unsigned int, llvm::DICompositeType, _Bool, _Bool, unsigned int, unsigned int, _Bool, llvm::Function *, llvm::MDNode *, llvm::MDNode *)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:138:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::DIBuilder_O,llvm::DISubprogram (llvm::DIBuilder::*)(llvm::DIDescriptor, llvm::StringRef, llvm::StringRef, llvm::DIFile, unsigned int, llvm::DICompositeType, _Bool, _Bool, unsigned int, unsigned int, _Bool, llvm::Function *, llvm::MDNode *, llvm::MDNode *)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::DIBuilder_O" :#3# "DIBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::DISubprogram (llvm::DIBuilder::*)(llvm::DIDescriptor, llvm::StringRef, llvm::StringRef, llvm::DIFile, unsigned int, llvm::DICompositeType, _Bool, _Bool, unsigned int, unsigned int, _Bool, llvm::Function *, llvm::MDNode *, llvm::MDNode *)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Cons_O> (gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Cons_O> (gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::SwitchInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::BasicBlock *, unsigned int, llvm::MDNode *)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1075:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::SwitchInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::BasicBlock *, unsigned int, llvm::MDNode *)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::SwitchInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::BasicBlock *, unsigned int, llvm::MDNode *)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Iterator_O> (gctools::smart_ptr<core::Iterator_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Iterator_O> (gctools::smart_ptr<core::Iterator_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Iterator_O> (gctools::smart_ptr<core::Iterator_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateArgument,llvm::ArrayRef<clang::TemplateArgument> (clang::TemplateArgument::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateArgument,llvm::ArrayRef<clang::TemplateArgument> (clang::TemplateArgument::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::TemplateArgument" :#3# "TemplateArgument")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::ArrayRef<clang::TemplateArgument> (clang::TemplateArgument::*)(void) const"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::tooling::CompilationDatabase,std::vector<clang::tooling::CompileCommand, std::allocator<clang::tooling::CompileCommand> > (clang::tooling::CompilationDatabase::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::tooling::CompilationDatabase,std::vector<clang::tooling::CompileCommand, std::allocator<clang::tooling::CompileCommand> > (clang::tooling::CompilationDatabase::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::tooling::CompilationDatabase" :#3# "CompilationDatabase")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "std::vector<clang::tooling::CompileCommand, std::allocator<clang::tooling::CompileCommand> > (clang::tooling::CompilationDatabase::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::PassManager_O> (void)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:759:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::PassManager_O> (void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::PassManager_O> (void)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<llvmo::Module_O>, gctools::smart_ptr<core::Symbol_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<llvmo::Module_O>, gctools::smart_ptr<core::Symbol_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<llvmo::Module_O>, gctools::smart_ptr<core::Symbol_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (core::Integer_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (core::Integer_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (core::Integer_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:608:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<llvm::Constant *(llvm::Type *, llvm::StringRef)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<llvm::Constant *(llvm::Type *, llvm::StringRef)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "llvm::Constant *(llvm::Type *, llvm::StringRef)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (void)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2324:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (void)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::SingleDispatchGenericFunction_O> (gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::SingleDispatchGenericFunction_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::SingleDispatchGenericFunction_O> (gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::SingleDispatchGenericFunction_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::SingleDispatchGenericFunction_O> (gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::SingleDispatchGenericFunction_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::CXXBaseSpecifier,clang::QualType (clang::CXXBaseSpecifier::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::CXXBaseSpecifier,clang::QualType (clang::CXXBaseSpecifier::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::CXXBaseSpecifier" :#3# "CXXBaseSpecifier")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::QualType (clang::CXXBaseSpecifier::*)(void) const"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::tooling::RefactoringTool,_Bool (clang::tooling::RefactoringTool::*)(clang::Rewriter &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:470:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::tooling::RefactoringTool,_Bool (clang::tooling::RefactoringTool::*)(clang::Rewriter &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::tooling::RefactoringTool" :#3# "RefactoringTool")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "_Bool (clang::tooling::RefactoringTool::*)(clang::Rewriter &)"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (core::SymbolSet_O::*)(gctools::smart_ptr<core::Symbol_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (core::SymbolSet_O::*)(gctools::smart_ptr<core::Symbol_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (core::SymbolSet_O::*)(gctools::smart_ptr<core::Symbol_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::RegexMatch_O> (core::Regex_O::*)(const std::basic_string<char> &) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3077:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::RegexMatch_O> (core::Regex_O::*)(const std::basic_string<char> &) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::RegexMatch_O> (core::Regex_O::*)(const std::basic_string<char> &) const"))))) #S(#10# :#1# "clbind::VariadicFunctoid<gctools::smart_ptr<core::HashTable_O> (*)(gctools::smart_ptr<core::T_O>),clbind::policies<>>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_functoids.h:1490:1" :#6# #S(#11# :#1# "clbind::VariadicFunctoid<gctools::smart_ptr<core::HashTable_O> (*)(gctools::smart_ptr<core::T_O>),clbind::policies<>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#16# :#1# NIL :#17# #S(#14# :#1# "gctools::smart_ptr<core::HashTable_O> (gctools::smart_ptr<core::T_O>)"))) #S(#13# :#9# 1 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL))))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,asttooling::DerivableFrontendActionFactory,clang::FrontendAction *(asttooling::DerivableFrontendActionFactory::*)(void)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:523:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,asttooling::DerivableFrontendActionFactory,clang::FrontendAction *(asttooling::DerivableFrontendActionFactory::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "asttooling::DerivableFrontendActionFactory" :#3# "DerivableFrontendActionFactory")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::FrontendAction *(asttooling::DerivableFrontendActionFactory::*)(void)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateSpecializationType,_Bool (clang::TemplateSpecializationType::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateSpecializationType,_Bool (clang::TemplateSpecializationType::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::TemplateSpecializationType" :#3# "TemplateSpecializationType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "_Bool (clang::TemplateSpecializationType::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Number_O> (core::HashTable_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Number_O> (core::HashTable_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Number_O> (core::HashTable_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<_Bool (gctools::smart_ptr<core::Symbol_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<_Bool (gctools::smart_ptr<core::Symbol_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "_Bool (gctools::smart_ptr<core::Symbol_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Symbol_O> (int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Symbol_O> (int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Symbol_O> (int)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateArgument,llvm::APSInt (clang::TemplateArgument::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateArgument,llvm::APSInt (clang::TemplateArgument::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::TemplateArgument" :#3# "TemplateArgument")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::APSInt (clang::TemplateArgument::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (core::Character_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (core::Character_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (core::Character_O::*)(void) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, const llvm::Twine &, _Bool)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1075:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, const llvm::Twine &, _Bool)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, const llvm::Twine &, _Bool)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Pointer_O> (gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Pointer_O> (gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Pointer_O> (gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::SNode_O::*)(gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1502:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::SNode_O::*)(gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::SNode_O::*)(gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::PosixTimeDuration_O> (core::PosixTimeDuration_O::*)(gctools::smart_ptr<core::PosixTimeDuration_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::PosixTimeDuration_O> (core::PosixTimeDuration_O::*)(gctools::smart_ptr<core::PosixTimeDuration_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::PosixTimeDuration_O> (core::PosixTimeDuration_O::*)(gctools::smart_ptr<core::PosixTimeDuration_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Stream_O>, gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2213:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Stream_O>, gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Stream_O>, gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (core::ObjectSet_O::*)(gctools::smart_ptr<core::T_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (core::ObjectSet_O::*)(gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (core::ObjectSet_O::*)(gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::SourceLocation,std::basic_string<char> (clang::SourceLocation::*)(const clang::SourceManager &) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2119:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::SourceLocation,std::basic_string<char> (clang::SourceLocation::*)(const clang::SourceManager &) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::SourceLocation" :#3# "SourceLocation")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "std::basic_string<char> (clang::SourceLocation::*)(const clang::SourceManager &) const"))))) #S(#10# :#1# "clbind::VariadicFunctoid<void (*)(clang::ClassTemplateSpecializationDecl *, gctools::smart_ptr<core::T_O>, clang::LangOptions &, _Bool),clbind::policies<>>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_functoids.h:2848:1" :#6# #S(#11# :#1# "clbind::VariadicFunctoid<void (*)(clang::ClassTemplateSpecializationDecl *, gctools::smart_ptr<core::T_O>, clang::LangOptions &, _Bool),clbind::policies<>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#16# :#1# NIL :#17# #S(#14# :#1# "void (clang::ClassTemplateSpecializationDecl *, gctools::smart_ptr<core::T_O>, clang::LangOptions &, _Bool)"))) #S(#13# :#9# 1 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL))))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Function_O,unsigned long (llvm::Function::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:4033:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Function_O,unsigned long (llvm::Function::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::Function_O" :#3# "Function_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "unsigned long (llvm::Function::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (llvmo::NamedMDNode_O::*)(llvm::MDNode *)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1502:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (llvmo::NamedMDNode_O::*)(llvm::MDNode *)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (llvmo::NamedMDNode_O::*)(llvm::MDNode *)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateSpecializationType,clang::QualType (clang::TemplateSpecializationType::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateSpecializationType,clang::QualType (clang::TemplateSpecializationType::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::TemplateSpecializationType" :#3# "TemplateSpecializationType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::QualType (clang::TemplateSpecializationType::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<_Bool (const std::basic_string<char> &)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<_Bool (const std::basic_string<char> &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "_Bool (const std::basic_string<char> &)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::TagbodyEnvironment_O> (gctools::smart_ptr<core::Environment_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::TagbodyEnvironment_O> (gctools::smart_ptr<core::Environment_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::TagbodyEnvironment_O> (gctools::smart_ptr<core::Environment_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1464:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Fixnum_O> (gctools::smart_ptr<core::Symbol_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Fixnum_O> (gctools::smart_ptr<core::Symbol_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Fixnum_O> (gctools::smart_ptr<core::Symbol_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::QualType,std::basic_string<char> (clang::QualType::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::QualType,std::basic_string<char> (clang::QualType::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::QualType" :#3# "QualType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "std::basic_string<char> (clang::QualType::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::SymbolSet_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:760:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::SymbolSet_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (core::SymbolSet_O::*)(void)"))))) #S(#10# :#1# "core::VariadicMethoid<0,char (core::Str_O::*)(int) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3077:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,char (core::Str_O::*)(int) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "char (core::Str_O::*)(int) const"))))) #S(#10# :#1# "core::VariadicFunctoid<_Bool (gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<_Bool (gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "_Bool (gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,core::Creator *(core::Class_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,core::Creator *(core::Class_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "core::Creator *(core::Class_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::multiple_values<core::Cons_O> (core::LambdaListHandler_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:4690:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::multiple_values<core::Cons_O> (core::LambdaListHandler_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::multiple_values<core::Cons_O> (core::LambdaListHandler_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::SourceManager_O> (void)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:759:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::SourceManager_O> (void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::SourceManager_O> (void)"))))) #S(#10# :#1# "core::VariadicMethoid<0,int (core::Character_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,int (core::Character_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "int (core::Character_O::*)(void) const"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::RValueReferenceType,clang::QualType (clang::RValueReferenceType::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::RValueReferenceType,clang::QualType (clang::RValueReferenceType::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::RValueReferenceType" :#3# "RValueReferenceType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::QualType (clang::RValueReferenceType::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::Path_O::*)(const std::basic_string<char> &)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1502:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::Path_O::*)(const std::basic_string<char> &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::Path_O::*)(const std::basic_string<char> &)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Instance_O> (gctools::smart_ptr<core::Instance_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Instance_O> (gctools::smart_ptr<core::Instance_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Instance_O> (gctools::smart_ptr<core::Instance_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::RegexMatch_O::*)(int) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3077:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::RegexMatch_O::*)(int) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "std::basic_string<char> (core::RegexMatch_O::*)(int) const"))))) #S(#10# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::WeakKeyHashTable_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1501:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::WeakKeyHashTable_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (gctools::smart_ptr<core::WeakKeyHashTable_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (llvmo::Function_O::*)(gctools::smart_ptr<core::LoadTimeValues_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1502:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (llvmo::Function_O::*)(gctools::smart_ptr<core::LoadTimeValues_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (llvmo::Function_O::*)(gctools::smart_ptr<core::LoadTimeValues_O>)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::LandingPadInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Type *, llvm::Value *, unsigned int, const llvm::Twine &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1075:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::LandingPadInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Type *, llvm::Value *, unsigned int, const llvm::Twine &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::LandingPadInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Type *, llvm::Value *, unsigned int, const llvm::Twine &)"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (core::Iterator_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:760:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (core::Iterator_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (core::Iterator_O::*)(void)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ast_matchers::MatchFinderMatchResult,const clang::ast_matchers::BoundNodes &(clang::ast_matchers::MatchFinderMatchResult::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ast_matchers::MatchFinderMatchResult,const clang::ast_matchers::BoundNodes &(clang::ast_matchers::MatchFinderMatchResult::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::ast_matchers::MatchFinderMatchResult" :#3# "MatchFinderMatchResult")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "const clang::ast_matchers::BoundNodes &(clang::ast_matchers::MatchFinderMatchResult::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Class_O>, gctools::smart_ptr<core::Class_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2251:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Class_O>, gctools::smart_ptr<core::Class_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Class_O>, gctools::smart_ptr<core::Class_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Pathname_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:608:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Pathname_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Pathname_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::RecordType,clang::RecordDecl *(clang::RecordType::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::RecordType,clang::RecordDecl *(clang::RecordType::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::RecordType" :#3# "RecordType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::RecordDecl *(clang::RecordType::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,std::basic_string<char> (llvmo::EngineBuilder_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,std::basic_string<char> (llvmo::EngineBuilder_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "std::basic_string<char> (llvmo::EngineBuilder_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, _Bool, gctools::smart_ptr<core::T_O>, _Bool, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:385:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, _Bool, gctools::smart_ptr<core::T_O>, _Bool, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, _Bool, gctools::smart_ptr<core::T_O>, _Bool, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateSpecializationType,unsigned int (clang::TemplateSpecializationType::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateSpecializationType,unsigned int (clang::TemplateSpecializationType::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::TemplateSpecializationType" :#3# "TemplateSpecializationType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "unsigned int (clang::TemplateSpecializationType::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::Module_O> (gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<llvmo::LLVMContext_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::Module_O> (gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<llvmo::LLVMContext_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::Module_O> (gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<llvmo::LLVMContext_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<llvm::Pass *(_Bool)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<llvm::Pass *(_Bool)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "llvm::Pass *(_Bool)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::Iterator_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1541:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::Iterator_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::Iterator_O::*)(void)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::ArrayType_O> (gctools::smart_ptr<llvmo::Type_O>, unsigned long)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::ArrayType_O> (gctools::smart_ptr<llvmo::Type_O>, unsigned long)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::ArrayType_O> (gctools::smart_ptr<llvmo::Type_O>, unsigned long)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::ObjectSet_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:760:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::ObjectSet_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (core::ObjectSet_O::*)(void)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Str_O> (void)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:759:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Str_O> (void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Str_O> (void)"))))) #S(#10# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1464:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::StrWithFillPtr_O::*)(gctools::smart_ptr<core::T_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1502:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::StrWithFillPtr_O::*)(gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::StrWithFillPtr_O::*)(gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Class_O> (core::SingleDispatchMethod_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Class_O> (core::SingleDispatchMethod_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Class_O> (core::SingleDispatchMethod_O::*)(void) const"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ASTContext,const clang::LangOptions &(clang::ASTContext::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ASTContext,const clang::LangOptions &(clang::ASTContext::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::ASTContext" :#3# "ASTContext")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "const clang::LangOptions &(clang::ASTContext::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::CompiledFunction_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1464:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::CompiledFunction_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (gctools::smart_ptr<core::CompiledFunction_O>, gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::LoadArchive_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::LoadArchive_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (core::LoadArchive_O::*)(void) const"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::PresumedLoc,_Bool (clang::PresumedLoc::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::PresumedLoc,_Bool (clang::PresumedLoc::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::PresumedLoc" :#3# "PresumedLoc")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "_Bool (clang::PresumedLoc::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::MDString_O> (gctools::smart_ptr<llvmo::LLVMContext_O>, gctools::smart_ptr<core::Str_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::MDString_O> (gctools::smart_ptr<llvmo::LLVMContext_O>, gctools::smart_ptr<core::Str_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::MDString_O> (gctools::smart_ptr<llvmo::LLVMContext_O>, gctools::smart_ptr<core::Str_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::Fixnum_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::Fixnum_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "std::basic_string<char> (core::Fixnum_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<cffi::Pointer_O> (cffi::Pointer_O::*)(gctools::smart_ptr<core::Integer_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<cffi::Pointer_O> (cffi::Pointer_O::*)(gctools::smart_ptr<core::Integer_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<cffi::Pointer_O> (cffi::Pointer_O::*)(gctools::smart_ptr<core::Integer_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Path_O> (void)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2324:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Path_O> (void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::Path_O> (void)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::Environment_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::Environment_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::Environment_O>)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::BasicBlock_O,llvm::Function *(llvm::BasicBlock::*)(void)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1321:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::BasicBlock_O,llvm::Function *(llvm::BasicBlock::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::BasicBlock_O" :#3# "BasicBlock_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::Function *(llvm::BasicBlock::*)(void)"))))) #S(#10# :#1# "core::VariadicFunctoid<void (const std::basic_string<char> &, int, gctools::smart_ptr<core::Symbol_O>, int, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1302:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (const std::basic_string<char> &, int, gctools::smart_ptr<core::Symbol_O>, int, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (const std::basic_string<char> &, int, gctools::smart_ptr<core::Symbol_O>, int, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ASTContext,clang::TranslationUnitDecl *(clang::ASTContext::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ASTContext,clang::TranslationUnitDecl *(clang::ASTContext::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::ASTContext" :#3# "ASTContext")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::TranslationUnitDecl *(clang::ASTContext::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::Constant_O> (gctools::smart_ptr<llvmo::ArrayType_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::Constant_O> (gctools::smart_ptr<llvmo::ArrayType_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::Constant_O> (gctools::smart_ptr<llvmo::ArrayType_O>, gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "clbind::VariadicFunctoid<_Bool (*)(clang::FrontendAction *, const llvm::Twine &, const llvm::Twine &),clbind::policies<>>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_functoids.h:1378:1" :#6# #S(#11# :#1# "clbind::VariadicFunctoid<_Bool (*)(clang::FrontendAction *, const llvm::Twine &, const llvm::Twine &),clbind::policies<>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#16# :#1# NIL :#17# #S(#14# :#1# "_Bool (clang::FrontendAction *, const llvm::Twine &, const llvm::Twine &)"))) #S(#13# :#9# 1 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL))))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<llvmo::GlobalVariable_O> (llvmo::Module_O::*)(const std::basic_string<char> &, const std::basic_string<char> &)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:681:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<llvmo::GlobalVariable_O> (llvmo::Module_O::*)(const std::basic_string<char> &, const std::basic_string<char> &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::GlobalVariable_O> (llvmo::Module_O::*)(const std::basic_string<char> &, const std::basic_string<char> &)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::NamedDecl,clang::IdentifierInfo *(clang::NamedDecl::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::NamedDecl,clang::IdentifierInfo *(clang::NamedDecl::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::NamedDecl" :#3# "NamedDecl")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::IdentifierInfo *(clang::NamedDecl::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Integer_O> (int, gctools::smart_ptr<core::Vector_O>, int, int, int, int, int, int, _Bool, _Bool, _Bool, _Bool, _Bool, _Bool)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:125:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Integer_O> (int, gctools::smart_ptr<core::Vector_O>, int, int, int, int, int, int, _Bool, _Bool, _Bool, _Bool, _Bool, _Bool)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Integer_O> (int, gctools::smart_ptr<core::Vector_O>, int, int, int, int, int, int, _Bool, _Bool, _Bool, _Bool, _Bool, _Bool)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (const std::basic_string<char> &, int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (const std::basic_string<char> &, int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (const std::basic_string<char> &, int)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::FunctionValueEnvironment_O> (int, gctools::smart_ptr<core::Environment_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::FunctionValueEnvironment_O> (int, gctools::smart_ptr<core::Environment_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::FunctionValueEnvironment_O> (int, gctools::smart_ptr<core::Environment_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<char (gctools::smart_ptr<core::T_O>, int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<char (gctools::smart_ptr<core::T_O>, int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "char (gctools::smart_ptr<core::T_O>, int)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::LambdaListHandler_O> (core::SingleDispatchMethod_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::LambdaListHandler_O> (core::SingleDispatchMethod_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::LambdaListHandler_O> (core::SingleDispatchMethod_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,std::basic_string<char> (llvmo::APInt_O::*)(int, _Bool) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3037:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,std::basic_string<char> (llvmo::APInt_O::*)(int, _Bool) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "std::basic_string<char> (llvmo::APInt_O::*)(int, _Bool) const"))))) #S(#10# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::Stream_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1501:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::Stream_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (gctools::smart_ptr<core::Stream_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::LambdaListHandler_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:648:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::LambdaListHandler_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::LambdaListHandler_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::Array_O::*)(gctools::smart_ptr<core::T_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1502:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::Array_O::*)(gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::Array_O::*)(gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "clbind::VariadicFunctoid<std::unique_ptr<clang::tooling::JSONCompilationDatabase, std::default_delete<clang::tooling::JSONCompilationDatabase> > (*)(llvm::StringRef, std::basic_string<char> &),clbind::policies<TEMPLATE_ARG_PACK_SIZE2>>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_functoids.h:4530:1" :#6# #S(#11# :#1# "clbind::VariadicFunctoid<std::unique_ptr<clang::tooling::JSONCompilationDatabase, std::default_delete<clang::tooling::JSONCompilationDatabase> > (*)(llvm::StringRef, std::basic_string<char> &),clbind::policies<TEMPLATE_ARG_PACK_SIZE2>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#16# :#1# NIL :#17# #S(#14# :#1# "std::unique_ptr<clang::tooling::JSONCompilationDatabase, std::default_delete<clang::tooling::JSONCompilationDatabase> > (llvm::StringRef, std::basic_string<char> &)"))) #S(#13# :#9# 1 :#6# #S(#11# :#1# "clbind::policies<TEMPLATE_ARG_PACK_SIZE2>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL))))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::Decl,void (clang::Decl::*)(_Bool)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:1012:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::Decl,void (clang::Decl::*)(_Bool)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::Decl" :#3# "Decl")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "void (clang::Decl::*)(_Bool)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::Environment_O::*)(gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:681:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::Environment_O::*)(gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (core::Environment_O::*)(gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::DependentTemplateSpecializationType,clang::QualType (clang::DependentTemplateSpecializationType::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::DependentTemplateSpecializationType,clang::QualType (clang::DependentTemplateSpecializationType::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::DependentTemplateSpecializationType" :#3# "DependentTemplateSpecializationType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::QualType (clang::DependentTemplateSpecializationType::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1464:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>)"))))) #S(#10# :#1# "clbind::VariadicFunctoid<gctools::smart_ptr<core::T_O> (*)(clang::Type *),clbind::policies<>>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_functoids.h:1490:1" :#6# #S(#11# :#1# "clbind::VariadicFunctoid<gctools::smart_ptr<core::T_O> (*)(clang::Type *),clbind::policies<>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#16# :#1# NIL :#17# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (clang::Type *)"))) #S(#13# :#9# 1 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL))))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Symbol_O> (const std::basic_string<char> &, int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Symbol_O> (const std::basic_string<char> &, int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Symbol_O> (const std::basic_string<char> &, int)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2173:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:608:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Pathname_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Pathname_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Pathname_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Fixnum_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Vector_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Fixnum_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Vector_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Fixnum_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Vector_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, _Bool, _Bool, _Bool)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2132:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, _Bool, _Bool, _Bool)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, _Bool, _Bool, _Bool)"))))) #S(#10# :#1# "clbind::VariadicConstructorFunctoid<clbind::policies<>,clang::tooling::Replacement *,clang::tooling::Replacement,clbind::constructor<TEMPLATE_ARG_PACK_SIZE3>>" :#3# "VariadicConstructorFunctoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_constructor_functoids.h:357:1" :#6# #S(#11# :#1# "clbind::VariadicConstructorFunctoid<clbind::policies<>,clang::tooling::Replacement *,clang::tooling::Replacement,clbind::constructor<TEMPLATE_ARG_PACK_SIZE3>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#16# :#1# NIL :#17# #S(#15# :#1# "clang::tooling::Replacement" :#3# "Replacement"))) #S(#13# :#9# 2 :#6# #S(#15# :#1# "clang::tooling::Replacement" :#3# "Replacement")) #S(#13# :#9# 3 :#6# #S(#11# :#1# "clbind::constructor<TEMPLATE_ARG_PACK_SIZE3>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL))))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::tooling::CompilationDatabase,std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > (clang::tooling::CompilationDatabase::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::tooling::CompilationDatabase,std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > (clang::tooling::CompilationDatabase::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::tooling::CompilationDatabase" :#3# "CompilationDatabase")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > (clang::tooling::CompilationDatabase::*)(void) const"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TypedefType,clang::TypedefNameDecl *(clang::TypedefType::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TypedefType,clang::TypedefNameDecl *(clang::TypedefType::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::TypedefType" :#3# "TypedefType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::TypedefNameDecl *(clang::TypedefType::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::multiple_values<core::T_O> (core::Package_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:4690:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::multiple_values<core::T_O> (core::Package_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (core::Package_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::ReadTable_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2173:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::ReadTable_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::ReadTable_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::DependentSizedArrayType,clang::QualType (clang::DependentSizedArrayType::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::DependentSizedArrayType,clang::QualType (clang::DependentSizedArrayType::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::DependentSizedArrayType" :#3# "DependentSizedArrayType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::QualType (clang::DependentSizedArrayType::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::MacroletEnvironment_O> (gctools::smart_ptr<core::Environment_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::MacroletEnvironment_O> (gctools::smart_ptr<core::Environment_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::MacroletEnvironment_O> (gctools::smart_ptr<core::Environment_O>)"))))) #S(#10# :#1# "clbind::GetterMethoid<reg::null_type,clang::tooling::CompileCommand,std::basic_string<char> clang::tooling::CompileCommand::*>" :#3# "GetterMethoid" :#5# "/home/meister/Development/clasp/src/clbind/property.h:49:5" :#6# #S(#11# :#1# "clbind::GetterMethoid<reg::null_type,clang::tooling::CompileCommand,std::basic_string<char> clang::tooling::CompileCommand::*>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#15# :#1# "reg::null_type" :#3# "null_type")) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::tooling::CompileCommand" :#3# "CompileCommand")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "std::basic_string<char> clang::tooling::CompileCommand::*"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::FileStatus_O> (core::DirectoryEntry_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:760:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::FileStatus_O> (core::DirectoryEntry_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::FileStatus_O> (core::DirectoryEntry_O::*)(void)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, unsigned long, const llvm::Twine &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1143:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, unsigned long, const llvm::Twine &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, unsigned long, const llvm::Twine &)"))))) #S(#10# :#1# "core::VariadicFunctoid<int (int, int, const std::basic_string<char> &)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:648:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<int (int, int, const std::basic_string<char> &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "int (int, int, const std::basic_string<char> &)"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (core::SimpleBitVector_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:760:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (core::SimpleBitVector_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (core::SimpleBitVector_O::*)(void)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::ValueEnvironment_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::ValueEnvironment_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::ValueEnvironment_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<llvm::FunctionPass *(void)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:759:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<llvm::FunctionPass *(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "llvm::FunctionPass *(void)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Module_O,void (llvm::Module::*)(llvm::StringRef)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:2619:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Module_O,void (llvm::Module::*)(llvm::StringRef)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::Module_O" :#3# "Module_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "void (llvm::Module::*)(llvm::StringRef)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::Function_O::*)(gctools::smart_ptr<core::Symbol_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1502:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::Function_O::*)(gctools::smart_ptr<core::Symbol_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::Function_O::*)(gctools::smart_ptr<core::Symbol_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<llvm::Type *(llvm::LLVMContext &)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<llvm::Type *(llvm::LLVMContext &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "llvm::Type *(llvm::LLVMContext &)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::ForeignData_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1541:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::ForeignData_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::ForeignData_O::*)(void)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (llvmo::EngineBuilder_O::*)(gctools::smart_ptr<core::Symbol_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1502:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (llvmo::EngineBuilder_O::*)(gctools::smart_ptr<core::Symbol_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (llvmo::EngineBuilder_O::*)(gctools::smart_ptr<core::Symbol_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<int (gctools::smart_ptr<core::Integer_O>, gctools::smart_ptr<core::Integer_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<int (gctools::smart_ptr<core::Integer_O>, gctools::smart_ptr<core::Integer_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "int (gctools::smart_ptr<core::Integer_O>, gctools::smart_ptr<core::Integer_O>)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, const llvm::Twine &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1143:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, const llvm::Twine &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, const llvm::Twine &)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::FunctionPassManager_O,void (llvm::legacy::FunctionPassManager::*)(llvm::Pass *)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:2619:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::FunctionPassManager_O,void (llvm::legacy::FunctionPassManager::*)(llvm::Pass *)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::FunctionPassManager_O" :#3# "FunctionPassManager_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "void (llvm::legacy::FunctionPassManager::*)(llvm::Pass *)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::StringSet_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::StringSet_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (core::StringSet_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::SmallMap_O::*)(gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1462:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::SmallMap_O::*)(gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::SmallMap_O::*)(gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Vector_O> (void)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:759:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Vector_O> (void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Vector_O> (void)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (llvmo::Function_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:760:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (llvmo::Function_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (llvmo::Function_O::*)(void)"))))) #S(#10# :#1# "core::VariadicFunctoid<_Bool (gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<_Bool (gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "_Bool (gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Real_O> (gctools::smart_ptr<core::Number_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Real_O> (gctools::smart_ptr<core::Number_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Real_O> (gctools::smart_ptr<core::Number_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<cffi::Pointer_O> (gctools::smart_ptr<core::Integer_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<cffi::Pointer_O> (gctools::smart_ptr<core::Integer_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<cffi::Pointer_O> (gctools::smart_ptr<core::Integer_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::Str_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1464:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::Str_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::Str_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Fixnum_O> (gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:524:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Fixnum_O> (gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Fixnum_O> (gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::Constant_O> (gctools::smart_ptr<llvmo::LLVMContext_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::Constant_O> (gctools::smart_ptr<llvmo::LLVMContext_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::Constant_O> (gctools::smart_ptr<llvmo::LLVMContext_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,unsigned int (llvmo::DebugLoc_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,unsigned int (llvmo::DebugLoc_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "unsigned int (llvmo::DebugLoc_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::Cons_O::*)(gctools::smart_ptr<core::T_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::Cons_O::*)(gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (core::Cons_O::*)(gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::UnreachableInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(void)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1321:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::UnreachableInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::UnreachableInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(void)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::LandingPadInst_O,void (llvm::LandingPadInst::*)(llvm::Constant *)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:2619:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::LandingPadInst_O,void (llvm::LandingPadInst::*)(llvm::Constant *)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::LandingPadInst_O" :#3# "LandingPadInst_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "void (llvm::LandingPadInst::*)(llvm::Constant *)"))))) #S(#10# :#1# "core::VariadicMethoid<0,unsigned int (core::HashTable_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,unsigned int (core::HashTable_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "unsigned int (core::HashTable_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Integer_O> (int, gctools::smart_ptr<core::Vector_O>, int, _Bool, _Bool, _Bool, _Bool, _Bool, _Bool)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:385:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Integer_O> (int, gctools::smart_ptr<core::Vector_O>, int, _Bool, _Bool, _Bool, _Bool, _Bool, _Bool)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Integer_O> (int, gctools::smart_ptr<core::Vector_O>, int, _Bool, _Bool, _Bool, _Bool, _Bool, _Bool)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ClassTemplateSpecializationDecl,clang::SourceLocation (clang::ClassTemplateSpecializationDecl::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ClassTemplateSpecializationDecl,clang::SourceLocation (clang::ClassTemplateSpecializationDecl::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::ClassTemplateSpecializationDecl" :#3# "ClassTemplateSpecializationDecl")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::SourceLocation (clang::ClassTemplateSpecializationDecl::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<int (int, int, int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:648:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<int (int, int, int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "int (int, int, int)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::StringSet_O::*)(const std::basic_string<char> &)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1502:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::StringSet_O::*)(const std::basic_string<char> &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::StringSet_O::*)(const std::basic_string<char> &)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::DIBuilder_O> (gctools::smart_ptr<llvmo::Module_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::DIBuilder_O> (gctools::smart_ptr<llvmo::Module_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::DIBuilder_O> (gctools::smart_ptr<llvmo::Module_O>)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::BranchInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::BasicBlock *, llvm::BasicBlock *, llvm::MDNode *)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1075:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::BranchInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::BasicBlock *, llvm::BasicBlock *, llvm::MDNode *)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::BranchInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::BasicBlock *, llvm::BasicBlock *, llvm::MDNode *)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::FunctionContainerEnvironment_O> (gctools::smart_ptr<core::Environment_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::FunctionContainerEnvironment_O> (gctools::smart_ptr<core::Environment_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::FunctionContainerEnvironment_O> (gctools::smart_ptr<core::Environment_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Class_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Class_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Class_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,int (core::ObjectSet_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:760:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,int (core::ObjectSet_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "int (core::ObjectSet_O::*)(void)"))))) #S(#10# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::HashTable_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::HashTable_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "std::basic_string<char> (core::HashTable_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (llvmo::Module_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (llvmo::Module_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (llvmo::Module_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2089:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (core::Regex_O::*)(const std::basic_string<char> &) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3077:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (core::Regex_O::*)(const std::basic_string<char> &) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (core::Regex_O::*)(const std::basic_string<char> &) const"))))) #S(#10# :#1# "clbind::VariadicFunctoid<clang::SourceLocation (*)(clang::SourceLocation, unsigned int, const clang::SourceManager &, const clang::LangOptions &),clbind::policies<>>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_functoids.h:1312:1" :#6# #S(#11# :#1# "clbind::VariadicFunctoid<clang::SourceLocation (*)(clang::SourceLocation, unsigned int, const clang::SourceManager &, const clang::LangOptions &),clbind::policies<>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#16# :#1# NIL :#17# #S(#14# :#1# "clang::SourceLocation (clang::SourceLocation, unsigned int, const clang::SourceManager &, const clang::LangOptions &)"))) #S(#13# :#9# 1 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL))))))) #S(#10# :#1# "core::VariadicMethoid<0,unsigned int (core::Str_O::*)(const std::basic_string<char> &)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,unsigned int (core::Str_O::*)(const std::basic_string<char> &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "unsigned int (core::Str_O::*)(const std::basic_string<char> &)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::QualType,_Bool (clang::QualType::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::QualType,_Bool (clang::QualType::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::QualType" :#3# "QualType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "_Bool (clang::QualType::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<int (int, int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<int (int, int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "int (int, int)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Path_O> (core::Path_O::*)(const std::basic_string<char> &)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Path_O> (core::Path_O::*)(const std::basic_string<char> &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Path_O> (core::Path_O::*)(const std::basic_string<char> &)"))))) #S(#10# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::WeakKeyHashTable_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1426:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::WeakKeyHashTable_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::WeakKeyHashTable_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Real_O> (gctools::smart_ptr<core::Real_O>, gctools::smart_ptr<core::Real_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Real_O> (gctools::smart_ptr<core::Real_O>, gctools::smart_ptr<core::Real_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Real_O> (gctools::smart_ptr<core::Real_O>, gctools::smart_ptr<core::Real_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (llvmo::ExecutionEngine_O::*)(const std::basic_string<char> &)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (llvmo::ExecutionEngine_O::*)(const std::basic_string<char> &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (llvmo::ExecutionEngine_O::*)(const std::basic_string<char> &)"))))) #S(#10# :#1# "clbind::VariadicConstructorFunctoid<clbind::policies<>,asttooling::Diagnostics *,asttooling::Diagnostics,clbind::constructor<>>" :#3# "VariadicConstructorFunctoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_constructor_functoids.h:498:1" :#6# #S(#11# :#1# "clbind::VariadicConstructorFunctoid<clbind::policies<>,asttooling::Diagnostics *,asttooling::Diagnostics,clbind::constructor<>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#16# :#1# NIL :#17# #S(#15# :#1# "asttooling::Diagnostics" :#3# "Diagnostics"))) #S(#13# :#9# 2 :#6# #S(#15# :#1# "asttooling::Diagnostics" :#3# "Diagnostics")) #S(#13# :#9# 3 :#6# #S(#11# :#1# "clbind::constructor<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL))))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<llvmo::MDNode_O> (llvmo::DebugLoc_O::*)(gctools::smart_ptr<llvmo::LLVMContext_O>) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3077:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<llvmo::MDNode_O> (llvmo::DebugLoc_O::*)(gctools::smart_ptr<llvmo::LLVMContext_O>) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::MDNode_O> (llvmo::DebugLoc_O::*)(gctools::smart_ptr<llvmo::LLVMContext_O>) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::String_O> (gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:608:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::String_O> (gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::String_O> (gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Fixnum_O> (void)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2324:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Fixnum_O> (void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::Fixnum_O> (void)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::Expr,clang::QualType (clang::Expr::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::Expr,clang::QualType (clang::Expr::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::Expr" :#3# "Expr")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::QualType (clang::Expr::*)(void) const"))))) #S(#10# :#1# "clbind::VariadicFunctoid<gctools::smart_ptr<core::T_O> (*)(gctools::smart_ptr<core::T_O>),clbind::policies<>>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_functoids.h:1490:1" :#6# #S(#11# :#1# "clbind::VariadicFunctoid<gctools::smart_ptr<core::T_O> (*)(gctools::smart_ptr<core::T_O>),clbind::policies<>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#16# :#1# NIL :#17# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>)"))) #S(#13# :#9# 1 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL))))))) #S(#10# :#1# "core::VariadicMethoid<0,void (llvmo::ExecutionEngine_O::*)(gctools::smart_ptr<llvmo::Module_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1502:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (llvmo::ExecutionEngine_O::*)(gctools::smart_ptr<llvmo::Module_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (llvmo::ExecutionEngine_O::*)(gctools::smart_ptr<llvmo::Module_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::PresumedLoc,const char *(clang::PresumedLoc::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::PresumedLoc,const char *(clang::PresumedLoc::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::PresumedLoc" :#3# "PresumedLoc")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "const char *(clang::PresumedLoc::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::Linker_O> (gctools::smart_ptr<llvmo::Module_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::Linker_O> (gctools::smart_ptr<llvmo::Module_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::Linker_O> (gctools::smart_ptr<llvmo::Module_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::Fixnum_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1501:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::Fixnum_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (gctools::smart_ptr<core::Fixnum_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::WeakKeyHashTable_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2213:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::WeakKeyHashTable_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::WeakKeyHashTable_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Environment_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2251:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Environment_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Environment_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::WeakKeyHashTable_O>, gctools::smart_ptr<core::Fixnum_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1464:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::WeakKeyHashTable_O>, gctools::smart_ptr<core::Fixnum_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (gctools::smart_ptr<core::WeakKeyHashTable_O>, gctools::smart_ptr<core::Fixnum_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateArgumentList,unsigned int (clang::TemplateArgumentList::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateArgumentList,unsigned int (clang::TemplateArgumentList::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::TemplateArgumentList" :#3# "TemplateArgumentList")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "unsigned int (clang::TemplateArgumentList::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Str_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Str_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Str_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "clbind::VariadicConstructorFunctoid<clbind::policies<>,clang::tooling::ClangTool *,clang::tooling::ClangTool,clbind::constructor<TEMPLATE_ARG_PACK_SIZE2>>" :#3# "VariadicConstructorFunctoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_constructor_functoids.h:409:1" :#6# #S(#11# :#1# "clbind::VariadicConstructorFunctoid<clbind::policies<>,clang::tooling::ClangTool *,clang::tooling::ClangTool,clbind::constructor<TEMPLATE_ARG_PACK_SIZE2>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#16# :#1# NIL :#17# #S(#15# :#1# "clang::tooling::ClangTool" :#3# "ClangTool"))) #S(#13# :#9# 2 :#6# #S(#15# :#1# "clang::tooling::ClangTool" :#3# "ClangTool")) #S(#13# :#9# 3 :#6# #S(#11# :#1# "clbind::constructor<TEMPLATE_ARG_PACK_SIZE2>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL))))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Package_O> (gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Package_O> (gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Package_O> (gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::HashTable_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Number_O>, gctools::smart_ptr<core::DoubleFloat_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2173:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::HashTable_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Number_O>, gctools::smart_ptr<core::DoubleFloat_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::HashTable_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Number_O>, gctools::smart_ptr<core::DoubleFloat_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,llvm::Function *(llvmo::Module_O::*)(gctools::smart_ptr<core::Str_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,llvm::Function *(llvmo::Module_O::*)(gctools::smart_ptr<core::Str_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "llvm::Function *(llvmo::Module_O::*)(gctools::smart_ptr<core::Str_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::LoadTimeValues_O> (const std::basic_string<char> &, int, int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2213:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::LoadTimeValues_O> (const std::basic_string<char> &, int, int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::LoadTimeValues_O> (const std::basic_string<char> &, int, int)"))))) #S(#10# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1464:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2213:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (const std::basic_string<char> &, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2251:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (const std::basic_string<char> &, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (const std::basic_string<char> &, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<llvmo::Instruction_O> (llvmo::BasicBlock_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:760:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<llvmo::Instruction_O> (llvmo::BasicBlock_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::Instruction_O> (llvmo::BasicBlock_O::*)(void)"))))) #S(#10# :#1# "core::VariadicMethoid<0,llvm::Value *(llvmo::IRBuilder_O::*)(llvm::Value *, llvm::Value *, gctools::smart_ptr<core::Cons_O>, const llvm::Twine &)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:596:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,llvm::Value *(llvmo::IRBuilder_O::*)(llvm::Value *, llvm::Value *, gctools::smart_ptr<core::Cons_O>, const llvm::Twine &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "llvm::Value *(llvmo::IRBuilder_O::*)(llvm::Value *, llvm::Value *, gctools::smart_ptr<core::Cons_O>, const llvm::Twine &)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::Cons_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:760:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::Cons_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (core::Cons_O::*)(void)"))))) #S(#10# :#1# "core::VariadicFunctoid<_Bool (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::HashTable_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<_Bool (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::HashTable_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "_Bool (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::HashTable_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Class_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Symbol_O>, _Bool, gctools::smart_ptr<core::Environment_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2173:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Class_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Symbol_O>, _Bool, gctools::smart_ptr<core::Environment_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::Class_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Symbol_O>, _Bool, gctools::smart_ptr<core::Environment_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Float_O> (gctools::smart_ptr<core::Float_O>, gctools::smart_ptr<core::Float_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:648:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Float_O> (gctools::smart_ptr<core::Float_O>, gctools::smart_ptr<core::Float_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Float_O> (gctools::smart_ptr<core::Float_O>, gctools::smart_ptr<core::Float_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::IncompleteArrayType,clang::QualType (clang::IncompleteArrayType::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::IncompleteArrayType,clang::QualType (clang::IncompleteArrayType::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::IncompleteArrayType" :#3# "IncompleteArrayType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::QualType (clang::IncompleteArrayType::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::ForeignData_O> (gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::ForeignData_O> (gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::ForeignData_O> (gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<std::basic_string<char> (gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<std::basic_string<char> (gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "std::basic_string<char> (gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Class_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2251:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Class_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Class_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::tooling::Replacement,_Bool (clang::tooling::Replacement::*)(clang::Rewriter &) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2119:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::tooling::Replacement,_Bool (clang::tooling::Replacement::*)(clang::Rewriter &) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::tooling::Replacement" :#3# "Replacement")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "_Bool (clang::tooling::Replacement::*)(clang::Rewriter &) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::SymbolMacroletEnvironment_O::*)(gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::Function_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1462:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::SymbolMacroletEnvironment_O::*)(gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::Function_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::SymbolMacroletEnvironment_O::*)(gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::Function_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (cffi::Pointer_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1541:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (cffi::Pointer_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (cffi::Pointer_O::*)(void)"))))) #S(#10# :#1# "core::VariadicMethoid<0,unsigned int (core::Str_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,unsigned int (core::Str_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "unsigned int (core::Str_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<llvm::ConstantFP *(llvm::LLVMContext &, const llvm::APFloat &)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<llvm::ConstantFP *(llvm::LLVMContext &, const llvm::APFloat &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "llvm::ConstantFP *(llvm::LLVMContext &, const llvm::APFloat &)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Pathname_O> (core::SourceFileInfo_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Pathname_O> (core::SourceFileInfo_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Pathname_O> (core::SourceFileInfo_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::APFloat_O> (gctools::smart_ptr<core::SingleFloat_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::APFloat_O> (gctools::smart_ptr<core::SingleFloat_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::APFloat_O> (gctools::smart_ptr<core::SingleFloat_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::Str_O::*)(int, int) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3037:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::Str_O::*)(int, int) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "std::basic_string<char> (core::Str_O::*)(int, int) const"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ElaboratedType,clang::QualType (clang::ElaboratedType::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ElaboratedType,clang::QualType (clang::ElaboratedType::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::ElaboratedType" :#3# "ElaboratedType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::QualType (clang::ElaboratedType::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (core::Number_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (core::Number_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (core::Number_O::*)(void) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::ReturnInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1266:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::ReturnInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::ReturnInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::CallInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, const llvm::Twine &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1207:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::CallInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, const llvm::Twine &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::CallInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, const llvm::Twine &)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::ReturnInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(void)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1321:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::ReturnInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::ReturnInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(void)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::comments::Comment,clang::SourceRange (clang::comments::Comment::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::comments::Comment,clang::SourceRange (clang::comments::Comment::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::comments::Comment" :#3# "Comment")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::SourceRange (clang::comments::Comment::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Cons_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2251:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Cons_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::Cons_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::RegexMatch_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::RegexMatch_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "std::basic_string<char> (core::RegexMatch_O::*)(void) const"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::SourceRange,clang::SourceLocation (clang::SourceRange::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::SourceRange,clang::SourceLocation (clang::SourceRange::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::SourceRange" :#3# "SourceRange")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::SourceLocation (clang::SourceRange::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Function_O> (int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Function_O> (int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Function_O> (int)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::Cons_O::*)(gctools::smart_ptr<core::T_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::Cons_O::*)(gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (core::Cons_O::*)(gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::GlobalVariable_O,void (llvm::GlobalVariable::*)(void)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:2674:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::GlobalVariable_O,void (llvm::GlobalVariable::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::GlobalVariable_O" :#3# "GlobalVariable_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "void (llvm::GlobalVariable::*)(void)"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (core::LambdaListHandler_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (core::LambdaListHandler_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (core::LambdaListHandler_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Iterator_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Iterator_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Iterator_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ast_matchers::MatchFinderMatchResult,clang::SourceManager *(clang::ast_matchers::MatchFinderMatchResult::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ast_matchers::MatchFinderMatchResult,clang::SourceManager *(clang::ast_matchers::MatchFinderMatchResult::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::ast_matchers::MatchFinderMatchResult" :#3# "MatchFinderMatchResult")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::SourceManager *(clang::ast_matchers::MatchFinderMatchResult::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::SymbolSet_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:760:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::SymbolSet_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "std::basic_string<char> (core::SymbolSet_O::*)(void)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::AtomicRMWInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(enum llvm::AtomicRMWInst::BinOp, llvm::Value *, llvm::Value *, enum llvm::AtomicOrdering, enum llvm::SynchronizationScope)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1002:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::AtomicRMWInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(enum llvm::AtomicRMWInst::BinOp, llvm::Value *, llvm::Value *, enum llvm::AtomicOrdering, enum llvm::SynchronizationScope)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::AtomicRMWInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(enum llvm::AtomicRMWInst::BinOp, llvm::Value *, llvm::Value *, enum llvm::AtomicOrdering, enum llvm::SynchronizationScope)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::SourceManager,clang::PresumedLoc (clang::SourceManager::*)(clang::SourceLocation, _Bool) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2060:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::SourceManager,clang::PresumedLoc (clang::SourceManager::*)(clang::SourceLocation, _Bool) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::SourceManager" :#3# "SourceManager")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::PresumedLoc (clang::SourceManager::*)(clang::SourceLocation, _Bool) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2213:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::SingleDispatchGenericFunction_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::SingleDispatchGenericFunction_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (core::SingleDispatchGenericFunction_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::LLVMContext_O> (void)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:759:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::LLVMContext_O> (void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::LLVMContext_O> (void)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::Array_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::Array_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (core::Array_O::*)(void) const"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,asttooling::DerivableMatchCallback,void (asttooling::DerivableMatchCallback::*)(const clang::ast_matchers::MatchFinderMatchResult &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:1012:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,asttooling::DerivableMatchCallback,void (asttooling::DerivableMatchCallback::*)(const clang::ast_matchers::MatchFinderMatchResult &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "asttooling::DerivableMatchCallback" :#3# "DerivableMatchCallback")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "void (asttooling::DerivableMatchCallback::*)(const clang::ast_matchers::MatchFinderMatchResult &)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::PassManager_O,_Bool (llvm::legacy::PassManager::*)(llvm::Module &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1266:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::PassManager_O,_Bool (llvm::legacy::PassManager::*)(llvm::Module &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::PassManager_O" :#3# "PassManager_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "_Bool (llvm::legacy::PassManager::*)(llvm::Module &)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::SymbolSet_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1541:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::SymbolSet_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::SymbolSet_O::*)(void)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Str_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2251:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Str_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Str_O>)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, unsigned long, const llvm::Twine &, _Bool)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1075:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, unsigned long, const llvm::Twine &, _Bool)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, unsigned long, const llvm::Twine &, _Bool)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::Array_O::*)(gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1420:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::Array_O::*)(gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::Array_O::*)(gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::SexpSaveArchive_O::*)(gctools::smart_ptr<core::T_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1502:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::SexpSaveArchive_O::*)(gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::SexpSaveArchive_O::*)(gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::SNode_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::SNode_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (core::SNode_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<void (int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1501:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (int)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::AllocaInst_O,void (llvm::AllocaInst::*)(unsigned int)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:2619:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::AllocaInst_O,void (llvm::AllocaInst::*)(unsigned int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::AllocaInst_O" :#3# "AllocaInst_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "void (llvm::AllocaInst::*)(unsigned int)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::Value_O> (gctools::smart_ptr<llvmo::Module_O>, gctools::smart_ptr<core::Str_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::Value_O> (gctools::smart_ptr<llvmo::Module_O>, gctools::smart_ptr<core::Str_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::Value_O> (gctools::smart_ptr<llvmo::Module_O>, gctools::smart_ptr<core::Str_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<int (gctools::smart_ptr<core::Fixnum_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<int (gctools::smart_ptr<core::Fixnum_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "int (gctools::smart_ptr<core::Fixnum_O>)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Value_O,llvm::Type *(llvm::Value::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:4033:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Value_O,llvm::Type *(llvm::Value::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::Value_O" :#3# "Value_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::Type *(llvm::Value::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::Path_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::Path_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "std::basic_string<char> (core::Path_O::*)(void) const"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::DependentNameType,clang::QualType (clang::DependentNameType::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::DependentNameType,clang::QualType (clang::DependentNameType::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::DependentNameType" :#3# "DependentNameType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::QualType (clang::DependentNameType::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<llvm::Pass *(int, int, int, int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:608:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<llvm::Pass *(int, int, int, int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "llvm::Pass *(int, int, int, int)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::LoadArchive_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:760:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::LoadArchive_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (core::LoadArchive_O::*)(void)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Bignum_O> (void)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2324:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Bignum_O> (void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::Bignum_O> (void)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::ReadTable_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2213:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::ReadTable_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::ReadTable_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::Array_O::*)(gctools::smart_ptr<core::Cons_O>) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3077:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::Array_O::*)(gctools::smart_ptr<core::Cons_O>) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (core::Array_O::*)(gctools::smart_ptr<core::Cons_O>) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,llvm::Value *(llvmo::IRBuilder_O::*)(llvm::Value *, gctools::smart_ptr<core::Cons_O>, const llvm::Twine &)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:639:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,llvm::Value *(llvmo::IRBuilder_O::*)(llvm::Value *, gctools::smart_ptr<core::Cons_O>, const llvm::Twine &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "llvm::Value *(llvmo::IRBuilder_O::*)(llvm::Value *, gctools::smart_ptr<core::Cons_O>, const llvm::Twine &)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Cons_O> (gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Cons_O> (gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "clbind::VariadicFunctoid<clang::ast_matchers::dynamic::VariantMatcher (*)(gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::Vector_O>, asttooling::Diagnostics *),clbind::policies<>>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_functoids.h:1312:1" :#6# #S(#11# :#1# "clbind::VariadicFunctoid<clang::ast_matchers::dynamic::VariantMatcher (*)(gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::Vector_O>, asttooling::Diagnostics *),clbind::policies<>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#16# :#1# NIL :#17# #S(#14# :#1# "clang::ast_matchers::dynamic::VariantMatcher (gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::Vector_O>, asttooling::Diagnostics *)"))) #S(#13# :#9# 1 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL))))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Class_O>, gctools::smart_ptr<core::Class_O>, int, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:608:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Class_O>, gctools::smart_ptr<core::Class_O>, int, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Class_O>, gctools::smart_ptr<core::Class_O>, int, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2288:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::StringList_O::*)(const std::basic_string<char> &)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1502:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::StringList_O::*)(const std::basic_string<char> &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::StringList_O::*)(const std::basic_string<char> &)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::SingleDispatchGenericFunction_O> (gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::LambdaListHandler_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::SingleDispatchGenericFunction_O> (gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::LambdaListHandler_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::SingleDispatchGenericFunction_O> (gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::LambdaListHandler_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::SymbolMacroletEnvironment_O> (gctools::smart_ptr<core::Environment_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::SymbolMacroletEnvironment_O> (gctools::smart_ptr<core::Environment_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::SymbolMacroletEnvironment_O> (gctools::smart_ptr<core::Environment_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1464:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::LandingPadInst_O,_Bool (llvm::LandingPadInst::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:4033:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::LandingPadInst_O,_Bool (llvm::LandingPadInst::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::LandingPadInst_O" :#3# "LandingPadInst_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "_Bool (llvm::LandingPadInst::*)(void) const"))))) #S(#10# :#1# "clbind::VariadicConstructorFunctoid<clbind::policies<>,clang::ast_matchers::dynamic::VariantValue *,clang::ast_matchers::dynamic::VariantValue,clbind::constructor<TEMPLATE_ARG_PACK_SIZE1>>" :#3# "VariadicConstructorFunctoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_constructor_functoids.h:456:1" :#6# #S(#11# :#1# "clbind::VariadicConstructorFunctoid<clbind::policies<>,clang::ast_matchers::dynamic::VariantValue *,clang::ast_matchers::dynamic::VariantValue,clbind::constructor<TEMPLATE_ARG_PACK_SIZE1>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#16# :#1# NIL :#17# #S(#15# :#1# "clang::ast_matchers::dynamic::VariantValue" :#3# "VariantValue"))) #S(#13# :#9# 2 :#6# #S(#15# :#1# "clang::ast_matchers::dynamic::VariantValue" :#3# "VariantValue")) #S(#13# :#9# 3 :#6# #S(#11# :#1# "clbind::constructor<TEMPLATE_ARG_PACK_SIZE1>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL))))))) #S(#10# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::MultiStringBuffer_O::*)(unsigned int)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::MultiStringBuffer_O::*)(unsigned int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "std::basic_string<char> (core::MultiStringBuffer_O::*)(unsigned int)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Integer_O> (core::Path_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Integer_O> (core::Path_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Integer_O> (core::Path_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,llvm::InvokeInst *(llvmo::IRBuilder_O::*)(llvm::Value *, llvm::BasicBlock *, llvm::BasicBlock *, gctools::smart_ptr<core::Cons_O>, const llvm::Twine &)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:551:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,llvm::InvokeInst *(llvmo::IRBuilder_O::*)(llvm::Value *, llvm::BasicBlock *, llvm::BasicBlock *, gctools::smart_ptr<core::Cons_O>, const llvm::Twine &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "llvm::InvokeInst *(llvmo::IRBuilder_O::*)(llvm::Value *, llvm::BasicBlock *, llvm::BasicBlock *, gctools::smart_ptr<core::Cons_O>, const llvm::Twine &)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Real_O> (gctools::smart_ptr<core::Real_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Real_O> (gctools::smart_ptr<core::Real_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Real_O> (gctools::smart_ptr<core::Real_O>, gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::DIBuilder_O,llvm::DILexicalBlock (llvm::DIBuilder::*)(llvm::DIDescriptor, llvm::DIFile, unsigned int, unsigned int)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1075:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::DIBuilder_O,llvm::DILexicalBlock (llvm::DIBuilder::*)(llvm::DIDescriptor, llvm::DIFile, unsigned int, unsigned int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::DIBuilder_O" :#3# "DIBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::DILexicalBlock (llvm::DIBuilder::*)(llvm::DIDescriptor, llvm::DIFile, unsigned int, unsigned int)"))))) #S(#10# :#1# "core::VariadicMethoid<0,int (core::LambdaListHandler_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,int (core::LambdaListHandler_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "int (core::LambdaListHandler_O::*)(void) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(enum llvm::Instruction::BinaryOps, llvm::Value *, llvm::Value *, const llvm::Twine &, llvm::MDNode *)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1002:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(enum llvm::Instruction::BinaryOps, llvm::Value *, llvm::Value *, const llvm::Twine &, llvm::MDNode *)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(enum llvm::Instruction::BinaryOps, llvm::Value *, llvm::Value *, const llvm::Twine &, llvm::MDNode *)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2288:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (int)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::BlockEnvironment_O> (gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::BlockEnvironment_O> (gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::BlockEnvironment_O> (gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (llvmo::Instruction_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (llvmo::Instruction_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (llvmo::Instruction_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<llvm::FunctionPass *(_Bool)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<llvm::FunctionPass *(_Bool)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "llvm::FunctionPass *(_Bool)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::SingleDispatchGenericFunction_O> (gctools::smart_ptr<core::Symbol_O>, _Bool)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::SingleDispatchGenericFunction_O> (gctools::smart_ptr<core::Symbol_O>, _Bool)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::SingleDispatchGenericFunction_O> (gctools::smart_ptr<core::Symbol_O>, _Bool)"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (core::Environment_O::*)(gctools::smart_ptr<core::Symbol_O>) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3077:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (core::Environment_O::*)(gctools::smart_ptr<core::Symbol_O>) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (core::Environment_O::*)(gctools::smart_ptr<core::Symbol_O>) const"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ast_matchers::MatchFinder,_Bool (clang::ast_matchers::MatchFinder::*)(const clang::ast_matchers::internal::DynTypedMatcher &, clang::ast_matchers::MatchFinder::MatchCallback *)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:411:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ast_matchers::MatchFinder,_Bool (clang::ast_matchers::MatchFinder::*)(const clang::ast_matchers::internal::DynTypedMatcher &, clang::ast_matchers::MatchFinder::MatchCallback *)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::ast_matchers::MatchFinder" :#3# "MatchFinder")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "_Bool (clang::ast_matchers::MatchFinder::*)(const clang::ast_matchers::internal::DynTypedMatcher &, clang::ast_matchers::MatchFinder::MatchCallback *)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ast_matchers::MatchFinderMatchResult,clang::ASTContext *(clang::ast_matchers::MatchFinderMatchResult::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ast_matchers::MatchFinderMatchResult,clang::ASTContext *(clang::ast_matchers::MatchFinderMatchResult::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::ast_matchers::MatchFinderMatchResult" :#3# "MatchFinderMatchResult")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::ASTContext *(clang::ast_matchers::MatchFinderMatchResult::*)(void) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Type *, const llvm::Twine &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1143:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Type *, const llvm::Twine &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Type *, const llvm::Twine &)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Function_O> (core::SingleDispatchMethod_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Function_O> (core::SingleDispatchMethod_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Function_O> (core::SingleDispatchMethod_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::ArrayObjects_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:648:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::ArrayObjects_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::ArrayObjects_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Cons_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2251:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Cons_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::Cons_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Function_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Environment_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2213:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Function_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Environment_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Function_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Environment_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<int (int, const std::basic_string<char> &, int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:648:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<int (int, const std::basic_string<char> &, int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "int (int, const std::basic_string<char> &, int)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Environment_O> (core::Environment_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Environment_O> (core::Environment_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Environment_O> (core::Environment_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,__gmp_expr<mpz_t, mpz_t> (core::PosixTimeDuration_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:760:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,__gmp_expr<mpz_t, mpz_t> (core::PosixTimeDuration_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "__gmp_expr<mpz_t, mpz_t> (core::PosixTimeDuration_O::*)(void)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (llvmo::IRBuilderBase_O::*)(gctools::smart_ptr<llvmo::InsertPoint_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1502:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (llvmo::IRBuilderBase_O::*)(gctools::smart_ptr<llvmo::InsertPoint_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (llvmo::IRBuilderBase_O::*)(gctools::smart_ptr<llvmo::InsertPoint_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::StringSet_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:760:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::StringSet_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "std::basic_string<char> (core::StringSet_O::*)(void)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::DoubleFloat_O> (core::Str_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::DoubleFloat_O> (core::Str_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::DoubleFloat_O> (core::Str_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<int (int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<int (int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "int (int)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Cons_O> (gctools::smart_ptr<llvmo::Module_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Cons_O> (gctools::smart_ptr<llvmo::Module_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (gctools::smart_ptr<llvmo::Module_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,int (core::FunctionValueEnvironment_O::*)(gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Function_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:681:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,int (core::FunctionValueEnvironment_O::*)(gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Function_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "int (core::FunctionValueEnvironment_O::*)(gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Function_O>)"))))) #S(#10# :#1# "clbind::VariadicConstructorFunctoid<clbind::policies<>,asttooling::ParserValue *,asttooling::ParserValue,clbind::constructor<TEMPLATE_ARG_PACK_SIZE2>>" :#3# "VariadicConstructorFunctoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_constructor_functoids.h:409:1" :#6# #S(#11# :#1# "clbind::VariadicConstructorFunctoid<clbind::policies<>,asttooling::ParserValue *,asttooling::ParserValue,clbind::constructor<TEMPLATE_ARG_PACK_SIZE2>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#16# :#1# NIL :#17# #S(#15# :#1# "asttooling::ParserValue" :#3# "ParserValue"))) #S(#13# :#9# 2 :#6# #S(#15# :#1# "asttooling::ParserValue" :#3# "ParserValue")) #S(#13# :#9# 3 :#6# #S(#11# :#1# "clbind::constructor<TEMPLATE_ARG_PACK_SIZE2>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL))))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::Environment_O::*)(gctools::smart_ptr<core::Symbol_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::Environment_O::*)(gctools::smart_ptr<core::Symbol_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (core::Environment_O::*)(gctools::smart_ptr<core::Symbol_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::RecordType,clang::QualType (clang::RecordType::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::RecordType,clang::QualType (clang::RecordType::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::RecordType" :#3# "RecordType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::QualType (clang::RecordType::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Vector_O> (gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Vector_O> (gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Vector_O> (gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::MDNode_O> (gctools::smart_ptr<llvmo::LLVMContext_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::MDNode_O> (gctools::smart_ptr<llvmo::LLVMContext_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::MDNode_O> (gctools::smart_ptr<llvmo::LLVMContext_O>, gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::ObjectSet_O::*)(gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1502:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::ObjectSet_O::*)(gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::ObjectSet_O::*)(gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::AutoType,clang::QualType (clang::AutoType::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::AutoType,clang::QualType (clang::AutoType::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::AutoType" :#3# "AutoType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::QualType (clang::AutoType::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::Function_O>, gctools::smart_ptr<core::Symbol_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1464:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::Function_O>, gctools::smart_ptr<core::Symbol_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (gctools::smart_ptr<core::Function_O>, gctools::smart_ptr<core::Symbol_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::MacroletEnvironment_O::*)(gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::Function_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1462:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::MacroletEnvironment_O::*)(gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::Function_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::MacroletEnvironment_O::*)(gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::Function_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,int (core::WeakKeyHashTable_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,int (core::WeakKeyHashTable_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "int (core::WeakKeyHashTable_O::*)(void) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::DataLayout_O,unsigned long (llvm::DataLayout::*)(llvm::Type *) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:3978:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::DataLayout_O,unsigned long (llvm::DataLayout::*)(llvm::Type *) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::DataLayout_O" :#3# "DataLayout_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "unsigned long (llvm::DataLayout::*)(llvm::Type *) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Integer_O> (llvmo::Type_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Integer_O> (llvmo::Type_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Integer_O> (llvmo::Type_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::LoadTimeValues_O> (int, int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::LoadTimeValues_O> (int, int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::LoadTimeValues_O> (int, int)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Integer_O> (gctools::smart_ptr<core::ForeignData_O>, gctools::smart_ptr<core::ForeignData_O>, int, double)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2173:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Integer_O> (gctools::smart_ptr<core::ForeignData_O>, gctools::smart_ptr<core::ForeignData_O>, int, double)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::Integer_O> (gctools::smart_ptr<core::ForeignData_O>, gctools::smart_ptr<core::ForeignData_O>, int, double)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::Decl,_Bool (clang::Decl::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::Decl,_Bool (clang::Decl::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::Decl" :#3# "Decl")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "_Bool (clang::Decl::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Symbol_O>, int, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:608:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Symbol_O>, int, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Symbol_O>, int, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::EnumType,clang::QualType (clang::EnumType::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::EnumType,clang::QualType (clang::EnumType::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::EnumType" :#3# "EnumType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::QualType (clang::EnumType::*)(void) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::DIBuilder_O,llvm::DIBasicType (llvm::DIBuilder::*)(llvm::StringRef, unsigned long, unsigned long, unsigned int)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1075:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::DIBuilder_O,llvm::DIBasicType (llvm::DIBuilder::*)(llvm::StringRef, unsigned long, unsigned long, unsigned int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::DIBuilder_O" :#3# "DIBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::DIBasicType (llvm::DIBuilder::*)(llvm::StringRef, unsigned long, unsigned long, unsigned int)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Integer_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2251:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Integer_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Integer_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<_Bool (gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<_Bool (gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "_Bool (gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Str_O> (gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Str_O> (gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Str_O> (gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<TEMPLATE_ARG_PACK_SIZE1>,clang::SourceManager,unsigned int (clang::SourceManager::*)(clang::SourceLocation, _Bool *) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2060:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<TEMPLATE_ARG_PACK_SIZE1>,clang::SourceManager,unsigned int (clang::SourceManager::*)(clang::SourceLocation, _Bool *) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<TEMPLATE_ARG_PACK_SIZE1>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::SourceManager" :#3# "SourceManager")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "unsigned int (clang::SourceManager::*)(clang::SourceLocation, _Bool *) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::SingleDispatchMethod_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::SingleDispatchMethod_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (core::SingleDispatchMethod_O::*)(void) const"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::NamedDecl,std::basic_string<char> (clang::NamedDecl::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::NamedDecl,std::basic_string<char> (clang::NamedDecl::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::NamedDecl" :#3# "NamedDecl")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "std::basic_string<char> (clang::NamedDecl::*)(void) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, unsigned int, unsigned int, const llvm::Twine &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1075:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, unsigned int, unsigned int, const llvm::Twine &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, unsigned int, unsigned int, const llvm::Twine &)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, int, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:608:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, int, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, int, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::tooling::RefactoringTool,std::set<clang::tooling::Replacement, std::less<clang::tooling::Replacement>, std::allocator<clang::tooling::Replacement> > &(clang::tooling::RefactoringTool::*)(void)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:523:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::tooling::RefactoringTool,std::set<clang::tooling::Replacement, std::less<clang::tooling::Replacement>, std::allocator<clang::tooling::Replacement> > &(clang::tooling::RefactoringTool::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::tooling::RefactoringTool" :#3# "RefactoringTool")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "std::set<clang::tooling::Replacement, std::less<clang::tooling::Replacement>, std::allocator<clang::tooling::Replacement> > &(clang::tooling::RefactoringTool::*)(void)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, unsigned int, const llvm::Twine &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1143:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, unsigned int, const llvm::Twine &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, unsigned int, const llvm::Twine &)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::PosixTimeDuration_O> (core::PosixTime_O::*)(gctools::smart_ptr<core::PosixTime_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::PosixTimeDuration_O> (core::PosixTime_O::*)(gctools::smart_ptr<core::PosixTime_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::PosixTimeDuration_O> (core::PosixTime_O::*)(gctools::smart_ptr<core::PosixTime_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::T_O>, _Bool, _Bool, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1386:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::T_O>, _Bool, _Bool, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (gctools::smart_ptr<core::T_O>, _Bool, _Bool, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Integer_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2288:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Integer_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Integer_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::CompiledFunction_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1501:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::CompiledFunction_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (gctools::smart_ptr<core::CompiledFunction_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Str_O> (gctools::smart_ptr<core::Symbol_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Str_O> (gctools::smart_ptr<core::Symbol_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Str_O> (gctools::smart_ptr<core::Symbol_O>)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::IndirectBrInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, unsigned int)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1207:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::IndirectBrInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, unsigned int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::IndirectBrInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, unsigned int)"))))) #S(#10# :#1# "clbind::VariadicFunctoid<clang::ast_matchers::dynamic::VariantMatcher (*)(gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::Cons_O>, llvm::StringRef, gctools::smart_ptr<core::Vector_O>, asttooling::Diagnostics *),clbind::policies<>>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_functoids.h:1240:1" :#6# #S(#11# :#1# "clbind::VariadicFunctoid<clang::ast_matchers::dynamic::VariantMatcher (*)(gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::Cons_O>, llvm::StringRef, gctools::smart_ptr<core::Vector_O>, asttooling::Diagnostics *),clbind::policies<>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#16# :#1# NIL :#17# #S(#14# :#1# "clang::ast_matchers::dynamic::VariantMatcher (gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::Cons_O>, llvm::StringRef, gctools::smart_ptr<core::Vector_O>, asttooling::Diagnostics *)"))) #S(#13# :#9# 1 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL))))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Environment_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Environment_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Environment_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::Fixnum_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::Fixnum_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Character_O>, gctools::smart_ptr<core::Fixnum_O>)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::DIBuilder_O,llvm::DIBasicType (llvm::DIBuilder::*)(void)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1321:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::DIBuilder_O,llvm::DIBasicType (llvm::DIBuilder::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::DIBuilder_O" :#3# "DIBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::DIBasicType (llvm::DIBuilder::*)(void)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::SourceFileInfo_O> (gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2288:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::SourceFileInfo_O> (gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::SourceFileInfo_O> (gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::WeakKeyHashTable_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1464:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::WeakKeyHashTable_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (gctools::smart_ptr<core::WeakKeyHashTable_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::ObjectSet_O::*)(gctools::smart_ptr<core::ObjectSet_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1502:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::ObjectSet_O::*)(gctools::smart_ptr<core::ObjectSet_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::ObjectSet_O::*)(gctools::smart_ptr<core::ObjectSet_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Path_O> (core::Path_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:760:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Path_O> (core::Path_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Path_O> (core::Path_O::*)(void)"))))) #S(#10# :#1# "clbind::VariadicConstructorFunctoid<clbind::policies<>,clang::ast_matchers::MatchFinder *,clang::ast_matchers::MatchFinder,clbind::constructor<>>" :#3# "VariadicConstructorFunctoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_constructor_functoids.h:498:1" :#6# #S(#11# :#1# "clbind::VariadicConstructorFunctoid<clbind::policies<>,clang::ast_matchers::MatchFinder *,clang::ast_matchers::MatchFinder,clbind::constructor<>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#16# :#1# NIL :#17# #S(#15# :#1# "clang::ast_matchers::MatchFinder" :#3# "MatchFinder"))) #S(#13# :#9# 2 :#6# #S(#15# :#1# "clang::ast_matchers::MatchFinder" :#3# "MatchFinder")) #S(#13# :#9# 3 :#6# #S(#11# :#1# "clbind::constructor<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL))))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Str_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Str_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Str_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TypedefNameDecl,clang::QualType (clang::TypedefNameDecl::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TypedefNameDecl,clang::QualType (clang::TypedefNameDecl::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::TypedefNameDecl" :#3# "TypedefNameDecl")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::QualType (clang::TypedefNameDecl::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<int (int, int, int, int, int, int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:524:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<int (int, int, int, int, int, int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "int (int, int, int, int, int, int)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::multiple_values<core::T_O> (core::WeakKeyMapping_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:4690:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::multiple_values<core::T_O> (core::WeakKeyMapping_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (core::WeakKeyMapping_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (core::Vector_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (core::Vector_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (core::Vector_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, int, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:608:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, int, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, int, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateArgumentList,const clang::TemplateArgument &(clang::TemplateArgumentList::*)(unsigned int) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2119:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateArgumentList,const clang::TemplateArgument &(clang::TemplateArgumentList::*)(unsigned int) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::TemplateArgumentList" :#3# "TemplateArgumentList")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "const clang::TemplateArgument &(clang::TemplateArgumentList::*)(unsigned int) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Function_O,void (llvm::Function::*)(void)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:2674:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Function_O,void (llvm::Function::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::Function_O" :#3# "Function_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "void (llvm::Function::*)(void)"))))) #S(#10# :#1# "clbind::VariadicFunctoid<llvm::StringRef (*)(clang::CharSourceRange, const clang::SourceManager &, const clang::LangOptions &, _Bool *),clbind::policies<TEMPLATE_ARG_PACK_SIZE1>>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_functoids.h:1312:1" :#6# #S(#11# :#1# "clbind::VariadicFunctoid<llvm::StringRef (*)(clang::CharSourceRange, const clang::SourceManager &, const clang::LangOptions &, _Bool *),clbind::policies<TEMPLATE_ARG_PACK_SIZE1>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#16# :#1# NIL :#17# #S(#14# :#1# "llvm::StringRef (clang::CharSourceRange, const clang::SourceManager &, const clang::LangOptions &, _Bool *)"))) #S(#13# :#9# 1 :#6# #S(#11# :#1# "clbind::policies<TEMPLATE_ARG_PACK_SIZE1>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL))))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<cffi::Pointer_O> (void)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:759:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<cffi::Pointer_O> (void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<cffi::Pointer_O> (void)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Array_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Array_O>, gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Array_O>, gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<int (gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<int (gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "int (gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::FunctionPassManager_O,_Bool (llvm::legacy::FunctionPassManager::*)(void)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1321:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::FunctionPassManager_O,_Bool (llvm::legacy::FunctionPassManager::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::FunctionPassManager_O" :#3# "FunctionPassManager_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "_Bool (llvm::legacy::FunctionPassManager::*)(void)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:648:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::Fixnum_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (core::Class_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (core::Class_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (core::Class_O::*)(void) const"))))) #S(#10# :#1# "clbind::VariadicConstructorFunctoid<clbind::policies<>,clang::CompilerInstance *,clang::CompilerInstance,clbind::constructor<>>" :#3# "VariadicConstructorFunctoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_constructor_functoids.h:498:1" :#6# #S(#11# :#1# "clbind::VariadicConstructorFunctoid<clbind::policies<>,clang::CompilerInstance *,clang::CompilerInstance,clbind::constructor<>>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#16# :#1# NIL :#17# #S(#15# :#1# "clang::CompilerInstance" :#3# "CompilerInstance"))) #S(#13# :#9# 2 :#6# #S(#15# :#1# "clang::CompilerInstance" :#3# "CompilerInstance")) #S(#13# :#9# 3 :#6# #S(#11# :#1# "clbind::constructor<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL))))))) #S(#10# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::StringList_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:760:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::StringList_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "std::basic_string<char> (core::StringList_O::*)(void)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (const std::basic_string<char> &, int, int, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:567:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (const std::basic_string<char> &, int, int, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (const std::basic_string<char> &, int, int, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (llvmo::Module_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1541:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (llvmo::Module_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (llvmo::Module_O::*)(void)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::VectorType,clang::QualType (clang::VectorType::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::VectorType,clang::QualType (clang::VectorType::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::VectorType" :#3# "VectorType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::QualType (clang::VectorType::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::Environment_O::*)(gctools::smart_ptr<core::T_O>) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3077:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::Environment_O::*)(gctools::smart_ptr<core::T_O>) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (core::Environment_O::*)(gctools::smart_ptr<core::T_O>) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::CallInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::ArrayRef<llvm::Value *>, const llvm::Twine &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1143:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::CallInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::ArrayRef<llvm::Value *>, const llvm::Twine &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::CallInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::ArrayRef<llvm::Value *>, const llvm::Twine &)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::APInt_O> (gctools::smart_ptr<core::Integer_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::APInt_O> (gctools::smart_ptr<core::Integer_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::APInt_O> (gctools::smart_ptr<core::Integer_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateArgument,clang::ValueDecl *(clang::TemplateArgument::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateArgument,clang::ValueDecl *(clang::TemplateArgument::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::TemplateArgument" :#3# "TemplateArgument")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::ValueDecl *(clang::TemplateArgument::*)(void) const"))))) #S(#10# :#1# "clbind::GetterMethoid<reg::null_type,clang::tooling::CompileCommand,std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > clang::tooling::CompileCommand::*>" :#3# "GetterMethoid" :#5# "/home/meister/Development/clasp/src/clbind/property.h:49:5" :#6# #S(#11# :#1# "clbind::GetterMethoid<reg::null_type,clang::tooling::CompileCommand,std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > clang::tooling::CompileCommand::*>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#15# :#1# "reg::null_type" :#3# "null_type")) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::tooling::CompileCommand" :#3# "CompileCommand")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > clang::tooling::CompileCommand::*"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Integer_O> (gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2288:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Integer_O> (gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::Integer_O> (gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::ValueEnvironment_O::*)(gctools::smart_ptr<core::Symbol_O>, int)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1462:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::ValueEnvironment_O::*)(gctools::smart_ptr<core::Symbol_O>, int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::ValueEnvironment_O::*)(gctools::smart_ptr<core::Symbol_O>, int)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<cffi::Pointer_O> (gctools::smart_ptr<core::Str_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<cffi::Pointer_O> (gctools::smart_ptr<core::Str_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<cffi::Pointer_O> (gctools::smart_ptr<core::Str_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::PresumedLoc,unsigned int (clang::PresumedLoc::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::PresumedLoc,unsigned int (clang::PresumedLoc::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::PresumedLoc" :#3# "PresumedLoc")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "unsigned int (clang::PresumedLoc::*)(void) const"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,asttooling::DerivableArgumentsAdjuster,std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > (asttooling::DerivableArgumentsAdjuster::*)(const std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:470:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,asttooling::DerivableArgumentsAdjuster,std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > (asttooling::DerivableArgumentsAdjuster::*)(const std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "asttooling::DerivableArgumentsAdjuster" :#3# "DerivableArgumentsAdjuster")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > (asttooling::DerivableArgumentsAdjuster::*)(const std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > &)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::SmallMap_O> (void)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:759:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::SmallMap_O> (void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::SmallMap_O> (void)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Integer_O> (void)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2324:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Integer_O> (void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::Integer_O> (void)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::GlobalVariable_O> (gctools::smart_ptr<llvmo::Module_O>, const std::basic_string<char> &, gctools::smart_ptr<llvmo::Type_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:648:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::GlobalVariable_O> (gctools::smart_ptr<llvmo::Module_O>, const std::basic_string<char> &, gctools::smart_ptr<llvmo::Type_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::GlobalVariable_O> (gctools::smart_ptr<llvmo::Module_O>, const std::basic_string<char> &, gctools::smart_ptr<llvmo::Type_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::FunctionProtoType,clang::QualType (clang::FunctionProtoType::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::FunctionProtoType,clang::QualType (clang::FunctionProtoType::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::FunctionProtoType" :#3# "FunctionProtoType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::QualType (clang::FunctionProtoType::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<llvm::IntegerType *(llvm::LLVMContext &)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<llvm::IntegerType *(llvm::LLVMContext &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "llvm::IntegerType *(llvm::LLVMContext &)"))))) #S(#10# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::Path_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:760:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,std::basic_string<char> (core::Path_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "std::basic_string<char> (core::Path_O::*)(void)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::PosixTime_O> (core::PosixTime_O::*)(void)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:760:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::PosixTime_O> (core::PosixTime_O::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::PosixTime_O> (core::PosixTime_O::*)(void)"))))) #S(#10# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::Str_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1501:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::Str_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (gctools::smart_ptr<core::Str_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Environment_O> (core::Function_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Environment_O> (core::Function_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Environment_O> (core::Function_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Stream_O>, gctools::smart_ptr<core::Character_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2251:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Stream_O>, gctools::smart_ptr<core::Character_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Stream_O>, gctools::smart_ptr<core::Character_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::HashTable_O::*)(gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:681:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::HashTable_O::*)(gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (core::HashTable_O::*)(gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:1464:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<void (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "void (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,char (core::Str_O::*)(int, char)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:681:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,char (core::Str_O::*)(int, char)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "char (core::Str_O::*)(int, char)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::SexpLoadArchive_O::*)(gctools::smart_ptr<core::T_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1502:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::SexpLoadArchive_O::*)(gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::SexpLoadArchive_O::*)(gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::PassManager_O,void (llvm::legacy::PassManager::*)(llvm::Pass *)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:2619:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::PassManager_O,void (llvm::legacy::PassManager::*)(llvm::Pass *)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::PassManager_O" :#3# "PassManager_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "void (llvm::legacy::PassManager::*)(llvm::Pass *)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::DIBuilder_O,llvm::DICompileUnit (llvm::DIBuilder::*)(unsigned int, llvm::StringRef, llvm::StringRef, llvm::StringRef, _Bool, llvm::StringRef, unsigned int, llvm::StringRef, enum llvm::DIBuilder::DebugEmissionKind, _Bool)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:568:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::DIBuilder_O,llvm::DICompileUnit (llvm::DIBuilder::*)(unsigned int, llvm::StringRef, llvm::StringRef, llvm::StringRef, _Bool, llvm::StringRef, unsigned int, llvm::StringRef, enum llvm::DIBuilder::DebugEmissionKind, _Bool)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::DIBuilder_O" :#3# "DIBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::DICompileUnit (llvm::DIBuilder::*)(unsigned int, llvm::StringRef, llvm::StringRef, llvm::StringRef, _Bool, llvm::StringRef, unsigned int, llvm::StringRef, enum llvm::DIBuilder::DebugEmissionKind, _Bool)"))))) #S(#10# :#1# "core::VariadicFunctoid<_Bool (void)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:759:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<_Bool (void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "_Bool (void)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Function_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Function_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::Function_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::Class_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::Class_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (core::Class_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Complex_O> (gctools::smart_ptr<core::Real_O>, gctools::smart_ptr<core::Real_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Complex_O> (gctools::smart_ptr<core::Real_O>, gctools::smart_ptr<core::Real_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Complex_O> (gctools::smart_ptr<core::Real_O>, gctools::smart_ptr<core::Real_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Number_O> (gctools::smart_ptr<core::Float_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2288:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Number_O> (gctools::smart_ptr<core::Float_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::Number_O> (gctools::smart_ptr<core::Float_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Package_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:648:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Package_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Package_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (core::WeakKeyMapping_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (core::WeakKeyMapping_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (core::WeakKeyMapping_O::*)(void) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, const llvm::Twine &, llvm::MDNode *)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1075:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, const llvm::Twine &, llvm::MDNode *)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::Value *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::Value *, llvm::Value *, const llvm::Twine &, llvm::MDNode *)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::tooling::ClangTool,void (clang::tooling::ClangTool::*)(clang::tooling::ArgumentsAdjuster *)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:1012:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::tooling::ClangTool,void (clang::tooling::ClangTool::*)(clang::tooling::ArgumentsAdjuster *)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::tooling::ClangTool" :#3# "ClangTool")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "void (clang::tooling::ClangTool::*)(clang::tooling::ArgumentsAdjuster *)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::StringSet_O::*)(gctools::smart_ptr<core::StringSet_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1502:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::StringSet_O::*)(gctools::smart_ptr<core::StringSet_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::StringSet_O::*)(gctools::smart_ptr<core::StringSet_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Symbol_O> (core::SNode_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Symbol_O> (core::SNode_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Symbol_O> (core::SNode_O::*)(void) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Module_O,void (llvm::Module::*)(llvm::MDNode *)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:2619:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Module_O,void (llvm::Module::*)(llvm::MDNode *)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::Module_O" :#3# "Module_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "void (llvm::Module::*)(llvm::MDNode *)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Path_O> (gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2288:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Path_O> (gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::Path_O> (gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateSpecializationType,clang::TemplateName (clang::TemplateSpecializationType::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::TemplateSpecializationType,clang::TemplateName (clang::TemplateSpecializationType::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::TemplateSpecializationType" :#3# "TemplateSpecializationType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::TemplateName (clang::TemplateSpecializationType::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::Fixnum_O::*)(const std::basic_string<char> &)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1502:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::Fixnum_O::*)(const std::basic_string<char> &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::Fixnum_O::*)(const std::basic_string<char> &)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::PointerType,clang::QualType (clang::PointerType::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::PointerType,clang::QualType (clang::PointerType::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::PointerType" :#3# "PointerType")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::QualType (clang::PointerType::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::SimpleBitVector_O::*)(unsigned int, unsigned int)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1462:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::SimpleBitVector_O::*)(unsigned int, unsigned int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::SimpleBitVector_O::*)(unsigned int, unsigned int)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<llvmo::Function_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2288:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<llvmo::Function_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<llvmo::Function_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<char (gctools::smart_ptr<core::Character_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<char (gctools::smart_ptr<core::Character_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "char (gctools::smart_ptr<core::Character_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::CXXRecordDecl,_Bool (clang::CXXRecordDecl::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::CXXRecordDecl,_Bool (clang::CXXRecordDecl::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::CXXRecordDecl" :#3# "CXXRecordDecl")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "_Bool (clang::CXXRecordDecl::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::StructType_O> (gctools::smart_ptr<llvmo::LLVMContext_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:608:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::StructType_O> (gctools::smart_ptr<llvmo::LLVMContext_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::StructType_O> (gctools::smart_ptr<llvmo::LLVMContext_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<llvm::PointerType *(llvm::LLVMContext &, unsigned int)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<llvm::PointerType *(llvm::LLVMContext &, unsigned int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "llvm::PointerType *(llvm::LLVMContext &, unsigned int)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,llvm::APInt,std::basic_string<char> (llvm::APInt::*)(unsigned int, _Bool) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2060:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,llvm::APInt,std::basic_string<char> (llvm::APInt::*)(unsigned int, _Bool) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvm::APInt" :#3# "APInt")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "std::basic_string<char> (llvm::APInt::*)(unsigned int, _Bool) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<llvmo::PointerType_O> (llvmo::Type_O::*)(int)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<llvmo::PointerType_O> (llvmo::Type_O::*)(int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::PointerType_O> (llvmo::Type_O::*)(int)"))))) #S(#10# :#1# "clbind::IteratorMethoid<reg::null_type,clang::CXXRecordDecl,clang::CXXBaseSpecifier *(clang::CXXRecordDecl::*)(void),clang::CXXBaseSpecifier *(clang::CXXRecordDecl::*)(void)>" :#3# "IteratorMethoid" :#5# "/home/meister/Development/clasp/src/clbind/iteratorMemberFunction.h:45:5" :#6# #S(#11# :#1# "clbind::IteratorMethoid<reg::null_type,clang::CXXRecordDecl,clang::CXXBaseSpecifier *(clang::CXXRecordDecl::*)(void),clang::CXXBaseSpecifier *(clang::CXXRecordDecl::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#15# :#1# "reg::null_type" :#3# "null_type")) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::CXXRecordDecl" :#3# "CXXRecordDecl")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::CXXBaseSpecifier *(clang::CXXRecordDecl::*)(void)")) #S(#13# :#9# 3 :#6# #S(#14# :#1# "clang::CXXBaseSpecifier *(clang::CXXRecordDecl::*)(void)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<TEMPLATE_ARG_PACK_SIZE1>,asttooling::DerivableASTFrontendAction,std::unique_ptr<clang::ASTConsumer, std::default_delete<clang::ASTConsumer> > (asttooling::DerivableASTFrontendAction::*)(clang::CompilerInstance &, llvm::StringRef)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:1505:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<TEMPLATE_ARG_PACK_SIZE1>,asttooling::DerivableASTFrontendAction,std::unique_ptr<clang::ASTConsumer, std::default_delete<clang::ASTConsumer> > (asttooling::DerivableASTFrontendAction::*)(clang::CompilerInstance &, llvm::StringRef)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<TEMPLATE_ARG_PACK_SIZE1>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "asttooling::DerivableASTFrontendAction" :#3# "DerivableASTFrontendAction")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "std::unique_ptr<clang::ASTConsumer, std::default_delete<clang::ASTConsumer> > (asttooling::DerivableASTFrontendAction::*)(clang::CompilerInstance &, llvm::StringRef)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::BranchInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::BasicBlock *)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:1266:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::IRBuilder_O,llvm::BranchInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::BasicBlock *)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "llvm::BranchInst *(llvm::IRBuilder<true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter<true> >::*)(llvm::BasicBlock *)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, const std::basic_string<char> &, gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:648:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, const std::basic_string<char> &, gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, const std::basic_string<char> &, gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::Environment_O::*)(gctools::smart_ptr<core::Symbol_O>) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3077:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::Environment_O::*)(gctools::smart_ptr<core::Symbol_O>) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (core::Environment_O::*)(gctools::smart_ptr<core::Symbol_O>) const"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::Type,const clang::TemplateSpecializationType *(clang::Type::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::Type,const clang::TemplateSpecializationType *(clang::Type::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::Type" :#3# "Type")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "const clang::TemplateSpecializationType *(clang::Type::*)(void) const"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::PassManagerBuilder_O,void (llvm::PassManagerBuilder::*)(llvm::legacy::PassManagerBase &, llvm::TargetMachine *)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:2560:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::PassManagerBuilder_O,void (llvm::PassManagerBuilder::*)(llvm::legacy::PassManagerBase &, llvm::TargetMachine *)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::PassManagerBuilder_O" :#3# "PassManagerBuilder_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "void (llvm::PassManagerBuilder::*)(llvm::legacy::PassManagerBase &, llvm::TargetMachine *)"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (core::Environment_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (core::Environment_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (core::Environment_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2173:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (llvmo::EngineBuilder_O::*)(gctools::smart_ptr<core::Cons_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1502:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (llvmo::EngineBuilder_O::*)(gctools::smart_ptr<core::Cons_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (llvmo::EngineBuilder_O::*)(gctools::smart_ptr<core::Cons_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Integer_O> (gctools::smart_ptr<core::Float_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Integer_O> (gctools::smart_ptr<core::Float_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Integer_O> (gctools::smart_ptr<core::Float_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Number_O> (gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Number_O> (gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Number_O> (gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,_Bool (core::StringSet_O::*)(gctools::smart_ptr<core::StringSet_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,_Bool (core::StringSet_O::*)(gctools::smart_ptr<core::StringSet_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "_Bool (core::StringSet_O::*)(gctools::smart_ptr<core::StringSet_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,int (core::LoadTimeValues_O::*)(gctools::smart_ptr<core::Symbol_O>, int)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:681:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,int (core::LoadTimeValues_O::*)(gctools::smart_ptr<core::Symbol_O>, int)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "int (core::LoadTimeValues_O::*)(gctools::smart_ptr<core::Symbol_O>, int)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2251:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ClassTemplateSpecializationDecl,enum clang::TemplateSpecializationKind (clang::ClassTemplateSpecializationDecl::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::ClassTemplateSpecializationDecl,enum clang::TemplateSpecializationKind (clang::ClassTemplateSpecializationDecl::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::ClassTemplateSpecializationDecl" :#3# "ClassTemplateSpecializationDecl")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "enum clang::TemplateSpecializationKind (clang::ClassTemplateSpecializationDecl::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::LoadTimeValues_O> (llvmo::Function_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::LoadTimeValues_O> (llvmo::Function_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::LoadTimeValues_O> (llvmo::Function_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,void (core::Symbol_O::*)(gctools::smart_ptr<core::T_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:1502:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,void (core::Symbol_O::*)(gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "void (core::Symbol_O::*)(gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::Path_O::*)(void) const>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:3116:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::Cons_O> (core::Path_O::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Cons_O> (core::Path_O::*)(void) const"))))) #S(#10# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::ObjectSet_O> (core::SymbolSet_O::*)(gctools::smart_ptr<core::SymbolSet_O>)>" :#3# "VariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_methoids.h:721:1" :#6# #S(#11# :#1# "core::VariadicMethoid<0,gctools::smart_ptr<core::ObjectSet_O> (core::SymbolSet_O::*)(gctools::smart_ptr<core::SymbolSet_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL) #S(#13# :#9# 1 :#6# #S(#14# :#1# "gctools::smart_ptr<core::ObjectSet_O> (core::SymbolSet_O::*)(gctools::smart_ptr<core::SymbolSet_O>)"))))) #S(#10# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Value_O,void (llvm::Value::*)(const llvm::Twine &)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/external_wrappers_indirect_methoids.h:2619:1" :#6# #S(#11# :#1# "core::IndirectVariadicMethoid<core::policies::policies_<>,llvmo::Value_O,void (llvm::Value::*)(const llvm::Twine &)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "core::policies::policies_<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "llvmo::Value_O" :#3# "Value_O")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "void (llvm::Value::*)(const llvm::Twine &)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::VarDecl,_Bool (clang::VarDecl::*)(void) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2172:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::VarDecl,_Bool (clang::VarDecl::*)(void) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::VarDecl" :#3# "VarDecl")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "_Bool (clang::VarDecl::*)(void) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Stream_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2213:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Stream_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Stream_O>, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::DebugLoc_O> (int, int, gctools::smart_ptr<llvmo::DebugInfo_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:648:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::DebugLoc_O> (int, int, gctools::smart_ptr<llvmo::DebugInfo_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::DebugLoc_O> (int, int, gctools::smart_ptr<llvmo::DebugInfo_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::tooling::ClangTool,void (clang::tooling::ClangTool::*)(void)>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:1063:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::tooling::ClangTool,void (clang::tooling::ClangTool::*)(void)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::tooling::ClangTool" :#3# "ClangTool")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "void (clang::tooling::ClangTool::*)(void)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Path_O> (gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Path_O> (gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Path_O> (gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2288:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::Module_O> (llvm::StringRef, gctools::smart_ptr<llvmo::LLVMContext_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:686:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<llvmo::Module_O> (llvm::StringRef, gctools::smart_ptr<llvmo::LLVMContext_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<llvmo::Module_O> (llvm::StringRef, gctools::smart_ptr<llvmo::LLVMContext_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2251:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Str_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Pathname_O> (gctools::smart_ptr<core::T_O>, _Bool, gctools::smart_ptr<core::T_O>, _Bool, gctools::smart_ptr<core::T_O>, _Bool, gctools::smart_ptr<core::T_O>, _Bool, gctools::smart_ptr<core::T_O>, _Bool, gctools::smart_ptr<core::T_O>, _Bool, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:125:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Pathname_O> (gctools::smart_ptr<core::T_O>, _Bool, gctools::smart_ptr<core::T_O>, _Bool, gctools::smart_ptr<core::T_O>, _Bool, gctools::smart_ptr<core::T_O>, _Bool, gctools::smart_ptr<core::T_O>, _Bool, gctools::smart_ptr<core::T_O>, _Bool, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Pathname_O> (gctools::smart_ptr<core::T_O>, _Bool, gctools::smart_ptr<core::T_O>, _Bool, gctools::smart_ptr<core::T_O>, _Bool, gctools::smart_ptr<core::T_O>, _Bool, gctools::smart_ptr<core::T_O>, _Bool, gctools::smart_ptr<core::T_O>, _Bool, gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<asttooling::AstVisitor_O> (gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<asttooling::AstVisitor_O> (gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<asttooling::AstVisitor_O> (gctools::smart_ptr<core::T_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2251:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Fixnum_O>)"))))) #S(#10# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::SourceManager,clang::SourceLocation (clang::SourceManager::*)(clang::SourceLocation) const>" :#3# "IndirectVariadicMethoid" :#5# "/home/meister/Development/clasp/src/clbind/bin/mps-prep/clang-linux-3.6.0/release/link-static/clbind_methoids.h:2119:1" :#6# #S(#11# :#1# "clbind::IndirectVariadicMethoid<clbind::policies<>,clang::SourceManager,clang::SourceLocation (clang::SourceManager::*)(clang::SourceLocation) const>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#11# :#1# "clbind::policies<>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# NIL)))) #S(#13# :#9# 1 :#6# #S(#15# :#1# "clang::SourceManager" :#3# "SourceManager")) #S(#13# :#9# 2 :#6# #S(#14# :#1# "clang::SourceLocation (clang::SourceManager::*)(clang::SourceLocation) const"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Real_O> (gctools::smart_ptr<core::Float_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:2288:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::multiple_values<core::Real_O> (gctools::smart_ptr<core::Float_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::multiple_values<core::Real_O> (gctools::smart_ptr<core::Float_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Function_O> (gctools::smart_ptr<core::Symbol_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:723:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::Function_O> (gctools::smart_ptr<core::Symbol_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::Function_O> (gctools::smart_ptr<core::Symbol_O>)"))))) #S(#10# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Function_O>, gctools::smart_ptr<core::T_O>)>" :#3# "VariadicFunctoid" :#5# "/home/meister/Development/clasp/src/core/bin/mps-prep/clang-linux-3.6.0/release/link-static/wrappers_functoids.h:648:1" :#6# #S(#11# :#1# "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Function_O>, gctools::smart_ptr<core::T_O>)>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "gctools::smart_ptr<core::T_O> (gctools::smart_ptr<core::T_O>, gctools::smart_ptr<core::Function_O>, gctools::smart_ptr<core::T_O>)")))))))
template <> class gctools::GCKind<core::BuiltinClosure> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_TEMPLATED_CLASSALLOC_core__BuiltinClosure ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::Specializer_O" :#3=NAME "KIND_BOOTSTRAP_core__Specializer_O" :VALUE 214 :#4=CCLASS #S(#4# :#1# "core::Specializer_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/specializer.h:47:5" :BASES ("core::Metaobject_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :BOOTSTRAP :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 0) :CHILDREN ("core::Class_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Specializer_O" :#5# "/home/meister/Development/clasp/src/core/specializer.h:47:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::Specializer_O" :#3# "Specializer_O")))
template <> class gctools::GCKind<core::Specializer_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_BOOTSTRAP_core__Specializer_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::StructureClass_O" :#3=NAME "KIND_BOOTSTRAP_core__StructureClass_O" :VALUE 222 :#4=CCLASS #S(#4# :#1# "core::StructureClass_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/structureClass.h:53:5" :BASES ("core::Class_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_InstanceCoreClass" :#5# "/home/meister/Development/clasp/src/core/structureClass.h:64:2" :#6=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Class_O>" :SPECIALIZER "class core::Class_O"))) :METHOD-NAMES (#7="NO-NAME" #7# #7# #7# "createUncollectable" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :BOOTSTRAP :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 0) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "StructureClass_O" :#5# "/home/meister/Development/clasp/src/core/structureClass.h:53:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::StructureClass_O" :#3# "StructureClass_O")))
template <> class gctools::GCKind<core::StructureClass_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_BOOTSTRAP_core__StructureClass_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::CompiledClosure" :#3=NAME "KIND_CLASSALLOC_llvmo__CompiledClosure" :VALUE 253 :#4=CCLASS #S(#4# :#1# "llvmo::CompiledClosure" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:772:5" :BASES ("core::FunctionClosure") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "associatedFunctions" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:779:9" :#8=CTYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Cons_O>" :#10=SPECIALIZER "class core::Cons_O")) #S(#6# :#7# "fptr" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:778:2" :#8# #S(POINTER-CTYPE :#1# NIL :POINTEE #S(UNCLASSIFIED-CTYPE :#1# "void (gctools::multiple_values<core::T_O> *, gctools::smart_ptr<core::T_O> *, unsigned long, core::T_O *, core::T_O *, core::T_O *, __va_list_tag *)"))) #S(#6# :#7# "llvmFunction" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:777:9" :#8# #S(#9# :#1# "gctools::smart_ptr<llvmo::Function_O>" :#10# "class llvmo::Function_O"))) :METHOD-NAMES (#11="NO-NAME" #11# #11# #11# #11# "invoke" #11# #11# #11# "lambdaListHandler" "compiledP" "setAssociatedFunctions" #11# "templatedSizeof") :METADATA NIL) :#12=SPECIES #S(#12# :#3# :CLASSALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 6) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CLASSALLOC :#1# #2# :#3# "CompiledClosure" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:772:5" :#8# #S(CXXRECORD-CTYPE :#1# "llvmo::CompiledClosure" :#3# "CompiledClosure")))
template <> class gctools::GCKind<llvmo::CompiledClosure> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_CLASSALLOC_llvmo__CompiledClosure ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::InterpretedClosure" :#3=NAME "KIND_CLASSALLOC_core__InterpretedClosure" :VALUE 254 :#4=CCLASS #S(#4# :#1# "core::InterpretedClosure" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/executables.h:149:5" :BASES ("core::FunctionClosure") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "code" :#5# "/home/meister/Development/clasp/src/core/executables.h:155:2" :#8=CTYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Cons_O>" :#10=SPECIALIZER "class core::Cons_O")) #S(#6# :#7# "docstring" :#5# "/home/meister/Development/clasp/src/core/executables.h:154:9" :#8# #S(#9# :#1# "gctools::smart_ptr<core::Str_O>" :#10# "class core::Str_O")) #S(#6# :#7# "declares" :#5# "/home/meister/Development/clasp/src/core/executables.h:153:9" :#8# #S(#9# :#1# "gctools::smart_ptr<core::Cons_O>" :#10# "class core::Cons_O")) #S(#6# :#7# "_lambdaListHandler" :#5# "/home/meister/Development/clasp/src/core/executables.h:152:9" :#8# #S(#9# :#1# "gctools::smart_ptr<core::LambdaListHandler_O>" :#10# "class core::LambdaListHandler_O"))) :METHOD-NAMES (#11="NO-NAME" #11# #11# #11# #11# "lambdaListHandler" "interpretedP" "invoke" "describe" "templatedSizeof" #11# #11# #11# #11#) :METADATA NIL) :#12=SPECIES #S(#12# :#3# :CLASSALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 6) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CLASSALLOC :#1# #2# :#3# "InterpretedClosure" :#5# "/home/meister/Development/clasp/src/core/executables.h:149:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::InterpretedClosure" :#3# "InterpretedClosure")))
template <> class gctools::GCKind<core::InterpretedClosure> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_CLASSALLOC_core__InterpretedClosure ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::ObjRef_O" :#3=NAME "KIND_LISPALLOC_core__ObjRef_O" :VALUE 127 :#4=CCLASS #S(#4# :#1# "core::ObjRef_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/objRef.h:43:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_SubRef" :#5# "/home/meister/Development/clasp/src/core/objRef.h:55:2" :#8=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::ObjRef_O>" :SPECIALIZER "class core::ObjRef_O")) #S(#6# :#7# "_Name" :#5# "/home/meister/Development/clasp/src/core/objRef.h:54:2" :#8# #S(#9=CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" :#3# NIL :#10=ARGUMENTS (#S(#11=GC-TEMPLATE-ARGUMENT :#12=INDEX 0 :#8# #S(#13=UNCLASSIFIED-CTYPE :#1# "char")) #S(#11# :#12# 1 :#8# #S(#9# :#1# "std::char_traits<char>" :#3# NIL :#10# (#S(#11# :#12# 0 :#8# #S(#13# :#1# "char"))))) #S(#11# :#12# 2 :#8# #S(#9# :#1# "std::allocator<char>" :#3# NIL :#10# (#S(#11# :#12# 0 :#8# #S(#13# :#1# "char")))))))) #S(#6# :#7# "_Selector" :#5# "/home/meister/Development/clasp/src/core/objRef.h:53:2" :#8# #S(#9# :#1# "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" :#3# NIL :#10# (#S(#11# :#12# 0 :#8# #S(#13# :#1# "char")) #S(#11# :#12# 1 :#8# #S(#9# :#1# "std::char_traits<char>" :#3# NIL :#10# (#S(#11# :#12# 0 :#8# #S(#13# :#1# "char"))))) #S(#11# :#12# 2 :#8# #S(#9# :#1# "std::allocator<char>" :#3# NIL :#10# (#S(#11# :#12# 0 :#8# #S(#13# :#1# "char"))))))))) :METHOD-NAMES (#14="NO-NAME" #14# #14# #14# "relativeTo" "asString" "setSubRef" "getSubRef" "setName" "getName" "setSelector" "getSelector" "create2" "create" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#15=SPECIES #S(#15# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#12# 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "ObjRef_O" :#5# "/home/meister/Development/clasp/src/core/objRef.h:43:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::ObjRef_O" :#3# "ObjRef_O")))
template <> class gctools::GCKind<core::ObjRef_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__ObjRef_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::BuiltInClass_O" :#3=NAME "KIND_BOOTSTRAP_core__BuiltInClass_O" :VALUE 220 :#4=CCLASS #S(#4# :#1# "core::BuiltInClass_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/builtInClass.h:44:5" :BASES ("core::Class_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "allocateAndInitialize" "describe" "createUncollectable" "create" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :BOOTSTRAP :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 0) :CHILDREN ("clbind::ClassRep_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "BuiltInClass_O" :#5# "/home/meister/Development/clasp/src/core/builtInClass.h:44:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::BuiltInClass_O" :#3# "BuiltInClass_O")))
template <> class gctools::GCKind<core::BuiltInClass_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_BOOTSTRAP_core__BuiltInClass_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::IntegerType_O" :#3=NAME "KIND_LISPALLOC_llvmo__IntegerType_O" :VALUE 156 :#4=CCLASS #S(#4# :#1# "llvmo::IntegerType_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3654:5" :BASES ("llvmo::Type_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "get" #6# #6# "set_wrapped" "wrapped" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "IntegerType_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3654:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::IntegerType_O" :#3# "IntegerType_O")))
template <> class gctools::GCKind<llvmo::IntegerType_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__IntegerType_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::Reader_O" :#3=NAME "KIND_LISPALLOC_core__Reader_O" :VALUE 126 :#4=CCLASS #S(#4# :#1# "core::Reader_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/reader.h:164:1" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Input" :#5# "/home/meister/Development/clasp/src/core/reader.h:172:5" :#6=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Stream_O>" :SPECIALIZER "class core::Stream_O"))) :METHOD-NAMES (#7="NO-NAME" #7# "primitive_read" "readDelimitedList" "parseString" "internSymbol" "fileName" "nextToken" "featureRead" "suppressRead" "isFeatureRecognized" "appendString" "nextToken" "readDoubleQuoteString" "readString" "isTerminal" "isWhiteSpace" "skipToMatchingVerticalBarSharp" "skipToEol" "skipWhiteSpace" "nextChar" "peekChar" "posAsString" "inSet" "create" "initialize" "prepareToRead" #7# #7# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Reader_O" :#5# "/home/meister/Development/clasp/src/core/reader.h:164:1" :#6# #S(CXXRECORD-CTYPE :#1# "core::Reader_O" :#3# "Reader_O")))
template <> class gctools::GCKind<core::Reader_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Reader_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::Type_O" :#3=NAME "KIND_LISPALLOC_llvmo__Type_O" :VALUE 149 :#4=CCLASS #S(#4# :#1# "llvmo::Type_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3523:5" :BASES ("core::ExternalObject_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_ptr" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3530:2" :#6=CTYPE #S(POINTER-CTYPE :#1# NIL :POINTEE #S(#7=CXXRECORD-CTYPE :#1# "llvm::Type" :#3# "Type")))) :METHOD-NAMES (#8="NO-NAME" #8# "__repr__" "equal" "getPointerTo" "getArrayNumElements" #8# #8# "create" "set_wrapped" "wrappedPtr" "wrappedPtr" "externalObject" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#9=SPECIES #S(#9# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("llvmo::CompositeType_O" "llvmo::IntegerType_O" "llvmo::FunctionType_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Type_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3523:5" :#6# #S(#7# :#1# "llvmo::Type_O" :#3# "Type_O")))
template <> class gctools::GCKind<llvmo::Type_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__Type_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::RuntimeVisibleEnvironment_O" :#3=NAME "KIND_LISPALLOC_core__RuntimeVisibleEnvironment_O" :VALUE 39 :#4=CCLASS #S(#4# :#1# "core::RuntimeVisibleEnvironment_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/environment.h:296:5" :BASES ("core::LexicalEnvironment_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_RuntimeEnvironment" :#5# "/home/meister/Development/clasp/src/core/environment.h:301:9" :#6=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O"))) :METHOD-NAMES (#7="NO-NAME" #7# #7# #7# "currentVisibleEnvironment" "_findTag" "_findFunction" "_findValue" "runtimeEnvironment" "setRuntimeEnvironment" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("core::ValueEnvironment_O" "core::FunctionValueEnvironment_O" "core::TagbodyEnvironment_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "RuntimeVisibleEnvironment_O" :#5# "/home/meister/Development/clasp/src/core/environment.h:296:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::RuntimeVisibleEnvironment_O" :#3# "RuntimeVisibleEnvironment_O")))
template <> class gctools::GCKind<core::RuntimeVisibleEnvironment_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__RuntimeVisibleEnvironment_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::SmallMap_O" :#3=NAME "KIND_LISPALLOC_core__SmallMap_O" :VALUE 125 :#4=CCLASS #S(#4# :#1# "core::SmallMap_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/smallMap.h:50:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "map" :#5# "/home/meister/Development/clasp/src/core/smallMap.h:56:9" :#6=CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "gctools::SmallMap<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>" :#3# NIL :ARGUMENTS (#S(#7=GC-TEMPLATE-ARGUMENT :#8=INDEX 0 :#6# #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :#10=SPECIALIZER "class core::T_O")) #S(#7# :#8# 1 :#6# #S(#9# :#1# "gctools::smart_ptr<core::T_O>" :#10# "class core::T_O")))))) :METHOD-NAMES (#11="NO-NAME" #11# #11# #11# "capacity" "size" "setf" "find" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#12=SPECIES #S(#12# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#8# 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "SmallMap_O" :#5# "/home/meister/Development/clasp/src/core/smallMap.h:50:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::SmallMap_O" :#3# "SmallMap_O")))
template <> class gctools::GCKind<core::SmallMap_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__SmallMap_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::DataLayout_O" :#3=NAME "KIND_LISPALLOC_llvmo__DataLayout_O" :VALUE 148 :#4=CCLASS #S(#4# :#1# "llvmo::DataLayout_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:695:5" :BASES ("core::ExternalObject_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_ptr" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:702:9" :#6=CTYPE #S(POINTER-CTYPE :#1# NIL :POINTEE #S(#7=CXXRECORD-CTYPE :#1# "llvm::DataLayout" :#3# "DataLayout")))) :METHOD-NAMES (#8="NO-NAME" #8# "copy" #8# #8# "set_wrapped" "wrappedPtr" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#9=SPECIES #S(#9# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "DataLayout_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:695:5" :#6# #S(#7# :#1# "llvmo::DataLayout_O" :#3# "DataLayout_O")))
template <> class gctools::GCKind<llvmo::DataLayout_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__DataLayout_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="gctools::GCVector_moveable<asttooling::ParserValue>" :#3=NAME "KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ParserValue_" :VALUE 255 :#4=CCLASS #S(#4# :#1# "gctools::GCVector_moveable<asttooling::ParserValue>" :TEMPLATE-SPECIALIZER T :#5=LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Data" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:48:9" :#8=CTYPE #S(CONSTANT-ARRAY-CTYPE :#1# NIL :ELEMENT-TYPE #S(#9=CXXRECORD-CTYPE :#1# "asttooling::ParserValue" :#3# "ParserValue"))) #S(#6# :#7# "_End" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:47:9" :#8# #S(#10=UNCLASSIFIED-CTYPE :#1# "unsigned long")) #S(#6# :#7# "_Capacity" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:46:9" :#8# #S(#10# :#1# "unsigned long"))) :METHOD-NAMES (#11="NO-NAME" "end" "begin" "end" "begin" #11# #11# "capacity" "size" "data" #11# #11# #11#) :METADATA NIL) :#12=SPECIES #S(#12# :#3# :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :DUMP DUMPER-FOR-GCCONTAINER :#13=INDEX 3) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CONTAINERALLOC :#1# #2# :#3# "GCVector_moveable" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#8# #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::ParserValue>" :#3# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#13# 0 :#8# #S(#9# :#1# "asttooling::ParserValue" :#3# "ParserValue"))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<asttooling::ParserValue>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ParserValue_ ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="asttooling::internal::OverloadedMatcherDescriptor" :#3=NAME "KIND_CLASSALLOC_asttooling__internal__OverloadedMatcherDescriptor" :VALUE 256 :#4=CCLASS #S(#4# :#1# "asttooling::internal::OverloadedMatcherDescriptor" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/asttooling/Marshallers.h:348:9" :BASES ("asttooling::internal::MatcherDescriptor") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "Overloads" :#5# "/home/meister/Development/clasp/src/asttooling/Marshallers.h:401:13" :#6=CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "gctools::Vec0<asttooling::internal::MatcherDescriptor *>" :#3# NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#7=INDEX 0 :#6# #S(POINTER-CTYPE :#1# NIL :POINTEE #S(#8=CXXRECORD-CTYPE :#1# "asttooling::internal::MatcherDescriptor" :#3# "MatcherDescriptor"))))))) :METHOD-NAMES (#9="NO-NAME" #9# "create" #9# #9# #9#) :METADATA NIL) :#10=SPECIES #S(#10# :#3# :CLASSALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#7# 6) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CLASSALLOC :#1# #2# :#3# "OverloadedMatcherDescriptor" :#5# "/home/meister/Development/clasp/src/asttooling/Marshallers.h:348:9" :#6# #S(#8# :#1# "asttooling::internal::OverloadedMatcherDescriptor" :#3# "OverloadedMatcherDescriptor")))
template <> class gctools::GCKind<asttooling::internal::OverloadedMatcherDescriptor> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_CLASSALLOC_asttooling__internal__OverloadedMatcherDescriptor ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::CompositeType_O" :#3=NAME "KIND_LISPALLOC_llvmo__CompositeType_O" :VALUE 150 :#4=CCLASS #S(#4# :#1# "llvmo::CompositeType_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3704:5" :BASES ("llvmo::Type_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "get" #6# #6# "set_wrapped" "wrapped" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("llvmo::SequentialType_O" "llvmo::StructType_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "CompositeType_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3704:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::CompositeType_O" :#3# "CompositeType_O")))
template <> class gctools::GCKind<llvmo::CompositeType_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__CompositeType_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::Instance_O" :#3=NAME "KIND_LISPALLOC_core__Instance_O" :VALUE 91 :#4=CCLASS #S(#4# :#1# "core::Instance_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/instance.h:100:5" :BASES ("core::Function_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Sig" :#5# "/home/meister/Development/clasp/src/core/instance.h:116:2" :#8=CTYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :#10=SPECIALIZER "class core::T_O")) #S(#6# :#7# "_Slots" :#5# "/home/meister/Development/clasp/src/core/instance.h:112:9" :#8# #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "gctools::Vec0<gctools::smart_ptr<core::T_O>>" :#3# NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#11=INDEX 0 :#8# #S(#9# :#1# "gctools::smart_ptr<core::T_O>" :#10# "class core::T_O"))))) #S(#6# :#7# "_Class" :#5# "/home/meister/Development/clasp/src/core/instance.h:111:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::Class_O>" :#10# "class core::Class_O")) #S(#6# :#7# "_isgf" :#5# "/home/meister/Development/clasp/src/core/instance.h:110:2" :#8# #S(UNCLASSIFIED-CTYPE :#1# "int"))) :METHOD-NAMES (#12="NO-NAME" #12# "__write__" "describe" "genericFunctionP" "setFuncallableInstanceFunction" "copyInstance" "__repr__" "instanceSet" "instanceRef" "equalp" "setKind" "functionKind" "macroP" "instanceSig" "instanceSigSet" "instanceClassSet" "_instanceClass" "isgf" "oinstancep" "oinstancepSTAR" "numberOfSlots" "LISP_INVOKE" "reshapeInstance" "allocateRawInstance" "allocateInstance" "ensureClosure" "initializeSlots" "GFUN_COMB" "GFUN_SPECIALIZERS" "GFUN_NAME" "isCallable" #12# #12# "archiveBase" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#13=SPECIES #S(#13# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#11# 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Instance_O" :#5# "/home/meister/Development/clasp/src/core/instance.h:100:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::Instance_O" :#3# "Instance_O")))
template <> class gctools::GCKind<core::Instance_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Instance_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="asttooling::DerivableMatchCallback" :#3=NAME "KIND_LISPALLOC_asttooling__DerivableMatchCallback" :VALUE 257 :#4=CCLASS #S(#4# :#1# "asttooling::DerivableMatchCallback" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/asttooling/clangTooling.h:173:5" :BASES ("clbind::Derivable<clang::ast_matchers::MatchFinder::MatchCallback>") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# #6# #6# "describe" "default_onEndOfTranslationUnit" "onEndOfTranslationUnit" "default_onStartOfTranslationUnit" "onStartOfTranslationUnit" "default_run" "run") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(LISPALLOC :#1# #2# :#3# "DerivableMatchCallback" :#5# "/home/meister/Development/clasp/src/asttooling/clangTooling.h:173:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "asttooling::DerivableMatchCallback" :#3# "DerivableMatchCallback")))
template <> class gctools::GCKind<asttooling::DerivableMatchCallback> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_asttooling__DerivableMatchCallback ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::DIDescriptor_O" :#3=NAME "KIND_LISPALLOC_llvmo__DIDescriptor_O" :VALUE 63 :#4=CCLASS #S(#4# :#1# "llvmo::DIDescriptor_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/debugInfoExpose.h:95:5" :BASES ("llvm::DIDescriptor" "llvmo::DebugInfo_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# #6# #6# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "DIDescriptor_O" :#5# "/home/meister/Development/clasp/src/llvmo/debugInfoExpose.h:95:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::DIDescriptor_O" :#3# "DIDescriptor_O")))
template <> class gctools::GCKind<llvmo::DIDescriptor_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__DIDescriptor_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>" :#3=NAME "KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__SingleDispatchMethod_O__" :VALUE 258 :#4=CCLASS #S(#4# :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>" :TEMPLATE-SPECIALIZER T :#5=LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Data" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:48:9" :#8=CTYPE #S(CONSTANT-ARRAY-CTYPE :#1# NIL :ELEMENT-TYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::SingleDispatchMethod_O>" :#10=SPECIALIZER "class core::SingleDispatchMethod_O"))) #S(#6# :#7# "_End" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:47:9" :#8# #S(#11=UNCLASSIFIED-CTYPE :#1# "unsigned long")) #S(#6# :#7# "_Capacity" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:46:9" :#8# #S(#11# :#1# "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" #12="NO-NAME" #12# "capacity" "size" "data" #12# #12# #12#) :METADATA NIL) :#13=SPECIES #S(#13# :#3# :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :DUMP DUMPER-FOR-GCCONTAINER :#14=INDEX 3) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CONTAINERALLOC :#1# #2# :#3# "GCVector_moveable" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#8# #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>" :#3# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#14# 0 :#8# #S(#9# :#1# "gctools::smart_ptr<core::SingleDispatchMethod_O>" :#10# "class core::SingleDispatchMethod_O"))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__SingleDispatchMethod_O__ ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::InvokeInst_O" :#3=NAME "KIND_LISPALLOC_llvmo__InvokeInst_O" :VALUE 178 :#4=CCLASS #S(#4# :#1# "llvmo::InvokeInst_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2667:1" :BASES ("llvmo::TerminatorInst_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "InvokeInst_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2667:1" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::InvokeInst_O" :#3# "InvokeInst_O")))
template <> class gctools::GCKind<llvmo::InvokeInst_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__InvokeInst_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::PassManagerBase_O" :#3=NAME "KIND_LISPALLOC_llvmo__PassManagerBase_O" :VALUE 145 :#4=CCLASS #S(#4# :#1# "llvmo::PassManagerBase_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:445:1" :BASES ("core::ExternalObject_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_ptr" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:452:5" :#6=CTYPE #S(POINTER-CTYPE :#1# NIL :POINTEE #S(#7=CXXRECORD-CTYPE :#1# "llvm::legacy::PassManagerBase" :#3# "PassManagerBase")))) :METHOD-NAMES (#8="NO-NAME" #8# #8# #8# "set_wrapped" "wrappedPtr" "externalObject" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#9=SPECIES #S(#9# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("llvmo::PassManager_O" "llvmo::FunctionPassManager_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "PassManagerBase_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:445:1" :#6# #S(#7# :#1# "llvmo::PassManagerBase_O" :#3# "PassManagerBase_O")))
template <> class gctools::GCKind<llvmo::PassManagerBase_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__PassManagerBase_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>" :#3=NAME "KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__" :VALUE 259 :#4=CCLASS #S(#4# :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>" :TEMPLATE-SPECIALIZER T :#5=LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Data" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:48:9" :#8=CTYPE #S(CONSTANT-ARRAY-CTYPE :#1# NIL :ELEMENT-TYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Cons_O>" :#10=SPECIALIZER "class core::Cons_O"))) #S(#6# :#7# "_End" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:47:9" :#8# #S(#11=UNCLASSIFIED-CTYPE :#1# "unsigned long")) #S(#6# :#7# "_Capacity" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:46:9" :#8# #S(#11# :#1# "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" #12="NO-NAME" #12# "capacity" "size" "data" #12# #12# #12#) :METADATA NIL) :#13=SPECIES #S(#13# :#3# :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :DUMP DUMPER-FOR-GCCONTAINER :#14=INDEX 3) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CONTAINERALLOC :#1# #2# :#3# "GCVector_moveable" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#8# #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>" :#3# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#14# 0 :#8# #S(#9# :#1# "gctools::smart_ptr<core::Cons_O>" :#10# "class core::Cons_O"))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__ ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="gctools::GCVector_moveable<gctools::smart_ptr<core::Character_O>>" :#3=NAME "KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Character_O__" :VALUE 260 :#4=CCLASS #S(#4# :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Character_O>>" :TEMPLATE-SPECIALIZER T :#5=LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Data" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:48:9" :#8=CTYPE #S(CONSTANT-ARRAY-CTYPE :#1# NIL :ELEMENT-TYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Character_O>" :#10=SPECIALIZER "class core::Character_O"))) #S(#6# :#7# "_End" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:47:9" :#8# #S(#11=UNCLASSIFIED-CTYPE :#1# "unsigned long")) #S(#6# :#7# "_Capacity" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:46:9" :#8# #S(#11# :#1# "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" #12="NO-NAME" #12# "capacity" "size" "data" #12# #12# #12#) :METADATA NIL) :#13=SPECIES #S(#13# :#3# :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :DUMP DUMPER-FOR-GCCONTAINER :#14=INDEX 3) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CONTAINERALLOC :#1# #2# :#3# "GCVector_moveable" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#8# #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Character_O>>" :#3# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#14# 0 :#8# #S(#9# :#1# "gctools::smart_ptr<core::Character_O>" :#10# "class core::Character_O"))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<gctools::smart_ptr<core::Character_O>>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Character_O__ ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::DIFile_O" :#3=NAME "KIND_LISPALLOC_llvmo__DIFile_O" :VALUE 62 :#4=CCLASS #S(#4# :#1# "llvmo::DIFile_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/debugInfoExpose.h:294:5" :BASES ("llvm::DIFile" "llvmo::DebugInfo_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# #6# #6# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "DIFile_O" :#5# "/home/meister/Development/clasp/src/llvmo/debugInfoExpose.h:294:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::DIFile_O" :#3# "DIFile_O")))
template <> class gctools::GCKind<llvmo::DIFile_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__DIFile_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::VAArgInst_O" :#3=NAME "KIND_LISPALLOC_llvmo__VAArgInst_O" :VALUE 173 :#4=CCLASS #S(#4# :#1# "llvmo::VAArgInst_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2400:1" :BASES ("llvmo::UnaryInstruction_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "VAArgInst_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2400:1" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::VAArgInst_O" :#3# "VAArgInst_O")))
template <> class gctools::GCKind<llvmo::VAArgInst_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__VAArgInst_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::ShortFloat_O" :#3=NAME "KIND_LISPALLOC_core__ShortFloat_O" :VALUE 103 :#4=CCLASS #S(#4# :#1# "core::ShortFloat_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/numbers.h:385:5" :BASES ("core::Float_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Value" :#5# "/home/meister/Development/clasp/src/core/numbers.h:397:2" :#6=CTYPE #S(UNCLASSIFIED-CTYPE :#1# "float"))) :METHOD-NAMES (#7="NO-NAME" #7# #7# #7# "castToInteger" "as_long_float" "as_double" "as_float" "minusp" "plusp" "oneMinus" "onePlus" "negate" "zerop" "reciprocal" "eql" "eqn" "setFromString" "valueAsString" "isnan" "abs" "__repr__" "signum" "copy" "sxhash" "get" "number_type" "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "ShortFloat_O" :#5# "/home/meister/Development/clasp/src/core/numbers.h:385:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::ShortFloat_O" :#3# "ShortFloat_O")))
template <> class gctools::GCKind<core::ShortFloat_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__ShortFloat_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="gctools::GCVector_moveable<core::SequenceStepper *>" :#3=NAME "KIND_GCVECTOR_gctools__GCVector_moveable_core__SequenceStepper_P_" :VALUE 261 :#4=CCLASS #S(#4# :#1# "gctools::GCVector_moveable<core::SequenceStepper *>" :TEMPLATE-SPECIALIZER T :#5=LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Data" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:48:9" :#8=CTYPE #S(CONSTANT-ARRAY-CTYPE :#1# NIL :ELEMENT-TYPE #S(#9=POINTER-CTYPE :#1# NIL :#10=POINTEE #S(#11=CXXRECORD-CTYPE :#1# "core::SequenceStepper" :#3# "SequenceStepper")))) #S(#6# :#7# "_End" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:47:9" :#8# #S(#12=UNCLASSIFIED-CTYPE :#1# "unsigned long")) #S(#6# :#7# "_Capacity" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:46:9" :#8# #S(#12# :#1# "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" #13="NO-NAME" #13# "capacity" "size" "data" #13# #13# #13#) :METADATA NIL) :#14=SPECIES #S(#14# :#3# :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :DUMP DUMPER-FOR-GCCONTAINER :#15=INDEX 3) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CONTAINERALLOC :#1# #2# :#3# "GCVector_moveable" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#8# #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::SequenceStepper *>" :#3# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#15# 0 :#8# #S(#9# :#1# NIL :#10# #S(#11# :#1# "core::SequenceStepper" :#3# "SequenceStepper")))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<core::SequenceStepper *>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_core__SequenceStepper_P_ ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::Array_O" :#3=NAME "KIND_LISPALLOC_core__Array_O" :VALUE 115 :#4=CCLASS #S(#4# :#1# "core::Array_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/array.h:39:1" :BASES ("core::T_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "__repr__" "fillArrayWithElt" "arrayFill" "setf_svref" "svref" "setf_aref" "aref" "multiplyByScalar" "arrayDimensions" "arrayDimension" "element_type_as_symbol" "elementType" "index" "index_val" "index_vector_int" "rank" "setDimensions" "array_has_fill_pointer_p" "_displaced_array_p" "adjustable_array_p" "arrayRowMajorIndex" "rowMajorAref" "rowMajorAset" "arrayTotalSize" "arrayHasFillPointerP" "asetUnsafe" "equalp" "checkedIndex" "initialize" #6# #6# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("core::ArrayObjects_O" "core::Vector_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Array_O" :#5# "/home/meister/Development/clasp/src/core/array.h:39:1" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::Array_O" :#3# "Array_O")))
template <> class gctools::GCKind<core::Array_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Array_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::PassManagerBuilder_O" :#3=NAME "KIND_LISPALLOC_llvmo__PassManagerBuilder_O" :VALUE 144 :#4=CCLASS #S(#4# :#1# "llvmo::PassManagerBuilder_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1664:5" :BASES ("core::ExternalObject_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_ErrorStr" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1672:2" :#8=CTYPE #S(#9=CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" :#3# NIL :#10=ARGUMENTS (#S(#11=GC-TEMPLATE-ARGUMENT :#12=INDEX 0 :#8# #S(#13=UNCLASSIFIED-CTYPE :#1# "char")) #S(#11# :#12# 1 :#8# #S(#9# :#1# "std::char_traits<char>" :#3# NIL :#10# (#S(#11# :#12# 0 :#8# #S(#13# :#1# "char"))))) #S(#11# :#12# 2 :#8# #S(#9# :#1# "std::allocator<char>" :#3# NIL :#10# (#S(#11# :#12# 0 :#8# #S(#13# :#1# "char")))))))) #S(#6# :#7# "_ptr" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1671:2" :#8# #S(POINTER-CTYPE :#1# NIL :POINTEE #S(#14=CXXRECORD-CTYPE :#1# "llvm::PassManagerBuilder" :#3# "PassManagerBuilder")))) :METHOD-NAMES (#15="NO-NAME" #15# "setUseMCJIT" "setTargetOptions" "setEngineKind" "createExecutionEngine" "make" #15# #15# "error_string" "set_wrapped" "wrappedPtr" "wrappedPtr" "externalObject" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#16=SPECIES #S(#16# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#12# 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "PassManagerBuilder_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1664:5" :#8# #S(#14# :#1# "llvmo::PassManagerBuilder_O" :#3# "PassManagerBuilder_O")))
template <> class gctools::GCKind<llvmo::PassManagerBuilder_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__PassManagerBuilder_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::CoreExposer" :#3=NAME "KIND_CLASSALLOC_core__CoreExposer" :VALUE 262 :#4=CCLASS #S(#4# :#1# "core::CoreExposer" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/corePackage.h:43:5" :BASES ("core::Exposer") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# #6# "define_essential_globals" "create_core_packages_and_classes" "expose" #6# #6# #6# #6#) :METADATA NIL) :#7=SPECIES #S(#7# :#3# :CLASSALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 6) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CLASSALLOC :#1# #2# :#3# "CoreExposer" :#5# "/home/meister/Development/clasp/src/core/corePackage.h:43:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::CoreExposer" :#3# "CoreExposer")))
template <> class gctools::GCKind<core::CoreExposer> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_CLASSALLOC_core__CoreExposer ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::SingleDispatchGenericFunctionClosure" :#3=NAME "KIND_CLASSALLOC_core__SingleDispatchGenericFunctionClosure" :VALUE 263 :#4=CCLASS #S(#4# :#1# "core::SingleDispatchGenericFunctionClosure" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/singleDispatchGenericFunction.h:43:5" :BASES ("core::FunctionClosure") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_lambdaListHandler" :#5# "/home/meister/Development/clasp/src/core/singleDispatchGenericFunction.h:48:9" :#8=CTYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::LambdaListHandler_O>" :#10=SPECIALIZER "class core::LambdaListHandler_O")) #S(#6# :#7# "_Methods" :#5# "/home/meister/Development/clasp/src/core/singleDispatchGenericFunction.h:47:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::Cons_O>" :#10# "class core::Cons_O"))) :METHOD-NAMES (#11="NO-NAME" #11# #11# #11# #11# "computeEffectiveMethodFunction" "slowMethodLookup" "lambdaListHandler" "addMethod" "singleDispatchGenericP" "invoke" "describe" "templatedSizeof" "finishSetup" #11# #11# #11# #11# #11#) :METADATA NIL) :#12=SPECIES #S(#12# :#3# :CLASSALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 6) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CLASSALLOC :#1# #2# :#3# "SingleDispatchGenericFunctionClosure" :#5# "/home/meister/Development/clasp/src/core/singleDispatchGenericFunction.h:43:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::SingleDispatchGenericFunctionClosure" :#3# "SingleDispatchGenericFunctionClosure")))
template <> class gctools::GCKind<core::SingleDispatchGenericFunctionClosure> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_CLASSALLOC_core__SingleDispatchGenericFunctionClosure ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::InstanceCreator" :#3=NAME "KIND_CLASSALLOC_core__InstanceCreator" :VALUE 5 :#4=CCLASS #S(#4# :#1# "core::InstanceCreator" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/metaClass.h:300:5" :BASES ("core::Creator") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_className" :#5# "/home/meister/Development/clasp/src/core/metaClass.h:303:9" :#6=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O"))) :METHOD-NAMES (#7="NO-NAME" #7# #7# #7# #7# "templatedSizeof" "allocate" "describe" #7# #7# #7# #7#) :METADATA NIL) :#8=SPECIES #S(#8# :#3# :CLASSALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 6) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(CLASSALLOC :#1# #2# :#3# "InstanceCreator" :#5# "/home/meister/Development/clasp/src/core/metaClass.h:300:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::InstanceCreator" :#3# "InstanceCreator")))
template <> class gctools::GCKind<core::InstanceCreator> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_CLASSALLOC_core__InstanceCreator ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::UnwindProtectEnvironment_O" :#3=NAME "KIND_LISPALLOC_core__UnwindProtectEnvironment_O" :VALUE 35 :#4=CCLASS #S(#4# :#1# "core::UnwindProtectEnvironment_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/environment.h:554:5" :BASES ("core::CompileTimeEnvironment_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "find_unwindable_environment" #6# #6# "summaryOfContents" "make" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "UnwindProtectEnvironment_O" :#5# "/home/meister/Development/clasp/src/core/environment.h:554:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::UnwindProtectEnvironment_O" :#3# "UnwindProtectEnvironment_O")))
template <> class gctools::GCKind<core::UnwindProtectEnvironment_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__UnwindProtectEnvironment_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="gctools::GCVector_moveable<core::SymbolStorage>" :#3=NAME "KIND_GCVECTOR_gctools__GCVector_moveable_core__SymbolStorage_" :VALUE 264 :#4=CCLASS #S(#4# :#1# "gctools::GCVector_moveable<core::SymbolStorage>" :TEMPLATE-SPECIALIZER T :#5=LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Data" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:48:9" :#8=CTYPE #S(CONSTANT-ARRAY-CTYPE :#1# NIL :ELEMENT-TYPE #S(#9=CXXRECORD-CTYPE :#1# "core::SymbolStorage" :#3# "SymbolStorage"))) #S(#6# :#7# "_End" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:47:9" :#8# #S(#10=UNCLASSIFIED-CTYPE :#1# "unsigned long")) #S(#6# :#7# "_Capacity" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:46:9" :#8# #S(#10# :#1# "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" #11="NO-NAME" #11# "capacity" "size" "data" #11# #11# #11#) :METADATA NIL) :#12=SPECIES #S(#12# :#3# :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :DUMP DUMPER-FOR-GCCONTAINER :#13=INDEX 3) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CONTAINERALLOC :#1# #2# :#3# "GCVector_moveable" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#8# #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::SymbolStorage>" :#3# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#13# 0 :#8# #S(#9# :#1# "core::SymbolStorage" :#3# "SymbolStorage"))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<core::SymbolStorage>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_core__SymbolStorage_ ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::Fixnum_O" :#3=NAME "KIND_LISPALLOC_core__Fixnum_O" :VALUE 110 :#4=CCLASS #S(#4# :#1# "core::Fixnum_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/numbers.h:258:5" :BASES ("core::Integer_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Value" :#5# "/home/meister/Development/clasp/src/core/numbers.h:281:2" :#6=CTYPE #S(UNCLASSIFIED-CTYPE :#1# "int"))) :METHOD-NAMES (#7="NO-NAME" #7# #7# #7# "sxhash" "as_long_float" "as_double" "as_float" "as_LongLongInt" "as_mpz" "as_uint64" "as_int" "asChar" "shift" "bit_length" "setFromString" "valueAsString" "oneMinus" "onePlus" "eql" "eqn" "oddp" "evenp" "minusp" "plusp" "negate" "zerop" "signum" "abs" "get" "set" "__repr__" "copy" "ref" "number_type" "number_of_bits" "create" "create" "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Fixnum_O" :#5# "/home/meister/Development/clasp/src/core/numbers.h:258:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::Fixnum_O" :#3# "Fixnum_O")))
template <> class gctools::GCKind<core::Fixnum_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Fixnum_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::ForeignData_O" :#3=NAME "KIND_LISPALLOC_core__ForeignData_O" :VALUE 143 :#4=CCLASS #S(#4# :#1# "core::ForeignData_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/externalObject.h:126:5" :BASES ("core::ExternalObject_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Data" :#5# "/home/meister/Development/clasp/src/core/externalObject.h:137:2" :#8=CTYPE #S(POINTER-CTYPE :#1# NIL :POINTEE #S(#9=UNCLASSIFIED-CTYPE :#1# "void"))) #S(#6# :#7# "_Size" :#5# "/home/meister/Development/clasp/src/core/externalObject.h:136:2" :#8# #S(#9# :#1# "unsigned long")) #S(#6# :#7# "_OwnershipFlags" :#5# "/home/meister/Development/clasp/src/core/externalObject.h:135:2" :#8# #S(#9# :#1# "int")) #S(#6# :#7# "_Kind" :#5# "/home/meister/Development/clasp/src/core/externalObject.h:134:2" :#8# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O"))) :METHOD-NAMES (#10="NO-NAME" #10# #10# #10# "freeForeignObject" "allocate" "allocateForeignObject" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#11=SPECIES #S(#11# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "ForeignData_O" :#5# "/home/meister/Development/clasp/src/core/externalObject.h:126:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::ForeignData_O" :#3# "ForeignData_O")))
template <> class gctools::GCKind<core::ForeignData_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__ForeignData_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::EchoStream_O" :#3=NAME "KIND_LISPALLOC_core__EchoStream_O" :VALUE 25 :#4=CCLASS #S(#4# :#1# "core::EchoStream_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/lispStream.h:704:5" :BASES ("core::AnsiStream_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Out" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:717:9" :#8=CTYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :#10=SPECIALIZER "class core::T_O")) #S(#6# :#7# "_In" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:716:9" :#8# #S(#9# :#1# "gctools::smart_ptr<core::T_O>" :#10# "class core::T_O"))) :METHOD-NAMES (#11="NO-NAME" #11# #11# #11# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#12=SPECIES #S(#12# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "EchoStream_O" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:704:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::EchoStream_O" :#3# "EchoStream_O")))
template <> class gctools::GCKind<core::EchoStream_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__EchoStream_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::UndefValue_O" :#3=NAME "KIND_LISPALLOC_llvmo__UndefValue_O" :VALUE 197 :#4=CCLASS #S(#4# :#1# "llvmo::UndefValue_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3003:5" :BASES ("llvmo::Constant_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "__repr__" #6# #6# "create" "set_wrapped" "wrappedPtr" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "UndefValue_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3003:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::UndefValue_O" :#3# "UndefValue_O")))
template <> class gctools::GCKind<llvmo::UndefValue_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__UndefValue_O ;
};
//GCTemplatedKind for #S(TEMPLATED-ENUM :#1=KEY #2="core::Creator" :#3=NAME "KIND_TEMPLATED_CLASSALLOC_core__Creator" :VALUE 3 :#4=CCLASS #S(#4# :#1# #2# :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/foundation.h:960:5" :BASES NIL :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# #6# #6# "allocate" "describe" "duplicateForClassName" "templatedSizeof" "duplicationLevel" "allocates") :METADATA (:METADATA_ALWAYS_FIX_POINTERS_TO_DERIVED_CLASSES)) :#7=SPECIES #S(#7# :#3# :TEMPLATED-CLASSALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-TEMPLATED-LISPALLOCS :SKIP SKIPPER-FOR-TEMPLATED-LISPALLOCS :FINALIZE FINALIZER-FOR-TEMPLATED-LISPALLOCS :DUMP DUMPER-FOR-TEMPLATED-LISPALLOCS :#8=INDEX 8) :CHILDREN ("clbind::ConstructorCreator" "core::InstanceCreator" "clbind::DummyCreator") :IN-HIERARCHY T :ALL-ALLOCS (#S(#9=CLASSALLOC :#1# "core::LispObjectCreator<core::WeakKeyMapping_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10=CTYPE #S(#11=CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "core::LispObjectCreator<core::WeakKeyMapping_O>" :#3# NIL :#12=ARGUMENTS (#S(#13=GC-TEMPLATE-ARGUMENT :#8# 0 :#10# #S(#14=CXXRECORD-CTYPE :#1# "core::WeakKeyMapping_O" :#3# "WeakKeyMapping_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::MDNode_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::MDNode_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::MDNode_O" :#3# "MDNode_O"))))) #S(#9# :#1# "core::LispObjectCreator<clbind::ClassRegistry_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<clbind::ClassRegistry_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "clbind::ClassRegistry_O" :#3# "ClassRegistry_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::ValueFrame_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::ValueFrame_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::ValueFrame_O" :#3# "ValueFrame_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::StrWithFillPtr_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::StrWithFillPtr_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::StrWithFillPtr_O" :#3# "StrWithFillPtr_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::BlockAddress_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::BlockAddress_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::BlockAddress_O" :#3# "BlockAddress_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::Function_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::Function_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::Function_O" :#3# "Function_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::ObjectSet_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::ObjectSet_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::ObjectSet_O" :#3# "ObjectSet_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::ExtendedChar_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::ExtendedChar_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::ExtendedChar_O" :#3# "ExtendedChar_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::DIDescriptor_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::DIDescriptor_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::DIDescriptor_O" :#3# "DIDescriptor_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::IntegerType_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::IntegerType_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::IntegerType_O" :#3# "IntegerType_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::Constant_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::Constant_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::Constant_O" :#3# "Constant_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::LexicalEnvironment_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::LexicalEnvironment_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::LexicalEnvironment_O" :#3# "LexicalEnvironment_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::LoadArchive_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::LoadArchive_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::LoadArchive_O" :#3# "LoadArchive_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::GlobalVariable_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::GlobalVariable_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::GlobalVariable_O" :#3# "GlobalVariable_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::User_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::User_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::User_O" :#3# "User_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::SingleDispatchMethod_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::SingleDispatchMethod_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::SingleDispatchMethod_O" :#3# "SingleDispatchMethod_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::ConstantDataArray_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::ConstantDataArray_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::ConstantDataArray_O" :#3# "ConstantDataArray_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::FileStatus_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::FileStatus_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::FileStatus_O" :#3# "FileStatus_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::SaveArchive_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::SaveArchive_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::SaveArchive_O" :#3# "SaveArchive_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::SNode_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::SNode_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::SNode_O" :#3# "SNode_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::FunctionPass_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::FunctionPass_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::FunctionPass_O" :#3# "FunctionPass_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::ValueEnvironment_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::ValueEnvironment_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::ValueEnvironment_O" :#3# "ValueEnvironment_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::SymbolMacroletEnvironment_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::SymbolMacroletEnvironment_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::SymbolMacroletEnvironment_O" :#3# "SymbolMacroletEnvironment_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::TagbodyEnvironment_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::TagbodyEnvironment_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::TagbodyEnvironment_O" :#3# "TagbodyEnvironment_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::BaseChar_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::BaseChar_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::BaseChar_O" :#3# "BaseChar_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::CatchEnvironment_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::CatchEnvironment_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::CatchEnvironment_O" :#3# "CatchEnvironment_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::DICompositeType_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::DICompositeType_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::DICompositeType_O" :#3# "DICompositeType_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::LeafSNode_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::LeafSNode_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::LeafSNode_O" :#3# "LeafSNode_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::Archive_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::Archive_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::Archive_O" :#3# "Archive_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::UndefValue_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::UndefValue_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::UndefValue_O" :#3# "UndefValue_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::ConstantArray_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::ConstantArray_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::ConstantArray_O" :#3# "ConstantArray_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::LLVMContext_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::LLVMContext_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::LLVMContext_O" :#3# "LLVMContext_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::PointerType_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::PointerType_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::PointerType_O" :#3# "PointerType_O"))))) #S(#9# :#1# "core::LispObjectCreator<clbind::ClassRep_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<clbind::ClassRep_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "clbind::ClassRep_O" :#3# "ClassRep_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::Iterator_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::Iterator_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::Iterator_O" :#3# "Iterator_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::ActivationFrame_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::ActivationFrame_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::ActivationFrame_O" :#3# "ActivationFrame_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::VAArgInst_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::VAArgInst_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::VAArgInst_O" :#3# "VAArgInst_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::Class_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::Class_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::Class_O" :#3# "Class_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::StdClass_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::StdClass_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::StdClass_O" :#3# "StdClass_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::Float_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::Float_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::Float_O" :#3# "Float_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::ConstantFP_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::ConstantFP_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::ConstantFP_O" :#3# "ConstantFP_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::HashTable_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::HashTable_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::HashTable_O" :#3# "HashTable_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::Complex_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::Complex_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::Complex_O" :#3# "Complex_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::LogicalPathname_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::LogicalPathname_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::LogicalPathname_O" :#3# "LogicalPathname_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::StringSet_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::StringSet_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::StringSet_O" :#3# "StringSet_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::ConstantDataSequential_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::ConstantDataSequential_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::ConstantDataSequential_O" :#3# "ConstantDataSequential_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::VectorType_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::VectorType_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::VectorType_O" :#3# "VectorType_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::Rational_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::Rational_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::Rational_O" :#3# "Rational_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::UnaryInstruction_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::UnaryInstruction_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::UnaryInstruction_O" :#3# "UnaryInstruction_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::ImmutablePass_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::ImmutablePass_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::ImmutablePass_O" :#3# "ImmutablePass_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::SexpLoadArchive_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::SexpLoadArchive_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::SexpLoadArchive_O" :#3# "SexpLoadArchive_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::FuncallableStandardClass_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::FuncallableStandardClass_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::FuncallableStandardClass_O" :#3# "FuncallableStandardClass_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::DIArray_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::DIArray_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::DIArray_O" :#3# "DIArray_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::SequentialType_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::SequentialType_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::SequentialType_O" :#3# "SequentialType_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::StoreInst_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::StoreInst_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::StoreInst_O" :#3# "StoreInst_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::T_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::T_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::T_O" :#3# "T_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::IRBuilderBase_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::IRBuilderBase_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::IRBuilderBase_O" :#3# "IRBuilderBase_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::Vector_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::Vector_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::Vector_O" :#3# "Vector_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::BasicBlock_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::BasicBlock_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::BasicBlock_O" :#3# "BasicBlock_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::MultiStringBuffer_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::MultiStringBuffer_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::MultiStringBuffer_O" :#3# "MultiStringBuffer_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::Symbol_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::Symbol_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::Symbol_O" :#3# "Symbol_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::Character_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::Character_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::Character_O" :#3# "Character_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::RecursiveDirectoryIterator_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::RecursiveDirectoryIterator_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::RecursiveDirectoryIterator_O" :#3# "RecursiveDirectoryIterator_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::Pass_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::Pass_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::Pass_O" :#3# "Pass_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::PosixTime_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::PosixTime_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::PosixTime_O" :#3# "PosixTime_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::IndirectBrInst_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::IndirectBrInst_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::IndirectBrInst_O" :#3# "IndirectBrInst_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::IOFileStream_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::IOFileStream_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::IOFileStream_O" :#3# "IOFileStream_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::CompiledFunction_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::CompiledFunction_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::CompiledFunction_O" :#3# "CompiledFunction_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::APFloat_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::APFloat_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::APFloat_O" :#3# "APFloat_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::BitVector_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::BitVector_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::BitVector_O" :#3# "BitVector_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::DIDerivedType_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::DIDerivedType_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::DIDerivedType_O" :#3# "DIDerivedType_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::Module_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::Module_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::Module_O" :#3# "Module_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::LoadInst_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::LoadInst_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::LoadInst_O" :#3# "LoadInst_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::RuntimeVisibleEnvironment_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::RuntimeVisibleEnvironment_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::RuntimeVisibleEnvironment_O" :#3# "RuntimeVisibleEnvironment_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::FunctionValueEnvironment_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::FunctionValueEnvironment_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::FunctionValueEnvironment_O" :#3# "FunctionValueEnvironment_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::ConstantExpr_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::ConstantExpr_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::ConstantExpr_O" :#3# "ConstantExpr_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::Pathname_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::Pathname_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::Pathname_O" :#3# "Pathname_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::BranchInst_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::BranchInst_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::BranchInst_O" :#3# "BranchInst_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::ShortFloat_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::ShortFloat_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::ShortFloat_O" :#3# "ShortFloat_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::Package_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::Package_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::Package_O" :#3# "Package_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::MicroHeap_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::MicroHeap_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::MicroHeap_O" :#3# "MicroHeap_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::TerminatorInst_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::TerminatorInst_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::TerminatorInst_O" :#3# "TerminatorInst_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::HashTableEql_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::HashTableEql_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::HashTableEql_O" :#3# "HashTableEql_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::IOStreamStream_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::IOStreamStream_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::IOStreamStream_O" :#3# "IOStreamStream_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::FunctionFrame_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::FunctionFrame_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::FunctionFrame_O" :#3# "FunctionFrame_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::Reader_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::Reader_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::Reader_O" :#3# "Reader_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::SingleDispatchGenericFunction_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::SingleDispatchGenericFunction_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::SingleDispatchGenericFunction_O" :#3# "SingleDispatchGenericFunction_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::Cons_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::Cons_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::Cons_O" :#3# "Cons_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::UserData_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::UserData_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::UserData_O" :#3# "UserData_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::DirectoryIterator_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::DirectoryIterator_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::DirectoryIterator_O" :#3# "DirectoryIterator_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::Ratio_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::Ratio_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::Ratio_O" :#3# "Ratio_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::Binder_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::Binder_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::Binder_O" :#3# "Binder_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::StructType_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::StructType_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::StructType_O" :#3# "StructType_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::ExecutionEngine_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::ExecutionEngine_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::ExecutionEngine_O" :#3# "ExecutionEngine_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::StringInputStream_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::StringInputStream_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::StringInputStream_O" :#3# "StringInputStream_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::ForwardReferencedClass_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::ForwardReferencedClass_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::ForwardReferencedClass_O" :#3# "ForwardReferencedClass_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::AtomicCmpXchgInst_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::AtomicCmpXchgInst_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::AtomicCmpXchgInst_O" :#3# "AtomicCmpXchgInst_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::ReadTable_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::ReadTable_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::ReadTable_O" :#3# "ReadTable_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::PassManager_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::PassManager_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::PassManager_O" :#3# "PassManager_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::IRBuilder_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::IRBuilder_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::SingleFloat_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::SingleFloat_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::SingleFloat_O" :#3# "SingleFloat_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::FenceInst_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::FenceInst_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::FenceInst_O" :#3# "FenceInst_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::DICompileUnit_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::DICompileUnit_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::DICompileUnit_O" :#3# "DICompileUnit_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::StringStream_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::StringStream_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::StringStream_O" :#3# "StringStream_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::CompositeType_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::CompositeType_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::CompositeType_O" :#3# "CompositeType_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::GlobalValue_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::GlobalValue_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::GlobalValue_O" :#3# "GlobalValue_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::Integer_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::Integer_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::Integer_O" :#3# "Integer_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::Attribute_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::Attribute_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::Attribute_O" :#3# "Attribute_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::Number_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::Number_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::Number_O" :#3# "Number_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::SynonymStream_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::SynonymStream_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::SynonymStream_O" :#3# "SynonymStream_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::Type_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::Type_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::Type_O" :#3# "Type_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::WrappedPointer_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::WrappedPointer_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::WrappedPointer_O" :#3# "WrappedPointer_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::FunctionContainerEnvironment_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::FunctionContainerEnvironment_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::FunctionContainerEnvironment_O" :#3# "FunctionContainerEnvironment_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::StandardChar_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::StandardChar_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::StandardChar_O" :#3# "StandardChar_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::Metaobject_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::Metaobject_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::Metaobject_O" :#3# "Metaobject_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::AnsiStream_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::AnsiStream_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::AnsiStream_O" :#3# "AnsiStream_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::LightUserData_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::LightUserData_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::LightUserData_O" :#3# "LightUserData_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::DILexicalBlock_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::DILexicalBlock_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::DILexicalBlock_O" :#3# "DILexicalBlock_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::DIType_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::DIType_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::DIType_O" :#3# "DIType_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::SymbolSet_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::SymbolSet_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::SymbolSet_O" :#3# "SymbolSet_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::Pointer_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::Pointer_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::Pointer_O" :#3# "Pointer_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::InsertPoint_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::InsertPoint_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::InsertPoint_O" :#3# "InsertPoint_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::DataLayout_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::DataLayout_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::DataLayout_O" :#3# "DataLayout_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::Instance_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::Instance_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::Instance_O" :#3# "Instance_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::MacroletEnvironment_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::MacroletEnvironment_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::MacroletEnvironment_O" :#3# "MacroletEnvironment_O"))))) #S(#9# :#1# "core::LispObjectCreator<asttooling::AstVisitor_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<asttooling::AstVisitor_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "asttooling::AstVisitor_O" :#3# "AstVisitor_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::Null_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::Null_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::Null_O" :#3# "Null_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::DISubprogram_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::DISubprogram_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::DISubprogram_O" :#3# "DISubprogram_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::FunctionType_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::FunctionType_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::FunctionType_O" :#3# "FunctionType_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::BuiltInClass_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::BuiltInClass_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::BuiltInClass_O" :#3# "BuiltInClass_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::StringOutputStream_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::StringOutputStream_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::StringOutputStream_O" :#3# "StringOutputStream_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::FunctionPassManager_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::FunctionPassManager_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::FunctionPassManager_O" :#3# "FunctionPassManager_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::BroadcastStream_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::BroadcastStream_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::BroadcastStream_O" :#3# "BroadcastStream_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::Argument_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::Argument_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::Argument_O" :#3# "Argument_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::ConstantPointerNull_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::ConstantPointerNull_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::ConstantPointerNull_O" :#3# "ConstantPointerNull_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::DIBasicType_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::DIBasicType_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::DIBasicType_O" :#3# "DIBasicType_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::MDString_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::MDString_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::MDString_O" :#3# "MDString_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::DataLayoutPass_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::DataLayoutPass_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::DataLayoutPass_O" :#3# "DataLayoutPass_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::ExternalObject_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::ExternalObject_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::ExternalObject_O" :#3# "ExternalObject_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::SimpleBitVector_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::SimpleBitVector_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::SimpleBitVector_O" :#3# "SimpleBitVector_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::WeakHashTable_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::WeakHashTable_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::WeakHashTable_O" :#3# "WeakHashTable_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::StandardClass_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::StandardClass_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::StandardClass_O" :#3# "StandardClass_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::SexpSaveArchive_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::SexpSaveArchive_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::SexpSaveArchive_O" :#3# "SexpSaveArchive_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::ArrayObjects_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::ArrayObjects_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::ArrayObjects_O" :#3# "ArrayObjects_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::ForeignData_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::ForeignData_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::ForeignData_O" :#3# "ForeignData_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::Fixnum_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::Fixnum_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::Fixnum_O" :#3# "Fixnum_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::BranchSNode_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::BranchSNode_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::BranchSNode_O" :#3# "BranchSNode_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::PosixTimeDuration_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::PosixTimeDuration_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::PosixTimeDuration_O" :#3# "PosixTimeDuration_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::Str_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::Str_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::Str_O" :#3# "Str_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::SingleDispatchEffectiveMethodFunction_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::SingleDispatchEffectiveMethodFunction_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::SingleDispatchEffectiveMethodFunction_O" :#3# "SingleDispatchEffectiveMethodFunction_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::Stream_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::Stream_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::Stream_O" :#3# "Stream_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::PHINode_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::PHINode_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::PHINode_O" :#3# "PHINode_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::SourceFileInfo_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::SourceFileInfo_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::SourceFileInfo_O" :#3# "SourceFileInfo_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::Path_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::Path_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::Path_O" :#3# "Path_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::NamedMDNode_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::NamedMDNode_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::NamedMDNode_O" :#3# "NamedMDNode_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::DIFile_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::DIFile_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::DIFile_O" :#3# "DIFile_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::Regex_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::Regex_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::Regex_O" :#3# "Regex_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::TagbodyFrame_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::TagbodyFrame_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::TagbodyFrame_O" :#3# "TagbodyFrame_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::DISubroutineType_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::DISubroutineType_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::DISubroutineType_O" :#3# "DISubroutineType_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::ConcatenatedStream_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::ConcatenatedStream_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::ConcatenatedStream_O" :#3# "ConcatenatedStream_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::InvokeInst_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::InvokeInst_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::InvokeInst_O" :#3# "InvokeInst_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::StringList_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::StringList_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::StringList_O" :#3# "StringList_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::IntArray_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::IntArray_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::IntArray_O" :#3# "IntArray_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::LambdaListHandler_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::LambdaListHandler_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::LambdaListHandler_O" :#3# "LambdaListHandler_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::CompileTimeEnvironment_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::CompileTimeEnvironment_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::CompileTimeEnvironment_O" :#3# "CompileTimeEnvironment_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::DebugInfo_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::DebugInfo_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::DebugInfo_O" :#3# "DebugInfo_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::SourcePosInfo_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::SourcePosInfo_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::SourcePosInfo_O" :#3# "SourcePosInfo_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::Specializer_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::Specializer_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::Specializer_O" :#3# "Specializer_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::SpecialForm_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::SpecialForm_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::SpecialForm_O" :#3# "SpecialForm_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::SwitchInst_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::SwitchInst_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::SwitchInst_O" :#3# "SwitchInst_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::DITypeArray_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::DITypeArray_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::DITypeArray_O" :#3# "DITypeArray_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::SmallMap_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::SmallMap_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::SmallMap_O" :#3# "SmallMap_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::Function_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::Function_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::Function_O" :#3# "Function_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::ConstantInt_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::ConstantInt_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::ConstantInt_O" :#3# "ConstantInt_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::CallInst_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::CallInst_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::CallInst_O" :#3# "CallInst_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::UnwindProtectEnvironment_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::UnwindProtectEnvironment_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::UnwindProtectEnvironment_O" :#3# "UnwindProtectEnvironment_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::CandoException_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::CandoException_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::CandoException_O" :#3# "CandoException_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::ResumeInst_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::ResumeInst_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::ResumeInst_O" :#3# "ResumeInst_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::Real_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::Real_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::Real_O" :#3# "Real_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::VectorObjectsWithFillPtr_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::VectorObjectsWithFillPtr_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::VectorObjectsWithFillPtr_O" :#3# "VectorObjectsWithFillPtr_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::DIScope_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::DIScope_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::DIScope_O" :#3# "DIScope_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::AllocaInst_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::AllocaInst_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::AllocaInst_O" :#3# "AllocaInst_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::ArrayType_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::ArrayType_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::ArrayType_O" :#3# "ArrayType_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::ModulePass_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::ModulePass_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::ModulePass_O" :#3# "ModulePass_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::LandingPadInst_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::LandingPadInst_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::LandingPadInst_O" :#3# "LandingPadInst_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::StructureObject_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::StructureObject_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::StructureObject_O" :#3# "StructureObject_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::HashTableEqualp_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::HashTableEqualp_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::HashTableEqualp_O" :#3# "HashTableEqualp_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::Value_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::Value_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::Value_O" :#3# "Value_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::HashTableEqual_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::HashTableEqual_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::HashTableEqual_O" :#3# "HashTableEqual_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::DebugLoc_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::DebugLoc_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::DebugLoc_O" :#3# "DebugLoc_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::String_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::String_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::String_O" :#3# "String_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::ConstantStruct_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::ConstantStruct_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::ConstantStruct_O" :#3# "ConstantStruct_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::VectorObjects_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::VectorObjects_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::VectorObjects_O" :#3# "VectorObjects_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::WeakPointer_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::WeakPointer_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::WeakPointer_O" :#3# "WeakPointer_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::SymbolToEnumConverter_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::SymbolToEnumConverter_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::SymbolToEnumConverter_O" :#3# "SymbolToEnumConverter_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::Bignum_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::Bignum_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::Bignum_O" :#3# "Bignum_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::PassManagerBase_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::PassManagerBase_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::PassManagerBase_O" :#3# "PassManagerBase_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::Environment_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::Environment_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::Environment_O" :#3# "Environment_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::UnreachableInst_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::UnreachableInst_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::UnreachableInst_O" :#3# "UnreachableInst_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::DIBuilder_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::DIBuilder_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::DIBuilder_O" :#3# "DIBuilder_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::StructureClass_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::StructureClass_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::StructureClass_O" :#3# "StructureClass_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::RegexMatch_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::RegexMatch_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::RegexMatch_O" :#3# "RegexMatch_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::LoadTimeValues_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::LoadTimeValues_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::LoadTimeValues_O" :#3# "LoadTimeValues_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::HashTableEq_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::HashTableEq_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::HashTableEq_O" :#3# "HashTableEq_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::StandardObject_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::StandardObject_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::StandardObject_O" :#3# "StandardObject_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::Array_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::Array_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::Array_O" :#3# "Array_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::ObjRef_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::ObjRef_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::ObjRef_O" :#3# "ObjRef_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::GlueEnvironment_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::GlueEnvironment_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::GlueEnvironment_O" :#3# "GlueEnvironment_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::ReturnInst_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::ReturnInst_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::ReturnInst_O" :#3# "ReturnInst_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::SourceManager_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::SourceManager_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::SourceManager_O" :#3# "SourceManager_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::EchoStream_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::EchoStream_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::EchoStream_O" :#3# "EchoStream_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::AtomicRMWInst_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::AtomicRMWInst_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::AtomicRMWInst_O" :#3# "AtomicRMWInst_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::TargetMachine_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::TargetMachine_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::TargetMachine_O" :#3# "TargetMachine_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::EngineBuilder_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::EngineBuilder_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::EngineBuilder_O" :#3# "EngineBuilder_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::DoubleFloat_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::DoubleFloat_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::DoubleFloat_O" :#3# "DoubleFloat_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::PassManagerBuilder_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::PassManagerBuilder_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::PassManagerBuilder_O" :#3# "PassManagerBuilder_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::WeakKeyHashTable_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::WeakKeyHashTable_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::WeakKeyHashTable_O" :#3# "WeakKeyHashTable_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::BlockEnvironment_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::BlockEnvironment_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::BlockEnvironment_O" :#3# "BlockEnvironment_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::FileStream_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::FileStream_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::FileStream_O" :#3# "FileStream_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::APInt_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::APInt_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::APInt_O" :#3# "APInt_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::DirectoryEntry_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::DirectoryEntry_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::DirectoryEntry_O" :#3# "DirectoryEntry_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::Instruction_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::Instruction_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::Instruction_O" :#3# "Instruction_O"))))) #S(#9# :#1# "core::LispObjectCreator<cffi::Pointer_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<cffi::Pointer_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "cffi::Pointer_O" :#3# "Pointer_O"))))) #S(#9# :#1# "core::LispObjectCreator<llvmo::Linker_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<llvmo::Linker_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "llvmo::Linker_O" :#3# "Linker_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::SymbolList_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::SymbolList_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::SymbolList_O" :#3# "SymbolList_O"))))) #S(#9# :#1# "core::LispObjectCreator<core::TwoWayStream_O>" :#3# "LispObjectCreator" :#5# "/home/meister/Development/clasp/src/core/object.h:824:5" :#10# #S(#11# :#1# "core::LispObjectCreator<core::TwoWayStream_O>" :#3# NIL :#12# (#S(#13# :#8# 0 :#10# #S(#14# :#1# "core::TwoWayStream_O" :#3# "TwoWayStream_O")))))))
template <> class gctools::GCKind<core::Creator> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_TEMPLATED_CLASSALLOC_core__Creator ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::BasicBlock_O" :#3=NAME "KIND_LISPALLOC_llvmo__BasicBlock_O" :VALUE 163 :#4=CCLASS #S(#4# :#1# "llvmo::BasicBlock_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3382:5" :BASES ("llvmo::Value_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "back" "empty" #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "BasicBlock_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3382:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::BasicBlock_O" :#3# "BasicBlock_O")))
template <> class gctools::GCKind<llvmo::BasicBlock_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__BasicBlock_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::UnreachableInst_O" :#3=NAME "KIND_LISPALLOC_llvmo__UnreachableInst_O" :VALUE 177 :#4=CCLASS #S(#4# :#1# "llvmo::UnreachableInst_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2763:1" :BASES ("llvmo::TerminatorInst_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "UnreachableInst_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2763:1" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::UnreachableInst_O" :#3# "UnreachableInst_O")))
template <> class gctools::GCKind<llvmo::UnreachableInst_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__UnreachableInst_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::CompileTimeEnvironment_O" :#3=NAME "KIND_LISPALLOC_core__CompileTimeEnvironment_O" :VALUE 32 :#4=CCLASS #S(#4# :#1# "core::CompileTimeEnvironment_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/environment.h:522:5" :BASES ("core::LexicalEnvironment_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "_findValue" "currentVisibleEnvironment" "getActivationFrame" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("core::CatchEnvironment_O" "core::BlockEnvironment_O" "core::UnwindProtectEnvironment_O" "core::FunctionContainerEnvironment_O" "core::SymbolMacroletEnvironment_O" "core::MacroletEnvironment_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "CompileTimeEnvironment_O" :#5# "/home/meister/Development/clasp/src/core/environment.h:522:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::CompileTimeEnvironment_O" :#3# "CompileTimeEnvironment_O")))
template <> class gctools::GCKind<core::CompileTimeEnvironment_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__CompileTimeEnvironment_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="gctools::GCVector_moveable<core::OptionalArgument>" :#3=NAME "KIND_GCVECTOR_gctools__GCVector_moveable_core__OptionalArgument_" :VALUE 265 :#4=CCLASS #S(#4# :#1# "gctools::GCVector_moveable<core::OptionalArgument>" :TEMPLATE-SPECIALIZER T :#5=LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Data" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:48:9" :#8=CTYPE #S(CONSTANT-ARRAY-CTYPE :#1# NIL :ELEMENT-TYPE #S(#9=CXXRECORD-CTYPE :#1# "core::OptionalArgument" :#3# "OptionalArgument"))) #S(#6# :#7# "_End" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:47:9" :#8# #S(#10=UNCLASSIFIED-CTYPE :#1# "unsigned long")) #S(#6# :#7# "_Capacity" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:46:9" :#8# #S(#10# :#1# "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" #11="NO-NAME" #11# "capacity" "size" "data" #11# #11# #11#) :METADATA NIL) :#12=SPECIES #S(#12# :#3# :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :DUMP DUMPER-FOR-GCCONTAINER :#13=INDEX 3) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CONTAINERALLOC :#1# #2# :#3# "GCVector_moveable" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#8# #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::OptionalArgument>" :#3# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#13# 0 :#8# #S(#9# :#1# "core::OptionalArgument" :#3# "OptionalArgument"))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<core::OptionalArgument>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_core__OptionalArgument_ ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::Attribute_O" :#3=NAME "KIND_LISPALLOC_llvmo__Attribute_O" :VALUE 114 :#4=CCLASS #S(#4# :#1# "llvmo::Attribute_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:633:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Attribute" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:647:2" :#6=CTYPE #S(#7=CXXRECORD-CTYPE :#1# "llvm::Attribute" :#3# "Attribute"))) :METHOD-NAMES (#8="NO-NAME" #8# "setAttribute" "attributes" "get" #8# #8# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#9=SPECIES #S(#9# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Attribute_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:633:5" :#6# #S(#7# :#1# "llvmo::Attribute_O" :#3# "Attribute_O")))
template <> class gctools::GCKind<llvmo::Attribute_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__Attribute_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::VectorStepper" :#3=NAME "KIND_CLASSALLOC_core__VectorStepper" :VALUE 9 :#4=CCLASS #S(#4# :#1# "core::VectorStepper" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/primitives.h:93:5" :BASES ("core::SequenceStepper") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Index" :#5# "/home/meister/Development/clasp/src/core/primitives.h:98:2" :#8=CTYPE #S(UNCLASSIFIED-CTYPE :#1# "int")) #S(#6# :#7# "_Domain" :#5# "/home/meister/Development/clasp/src/core/primitives.h:97:2" :#8# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Vector_O>" :SPECIALIZER "class core::Vector_O"))) :METHOD-NAMES (#9="NO-NAME" #9# #9# #9# #9# "element" "advance" #9#) :METADATA NIL) :#10=SPECIES #S(#10# :#3# :CLASSALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 6) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(CLASSALLOC :#1# #2# :#3# "VectorStepper" :#5# "/home/meister/Development/clasp/src/core/primitives.h:93:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::VectorStepper" :#3# "VectorStepper")))
template <> class gctools::GCKind<core::VectorStepper> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_CLASSALLOC_core__VectorStepper ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::BranchSNode_O" :#3=NAME "KIND_LISPALLOC_core__BranchSNode_O" :VALUE 204 :#4=CCLASS #S(#4# :#1# "core::BranchSNode_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/serialize.h:515:5" :BASES ("core::SNode_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_VectorSNodes" :#5# "/home/meister/Development/clasp/src/core/serialize.h:527:2" :#8=CTYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Vector_O>" :#10=SPECIALIZER "class core::Vector_O")) #S(#6# :#7# "_SNodePList" :#5# "/home/meister/Development/clasp/src/core/serialize.h:525:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::Cons_O>" :#10# "class core::Cons_O")) #S(#6# :#7# "_Kind" :#5# "/home/meister/Development/clasp/src/core/serialize.h:523:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::Symbol_O>" :#10# "class core::Symbol_O"))) :METHOD-NAMES (#11="NO-NAME" #11# "__repr__" "createObject" "addAttributeSNode" "pushVector" "pushVectorSNode" "saveVector" "setAttributesUnsafe" "setKind" "mapVector" "loadVector" "childWithUniqueId" "getUniqueId" "keys" "object" "getVectorSNodes" "setVectorSNodesUnsafe" "addAttribute" "getAttribute" "getAttributeSNode" "getAttributeSNodeOrError" "getAttributes" "getKind" "create" "create" #11# #11# "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#12=SPECIES #S(#12# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "BranchSNode_O" :#5# "/home/meister/Development/clasp/src/core/serialize.h:515:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::BranchSNode_O" :#3# "BranchSNode_O")))
template <> class gctools::GCKind<core::BranchSNode_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__BranchSNode_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::ReadTable_O" :#3=NAME "KIND_LISPALLOC_core__ReadTable_O" :VALUE 113 :#4=CCLASS #S(#4# :#1# "core::ReadTable_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/readtable.h:47:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Syntax" :#5# "/home/meister/Development/clasp/src/core/readtable.h:61:2" :#8=CTYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::HashTable_O>" :#10=SPECIALIZER "class core::HashTable_O")) #S(#6# :#7# "_Case" :#5# "/home/meister/Development/clasp/src/core/readtable.h:59:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::Symbol_O>" :#10# "class core::Symbol_O"))) :METHOD-NAMES (#11="NO-NAME" #11# "lookup_reader_macro" "convert_case" "set_dispatch_macro_character" "get_dispatch_macro_character" "make_dispatch_macro_character" "get_macro_character" "set_macro_character" "syntax_type" "getReadTableCase" "getReadTableCaseAsEnum" "setf_readtable_case" "__repr__" "create_standard_syntax_table" "create_standard_readtable" "initialize" #11# #11# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#12=SPECIES #S(#12# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "ReadTable_O" :#5# "/home/meister/Development/clasp/src/core/readtable.h:47:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::ReadTable_O" :#3# "ReadTable_O")))
template <> class gctools::GCKind<core::ReadTable_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__ReadTable_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::CompiledFunction_O" :#3=NAME "KIND_LISPALLOC_core__CompiledFunction_O" :VALUE 90 :#4=CCLASS #S(#4# :#1# "core::CompiledFunction_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/executables.h:213:5" :BASES ("core::Function_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "make" #6# #6# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "CompiledFunction_O" :#5# "/home/meister/Development/clasp/src/core/executables.h:213:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::CompiledFunction_O" :#3# "CompiledFunction_O")))
template <> class gctools::GCKind<core::CompiledFunction_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__CompiledFunction_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::DataLayoutPass_O" :#3=NAME "KIND_LISPALLOC_llvmo__DataLayoutPass_O" :VALUE 135 :#4=CCLASS #S(#4# :#1# "llvmo::DataLayoutPass_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1340:5" :BASES ("llvmo::ImmutablePass_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "set_wrapped" "wrappedPtr" "make" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "DataLayoutPass_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1340:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::DataLayoutPass_O" :#3# "DataLayoutPass_O")))
template <> class gctools::GCKind<llvmo::DataLayoutPass_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__DataLayoutPass_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::SynonymStream_O" :#3=NAME "KIND_LISPALLOC_core__SynonymStream_O" :VALUE 24 :#4=CCLASS #S(#4# :#1# "core::SynonymStream_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/lispStream.h:575:5" :BASES ("core::AnsiStream_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_SynonymSymbol" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:588:2" :#6=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O"))) :METHOD-NAMES (#7="NO-NAME" #7# "filename" "make" #7# #7# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "SynonymStream_O" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:575:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::SynonymStream_O" :#3# "SynonymStream_O")))
template <> class gctools::GCKind<core::SynonymStream_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__SynonymStream_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::PosixTime_O" :#3=NAME "KIND_LISPALLOC_core__PosixTime_O" :VALUE 112 :#4=CCLASS #S(#4# :#1# "core::PosixTime_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/posixTime.h:55:1" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Time" :#5# "/home/meister/Development/clasp/src/core/posixTime.h:68:2" :#6=CTYPE #S(#7=CXXRECORD-CTYPE :#1# "boost::posix_time::ptime" :#3# "ptime"))) :METHOD-NAMES (#8="NO-NAME" #8# #8# #8# "toIsoString" "toSimpleString" "sub" "setToLocalTime" "createNow" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#9=SPECIES #S(#9# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "PosixTime_O" :#5# "/home/meister/Development/clasp/src/core/posixTime.h:55:1" :#6# #S(#7# :#1# "core::PosixTime_O" :#3# "PosixTime_O")))
template <> class gctools::GCKind<core::PosixTime_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__PosixTime_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::VectorObjectsWithFillPtr_O" :#3=NAME "KIND_LISPALLOC_core__VectorObjectsWithFillPtr_O" :VALUE 122 :#4=CCLASS #S(#4# :#1# "core::VectorObjectsWithFillPtr_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/vectorObjectsWithFillPtr.h:40:5" :BASES ("core::VectorObjects_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_FillPtr" :#5# "/home/meister/Development/clasp/src/core/vectorObjectsWithFillPtr.h:49:2" :#6=CTYPE #S(UNCLASSIFIED-CTYPE :#1# "int"))) :METHOD-NAMES (#7="NO-NAME" #7# "vectorPushExtend" "vectorPush" "setf_fillPointer" "fillPointer" "__repr__" "setf_elt" "elt" #7# "arrayHasFillPointerP" "length" "make" #7# #7# "archiveBase" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "VectorObjectsWithFillPtr_O" :#5# "/home/meister/Development/clasp/src/core/vectorObjectsWithFillPtr.h:40:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::VectorObjectsWithFillPtr_O" :#3# "VectorObjectsWithFillPtr_O")))
template <> class gctools::GCKind<core::VectorObjectsWithFillPtr_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__VectorObjectsWithFillPtr_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::Number_O" :#3=NAME "KIND_LISPALLOC_core__Number_O" :VALUE 100 :#4=CCLASS #S(#4# :#1# "core::Number_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/numbers.h:85:5" :BASES ("core::T_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "sxhash" "tanh" "cosh" "sinh" "tan" "cos" "sin" "conjugate" "as_long_float" "as_double" "as_float" "as_LongLongInt" "as_mpz" "as_uint" "as_int" #6# #6# #6# #6# "exp" "negate" "zerop" "oneMinus" "onePlus" "sqrt" "log1p" "log1" "equal" "ffloor" "floor" "abs" "reciprocal" "signum" "shallowCopy" "deepCopy" "copy" "valueAsString" "number_type_int" "number_type" "create" "create" "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("core::Real_O" "core::Complex_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Number_O" :#5# "/home/meister/Development/clasp/src/core/numbers.h:85:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::Number_O" :#3# "Number_O")))
template <> class gctools::GCKind<core::Number_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Number_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::UnaryInstruction_O" :#3=NAME "KIND_LISPALLOC_llvmo__UnaryInstruction_O" :VALUE 171 :#4=CCLASS #S(#4# :#1# "llvmo::UnaryInstruction_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2328:1" :BASES ("llvmo::Instruction_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("llvmo::LoadInst_O" "llvmo::VAArgInst_O" "llvmo::AllocaInst_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "UnaryInstruction_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2328:1" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::UnaryInstruction_O" :#3# "UnaryInstruction_O")))
template <> class gctools::GCKind<llvmo::UnaryInstruction_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__UnaryInstruction_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::IntArray_O" :#3=NAME "KIND_LISPALLOC_core__IntArray_O" :VALUE 99 :#4=CCLASS #S(#4# :#1# "core::IntArray_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/intArray.h:48:1" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Ints" :#5# "/home/meister/Development/clasp/src/core/intArray.h:60:2" :#6=CTYPE #S(#7=CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "std::vector<int,std::allocator<int>>" :#3# NIL :#8=ARGUMENTS (#S(#9=GC-TEMPLATE-ARGUMENT :#10=INDEX 0 :#6# #S(#11=UNCLASSIFIED-CTYPE :#1# "int")) #S(#9# :#10# 1 :#6# #S(#7# :#1# "std::allocator<int>" :#3# NIL :#8# (#S(#9# :#10# 0 :#6# #S(#11# :#1# "int"))))))))) :METHOD-NAMES (#12="NO-NAME" #12# #12# #12# "put" "get" "size" "append" "clear" "resize" "end" "begin" "create" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#13=SPECIES #S(#13# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#10# 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "IntArray_O" :#5# "/home/meister/Development/clasp/src/core/intArray.h:48:1" :#6# #S(CXXRECORD-CTYPE :#1# "core::IntArray_O" :#3# "IntArray_O")))
template <> class gctools::GCKind<core::IntArray_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__IntArray_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::Float_O" :#3=NAME "KIND_LISPALLOC_core__Float_O" :VALUE 102 :#4=CCLASS #S(#4# :#1# "core::Float_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/numbers.h:365:5" :BASES ("core::Real_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "castToInteger" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("core::ShortFloat_O" "core::DoubleFloat_O" "core::SingleFloat_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Float_O" :#5# "/home/meister/Development/clasp/src/core/numbers.h:365:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::Float_O" :#3# "Float_O")))
template <> class gctools::GCKind<core::Float_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Float_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::Class_O" :#3=NAME "KIND_BOOTSTRAP_core__Class_O" :VALUE 215 :#4=CCLASS #S(#4# :#1# "core::Class_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/metaClass.h:72:3" :BASES ("core::Specializer_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_MetaClassSlots" :#5# "/home/meister/Development/clasp/src/core/metaClass.h:139:9" :#8=CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "gctools::Vec0<gctools::smart_ptr<core::T_O>>" :#3# NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#9=INDEX 0 :#8# #S(#10=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :#11=SPECIALIZER "class core::T_O"))))) #S(#6# :#7# "_creator" :#5# "/home/meister/Development/clasp/src/core/metaClass.h:138:2" :#8# #S(POINTER-CTYPE :#1# NIL :POINTEE #S(#12=CXXRECORD-CTYPE :#1# "core::Creator" :#3# "Creator"))) #S(#6# :#7# "_Signature_ClassSlots" :#5# "/home/meister/Development/clasp/src/core/metaClass.h:136:2" :#8# #S(#10# :#1# "gctools::smart_ptr<core::T_O>" :#11# "class core::T_O"))) :METHOD-NAMES (#13="NO-NAME" #13# #13# #13# "primaryCxxDerivableClassP" "cxxDerivableClassP" "cxxClassP" "describe" "appendDirectSuperclassAndResetClassPrecedenceList" "directSuperclasses" "make_instance" "allocate_newNil" "__repr__" "addInstanceBaseClass" "addInstanceBaseClassDoNotCalculateClassPrecedenceList" "setInstanceBaseClasses" "isSubClassOf" "getPackageName" "dumpInfo" "getPackagedName" "instanceClassName" "instanceClassName" "classNameAsString" "className" "name" "setName" "hasCreator" "getCreator" "setCreator" "inheritDefaultAllocator" "slots" "instanceSig" "instanceSigSet" "instanceSet" "instanceRef" "instanceClassSet" "_instanceClass" "initializeSlots" "lowLevel_calculateClassPrecedenceList" "__setupStage3NameAndCalculateClassPrecedenceList" "__setup_stage2_with_classSymbol" "__setup_stage1_with_sharedPtr_lisp_sid" "allocateRawClass" "accumulateSuperClasses" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA (:METADATA_GC_DO_NOT_MOVE :METADATA_BOOTSTRAP_CLASS)) :#14=SPECIES #S(#14# :#3# :BOOTSTRAP :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#9# 0) :CHILDREN ("core::ForwardReferencedClass_O" "core::StdClass_O" "core::BuiltInClass_O" "core::StructureClass_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Class_O" :#5# "/home/meister/Development/clasp/src/core/metaClass.h:72:3" :#8# #S(#12# :#1# "core::Class_O" :#3# "Class_O")))
template <> class gctools::GCKind<core::Class_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_BOOTSTRAP_core__Class_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::MDNode_O" :#3=NAME "KIND_LISPALLOC_llvmo__MDNode_O" :VALUE 162 :#4=CCLASS #S(#4# :#1# "llvmo::MDNode_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3109:5" :BASES ("llvmo::Value_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "get" #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "MDNode_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3109:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::MDNode_O" :#3# "MDNode_O")))
template <> class gctools::GCKind<llvmo::MDNode_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__MDNode_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::StringOutputStream_O" :#3=NAME "KIND_LISPALLOC_core__StringOutputStream_O" :VALUE 22 :#4=CCLASS #S(#4# :#1# "core::StringOutputStream_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/lispStream.h:517:5" :BASES ("core::StringStream_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Contents" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:530:9" :#6=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::StrWithFillPtr_O>" :SPECIALIZER "class core::StrWithFillPtr_O"))) :METHOD-NAMES (#7="NO-NAME" #7# #7# #7# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "StringOutputStream_O" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:517:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::StringOutputStream_O" :#3# "StringOutputStream_O")))
template <> class gctools::GCKind<core::StringOutputStream_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__StringOutputStream_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::IndirectBrInst_O" :#3=NAME "KIND_LISPALLOC_llvmo__IndirectBrInst_O" :VALUE 176 :#4=CCLASS #S(#4# :#1# "llvmo::IndirectBrInst_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2619:1" :BASES ("llvmo::TerminatorInst_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "IndirectBrInst_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2619:1" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::IndirectBrInst_O" :#3# "IndirectBrInst_O")))
template <> class gctools::GCKind<llvmo::IndirectBrInst_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__IndirectBrInst_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::StringList_O" :#3=NAME "KIND_LISPALLOC_core__StringList_O" :VALUE 98 :#4=CCLASS #S(#4# :#1# "core::StringList_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/stringList.h:54:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Contents" :#5# "/home/meister/Development/clasp/src/core/stringList.h:63:2" :#6=CTYPE #S(#7=CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>" :#3# NIL :#8=ARGUMENTS (#S(#9=GC-TEMPLATE-ARGUMENT :#10=INDEX 0 :#6# #S(#7# :#1# "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" :#3# NIL :#8# (#S(#9# :#10# 0 :#6# #S(#11=UNCLASSIFIED-CTYPE :#1# "char")) #S(#9# :#10# 1 :#6# #S(#7# :#1# "std::char_traits<char>" :#3# NIL :#8# (#S(#9# :#10# 0 :#6# #S(#11# :#1# "char"))))) #S(#9# :#10# 2 :#6# #S(#7# :#1# "std::allocator<char>" :#3# NIL :#8# (#S(#9# :#10# 0 :#6# #S(#11# :#1# "char")))))))) #S(#9# :#10# 1 :#6# #S(#7# :#1# "std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>" :#3# NIL :#8# (#S(#9# :#10# 0 :#6# #S(#7# :#1# "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" :#3# NIL :#8# (#S(#9# :#10# 0 :#6# #S(#11# :#1# "char")) #S(#9# :#10# 1 :#6# #S(#7# :#1# "std::char_traits<char>" :#3# NIL :#8# (#S(#9# :#10# 0 :#6# #S(#11# :#1# "char"))))) #S(#9# :#10# 2 :#6# #S(#7# :#1# "std::allocator<char>" :#3# NIL :#8# (#S(#9# :#10# 0 :#6# #S(#11# :#1# "char"))))))))))))))) :METHOD-NAMES (#12="NO-NAME" #12# #12# #12# "asStringSet" "asString" "setFromString" "setFromVectorStrings" "clear" "get" "indexOf" "contains" "appendConsOfStrings" "appendStringList" "append" "prepend" "size" "first" "end" "begin" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#13=SPECIES #S(#13# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#10# 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "StringList_O" :#5# "/home/meister/Development/clasp/src/core/stringList.h:54:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::StringList_O" :#3# "StringList_O")))
template <> class gctools::GCKind<core::StringList_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__StringList_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::MDString_O" :#3=NAME "KIND_LISPALLOC_llvmo__MDString_O" :VALUE 161 :#4=CCLASS #S(#4# :#1# "llvmo::MDString_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3164:5" :BASES ("llvmo::Value_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "get" #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "MDString_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3164:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::MDString_O" :#3# "MDString_O")))
template <> class gctools::GCKind<llvmo::MDString_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__MDString_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::CandoException_O" :#3=NAME "KIND_LISPALLOC_core__CandoException_O" :VALUE 97 :#4=CCLASS #S(#4# :#1# "core::CandoException_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/conditions.h:48:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_message" :#5# "/home/meister/Development/clasp/src/core/conditions.h:64:9" :#6=CTYPE #S(#7=CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "gctools::GCString<char,gctools::GCStringAllocator<gctools::GCString_moveable<char>>>" :#3# NIL :#8=ARGUMENTS (#S(#9=GC-TEMPLATE-ARGUMENT :#10=INDEX 0 :#6# #S(#11=UNCLASSIFIED-CTYPE :#1# "char")) #S(#9# :#10# 1 :#6# #S(#7# :#1# "gctools::GCStringAllocator<gctools::GCString_moveable<char>>" :#3# NIL :#8# (#S(#9# :#10# 0 :#6# #S(GCSTRING-MOVEABLE-CTYPE :#1# "gctools::GCString_moveable<char>" :#3# "GCString_moveable" :#8# (#S(#9# :#10# 0 :#6# #S(#11# :#1# "char")))))))))))) :METHOD-NAMES (#12="NO-NAME" #12# "message" "setMessage" "create" "create" #12# #12# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#13=SPECIES #S(#13# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#10# 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "CandoException_O" :#5# "/home/meister/Development/clasp/src/core/conditions.h:48:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::CandoException_O" :#3# "CandoException_O")))
template <> class gctools::GCKind<core::CandoException_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__CandoException_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::Vector_O" :#3=NAME "KIND_LISPALLOC_core__Vector_O" :VALUE 117 :#4=CCLASS #S(#4# :#1# "core::Vector_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/lispVector.h:42:5" :BASES ("core::Array_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "setf_subseq" "subseq" "setf_elt" "elt" "nreverse" "reverse" "length" "addressOfBuffer" "setFillPointer" "vectorPushExtend" "vectorPush" "arrayTotalSize" "arrayDimensions" "arrayDimension" "rank" "elementType" "elementSizeInBytes" "swapElements" #6# "dimension" "vector_length" "adjustableArrayP" "initialize" #6# #6# "archiveBase" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("core::String_O" "core::VectorObjects_O" "core::BitVector_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Vector_O" :#5# "/home/meister/Development/clasp/src/core/lispVector.h:42:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::Vector_O" :#3# "Vector_O")))
template <> class gctools::GCKind<core::Vector_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Vector_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>" :#3=NAME "KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__0_" :VALUE 266 :#4=CCLASS #S(#4# :#1# "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>" :TEMPLATE-SPECIALIZER T :#5=LOCATION "/home/meister/Development/clasp/src/gctools/gcarray.h:33:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Data" :#5# "/home/meister/Development/clasp/src/gctools/gcarray.h:55:9" :#8=CTYPE #S(CONSTANT-ARRAY-CTYPE :#1# NIL :ELEMENT-TYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :#10=SPECIALIZER "class core::T_O"))) #S(#6# :#7# "_Alive" :#5# "/home/meister/Development/clasp/src/gctools/gcarray.h:54:9" :#8# #S(#11=UNCLASSIFIED-CTYPE :#1# "_Bool")) #S(#6# :#7# "_Capacity" :#5# "/home/meister/Development/clasp/src/gctools/gcarray.h:53:9" :#8# #S(#11# :#1# "unsigned long"))) :METHOD-NAMES (#12="NO-NAME" #12# #12# #12# "end" "begin" "end" "begin" #12# #12# "data" "capacity" "size" #12# #12#) :METADATA NIL) :#13=SPECIES #S(#13# :#3# :GCARRAY :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :DUMP DUMPER-FOR-GCCONTAINER :#14=INDEX 4) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CONTAINERALLOC :#1# #2# :#3# "GCArray_moveable" :#5# "/home/meister/Development/clasp/src/gctools/gcarray.h:33:5" :#8# #S(GCARRAY-MOVEABLE-CTYPE :#1# "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>" :#3# "GCArray_moveable" :ARGUMENTS (#S(#15=GC-TEMPLATE-ARGUMENT :#14# 0 :#8# #S(#9# :#1# "gctools::smart_ptr<core::T_O>" :#10# "class core::T_O")) #S(#15# :#14# 1 :#8# NIL)))))
template <> class gctools::GCKind<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__0_ ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::SequentialType_O" :#3=NAME "KIND_LISPALLOC_llvmo__SequentialType_O" :VALUE 151 :#4=CCLASS #S(#4# :#1# "llvmo::SequentialType_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3815:5" :BASES ("llvmo::CompositeType_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "get" #6# #6# "set_wrapped" "wrapped" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("llvmo::PointerType_O" "llvmo::VectorType_O" "llvmo::ArrayType_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "SequentialType_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3815:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::SequentialType_O" :#3# "SequentialType_O")))
template <> class gctools::GCKind<llvmo::SequentialType_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__SequentialType_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::APFloat_O" :#3=NAME "KIND_LISPALLOC_llvmo__APFloat_O" :VALUE 142 :#4=CCLASS #S(#4# :#1# "llvmo::APFloat_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1734:5" :BASES ("core::ExternalObject_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_value" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1739:2" :#6=CTYPE #S(#7=CXXRECORD-CTYPE :#1# "llvm::APFloat" :#3# "APFloat"))) :METHOD-NAMES (#8="NO-NAME" #8# #8# #8# "makeAPFloatDouble" "makeAPFloatFloat" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#9=SPECIES #S(#9# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "APFloat_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1734:5" :#6# #S(#7# :#1# "llvmo::APFloat_O" :#3# "APFloat_O")))
template <> class gctools::GCKind<llvmo::APFloat_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__APFloat_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::ArrayType_O" :#3=NAME "KIND_LISPALLOC_llvmo__ArrayType_O" :VALUE 154 :#4=CCLASS #S(#4# :#1# "llvmo::ArrayType_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3926:5" :BASES ("llvmo::SequentialType_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "get" #6# #6# "set_wrapped" "wrapped" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "ArrayType_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3926:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::ArrayType_O" :#3# "ArrayType_O")))
template <> class gctools::GCKind<llvmo::ArrayType_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__ArrayType_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::LandingPadInst_O" :#3=NAME "KIND_LISPALLOC_llvmo__LandingPadInst_O" :VALUE 170 :#4=CCLASS #S(#4# :#1# "llvmo::LandingPadInst_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2279:5" :BASES ("llvmo::Instruction_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "LandingPadInst_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2279:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::LandingPadInst_O" :#3# "LandingPadInst_O")))
template <> class gctools::GCKind<llvmo::LandingPadInst_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__LandingPadInst_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::ConstantExpr_O" :#3=NAME "KIND_LISPALLOC_llvmo__ConstantExpr_O" :VALUE 196 :#4=CCLASS #S(#4# :#1# "llvmo::ConstantExpr_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1010:5" :BASES ("llvmo::Constant_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "getInBoundsGetElementPtr" #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "ConstantExpr_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1010:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::ConstantExpr_O" :#3# "ConstantExpr_O")))
template <> class gctools::GCKind<llvmo::ConstantExpr_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__ConstantExpr_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::IOStreamStream_O" :#3=NAME "KIND_LISPALLOC_core__IOStreamStream_O" :VALUE 19 :#4=CCLASS #S(#4# :#1# "core::IOStreamStream_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/lispStream.h:447:5" :BASES ("core::FileStream_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_File" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:457:2" :#6=CTYPE #S(POINTER-CTYPE :#1# NIL :POINTEE #S(#7=CXXRECORD-CTYPE :#1# "_IO_FILE" :#3# "_IO_FILE")))) :METHOD-NAMES (#8="NO-NAME" #8# #8# #8# #8# "makeIO" "makeOutput" "makeInput" #8# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#9=SPECIES #S(#9# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "IOStreamStream_O" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:447:5" :#6# #S(#7# :#1# "core::IOStreamStream_O" :#3# "IOStreamStream_O")))
template <> class gctools::GCKind<core::IOStreamStream_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__IOStreamStream_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::VectorType_O" :#3=NAME "KIND_LISPALLOC_llvmo__VectorType_O" :VALUE 153 :#4=CCLASS #S(#4# :#1# "llvmo::VectorType_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3976:5" :BASES ("llvmo::SequentialType_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "get" #6# #6# "set_wrapped" "wrapped" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "VectorType_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3976:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::VectorType_O" :#3# "VectorType_O")))
template <> class gctools::GCKind<llvmo::VectorType_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__VectorType_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="asttooling::DerivableArgumentsAdjuster" :#3=NAME "KIND_LISPALLOC_asttooling__DerivableArgumentsAdjuster" :VALUE 267 :#4=CCLASS #S(#4# :#1# "asttooling::DerivableArgumentsAdjuster" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/asttooling/clangTooling.h:86:5" :BASES ("clbind::Derivable<clang::tooling::ArgumentsAdjuster>") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# #6# #6# "default_Adjust" "Adjust") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(LISPALLOC :#1# #2# :#3# "DerivableArgumentsAdjuster" :#5# "/home/meister/Development/clasp/src/asttooling/clangTooling.h:86:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "asttooling::DerivableArgumentsAdjuster" :#3# "DerivableArgumentsAdjuster")))
template <> class gctools::GCKind<asttooling::DerivableArgumentsAdjuster> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_asttooling__DerivableArgumentsAdjuster ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::Package_O" :#3=NAME "KIND_LISPALLOC_core__Package_O" :VALUE 96 :#4=CCLASS #S(#4# :#1# "core::Package_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/package.h:48:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Nicknames" :#5# "/home/meister/Development/clasp/src/core/package.h:68:2" :#8=CTYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Cons_O>" :#10=SPECIALIZER "class core::Cons_O")) #S(#6# :#7# "_AmpPackage" :#5# "/home/meister/Development/clasp/src/core/package.h:67:2" :#8# #S(#11=UNCLASSIFIED-CTYPE :#1# "_Bool")) #S(#6# :#7# "_KeywordPackage" :#5# "/home/meister/Development/clasp/src/core/package.h:66:2" :#8# #S(#11# :#1# "_Bool")) #S(#6# :#7# "_PackagesUsedBy" :#5# "/home/meister/Development/clasp/src/core/package.h:65:9" :#8# #S(#12=CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "gctools::Vec0<gctools::smart_ptr<core::Package_O>>" :#3# NIL :#13=ARGUMENTS (#S(#14=GC-TEMPLATE-ARGUMENT :#15=INDEX 0 :#8# #S(#9# :#1# "gctools::smart_ptr<core::Package_O>" :#10# "class core::Package_O"))))) #S(#6# :#7# "_UsingPackages" :#5# "/home/meister/Development/clasp/src/core/package.h:64:9" :#8# #S(#12# :#1# "gctools::Vec0<gctools::smart_ptr<core::Package_O>>" :#3# NIL :#13# (#S(#14# :#15# 0 :#8# #S(#9# :#1# "gctools::smart_ptr<core::Package_O>" :#10# "class core::Package_O"))))) #S(#6# :#7# "_ShadowingSymbols" :#5# "/home/meister/Development/clasp/src/core/package.h:63:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::HashTableEqual_O>" :#10# "class core::HashTableEqual_O")) #S(#6# :#7# "_ExternalSymbols" :#5# "/home/meister/Development/clasp/src/core/package.h:62:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::HashTableEql_O>" :#10# "class core::HashTableEql_O")) #S(#6# :#7# "_InternalSymbols" :#5# "/home/meister/Development/clasp/src/core/package.h:61:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::HashTableEql_O>" :#10# "class core::HashTableEql_O")) #S(#6# :#7# "_Name" :#5# "/home/meister/Development/clasp/src/core/package.h:60:9" :#8# #S(#12# :#1# "gctools::GCString<char,gctools::GCStringAllocator<gctools::GCString_moveable<char>>>" :#3# NIL :#13# (#S(#14# :#15# 0 :#8# #S(#11# :#1# "char")) #S(#14# :#15# 1 :#8# #S(#12# :#1# "gctools::GCStringAllocator<gctools::GCString_moveable<char>>" :#3# NIL :#13# (#S(#14# :#15# 0 :#8# #S(GCSTRING-MOVEABLE-CTYPE :#1# "gctools::GCString_moveable<char>" :#3# "GCString_moveable" :#13# (#S(#14# :#15# 0 :#8# #S(#11# :#1# "char")))))))))))) :METHOD-NAMES (#16="NO-NAME" #16# #16# #16# "mapInternals" "mapExternals" "hashTables" "dumpSymbols" "usingPackageP" "unusePackage" "usePackage" "shadowingSymbols" "shadowingImport" "import" "packageUsedByList" "packageUseList" "unintern" "intern" "findSymbol" "findSymbol" "findSymbolDirectlyContained" "_export" "isExported" "setName" "getName" "shadow" "shadow" "allSymbols" "isKeywordPackage" "setKeywordPackage" "getNicknames" "setNicknames" "packageHashTables" "packageName" "add_symbol_to_package" "create" "__repr__" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#17=SPECIES #S(#17# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#15# 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Package_O" :#5# "/home/meister/Development/clasp/src/core/package.h:48:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::Package_O" :#3# "Package_O")))
template <> class gctools::GCKind<core::Package_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Package_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::DIScope_O" :#3=NAME "KIND_LISPALLOC_llvmo__DIScope_O" :VALUE 61 :#4=CCLASS #S(#4# :#1# "llvmo::DIScope_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/debugInfoExpose.h:139:5" :BASES ("llvm::DIScope" "llvmo::DebugInfo_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# #6# #6# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "DIScope_O" :#5# "/home/meister/Development/clasp/src/llvmo/debugInfoExpose.h:139:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::DIScope_O" :#3# "DIScope_O")))
template <> class gctools::GCKind<llvmo::DIScope_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__DIScope_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::Regex_O" :#3=NAME "KIND_LISPALLOC_core__Regex_O" :VALUE 95 :#4=CCLASS #S(#4# :#1# "core::Regex_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/regex.h:78:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Regex" :#5# "/home/meister/Development/clasp/src/core/regex.h:88:2" :#6=CTYPE #S(#7=CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>" :#3# NIL :#8=ARGUMENTS (#S(#9=GC-TEMPLATE-ARGUMENT :#10=INDEX 0 :#6# #S(#11=UNCLASSIFIED-CTYPE :#1# "char")) #S(#9# :#10# 1 :#6# #S(#7# :#1# "boost::regex_traits<char,boost::cpp_regex_traits<char>>" :#3# NIL :#8# (#S(#9# :#10# 0 :#6# #S(#11# :#1# "char")) #S(#9# :#10# 1 :#6# #S(#7# :#1# "boost::cpp_regex_traits<char>" :#3# NIL :#8# (#S(#9# :#10# 0 :#6# #S(#11# :#1# "char")))))))))))) :METHOD-NAMES (#12="NO-NAME" #12# "regexSedReplace" "regexMatch" "regexMatches" "make" "initialize" #12# #12# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#13=SPECIES #S(#13# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#10# 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Regex_O" :#5# "/home/meister/Development/clasp/src/core/regex.h:78:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::Regex_O" :#3# "Regex_O")))
template <> class gctools::GCKind<core::Regex_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Regex_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::DISubroutineType_O" :#3=NAME "KIND_LISPALLOC_llvmo__DISubroutineType_O" :VALUE 60 :#4=CCLASS #S(#4# :#1# "llvmo::DISubroutineType_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/debugInfoExpose.h:600:5" :BASES ("llvm::DISubroutineType" "llvmo::DebugInfo_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# #6# #6# #6# #6# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "DISubroutineType_O" :#5# "/home/meister/Development/clasp/src/llvmo/debugInfoExpose.h:600:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::DISubroutineType_O" :#3# "DISubroutineType_O")))
template <> class gctools::GCKind<llvmo::DISubroutineType_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__DISubroutineType_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>" :#3=NAME "KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__3_" :VALUE 268 :#4=CCLASS #S(#4# :#1# "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>" :TEMPLATE-SPECIALIZER T :#5=LOCATION "/home/meister/Development/clasp/src/gctools/gcarray.h:33:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Data" :#5# "/home/meister/Development/clasp/src/gctools/gcarray.h:55:9" :#8=CTYPE #S(CONSTANT-ARRAY-CTYPE :#1# NIL :ELEMENT-TYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :#10=SPECIALIZER "class core::T_O"))) #S(#6# :#7# "_Alive" :#5# "/home/meister/Development/clasp/src/gctools/gcarray.h:54:9" :#8# #S(#11=UNCLASSIFIED-CTYPE :#1# "_Bool")) #S(#6# :#7# "_Capacity" :#5# "/home/meister/Development/clasp/src/gctools/gcarray.h:53:9" :#8# #S(#11# :#1# "unsigned long"))) :METHOD-NAMES (#12="NO-NAME" #12# #12# #12# "end" "begin" "end" "begin" #12# #12# "data" "capacity" "size" #12# #12#) :METADATA NIL) :#13=SPECIES #S(#13# :#3# :GCARRAY :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :DUMP DUMPER-FOR-GCCONTAINER :#14=INDEX 4) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CONTAINERALLOC :#1# #2# :#3# "GCArray_moveable" :#5# "/home/meister/Development/clasp/src/gctools/gcarray.h:33:5" :#8# #S(GCARRAY-MOVEABLE-CTYPE :#1# "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>" :#3# "GCArray_moveable" :ARGUMENTS (#S(#15=GC-TEMPLATE-ARGUMENT :#14# 0 :#8# #S(#9# :#1# "gctools::smart_ptr<core::T_O>" :#10# "class core::T_O")) #S(#15# :#14# 1 :#8# NIL)))))
template <> class gctools::GCKind<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__3_ ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::GlueEnvironment_O" :#3=NAME "KIND_LISPALLOC_core__GlueEnvironment_O" :VALUE 30 :#4=CCLASS #S(#4# :#1# "core::GlueEnvironment_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/environment.h:888:5" :BASES ("core::Environment_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Args" :#5# "/home/meister/Development/clasp/src/core/environment.h:896:2" :#8=CTYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Cons_O>" :#10=SPECIALIZER "class core::Cons_O")) #S(#6# :#7# "_Map" :#5# "/home/meister/Development/clasp/src/core/environment.h:895:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::HashTableEq_O>" :#10# "class core::HashTableEq_O"))) :METHOD-NAMES (#11="NO-NAME" #11# #11# #11# "args" "create" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#12=SPECIES #S(#12# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "GlueEnvironment_O" :#5# "/home/meister/Development/clasp/src/core/environment.h:888:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::GlueEnvironment_O" :#3# "GlueEnvironment_O")))
template <> class gctools::GCKind<core::GlueEnvironment_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__GlueEnvironment_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::StringStream_O" :#3=NAME "KIND_LISPALLOC_core__StringStream_O" :VALUE 21 :#4=CCLASS #S(#4# :#1# "core::StringStream_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/lispStream.h:501:5" :BASES ("core::AnsiStream_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("core::StringOutputStream_O" "core::StringInputStream_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "StringStream_O" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:501:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::StringStream_O" :#3# "StringStream_O")))
template <> class gctools::GCKind<core::StringStream_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__StringStream_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::Complex_O" :#3=NAME "KIND_LISPALLOC_core__Complex_O" :VALUE 111 :#4=CCLASS #S(#4# :#1# "core::Complex_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/numbers.h:696:5" :BASES ("core::Number_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_imaginary" :#5# "/home/meister/Development/clasp/src/core/numbers.h:709:2" :#8=CTYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Real_O>" :#10=SPECIALIZER "class core::Real_O")) #S(#6# :#7# "_real" :#5# "/home/meister/Development/clasp/src/core/numbers.h:708:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::Real_O>" :#10# "class core::Real_O"))) :METHOD-NAMES (#11="NO-NAME" #11# #11# #11# "conjugate" "tanh" "cosh" "sinh" "tan" "cos" "sin" "exp" "sqrt" "oneMinus" "onePlus" "log1p" "log1" "negate" "zerop" "eql" "eqn" "setFromString" "valueAsString" "isnan" "abs" "signum" "__repr__" "copy" "sxhash" "imaginary" "real" "number_type" "create" "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#12=SPECIES #S(#12# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Complex_O" :#5# "/home/meister/Development/clasp/src/core/numbers.h:696:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::Complex_O" :#3# "Complex_O")))
template <> class gctools::GCKind<core::Complex_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Complex_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::SexpSaveArchive_O" :#3=NAME "KIND_LISPALLOC_core__SexpSaveArchive_O" :VALUE 77 :#4=CCLASS #S(#4# :#1# "core::SexpSaveArchive_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/sexpSaveArchive.h:40:5" :BASES ("core::SaveArchive_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "sexpSaveArchiveWrite" "write" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "SexpSaveArchive_O" :#5# "/home/meister/Development/clasp/src/core/sexpSaveArchive.h:40:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::SexpSaveArchive_O" :#3# "SexpSaveArchive_O")))
template <> class gctools::GCKind<core::SexpSaveArchive_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__SexpSaveArchive_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::DebugLoc_O" :#3=NAME "KIND_LISPALLOC_llvmo__DebugLoc_O" :VALUE 94 :#4=CCLASS #S(#4# :#1# "llvmo::DebugLoc_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/debugLoc.h:47:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_DebugLoc" :#5# "/home/meister/Development/clasp/src/llvmo/debugLoc.h:57:2" :#6=CTYPE #S(#7=CXXRECORD-CTYPE :#1# "llvm::DebugLoc" :#3# "DebugLoc"))) :METHOD-NAMES (#8="NO-NAME" #8# "getScope" "getCol" "getLine" "debugLoc" "get" #8# #8# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#9=SPECIES #S(#9# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "DebugLoc_O" :#5# "/home/meister/Development/clasp/src/llvmo/debugLoc.h:47:5" :#6# #S(#7# :#1# "llvmo::DebugLoc_O" :#3# "DebugLoc_O")))
template <> class gctools::GCKind<llvmo::DebugLoc_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__DebugLoc_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::GlobalValue_O" :#3=NAME "KIND_LISPALLOC_llvmo__GlobalValue_O" :VALUE 193 :#4=CCLASS #S(#4# :#1# "llvmo::GlobalValue_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1050:5" :BASES ("llvmo::Constant_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_PtrIsOwned" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1056:2" :#6=CTYPE #S(UNCLASSIFIED-CTYPE :#1# "_Bool"))) :METHOD-NAMES (#7="NO-NAME" #7# #7# #7# "set_ptrIsOwned" "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("llvmo::Function_O" "llvmo::GlobalVariable_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "GlobalValue_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1050:5" :#6# #S(CXXRECORD-CTYPE :#1# "llvmo::GlobalValue_O" :#3# "GlobalValue_O")))
template <> class gctools::GCKind<llvmo::GlobalValue_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__GlobalValue_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::MacroClosure" :#3=NAME "KIND_CLASSALLOC_core__MacroClosure" :VALUE 269 :#4=CCLASS #S(#4# :#1# "core::MacroClosure" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/wrappers.h:127:5" :BASES ("core::BuiltinClosure") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "mptr" :#5# "/home/meister/Development/clasp/src/core/wrappers.h:130:2" :#6=CTYPE #S(POINTER-CTYPE :#1# NIL :POINTEE #S(UNCLASSIFIED-CTYPE :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>)")))) :METHOD-NAMES (#7="NO-NAME" #7# #7# #7# #7# "invoke" "getKind" "templatedSizeof" #7# #7# #7# #7# "describe") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :CLASSALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 6) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CLASSALLOC :#1# #2# :#3# "MacroClosure" :#5# "/home/meister/Development/clasp/src/core/wrappers.h:127:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::MacroClosure" :#3# "MacroClosure")))
template <> class gctools::GCKind<core::MacroClosure> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_CLASSALLOC_core__MacroClosure ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::WeakKeyMapping_O" :#3=NAME "KIND_LISPALLOC_core__WeakKeyMapping_O" :VALUE 93 :#4=CCLASS #S(#4# :#1# "core::WeakKeyMapping_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/weakKeyMapping.h:36:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_WeakObject" :#5# "/home/meister/Development/clasp/src/core/weakKeyMapping.h:55:9" :#6=CTYPE #S(#7=CXXRECORD-CTYPE :#1# "gctools::WeakKeyMappingPair" :#3# "WeakKeyMappingPair"))) :METHOD-NAMES (#8="NO-NAME" #8# #8# #8# #8# "valid" "keyValue" "make" #8# #8# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#9=SPECIES #S(#9# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "WeakKeyMapping_O" :#5# "/home/meister/Development/clasp/src/core/weakKeyMapping.h:36:5" :#6# #S(#7# :#1# "core::WeakKeyMapping_O" :#3# "WeakKeyMapping_O")))
template <> class gctools::GCKind<core::WeakKeyMapping_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__WeakKeyMapping_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::Function_O" :#3=NAME "KIND_LISPALLOC_core__Function_O" :VALUE 87 :#4=CCLASS #S(#4# :#1# "core::Function_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/executables.h:99:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "closure" :#5# "/home/meister/Development/clasp/src/core/executables.h:108:9" :#6=CTYPE #S(POINTER-CTYPE :#1# NIL :POINTEE #S(#7=CXXRECORD-CTYPE :#1# "core::Closure" :#3# "Closure")))) :METHOD-NAMES (#8="NO-NAME" #8# "functionSourcePos" "functionName" "closedEnvironment" "functionLambdaListHandler" "functionKind" "setKind" "macroP" "description" "__repr__" "make" #8# #8# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#9=SPECIES #S(#9# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("core::SingleDispatchEffectiveMethodFunction_O" "core::SingleDispatchGenericFunction_O" "core::CompiledFunction_O" "core::Instance_O" "core::SpecialForm_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Function_O" :#5# "/home/meister/Development/clasp/src/core/executables.h:99:5" :#6# #S(#7# :#1# "core::Function_O" :#3# "Function_O")))
template <> class gctools::GCKind<core::Function_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Function_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::Metaobject_O" :#3=NAME "KIND_BOOTSTRAP_core__Metaobject_O" :VALUE 213 :#4=CCLASS #S(#4# :#1# "core::Metaobject_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/metaobject.h:50:1" :BASES ("core::StandardObject_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :BOOTSTRAP :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 0) :CHILDREN ("core::Specializer_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Metaobject_O" :#5# "/home/meister/Development/clasp/src/core/metaobject.h:50:1" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::Metaobject_O" :#3# "Metaobject_O")))
template <> class gctools::GCKind<core::Metaobject_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_BOOTSTRAP_core__Metaobject_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::MicroHeap_O" :#3=NAME "KIND_LISPALLOC_core__MicroHeap_O" :VALUE 86 :#4=CCLASS #S(#4# :#1# "core::MicroHeap_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/microHeap.h:69:1" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Blocks" :#5# "/home/meister/Development/clasp/src/core/microHeap.h:79:5" :#8=CTYPE #S(#9=CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "std::vector<core::MicroHeapBlock *,std::allocator<core::MicroHeapBlock *>>" :#3# NIL :#10=ARGUMENTS (#S(#11=GC-TEMPLATE-ARGUMENT :#12=INDEX 0 :#8# #S(#13=POINTER-CTYPE :#1# NIL :#14=POINTEE #S(#15=CXXRECORD-CTYPE :#1# "core::MicroHeapBlock" :#3# "MicroHeapBlock"))) #S(#11# :#12# 1 :#8# #S(#9# :#1# "std::allocator<core::MicroHeapBlock *>" :#3# NIL :#10# (#S(#11# :#12# 0 :#8# #S(#13# :#1# NIL :#14# #S(#15# :#1# "core::MicroHeapBlock" :#3# "MicroHeapBlock"))))))))) #S(#6# :#7# "_MaxEntriesPerBlock" :#5# "/home/meister/Development/clasp/src/core/microHeap.h:78:5" :#8# #S(#16=UNCLASSIFIED-CTYPE :#1# "unsigned int")) #S(#6# :#7# "_EntrySize" :#5# "/home/meister/Development/clasp/src/core/microHeap.h:77:5" :#8# #S(#16# :#1# "unsigned int"))) :METHOD-NAMES (#17="NO-NAME" #17# #17# #17# "createNewBlock" "rawNewEntry" "rawGetEntry" "numberOfEntries" "setEntrySize" "setMaxEntries" "create" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#18=SPECIES #S(#18# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#12# 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "MicroHeap_O" :#5# "/home/meister/Development/clasp/src/core/microHeap.h:69:1" :#8# #S(#15# :#1# "core::MicroHeap_O" :#3# "MicroHeap_O")))
template <> class gctools::GCKind<core::MicroHeap_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__MicroHeap_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::BroadcastStream_O" :#3=NAME "KIND_LISPALLOC_core__BroadcastStream_O" :VALUE 20 :#4=CCLASS #S(#4# :#1# "core::BroadcastStream_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/lispStream.h:648:5" :BASES ("core::AnsiStream_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Streams" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:659:9" :#6=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O"))) :METHOD-NAMES (#7="NO-NAME" #7# #7# #7# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "BroadcastStream_O" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:648:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::BroadcastStream_O" :#3# "BroadcastStream_O")))
template <> class gctools::GCKind<core::BroadcastStream_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__BroadcastStream_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::Argument_O" :#3=NAME "KIND_LISPALLOC_llvmo__Argument_O" :VALUE 160 :#4=CCLASS #S(#4# :#1# "llvmo::Argument_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3452:5" :BASES ("llvmo::Value_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "addAttr" #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Argument_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3452:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::Argument_O" :#3# "Argument_O")))
template <> class gctools::GCKind<llvmo::Argument_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__Argument_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="asttooling::DerivableASTFrontendAction" :#3=NAME "KIND_LISPALLOC_asttooling__DerivableASTFrontendAction" :VALUE 270 :#4=CCLASS #S(#4# :#1# "asttooling::DerivableASTFrontendAction" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/asttooling/clangTooling.h:102:5" :BASES ("clbind::Derivable<clang::ASTFrontendAction>") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# #6# #6# "ExecuteAction" "default_CreateASTConsumer" "CreateASTConsumer") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(LISPALLOC :#1# #2# :#3# "DerivableASTFrontendAction" :#5# "/home/meister/Development/clasp/src/asttooling/clangTooling.h:102:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "asttooling::DerivableASTFrontendAction" :#3# "DerivableASTFrontendAction")))
template <> class gctools::GCKind<asttooling::DerivableASTFrontendAction> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_asttooling__DerivableASTFrontendAction ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::DITypeArray_O" :#3=NAME "KIND_LISPALLOC_llvmo__DITypeArray_O" :VALUE 59 :#4=CCLASS #S(#4# :#1# "llvmo::DITypeArray_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/debugInfoExpose.h:242:5" :BASES ("llvm::DITypedArray<llvm::DIRef<llvm::DIType>>" "llvmo::DebugInfo_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# #6# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "DITypeArray_O" :#5# "/home/meister/Development/clasp/src/llvmo/debugInfoExpose.h:242:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::DITypeArray_O" :#3# "DITypeArray_O")))
template <> class gctools::GCKind<llvmo::DITypeArray_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__DITypeArray_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::HashTableEql_O" :#3=NAME "KIND_LISPALLOC_core__HashTableEql_O" :VALUE 234 :#4=CCLASS #S(#4# :#1# "core::HashTableEql_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/hashTableEql.h:39:5" :BASES ("core::HashTable_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "sxhashKey" "keyTest" "hashTableTest" "create_default" "create" #6# #6# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "HashTableEql_O" :#5# "/home/meister/Development/clasp/src/core/hashTableEql.h:39:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::HashTableEql_O" :#3# "HashTableEql_O")))
template <> class gctools::GCKind<core::HashTableEql_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__HashTableEql_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::SexpLoadArchive_O" :#3=NAME "KIND_LISPALLOC_core__SexpLoadArchive_O" :VALUE 79 :#4=CCLASS #S(#4# :#1# "core::SexpLoadArchive_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/sexpLoadArchive.h:40:5" :BASES ("core::LoadArchive_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "parseFromStream" "parseFromObject" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "SexpLoadArchive_O" :#5# "/home/meister/Development/clasp/src/core/sexpLoadArchive.h:40:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::SexpLoadArchive_O" :#3# "SexpLoadArchive_O")))
template <> class gctools::GCKind<core::SexpLoadArchive_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__SexpLoadArchive_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::FunctionFrame_O" :#3=NAME "KIND_LISPALLOC_core__FunctionFrame_O" :VALUE 45 :#4=CCLASS #S(#4# :#1# "core::FunctionFrame_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/activationFrame.h:326:5" :BASES ("core::ActivationFrame_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Objects" :#5# "/home/meister/Development/clasp/src/core/activationFrame.h:332:9" :#8=CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "gctools::Frame0<gctools::smart_ptr<core::T_O>>" :#3# NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#9=INDEX 0 :#8# #S(#10=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :#11=SPECIALIZER "class core::T_O"))))) #S(#6# :#7# "_ParentFrame" :#5# "/home/meister/Development/clasp/src/core/activationFrame.h:331:2" :#8# #S(#10# :#1# "gctools::smart_ptr<core::ActivationFrame_O>" :#11# "class core::ActivationFrame_O"))) :METHOD-NAMES (#12="NO-NAME" #12# "_lookupFunction" "summaryOfContents" "asString" "entryReference" "entry" "set_entry" "boundp_entry" "length" "parentFrame" "parentFrameRef" #12# #12# "create" "create" "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#13=SPECIES #S(#13# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#9# 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "FunctionFrame_O" :#5# "/home/meister/Development/clasp/src/core/activationFrame.h:326:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::FunctionFrame_O" :#3# "FunctionFrame_O")))
template <> class gctools::GCKind<core::FunctionFrame_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__FunctionFrame_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::DIArray_O" :#3=NAME "KIND_LISPALLOC_llvmo__DIArray_O" :VALUE 58 :#4=CCLASS #S(#4# :#1# "llvmo::DIArray_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/debugInfoExpose.h:202:5" :BASES ("llvm::DITypedArray<llvm::DIDescriptor>" "llvmo::DebugInfo_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# #6# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "DIArray_O" :#5# "/home/meister/Development/clasp/src/llvmo/debugInfoExpose.h:202:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::DIArray_O" :#3# "DIArray_O")))
template <> class gctools::GCKind<llvmo::DIArray_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__DIArray_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::Character_O" :#3=NAME "KIND_LISPALLOC_core__Character_O" :VALUE 82 :#4=CCLASS #S(#4# :#1# "core::Character_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/character.h:46:5" :BASES ("core::T_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "__write__" "charCode" "toInt" "equalp" "equal" "graphicCharP" "alphanumericp" "alpha_char_p" "both_case_p" "lower_case_p" "upper_case_p" "char_downcase" "char_upcase" "get" "asChar" "create" "create_from_name" "create" "create" "initialize" #6# #6# "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("core::ExtendedChar_O" "core::BaseChar_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Character_O" :#5# "/home/meister/Development/clasp/src/core/character.h:46:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::Character_O" :#3# "Character_O")))
template <> class gctools::GCKind<core::Character_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Character_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::ArrayObjects_O" :#3=NAME "KIND_LISPALLOC_core__ArrayObjects_O" :VALUE 116 :#4=CCLASS #S(#4# :#1# "core::ArrayObjects_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/arrayObjects.h:38:1" :BASES ("core::Array_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Values" :#5# "/home/meister/Development/clasp/src/core/arrayObjects.h:57:5" :#8=CTYPE #S(#9=CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "gctools::Vec0<gctools::smart_ptr<core::T_O>>" :#3# NIL :#10=ARGUMENTS (#S(#11=GC-TEMPLATE-ARGUMENT :#12=INDEX 0 :#8# #S(#13=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :#14=SPECIALIZER "class core::T_O"))))) #S(#6# :#7# "_ElementType" :#5# "/home/meister/Development/clasp/src/core/arrayObjects.h:56:5" :#8# #S(#13# :#1# "gctools::smart_ptr<core::T_O>" :#14# "class core::T_O")) #S(#6# :#7# "_Dimensions" :#5# "/home/meister/Development/clasp/src/core/arrayObjects.h:55:5" :#8# #S(#9# :#1# "std::vector<int,std::allocator<int>>" :#3# NIL :#10# (#S(#11# :#12# 0 :#8# #S(#15=UNCLASSIFIED-CTYPE :#1# "int")) #S(#11# :#12# 1 :#8# #S(#9# :#1# "std::allocator<int>" :#3# NIL :#10# (#S(#11# :#12# 0 :#8# #S(#15# :#1# "int"))))))))) :METHOD-NAMES (#16="NO-NAME" #16# "setf_svref" "svref" "deepCopy" "arrayFill" "shallowCopy" "setf_aref" "aref" "setElementType" "setDimensions" "arrayDimension" "rank" "rowMajorAref" "rowMajorAset" "elementType" "asetUnsafe" "make" "initialize" #16# #16# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#17=SPECIES #S(#17# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#12# 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "ArrayObjects_O" :#5# "/home/meister/Development/clasp/src/core/arrayObjects.h:38:1" :#8# #S(CXXRECORD-CTYPE :#1# "core::ArrayObjects_O" :#3# "ArrayObjects_O")))
template <> class gctools::GCKind<core::ArrayObjects_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__ArrayObjects_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::ConsStepper" :#3=NAME "KIND_CLASSALLOC_core__ConsStepper" :VALUE 8 :#4=CCLASS #S(#4# :#1# "core::ConsStepper" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/primitives.h:118:5" :BASES ("core::SequenceStepper") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Cur" :#5# "/home/meister/Development/clasp/src/core/primitives.h:122:2" :#6=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Cons_O>" :SPECIALIZER "class core::Cons_O"))) :METHOD-NAMES (#7="NO-NAME" #7# #7# #7# #7# "element" "advance" #7#) :METADATA NIL) :#8=SPECIES #S(#8# :#3# :CLASSALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 6) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(CLASSALLOC :#1# #2# :#3# "ConsStepper" :#5# "/home/meister/Development/clasp/src/core/primitives.h:118:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::ConsStepper" :#3# "ConsStepper")))
template <> class gctools::GCKind<core::ConsStepper> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_CLASSALLOC_core__ConsStepper ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="asttooling::internal::FixedArgCountMatcherDescriptor" :#3=NAME "KIND_CLASSALLOC_asttooling__internal__FixedArgCountMatcherDescriptor" :VALUE 271 :#4=CCLASS #S(#4# :#1# "asttooling::internal::FixedArgCountMatcherDescriptor" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/asttooling/Marshallers.h:124:9" :BASES ("asttooling::internal::MatcherDescriptor") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "MatcherName" :#5# "/home/meister/Development/clasp/src/asttooling/Marshallers.h:149:13" :#8=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O")) #S(#6# :#7# "Func" :#5# "/home/meister/Development/clasp/src/asttooling/Marshallers.h:148:13" :#8# #S(#9=POINTER-CTYPE :#1# NIL :#10=POINTEE #S(#11=UNCLASSIFIED-CTYPE :#1# "void (void)"))) #S(#6# :#7# "Marshaller" :#5# "/home/meister/Development/clasp/src/asttooling/Marshallers.h:147:13" :#8# #S(#9# :#1# NIL :#10# #S(#11# :#1# "clang::ast_matchers::dynamic::VariantMatcher (void (*)(void), gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::Cons_O>, llvm::ArrayRef<asttooling::ParserValue>, asttooling::Diagnostics *)")))) :METHOD-NAMES (#12="NO-NAME" #12# #12# #12# #12# "create" #12#) :METADATA NIL) :#13=SPECIES #S(#13# :#3# :CLASSALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 6) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CLASSALLOC :#1# #2# :#3# "FixedArgCountMatcherDescriptor" :#5# "/home/meister/Development/clasp/src/asttooling/Marshallers.h:124:9" :#8# #S(CXXRECORD-CTYPE :#1# "asttooling::internal::FixedArgCountMatcherDescriptor" :#3# "FixedArgCountMatcherDescriptor")))
template <> class gctools::GCKind<asttooling::internal::FixedArgCountMatcherDescriptor> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_CLASSALLOC_asttooling__internal__FixedArgCountMatcherDescriptor ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::SourcePosInfo_O" :#3=NAME "KIND_LISPALLOC_core__SourcePosInfo_O" :VALUE 81 :#4=CCLASS #S(#4# :#1# "core::SourcePosInfo_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/sourceFileInfo.h:75:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Column" :#5# "/home/meister/Development/clasp/src/core/sourceFileInfo.h:111:2" :#8=CTYPE #S(#9=UNCLASSIFIED-CTYPE :#1# "unsigned int")) #S(#6# :#7# "_Lineno" :#5# "/home/meister/Development/clasp/src/core/sourceFileInfo.h:110:2" :#8# #S(#9# :#1# "unsigned int")) #S(#6# :#7# "_FileId" :#5# "/home/meister/Development/clasp/src/core/sourceFileInfo.h:109:2" :#8# #S(#9# :#1# "unsigned int"))) :METHOD-NAMES (#10="NO-NAME" #10# #10# #10# #10# "column" "lineno" "fileHandle" "sourceFileInfo" "__repr__" "create" #10# #10# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#11=SPECIES #S(#11# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "SourcePosInfo_O" :#5# "/home/meister/Development/clasp/src/core/sourceFileInfo.h:75:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::SourcePosInfo_O" :#3# "SourcePosInfo_O")))
template <> class gctools::GCKind<core::SourcePosInfo_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__SourcePosInfo_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::ConstantDataArray_O" :#3=NAME "KIND_LISPALLOC_llvmo__ConstantDataArray_O" :VALUE 187 :#4=CCLASS #S(#4# :#1# "llvmo::ConstantDataArray_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:978:5" :BASES ("llvmo::ConstantDataSequential_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "getUInt32" #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "ConstantDataArray_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:978:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::ConstantDataArray_O" :#3# "ConstantDataArray_O")))
template <> class gctools::GCKind<llvmo::ConstantDataArray_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__ConstantDataArray_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::ConstantFP_O" :#3=NAME "KIND_LISPALLOC_llvmo__ConstantFP_O" :VALUE 192 :#4=CCLASS #S(#4# :#1# "llvmo::ConstantFP_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2863:5" :BASES ("llvmo::Constant_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "__repr__" #6# #6# "create" "set_wrapped" "wrappedPtr" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "ConstantFP_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2863:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::ConstantFP_O" :#3# "ConstantFP_O")))
template <> class gctools::GCKind<llvmo::ConstantFP_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__ConstantFP_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::RegexMatch_O" :#3=NAME "KIND_LISPALLOC_core__RegexMatch_O" :VALUE 80 :#4=CCLASS #S(#4# :#1# "core::RegexMatch_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/regex.h:45:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Match" :#5# "/home/meister/Development/clasp/src/core/regex.h:56:5" :#8=CTYPE #S(#9=CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "boost::match_results<const char *,std::allocator<boost::sub_match<const char *>>>" :#3# NIL :#10=ARGUMENTS (#S(#11=GC-TEMPLATE-ARGUMENT :#12=INDEX 0 :#8# #S(#13=POINTER-CTYPE :#1# NIL :#14=POINTEE #S(#15=UNCLASSIFIED-CTYPE :#1# "char"))) #S(#11# :#12# 1 :#8# #S(#9# :#1# "std::allocator<boost::sub_match<const char *>>" :#3# NIL :#10# (#S(#11# :#12# 0 :#8# #S(#9# :#1# "boost::sub_match<const char *>" :#3# NIL :#10# (#S(#11# :#12# 0 :#8# #S(#13# :#1# NIL :#14# #S(#15# :#1# "char")))))))))))) #S(#6# :#7# "_CopyOfTextToMatch" :#5# "/home/meister/Development/clasp/src/core/regex.h:55:5" :#8# #S(#9# :#1# "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" :#3# NIL :#10# (#S(#11# :#12# 0 :#8# #S(#15# :#1# "char")) #S(#11# :#12# 1 :#8# #S(#9# :#1# "std::char_traits<char>" :#3# NIL :#10# (#S(#11# :#12# 0 :#8# #S(#15# :#1# "char"))))) #S(#11# :#12# 2 :#8# #S(#9# :#1# "std::allocator<char>" :#3# NIL :#10# (#S(#11# :#12# 0 :#8# #S(#15# :#1# "char"))))))))) :METHOD-NAMES (#16="NO-NAME" #16# "suffix" "prefix" "matched" "part" "size" "initialize" #16# #16# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#17=SPECIES #S(#17# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#12# 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "RegexMatch_O" :#5# "/home/meister/Development/clasp/src/core/regex.h:45:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::RegexMatch_O" :#3# "RegexMatch_O")))
template <> class gctools::GCKind<core::RegexMatch_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__RegexMatch_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::WeakKeyHashTable_O" :#3=NAME "KIND_LISPALLOC_core__WeakKeyHashTable_O" :VALUE 210 :#4=CCLASS #S(#4# :#1# "core::WeakKeyHashTable_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/weakHashTable.h:72:5" :BASES ("core::WeakHashTable_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_HashTable" :#5# "/home/meister/Development/clasp/src/core/weakHashTable.h:95:9" :#6=CTYPE #S(#7=CXXRECORD-CTYPE :#1# "gctools::WeakHashTable" :#3# "WeakHashTable"))) :METHOD-NAMES (#8="NO-NAME" #8# #8# #8# #8# "clrhash" "remhash" "gethash" "sxhashKey" "keyTest" "hashTableTest" "describe" "fullp" "set" "tableSize" "create_default" #8# #8# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#9=SPECIES #S(#9# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "WeakKeyHashTable_O" :#5# "/home/meister/Development/clasp/src/core/weakHashTable.h:72:5" :#6# #S(#7# :#1# "core::WeakKeyHashTable_O" :#3# "WeakKeyHashTable_O")))
template <> class gctools::GCKind<core::WeakKeyHashTable_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__WeakKeyHashTable_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="asttooling::internal::FreeFuncMatcherDescriptor" :#3=NAME "KIND_CLASSALLOC_asttooling__internal__FreeFuncMatcherDescriptor" :VALUE 272 :#4=CCLASS #S(#4# :#1# "asttooling::internal::FreeFuncMatcherDescriptor" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/asttooling/Marshallers.h:159:9" :BASES ("asttooling::internal::MatcherDescriptor") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "MatcherName" :#5# "/home/meister/Development/clasp/src/asttooling/Marshallers.h:178:13" :#8=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O")) #S(#6# :#7# "Func" :#5# "/home/meister/Development/clasp/src/asttooling/Marshallers.h:177:13" :#8# #S(POINTER-CTYPE :#1# NIL :POINTEE #S(UNCLASSIFIED-CTYPE :#1# "clang::ast_matchers::dynamic::VariantMatcher (gctools::smart_ptr<core::Symbol_O>, gctools::smart_ptr<core::Cons_O>, llvm::ArrayRef<asttooling::ParserValue>, asttooling::Diagnostics *)")))) :METHOD-NAMES (#9="NO-NAME" #9# #9# #9# #9# "create" #9#) :METADATA NIL) :#10=SPECIES #S(#10# :#3# :CLASSALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 6) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CLASSALLOC :#1# #2# :#3# "FreeFuncMatcherDescriptor" :#5# "/home/meister/Development/clasp/src/asttooling/Marshallers.h:159:9" :#8# #S(CXXRECORD-CTYPE :#1# "asttooling::internal::FreeFuncMatcherDescriptor" :#3# "FreeFuncMatcherDescriptor")))
template <> class gctools::GCKind<asttooling::internal::FreeFuncMatcherDescriptor> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_CLASSALLOC_asttooling__internal__FreeFuncMatcherDescriptor ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="gctools::GCVector_moveable<core::AuxArgument>" :#3=NAME "KIND_GCVECTOR_gctools__GCVector_moveable_core__AuxArgument_" :VALUE 273 :#4=CCLASS #S(#4# :#1# "gctools::GCVector_moveable<core::AuxArgument>" :TEMPLATE-SPECIALIZER T :#5=LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Data" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:48:9" :#8=CTYPE #S(CONSTANT-ARRAY-CTYPE :#1# NIL :ELEMENT-TYPE #S(#9=CXXRECORD-CTYPE :#1# "core::AuxArgument" :#3# "AuxArgument"))) #S(#6# :#7# "_End" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:47:9" :#8# #S(#10=UNCLASSIFIED-CTYPE :#1# "unsigned long")) #S(#6# :#7# "_Capacity" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:46:9" :#8# #S(#10# :#1# "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" #11="NO-NAME" #11# "capacity" "size" "data" #11# #11# #11#) :METADATA NIL) :#12=SPECIES #S(#12# :#3# :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :DUMP DUMPER-FOR-GCCONTAINER :#13=INDEX 3) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CONTAINERALLOC :#1# #2# :#3# "GCVector_moveable" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#8# #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::AuxArgument>" :#3# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#13# 0 :#8# #S(#9# :#1# "core::AuxArgument" :#3# "AuxArgument"))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<core::AuxArgument>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_core__AuxArgument_ ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::Archive_O" :#3=NAME "KIND_LISPALLOC_core__Archive_O" :VALUE 75 :#4=CCLASS #S(#4# :#1# "core::Archive_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/serialize.h:577:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_NextUniqueId" :#5# "/home/meister/Development/clasp/src/core/serialize.h:584:2" :#8=CTYPE #S(#9=UNCLASSIFIED-CTYPE :#1# "int")) #S(#6# :#7# "_TopNode" :#5# "/home/meister/Development/clasp/src/core/serialize.h:583:2" :#8# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::BranchSNode_O>" :SPECIALIZER "class core::BranchSNode_O")) #S(#6# :#7# "_Version" :#5# "/home/meister/Development/clasp/src/core/serialize.h:582:2" :#8# #S(#9# :#1# "int"))) :METHOD-NAMES (#10="NO-NAME" #10# #10# #10# "__repr__" "getTopNode" "addNodeToFinalize" "loading" "isSaveArchive" "nextUniqueId" "currentSaveArchive" "currentLoadArchive" "currentArchive" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#11=SPECIES #S(#11# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("core::SaveArchive_O" "core::LoadArchive_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Archive_O" :#5# "/home/meister/Development/clasp/src/core/serialize.h:577:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::Archive_O" :#3# "Archive_O")))
template <> class gctools::GCKind<core::Archive_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Archive_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="clbind::ClassRegistry_O" :#3=NAME "KIND_LISPALLOC_clbind__ClassRegistry_O" :VALUE 74 :#4=CCLASS #S(#4# :#1# "clbind::ClassRegistry_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/clbind/class_registry.h:66:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "m_classes" :#5# "/home/meister/Development/clasp/src/clbind/class_registry.h:92:9" :#6=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::HashTableEql_O>" :SPECIALIZER "class core::HashTableEql_O"))) :METHOD-NAMES (#7="NO-NAME" #7# "find_class" "add_class" "get_registry" #7# #7# "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "ClassRegistry_O" :#5# "/home/meister/Development/clasp/src/clbind/class_registry.h:66:5" :#6# #S(CXXRECORD-CTYPE :#1# "clbind::ClassRegistry_O" :#3# "ClassRegistry_O")))
template <> class gctools::GCKind<clbind::ClassRegistry_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_clbind__ClassRegistry_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::AtomicCmpXchgInst_O" :#3=NAME "KIND_LISPALLOC_llvmo__AtomicCmpXchgInst_O" :VALUE 169 :#4=CCLASS #S(#4# :#1# "llvmo::AtomicCmpXchgInst_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2087:1" :BASES ("llvmo::Instruction_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "AtomicCmpXchgInst_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2087:1" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::AtomicCmpXchgInst_O" :#3# "AtomicCmpXchgInst_O")))
template <> class gctools::GCKind<llvmo::AtomicCmpXchgInst_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__AtomicCmpXchgInst_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::BlockEnvironment_O" :#3=NAME "KIND_LISPALLOC_core__BlockEnvironment_O" :VALUE 34 :#4=CCLASS #S(#4# :#1# "core::BlockEnvironment_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/environment.h:602:5" :BASES ("core::CompileTimeEnvironment_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_BlockSymbol" :#5# "/home/meister/Development/clasp/src/core/environment.h:612:2" :#6=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O"))) :METHOD-NAMES (#7="NO-NAME" #7# #7# #7# "find_block_named_environment" "recognizesBlockSymbol" "setBlockSymbol" "getBlockSymbol" "summaryOfContents" "make" "create" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "BlockEnvironment_O" :#5# "/home/meister/Development/clasp/src/core/environment.h:602:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::BlockEnvironment_O" :#3# "BlockEnvironment_O")))
template <> class gctools::GCKind<core::BlockEnvironment_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__BlockEnvironment_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="gctools::GCVector_moveable<core::SymbolClassPair>" :#3=NAME "KIND_GCVECTOR_gctools__GCVector_moveable_core__SymbolClassPair_" :VALUE 274 :#4=CCLASS #S(#4# :#1# "gctools::GCVector_moveable<core::SymbolClassPair>" :TEMPLATE-SPECIALIZER T :#5=LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Data" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:48:9" :#8=CTYPE #S(CONSTANT-ARRAY-CTYPE :#1# NIL :ELEMENT-TYPE #S(#9=CXXRECORD-CTYPE :#1# "core::SymbolClassPair" :#3# "SymbolClassPair"))) #S(#6# :#7# "_End" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:47:9" :#8# #S(#10=UNCLASSIFIED-CTYPE :#1# "unsigned long")) #S(#6# :#7# "_Capacity" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:46:9" :#8# #S(#10# :#1# "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" #11="NO-NAME" #11# "capacity" "size" "data" #11# #11# #11#) :METADATA NIL) :#12=SPECIES #S(#12# :#3# :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :DUMP DUMPER-FOR-GCCONTAINER :#13=INDEX 3) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CONTAINERALLOC :#1# #2# :#3# "GCVector_moveable" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#8# #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::SymbolClassPair>" :#3# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#13# 0 :#8# #S(#9# :#1# "core::SymbolClassPair" :#3# "SymbolClassPair"))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<core::SymbolClassPair>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_core__SymbolClassPair_ ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::DirectoryIterator_O" :#3=NAME "KIND_LISPALLOC_core__DirectoryIterator_O" :VALUE 70 :#4=CCLASS #S(#4# :#1# "core::DirectoryIterator_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/fileSystem.h:132:5" :BASES ("core::Iterator_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_EndIterator" :#5# "/home/meister/Development/clasp/src/core/fileSystem.h:145:5" :#8=CTYPE #S(#9=CXXRECORD-CTYPE :#1# "boost::filesystem::directory_iterator" :#3# "directory_iterator")) #S(#6# :#7# "_CurrentIterator" :#5# "/home/meister/Development/clasp/src/core/fileSystem.h:144:5" :#8# #S(POINTER-CTYPE :#1# NIL :POINTEE #S(#9# :#1# "boost::filesystem::directory_iterator" :#3# "directory_iterator"))) #S(#6# :#7# "_Path" :#5# "/home/meister/Development/clasp/src/core/fileSystem.h:140:2" :#8# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Path_O>" :SPECIALIZER "class core::Path_O"))) :METHOD-NAMES (#10="NO-NAME" #10# #10# #10# "currentObject" "isDone" "next" "first" "setPath" "setupCurrentIterator" "create" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#11=SPECIES #S(#11# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "DirectoryIterator_O" :#5# "/home/meister/Development/clasp/src/core/fileSystem.h:132:5" :#8# #S(#9# :#1# "core::DirectoryIterator_O" :#3# "DirectoryIterator_O")))
template <> class gctools::GCKind<core::DirectoryIterator_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__DirectoryIterator_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::FileStatus_O" :#3=NAME "KIND_LISPALLOC_core__FileStatus_O" :VALUE 73 :#4=CCLASS #S(#4# :#1# "core::FileStatus_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/fileSystem.h:227:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_FileStatus" :#5# "/home/meister/Development/clasp/src/core/fileSystem.h:234:5" :#6=CTYPE #S(#7=CXXRECORD-CTYPE :#1# "boost::filesystem::file_status" :#3# "file_status"))) :METHOD-NAMES (#8="NO-NAME" #8# #8# #8# "isOther" "isSymlink" "isDirectory" "isRegularFile" "exists" "setFileStatus" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#9=SPECIES #S(#9# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "FileStatus_O" :#5# "/home/meister/Development/clasp/src/core/fileSystem.h:227:5" :#6# #S(#7# :#1# "core::FileStatus_O" :#3# "FileStatus_O")))
template <> class gctools::GCKind<core::FileStatus_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__FileStatus_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::PosixTimeDuration_O" :#3=NAME "KIND_LISPALLOC_core__PosixTimeDuration_O" :VALUE 72 :#4=CCLASS #S(#4# :#1# "core::PosixTimeDuration_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/posixTime.h:88:1" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Duration" :#5# "/home/meister/Development/clasp/src/core/posixTime.h:104:2" :#6=CTYPE #S(#7=CXXRECORD-CTYPE :#1# "boost::posix_time::time_duration" :#3# "time_duration"))) :METHOD-NAMES (#8="NO-NAME" #8# #8# #8# "toIsoString" "toSimpleString" "hours" "minutes" "seconds" "fractionalSeconds" "totalMicroseconds" "totalMilliseconds" "totalSeconds" "sub" "createDurationSince" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#9=SPECIES #S(#9# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "PosixTimeDuration_O" :#5# "/home/meister/Development/clasp/src/core/posixTime.h:88:1" :#6# #S(#7# :#1# "core::PosixTimeDuration_O" :#3# "PosixTimeDuration_O")))
template <> class gctools::GCKind<core::PosixTimeDuration_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__PosixTimeDuration_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::TagbodyFrame_O" :#3=NAME "KIND_LISPALLOC_core__TagbodyFrame_O" :VALUE 44 :#4=CCLASS #S(#4# :#1# "core::TagbodyFrame_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/activationFrame.h:440:5" :BASES ("core::ActivationFrame_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_ParentFrame" :#5# "/home/meister/Development/clasp/src/core/activationFrame.h:445:2" :#6=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::ActivationFrame_O>" :SPECIALIZER "class core::ActivationFrame_O"))) :METHOD-NAMES (#7="NO-NAME" #7# "asString" #7# #7# "_lookupTagbodyId" "summaryOfContents" "parentFrame" "parentFrameRef" "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "TagbodyFrame_O" :#5# "/home/meister/Development/clasp/src/core/activationFrame.h:440:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::TagbodyFrame_O" :#3# "TagbodyFrame_O")))
template <> class gctools::GCKind<core::TagbodyFrame_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__TagbodyFrame_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::Integer_O" :#3=NAME "KIND_LISPALLOC_core__Integer_O" :VALUE 108 :#4=CCLASS #S(#4# :#1# "core::Integer_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/numbers.h:209:5" :BASES ("core::Rational_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "__write__" "as_uint64" "shift" "bit_length" "oddp" "evenp" "createLongFloat" "create" "create" "create" "create" "create" "create" "create" "create" "create" "makeIntegerType" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("core::Bignum_O" "core::Fixnum_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Integer_O" :#5# "/home/meister/Development/clasp/src/core/numbers.h:209:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::Integer_O" :#3# "Integer_O")))
template <> class gctools::GCKind<core::Integer_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Integer_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::ExtendedChar_O" :#3=NAME "KIND_LISPALLOC_core__ExtendedChar_O" :VALUE 83 :#4=CCLASS #S(#4# :#1# "core::ExtendedChar_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/character.h:204:5" :BASES ("core::Character_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "initialize" #6# #6# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "ExtendedChar_O" :#5# "/home/meister/Development/clasp/src/core/character.h:204:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::ExtendedChar_O" :#3# "ExtendedChar_O")))
template <> class gctools::GCKind<core::ExtendedChar_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__ExtendedChar_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::SaveArchive_O" :#3=NAME "KIND_LISPALLOC_core__SaveArchive_O" :VALUE 76 :#4=CCLASS #S(#4# :#1# "core::SaveArchive_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/serialize.h:652:5" :BASES ("core::Archive_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_SNodeForObject" :#5# "/home/meister/Development/clasp/src/core/serialize.h:659:2" :#6=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::HashTable_O>" :SPECIALIZER "class core::HashTable_O"))) :METHOD-NAMES (#7="NO-NAME" #7# #7# #7# "put" "isSaveArchive" "getOrCreateSNodeForObjectIncRefCount" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("core::SexpSaveArchive_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "SaveArchive_O" :#5# "/home/meister/Development/clasp/src/core/serialize.h:652:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::SaveArchive_O" :#3# "SaveArchive_O")))
template <> class gctools::GCKind<core::SaveArchive_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__SaveArchive_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::Bignum_O" :#3=NAME "KIND_LISPALLOC_core__Bignum_O" :VALUE 109 :#4=CCLASS #S(#4# :#1# "core::Bignum_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/bignum.h:55:5" :BASES ("core::Integer_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_value" :#5# "/home/meister/Development/clasp/src/core/bignum.h:70:2" :#6=CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "__gmp_expr<__mpz_[1],__mpz_[1]>" :#3# NIL :ARGUMENTS (#S(#7=GC-TEMPLATE-ARGUMENT :#8=INDEX 0 :#6# #S(#9=CONSTANT-ARRAY-CTYPE :#1# NIL :#10=ELEMENT-TYPE #S(#11=CXXRECORD-CTYPE :#1# "(anonymous)" :#3# ""))) #S(#7# :#8# 1 :#6# #S(#9# :#1# NIL :#10# #S(#11# :#1# "(anonymous)" :#3# ""))))))) :METHOD-NAMES (#12="NO-NAME" #12# "log1" "oddp" "evenp" "sxhash" "as_long_float" "as_double" "as_float" "as_LongLongInt" "as_mpz" "as_uint64_string" "as_uint64" "as_int" "setFromString" "valueAsString" "eql" "eqn" "shift" "bit_length" "onePlus" "oneMinus" "minusp" "plusp" "zerop" "sign" "increment" "abs" "get_or_if_nil_default" "get" "set" "description" "copy" "decrement" "increment" "fits_sint_p" "__repr__" "ref" "number_type" "create" "create" "make" #12# #12# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#13=SPECIES #S(#13# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#8# 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Bignum_O" :#5# "/home/meister/Development/clasp/src/core/bignum.h:55:5" :#6# #S(#11# :#1# "core::Bignum_O" :#3# "Bignum_O")))
template <> class gctools::GCKind<core::Bignum_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Bignum_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::Instruction_O" :#3=NAME "KIND_LISPALLOC_llvmo__Instruction_O" :VALUE 165 :#4=CCLASS #S(#4# :#1# "llvmo::Instruction_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1932:5" :BASES ("llvmo::User_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "terminatorInstP" "setMetadata" #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("llvmo::AtomicRMWInst_O" "llvmo::StoreInst_O" "llvmo::PHINode_O" "llvmo::AtomicCmpXchgInst_O" "llvmo::LandingPadInst_O" "llvmo::UnaryInstruction_O" "llvmo::TerminatorInst_O" "llvmo::FenceInst_O" "llvmo::CallInst_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Instruction_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1932:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::Instruction_O" :#3# "Instruction_O")))
template <> class gctools::GCKind<llvmo::Instruction_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__Instruction_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::LogicalPathname_O" :#3=NAME "KIND_LISPALLOC_core__LogicalPathname_O" :VALUE 28 :#4=CCLASS #S(#4# :#1# "core::LogicalPathname_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/pathname.h:161:5" :BASES ("core::Pathname_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "LogicalPathname_O" :#5# "/home/meister/Development/clasp/src/core/pathname.h:161:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::LogicalPathname_O" :#3# "LogicalPathname_O")))
template <> class gctools::GCKind<core::LogicalPathname_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__LogicalPathname_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::StdClass_O" :#3=NAME "KIND_BOOTSTRAP_core__StdClass_O" :VALUE 217 :#4=CCLASS #S(#4# :#1# "core::StdClass_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/stdClass.h:46:5" :BASES ("core::Class_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :BOOTSTRAP :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 0) :CHILDREN ("core::StandardClass_O" "core::FuncallableStandardClass_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "StdClass_O" :#5# "/home/meister/Development/clasp/src/core/stdClass.h:46:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::StdClass_O" :#3# "StdClass_O")))
template <> class gctools::GCKind<core::StdClass_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_BOOTSTRAP_core__StdClass_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="gctools::GCVector_moveable<core::KeywordArgument>" :#3=NAME "KIND_GCVECTOR_gctools__GCVector_moveable_core__KeywordArgument_" :VALUE 275 :#4=CCLASS #S(#4# :#1# "gctools::GCVector_moveable<core::KeywordArgument>" :TEMPLATE-SPECIALIZER T :#5=LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Data" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:48:9" :#8=CTYPE #S(CONSTANT-ARRAY-CTYPE :#1# NIL :ELEMENT-TYPE #S(#9=CXXRECORD-CTYPE :#1# "core::KeywordArgument" :#3# "KeywordArgument"))) #S(#6# :#7# "_End" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:47:9" :#8# #S(#10=UNCLASSIFIED-CTYPE :#1# "unsigned long")) #S(#6# :#7# "_Capacity" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:46:9" :#8# #S(#10# :#1# "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" #11="NO-NAME" #11# "capacity" "size" "data" #11# #11# #11#) :METADATA NIL) :#12=SPECIES #S(#12# :#3# :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :DUMP DUMPER-FOR-GCCONTAINER :#13=INDEX 3) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CONTAINERALLOC :#1# #2# :#3# "GCVector_moveable" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#8# #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::KeywordArgument>" :#3# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#13# 0 :#8# #S(#9# :#1# "core::KeywordArgument" :#3# "KeywordArgument"))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<core::KeywordArgument>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_core__KeywordArgument_ ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::Real_O" :#3=NAME "KIND_LISPALLOC_core__Real_O" :VALUE 101 :#4=CCLASS #S(#4# :#1# "core::Real_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/numbers.h:159:5" :BASES ("core::Number_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "conjugate" "minusp" "plusp" "as_double" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("core::Float_O" "core::Rational_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Real_O" :#5# "/home/meister/Development/clasp/src/core/numbers.h:159:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::Real_O" :#3# "Real_O")))
template <> class gctools::GCKind<core::Real_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Real_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="gctools::GCVector_moveable<core::CacheRecord>" :#3=NAME "KIND_GCVECTOR_gctools__GCVector_moveable_core__CacheRecord_" :VALUE 276 :#4=CCLASS #S(#4# :#1# "gctools::GCVector_moveable<core::CacheRecord>" :TEMPLATE-SPECIALIZER T :#5=LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Data" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:48:9" :#8=CTYPE #S(CONSTANT-ARRAY-CTYPE :#1# NIL :ELEMENT-TYPE #S(#9=CXXRECORD-CTYPE :#1# "core::CacheRecord" :#3# "CacheRecord"))) #S(#6# :#7# "_End" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:47:9" :#8# #S(#10=UNCLASSIFIED-CTYPE :#1# "unsigned long")) #S(#6# :#7# "_Capacity" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:46:9" :#8# #S(#10# :#1# "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" #11="NO-NAME" #11# "capacity" "size" "data" #11# #11# #11#) :METADATA NIL) :#12=SPECIES #S(#12# :#3# :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :DUMP DUMPER-FOR-GCCONTAINER :#13=INDEX 3) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CONTAINERALLOC :#1# #2# :#3# "GCVector_moveable" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#8# #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::CacheRecord>" :#3# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#13# 0 :#8# #S(#9# :#1# "core::CacheRecord" :#3# "CacheRecord"))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<core::CacheRecord>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_core__CacheRecord_ ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::APInt_O" :#3=NAME "KIND_LISPALLOC_llvmo__APInt_O" :VALUE 141 :#4=CCLASS #S(#4# :#1# "llvmo::APInt_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1765:5" :BASES ("core::ExternalObject_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_value" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1770:2" :#6=CTYPE #S(#7=CXXRECORD-CTYPE :#1# "llvm::APInt" :#3# "APInt"))) :METHOD-NAMES (#8="NO-NAME" #8# "__repr__" #8# #8# "toString" "makeAPInt64" "makeAPInt32" "makeAPInt1" "makeAPIntWidth" "makeAPInt" "create" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#9=SPECIES #S(#9# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "APInt_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1765:5" :#6# #S(#7# :#1# "llvmo::APInt_O" :#3# "APInt_O")))
template <> class gctools::GCKind<llvmo::APInt_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__APInt_O ;
};
//GCTemplatedKind for #S(TEMPLATED-ENUM :#1=KEY #2="core::Iterator_O" :#3=NAME "KIND_TEMPLATED_LISPALLOC_core__Iterator_O" :VALUE 69 :#4=CCLASS #S(#4# :#1# #2# :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/iterator.h:41:1" :BASES ("core::T_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "currentObject" "notDone" "isDone" "next" "first" "templatedSizeof" "eql" #6# #6# "step" "unsafeElement" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :TEMPLATED-LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-TEMPLATED-LISPALLOCS :SKIP SKIPPER-FOR-TEMPLATED-LISPALLOCS :FINALIZE FINALIZER-FOR-TEMPLATED-LISPALLOCS :DUMP DUMPER-FOR-TEMPLATED-LISPALLOCS :#8=INDEX 2) :CHILDREN ("core::DirectoryIterator_O" "core::RecursiveDirectoryIterator_O") :IN-HIERARCHY T :ALL-ALLOCS (#S(LISPALLOC :#1# "clbind::Iterator<clang::CXXBaseSpecifier *,reg::null_type>" :#3# "Iterator" :#5# "/home/meister/Development/clasp/src/clbind/wrapped_iterator.h:39:5" :#9=CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "clbind::Iterator<clang::CXXBaseSpecifier *,reg::null_type>" :#3# NIL :ARGUMENTS (#S(#10=GC-TEMPLATE-ARGUMENT :#8# 0 :#9# #S(POINTER-CTYPE :#1# NIL :POINTEE #S(#11=CXXRECORD-CTYPE :#1# "clang::CXXBaseSpecifier" :#3# "CXXBaseSpecifier"))) #S(#10# :#8# 1 :#9# #S(#11# :#1# "reg::null_type" :#3# "null_type")))))))
template <> class gctools::GCKind<core::Iterator_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_TEMPLATED_LISPALLOC_core__Iterator_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::CatchEnvironment_O" :#3=NAME "KIND_LISPALLOC_core__CatchEnvironment_O" :VALUE 33 :#4=CCLASS #S(#4# :#1# "core::CatchEnvironment_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/environment.h:650:5" :BASES ("core::CompileTimeEnvironment_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "summaryOfContents" "make" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "CatchEnvironment_O" :#5# "/home/meister/Development/clasp/src/core/environment.h:650:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::CatchEnvironment_O" :#3# "CatchEnvironment_O")))
template <> class gctools::GCKind<core::CatchEnvironment_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__CatchEnvironment_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::DISubprogram_O" :#3=NAME "KIND_LISPALLOC_llvmo__DISubprogram_O" :VALUE 57 :#4=CCLASS #S(#4# :#1# "llvmo::DISubprogram_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/debugInfoExpose.h:340:5" :BASES ("llvm::DISubprogram" "llvmo::DebugInfo_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# #6# #6# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "DISubprogram_O" :#5# "/home/meister/Development/clasp/src/llvmo/debugInfoExpose.h:340:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::DISubprogram_O" :#3# "DISubprogram_O")))
template <> class gctools::GCKind<llvmo::DISubprogram_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__DISubprogram_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::LambdaListHandler_O" :#3=NAME "KIND_LISPALLOC_core__LambdaListHandler_O" :VALUE 68 :#4=CCLASS #S(#4# :#1# "core::LambdaListHandler_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/lambdaListHandler.h:102:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_LexicalVariableNamesForDebugging" :#5# "/home/meister/Development/clasp/src/core/lambdaListHandler.h:129:2" :#8=CTYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::VectorObjects_O>" :#10=SPECIALIZER "class core::VectorObjects_O")) #S(#6# :#7# "_NumberOfLexicalVariables" :#5# "/home/meister/Development/clasp/src/core/lambdaListHandler.h:128:2" :#8# #S(#11=UNCLASSIFIED-CTYPE :#1# "int")) #S(#6# :#7# "_Comment" :#5# "/home/meister/Development/clasp/src/core/lambdaListHandler.h:126:9" :#8# #S(#12=CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "gctools::GCString<char,gctools::GCStringAllocator<gctools::GCString_moveable<char>>>" :#3# NIL :#13=ARGUMENTS (#S(#14=GC-TEMPLATE-ARGUMENT :#15=INDEX 0 :#8# #S(#11# :#1# "char")) #S(#14# :#15# 1 :#8# #S(#12# :#1# "gctools::GCStringAllocator<gctools::GCString_moveable<char>>" :#3# NIL :#13# (#S(#14# :#15# 0 :#8# #S(GCSTRING-MOVEABLE-CTYPE :#1# "gctools::GCString_moveable<char>" :#3# "GCString_moveable" :#13# (#S(#14# :#15# 0 :#8# #S(#11# :#1# "char"))))))))))) #S(#6# :#7# "_AuxArguments" :#5# "/home/meister/Development/clasp/src/core/lambdaListHandler.h:125:9" :#8# #S(#12# :#1# "gctools::Vec0<core::AuxArgument>" :#3# NIL :#13# (#S(#14# :#15# 0 :#8# #S(#16=CXXRECORD-CTYPE :#1# "core::AuxArgument" :#3# "AuxArgument"))))) #S(#6# :#7# "_AllowOtherKeys" :#5# "/home/meister/Development/clasp/src/core/lambdaListHandler.h:124:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::T_O>" :#10# "class core::T_O")) #S(#6# :#7# "_KeywordArguments" :#5# "/home/meister/Development/clasp/src/core/lambdaListHandler.h:123:9" :#8# #S(#12# :#1# "gctools::Vec0<core::KeywordArgument>" :#3# NIL :#13# (#S(#14# :#15# 0 :#8# #S(#16# :#1# "core::KeywordArgument" :#3# "KeywordArgument"))))) #S(#6# :#7# "_RestArgument" :#5# "/home/meister/Development/clasp/src/core/lambdaListHandler.h:122:2" :#8# #S(#16# :#1# "core::RestArgument" :#3# "RestArgument")) #S(#6# :#7# "_OptionalArguments" :#5# "/home/meister/Development/clasp/src/core/lambdaListHandler.h:121:9" :#8# #S(#12# :#1# "gctools::Vec0<core::OptionalArgument>" :#3# NIL :#13# (#S(#14# :#15# 0 :#8# #S(#16# :#1# "core::OptionalArgument" :#3# "OptionalArgument"))))) #S(#6# :#7# "_RequiredArguments" :#5# "/home/meister/Development/clasp/src/core/lambdaListHandler.h:120:9" :#8# #S(#12# :#1# "gctools::Vec0<core::RequiredArgument>" :#3# NIL :#13# (#S(#14# :#15# 0 :#8# #S(#16# :#1# "core::RequiredArgument" :#3# "RequiredArgument"))))) #S(#6# :#7# "_DeclareSpecifierList" :#5# "/home/meister/Development/clasp/src/core/lambdaListHandler.h:119:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::Cons_O>" :#10# "class core::Cons_O")) #S(#6# :#7# "_SpecialSymbolSet" :#5# "/home/meister/Development/clasp/src/core/lambdaListHandler.h:118:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::SymbolSet_O>" :#10# "class core::SymbolSet_O")) #S(#6# :#7# "_ClassifiedSymbolList" :#5# "/home/meister/Development/clasp/src/core/lambdaListHandler.h:117:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::Cons_O>" :#10# "class core::Cons_O")) #S(#6# :#7# "_LambdaList" :#5# "/home/meister/Development/clasp/src/core/lambdaListHandler.h:116:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::Cons_O>" :#10# "class core::Cons_O")) #S(#6# :#7# "_CreatesBindings" :#5# "/home/meister/Development/clasp/src/core/lambdaListHandler.h:115:2" :#8# #S(#11# :#1# "_Bool"))) :METHOD-NAMES (#17="NO-NAME" #17# #17# #17# "partsAsString" "__repr__" "processLambdaListHandler" "calculateNamesOfLexicalVariablesForDebugging" "namesOfLexicalVariablesForDebugging" "namesOfLexicalVariables" "classifiedSymbols" "numberOfLexicalVariables" "allowOtherKeys" "numberOfAuxArguments" "numberOfKeyArguments" "numberOfRestArguments" "numberOfOptionalArguments" "numberOfRequiredArguments" "requiredLexicalArgumentsOnlyP" "lambdaListParts" "createBindingsInScope_argArray_TPtr" "createBindingsInScope_argArray" "createBindingsInScope_af" "parse_lambda_list_declares" "single_dispatch_on_argument" "create_required_arguments" "recursively_build_handlers_count_arguments" "classifyTarget" "identifySpecialSymbols" "classifySymbols" "classifyOneSymbol" "process_declares" "getComment" "setComment" "create" "create" "createRecursive" "process_macro_lambda_list" "process_single_dispatch_lambda_list" "makeLambdaListHandler" "endRequiredArguments" "beginRequiredArguments" "endRequiredArguments" "beginRequiredArguments" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#18=SPECIES #S(#18# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#15# 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "LambdaListHandler_O" :#5# "/home/meister/Development/clasp/src/core/lambdaListHandler.h:102:5" :#8# #S(#16# :#1# "core::LambdaListHandler_O" :#3# "LambdaListHandler_O")))
template <> class gctools::GCKind<core::LambdaListHandler_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__LambdaListHandler_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::ValueEnvironment_O" :#3=NAME "KIND_LISPALLOC_core__ValueEnvironment_O" :VALUE 40 :#4=CCLASS #S(#4# :#1# "core::ValueEnvironment_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/environment.h:347:5" :BASES ("core::RuntimeVisibleEnvironment_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_ActivationFrame" :#5# "/home/meister/Development/clasp/src/core/environment.h:355:2" :#8=CTYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::ActivationFrame_O>" :#10=SPECIALIZER "class core::ActivationFrame_O")) #S(#6# :#7# "_SymbolIndex" :#5# "/home/meister/Development/clasp/src/core/environment.h:354:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::HashTableEq_O>" :#10# "class core::HashTableEq_O"))) :METHOD-NAMES (#11="NO-NAME" #11# #11# #11# "activationFrameElementBoundP" "getActivationFrame" "new_binding" "_updateValue" "lexicalSpecialP" "_findSymbolMacro" "_findValue" "defineSpecialBinding" "defineLexicalBinding" "allLocalNamesAsCons" "allLocalNames" "summaryOfContents" "_lookupValue" "setupForLambdaListHandler" "createForLocallySpecialEntries" "createForNumberOfEntries" "createForLambdaListHandler" "createSingleTopLevelEnvironment" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#12=SPECIES #S(#12# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "ValueEnvironment_O" :#5# "/home/meister/Development/clasp/src/core/environment.h:347:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::ValueEnvironment_O" :#3# "ValueEnvironment_O")))
template <> class gctools::GCKind<core::ValueEnvironment_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__ValueEnvironment_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::ConstantArray_O" :#3=NAME "KIND_LISPALLOC_llvmo__ConstantArray_O" :VALUE 191 :#4=CCLASS #S(#4# :#1# "llvmo::ConstantArray_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:884:5" :BASES ("llvmo::Constant_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "get" #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "ConstantArray_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:884:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::ConstantArray_O" :#3# "ConstantArray_O")))
template <> class gctools::GCKind<llvmo::ConstantArray_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__ConstantArray_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::FileStream_O" :#3=NAME "KIND_LISPALLOC_core__FileStream_O" :VALUE 17 :#4=CCLASS #S(#4# :#1# "core::FileStream_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/lispStream.h:377:5" :BASES ("core::AnsiStream_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_ElementType" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:389:9" :#8=CTYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :#10=SPECIALIZER "class core::T_O")) #S(#6# :#7# "_Filename" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:388:9" :#8# #S(#9# :#1# "gctools::smart_ptr<core::T_O>" :#10# "class core::T_O"))) :METHOD-NAMES (#11="NO-NAME" #11# #11# #11# #11# "filename" "__repr__" #11# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#12=SPECIES #S(#12# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("core::IOFileStream_O" "core::IOStreamStream_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "FileStream_O" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:377:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::FileStream_O" :#3# "FileStream_O")))
template <> class gctools::GCKind<core::FileStream_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__FileStream_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::StructureObject_O" :#3=NAME "KIND_LISPALLOC_core__StructureObject_O" :VALUE 67 :#4=CCLASS #S(#4# :#1# "core::StructureObject_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/structureObject.h:54:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Slots" :#5# "/home/meister/Development/clasp/src/core/structureObject.h:67:9" :#8=CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "gctools::Vec0<gctools::smart_ptr<core::T_O>>" :#3# NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#9=INDEX 0 :#8# #S(#10=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :#11=SPECIALIZER "class core::T_O"))))) #S(#6# :#7# "_Type" :#5# "/home/meister/Development/clasp/src/core/structureObject.h:66:2" :#8# #S(#10# :#1# "gctools::smart_ptr<core::T_O>" :#11# "class core::T_O"))) :METHOD-NAMES (#12="NO-NAME" #12# #12# #12# "copyStructure" "oinstancepSTAR" "__repr__" "__write__" "allocate_slot_storage" "structureType" "structureAsList" "structureSet" "structureRef" "create" "initialize" "archiveBase" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#13=SPECIES #S(#13# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#9# 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "StructureObject_O" :#5# "/home/meister/Development/clasp/src/core/structureObject.h:54:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::StructureObject_O" :#3# "StructureObject_O")))
template <> class gctools::GCKind<core::StructureObject_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__StructureObject_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::DebugInfo_O" :#3=NAME "KIND_LISPALLOC_llvmo__DebugInfo_O" :VALUE 53 :#4=CCLASS #S(#4# :#1# "llvmo::DebugInfo_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/debugInfoExpose.h:76:5" :BASES ("core::T_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# #6# #6# #6# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("llvmo::DICompositeType_O" "llvmo::DIBasicType_O" "llvmo::DIType_O" "llvmo::DISubprogram_O" "llvmo::DIArray_O" "llvmo::DITypeArray_O" "llvmo::DISubroutineType_O" "llvmo::DIScope_O" "llvmo::DIFile_O" "llvmo::DIDescriptor_O" "llvmo::DICompileUnit_O" "llvmo::DIDerivedType_O" "llvmo::DILexicalBlock_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "DebugInfo_O" :#5# "/home/meister/Development/clasp/src/llvmo/debugInfoExpose.h:76:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::DebugInfo_O" :#3# "DebugInfo_O")))
template <> class gctools::GCKind<llvmo::DebugInfo_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__DebugInfo_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::Path_O" :#3=NAME "KIND_LISPALLOC_core__Path_O" :VALUE 52 :#4=CCLASS #S(#4# :#1# "core::Path_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/fileSystem.h:44:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Path" :#5# "/home/meister/Development/clasp/src/core/fileSystem.h:55:2" :#6=CTYPE #S(#7=CXXRECORD-CTYPE :#1# "boost::filesystem::path" :#3# "path"))) :METHOD-NAMES (#8="NO-NAME" #8# #8# #8# "exists" "glob" "parts" "path_append" #8# "replaceExtension" "appendToExtension" "extension" "stem" "__repr__" "asString" "fileName" "parent_path" "sxhash" "setPathFromString" "setPath" "last_write_time" "absolute" "copyPath" "isAbsolute" "lt" "getPath" "pathnameDesignator" "create" "create" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#9=SPECIES #S(#9# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Path_O" :#5# "/home/meister/Development/clasp/src/core/fileSystem.h:44:5" :#6# #S(#7# :#1# "core::Path_O" :#3# "Path_O")))
template <> class gctools::GCKind<core::Path_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Path_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::SingleDispatchGenericFunction_O" :#3=NAME "KIND_LISPALLOC_core__SingleDispatchGenericFunction_O" :VALUE 89 :#4=CCLASS #S(#4# :#1# "core::SingleDispatchGenericFunction_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/singleDispatchGenericFunction.h:88:5" :BASES ("core::Function_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "methods" "create" #6# #6# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "SingleDispatchGenericFunction_O" :#5# "/home/meister/Development/clasp/src/core/singleDispatchGenericFunction.h:88:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::SingleDispatchGenericFunction_O" :#3# "SingleDispatchGenericFunction_O")))
template <> class gctools::GCKind<core::SingleDispatchGenericFunction_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__SingleDispatchGenericFunction_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::InstanceClosure" :#3=NAME "KIND_CLASSALLOC_core__InstanceClosure" :VALUE 277 :#4=CCLASS #S(#4# :#1# "core::InstanceClosure" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/instance.h:79:5" :BASES ("core::FunctionClosure") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "instance" :#5# "/home/meister/Development/clasp/src/core/instance.h:83:9" :#8=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")) #S(#6# :#7# "entryPoint" :#5# "/home/meister/Development/clasp/src/core/instance.h:82:2" :#8# #S(POINTER-CTYPE :#1# NIL :POINTEE #S(UNCLASSIFIED-CTYPE :#1# "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Instance_O>, int, gctools::smart_ptr<core::T_O> *)")))) :METHOD-NAMES (#9="NO-NAME" #9# #9# #9# #9# "lambdaListHandler" "invoke" "describe" "templatedSizeof" #9# #9# #9# #9#) :METADATA NIL) :#10=SPECIES #S(#10# :#3# :CLASSALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 6) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CLASSALLOC :#1# #2# :#3# "InstanceClosure" :#5# "/home/meister/Development/clasp/src/core/instance.h:79:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::InstanceClosure" :#3# "InstanceClosure")))
template <> class gctools::GCKind<core::InstanceClosure> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_CLASSALLOC_core__InstanceClosure ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="gctools::GCVector_moveable<core::RequiredArgument>" :#3=NAME "KIND_GCVECTOR_gctools__GCVector_moveable_core__RequiredArgument_" :VALUE 278 :#4=CCLASS #S(#4# :#1# "gctools::GCVector_moveable<core::RequiredArgument>" :TEMPLATE-SPECIALIZER T :#5=LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Data" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:48:9" :#8=CTYPE #S(CONSTANT-ARRAY-CTYPE :#1# NIL :ELEMENT-TYPE #S(#9=CXXRECORD-CTYPE :#1# "core::RequiredArgument" :#3# "RequiredArgument"))) #S(#6# :#7# "_End" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:47:9" :#8# #S(#10=UNCLASSIFIED-CTYPE :#1# "unsigned long")) #S(#6# :#7# "_Capacity" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:46:9" :#8# #S(#10# :#1# "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" #11="NO-NAME" #11# "capacity" "size" "data" #11# #11# #11#) :METADATA NIL) :#12=SPECIES #S(#12# :#3# :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :DUMP DUMPER-FOR-GCCONTAINER :#13=INDEX 3) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CONTAINERALLOC :#1# #2# :#3# "GCVector_moveable" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#8# #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::RequiredArgument>" :#3# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#13# 0 :#8# #S(#9# :#1# "core::RequiredArgument" :#3# "RequiredArgument"))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<core::RequiredArgument>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_core__RequiredArgument_ ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::Ratio_O" :#3=NAME "KIND_LISPALLOC_core__Ratio_O" :VALUE 107 :#4=CCLASS #S(#4# :#1# "core::Ratio_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/numbers.h:785:5" :BASES ("core::Rational_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_denominator" :#5# "/home/meister/Development/clasp/src/core/numbers.h:798:2" :#8=CTYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Integer_O>" :#10=SPECIALIZER "class core::Integer_O")) #S(#6# :#7# "_numerator" :#5# "/home/meister/Development/clasp/src/core/numbers.h:797:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::Integer_O>" :#10# "class core::Integer_O"))) :METHOD-NAMES (#11="NO-NAME" #11# #11# #11# "minusp" "plusp" "as_long_float" "as_double" "as_float" "oneMinus" "onePlus" "eql" "eqn" "setFromString" "valueAsString" "isnan" "abs" "signum" "__repr__" "copy" "sxhash" "denominator_as_mpz" "numerator_as_mpz" "den" "num" "denominator" "numerator" "number_type" "create" "create" "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#12=SPECIES #S(#12# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Ratio_O" :#5# "/home/meister/Development/clasp/src/core/numbers.h:785:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::Ratio_O" :#3# "Ratio_O")))
template <> class gctools::GCKind<core::Ratio_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Ratio_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::DIType_O" :#3=NAME "KIND_LISPALLOC_llvmo__DIType_O" :VALUE 56 :#4=CCLASS #S(#4# :#1# "llvmo::DIType_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/debugInfoExpose.h:397:5" :BASES ("llvm::DIType" "llvmo::DebugInfo_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# #6# #6# #6# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "DIType_O" :#5# "/home/meister/Development/clasp/src/llvmo/debugInfoExpose.h:397:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::DIType_O" :#3# "DIType_O")))
template <> class gctools::GCKind<llvmo::DIType_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__DIType_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::ConstantPointerNull_O" :#3=NAME "KIND_LISPALLOC_llvmo__ConstantPointerNull_O" :VALUE 190 :#4=CCLASS #S(#4# :#1# "llvmo::ConstantPointerNull_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3049:5" :BASES ("llvmo::Constant_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "__repr__" #6# #6# "create" "set_wrapped" "wrappedPtr" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "ConstantPointerNull_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3049:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::ConstantPointerNull_O" :#3# "ConstantPointerNull_O")))
template <> class gctools::GCKind<llvmo::ConstantPointerNull_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__ConstantPointerNull_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>" :#3=NAME "KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Symbol_O__" :VALUE 279 :#4=CCLASS #S(#4# :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>" :TEMPLATE-SPECIALIZER T :#5=LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Data" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:48:9" :#8=CTYPE #S(CONSTANT-ARRAY-CTYPE :#1# NIL :ELEMENT-TYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Symbol_O>" :#10=SPECIALIZER "class core::Symbol_O"))) #S(#6# :#7# "_End" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:47:9" :#8# #S(#11=UNCLASSIFIED-CTYPE :#1# "unsigned long")) #S(#6# :#7# "_Capacity" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:46:9" :#8# #S(#11# :#1# "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" #12="NO-NAME" #12# "capacity" "size" "data" #12# #12# #12#) :METADATA NIL) :#13=SPECIES #S(#13# :#3# :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :DUMP DUMPER-FOR-GCCONTAINER :#14=INDEX 3) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CONTAINERALLOC :#1# #2# :#3# "GCVector_moveable" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#8# #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>" :#3# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#14# 0 :#8# #S(#9# :#1# "gctools::smart_ptr<core::Symbol_O>" :#10# "class core::Symbol_O"))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Symbol_O__ ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::SimpleBitVector_O" :#3=NAME "KIND_LISPALLOC_core__SimpleBitVector_O" :VALUE 124 :#4=CCLASS #S(#4# :#1# "core::SimpleBitVector_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/bitVector.h:65:1" :BASES ("core::BitVector_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "bits" :#5# "/home/meister/Development/clasp/src/core/bitVector.h:71:5" :#8=CTYPE #S(#9=CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "std::vector<unsigned char,std::allocator<unsigned char>>" :#3# NIL :#10=ARGUMENTS (#S(#11=GC-TEMPLATE-ARGUMENT :#12=INDEX 0 :#8# #S(#13=UNCLASSIFIED-CTYPE :#1# "unsigned char")) #S(#11# :#12# 1 :#8# #S(#9# :#1# "std::allocator<unsigned char>" :#3# NIL :#10# (#S(#11# :#12# 0 :#8# #S(#13# :#1# "unsigned char")))))))) #S(#6# :#7# "_Length" :#5# "/home/meister/Development/clasp/src/core/bitVector.h:70:5" :#8# #S(#13# :#1# "unsigned int"))) :METHOD-NAMES (#14="NO-NAME" #14# #14# #14# "rowMajorAref" "rowMajorAset" "deepCopy" "dump" "dumpToStream" "asString" "isZero" "countSet" "bitXor" "bitAnd" "bitOr" "inPlaceXor" "inPlaceAnd" "inPlaceOr" "lowestIndex" "sxhash" "erase" "testBit" "setBit" "equal" "setOnIndices" "getOnIndices" "dimension" "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#15=SPECIES #S(#15# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#12# 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "SimpleBitVector_O" :#5# "/home/meister/Development/clasp/src/core/bitVector.h:65:1" :#8# #S(CXXRECORD-CTYPE :#1# "core::SimpleBitVector_O" :#3# "SimpleBitVector_O")))
template <> class gctools::GCKind<core::SimpleBitVector_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__SimpleBitVector_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::EngineBuilder_O" :#3=NAME "KIND_LISPALLOC_llvmo__EngineBuilder_O" :VALUE 140 :#4=CCLASS #S(#4# :#1# "llvmo::EngineBuilder_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1593:5" :BASES ("core::ExternalObject_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_ErrorStr" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1601:2" :#8=CTYPE #S(#9=CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" :#3# NIL :#10=ARGUMENTS (#S(#11=GC-TEMPLATE-ARGUMENT :#12=INDEX 0 :#8# #S(#13=UNCLASSIFIED-CTYPE :#1# "char")) #S(#11# :#12# 1 :#8# #S(#9# :#1# "std::char_traits<char>" :#3# NIL :#10# (#S(#11# :#12# 0 :#8# #S(#13# :#1# "char"))))) #S(#11# :#12# 2 :#8# #S(#9# :#1# "std::allocator<char>" :#3# NIL :#10# (#S(#11# :#12# 0 :#8# #S(#13# :#1# "char")))))))) #S(#6# :#7# "_ptr" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1600:2" :#8# #S(POINTER-CTYPE :#1# NIL :POINTEE #S(#14=CXXRECORD-CTYPE :#1# "llvm::EngineBuilder" :#3# "EngineBuilder")))) :METHOD-NAMES (#15="NO-NAME" #15# "setTargetOptions" "setEngineKind" "createExecutionEngine" "make" #15# #15# "error_string" "set_wrapped" "wrappedPtr" "wrappedPtr" "externalObject" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#16=SPECIES #S(#16# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#12# 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "EngineBuilder_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1593:5" :#8# #S(#14# :#1# "llvmo::EngineBuilder_O" :#3# "EngineBuilder_O")))
template <> class gctools::GCKind<llvmo::EngineBuilder_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__EngineBuilder_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="asttooling::RegMap::RegistryMaps" :#3=NAME "KIND_ROOTCLASSALLOC_asttooling__RegMap__RegistryMaps" :VALUE 2 :#4=CCLASS #S(#4# :#1# "asttooling::RegMap::RegistryMaps" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/asttooling/Registry.h:69:9" :BASES NIL :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "Constructors" :#5# "/home/meister/Development/clasp/src/asttooling/Registry.h:107:13" :#8=CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "gctools::Vec0<asttooling::RegMap::SymbolMatcherDescriptorPair>" :#3# NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#9=INDEX 0 :#8# #S(#10=CXXRECORD-CTYPE :#1# "asttooling::RegMap::SymbolMatcherDescriptorPair" :#3# "SymbolMatcherDescriptorPair"))))) #S(#6# :#7# "Initialized" :#5# "/home/meister/Development/clasp/src/asttooling/Registry.h:106:13" :#8# #S(UNCLASSIFIED-CTYPE :#1# "_Bool"))) :METHOD-NAMES (#11="NO-NAME" #11# "_registerMatcher" "find" "constructors" "end" "begin" "end" "begin" "lazyInitialize" #11# #11#) :METADATA (:METADATA_ALWAYS_FIX_POINTERS_TO_DERIVED_CLASSES)) :#12=SPECIES #S(#12# :#3# :ROOTCLASSALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#9# 7) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(ROOTCLASSALLOC :#1# #2# :#3# "RegistryMaps" :#5# "/home/meister/Development/clasp/src/asttooling/Registry.h:69:9" :#8# #S(#10# :#1# "asttooling::RegMap::RegistryMaps" :#3# "RegistryMaps")))
template <> class gctools::GCKind<asttooling::RegMap::RegistryMaps> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_ROOTCLASSALLOC_asttooling__RegMap__RegistryMaps ;
};
//GCTemplatedKind for #S(TEMPLATED-ENUM :#1=KEY #2="clbind::ConstructorCreator" :#3=NAME "KIND_TEMPLATED_CLASSALLOC_clbind__ConstructorCreator" :VALUE 4 :#4=CCLASS #S(#4# :#1# #2# :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/clbind/constructor.h:47:5" :BASES ("core::Creator") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_mostDerivedClassSymbol" :#5# "/home/meister/Development/clasp/src/clbind/constructor.h:50:9" :#6=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O"))) :METHOD-NAMES (#7="NO-NAME" #7# #7# #7# #7# #7#) :METADATA NIL) :#8=SPECIES #S(#8# :#3# :TEMPLATED-CLASSALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-TEMPLATED-LISPALLOCS :SKIP SKIPPER-FOR-TEMPLATED-LISPALLOCS :FINALIZE FINALIZER-FOR-TEMPLATED-LISPALLOCS :DUMP DUMPER-FOR-TEMPLATED-LISPALLOCS :#9=INDEX 8) :CHILDREN NIL :IN-HIERARCHY T :ALL-ALLOCS (#S(#10=CLASSALLOC :#1# "clbind::DerivableDefaultConstructorCreator<asttooling::DerivableASTFrontendAction>" :#3# "DerivableDefaultConstructorCreator" :#5# "/home/meister/Development/clasp/src/clbind/constructor.h:129:5" :#6# #S(#11=CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "clbind::DerivableDefaultConstructorCreator<asttooling::DerivableASTFrontendAction>" :#3# NIL :#12=ARGUMENTS (#S(#13=GC-TEMPLATE-ARGUMENT :#9# 0 :#6# #S(#14=CXXRECORD-CTYPE :#1# "asttooling::DerivableASTFrontendAction" :#3# "DerivableASTFrontendAction"))))) #S(#10# :#1# "clbind::DefaultConstructorCreator<clang::ast_matchers::MatchFinder,clang::ast_matchers::MatchFinder *>" :#3# "DefaultConstructorCreator" :#5# "/home/meister/Development/clasp/src/clbind/constructor.h:57:5" :#6# #S(#11# :#1# "clbind::DefaultConstructorCreator<clang::ast_matchers::MatchFinder,clang::ast_matchers::MatchFinder *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::ast_matchers::MatchFinder" :#3# "MatchFinder")) #S(#13# :#9# 1 :#6# #S(#15=POINTER-CTYPE :#1# NIL :#16=POINTEE #S(#14# :#1# "clang::ast_matchers::MatchFinder" :#3# "MatchFinder")))))) #S(#10# :#1# "clbind::DefaultConstructorCreator<clang::tooling::ClangStripOutputAdjuster,clang::tooling::ClangStripOutputAdjuster *>" :#3# "DefaultConstructorCreator" :#5# "/home/meister/Development/clasp/src/clbind/constructor.h:57:5" :#6# #S(#11# :#1# "clbind::DefaultConstructorCreator<clang::tooling::ClangStripOutputAdjuster,clang::tooling::ClangStripOutputAdjuster *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::tooling::ClangStripOutputAdjuster" :#3# "ClangStripOutputAdjuster")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::tooling::ClangStripOutputAdjuster" :#3# "ClangStripOutputAdjuster")))))) #S(#10# :#1# "clbind::DerivableDefaultConstructorCreator<asttooling::DerivableArgumentsAdjuster>" :#3# "DerivableDefaultConstructorCreator" :#5# "/home/meister/Development/clasp/src/clbind/constructor.h:129:5" :#6# #S(#11# :#1# "clbind::DerivableDefaultConstructorCreator<asttooling::DerivableArgumentsAdjuster>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "asttooling::DerivableArgumentsAdjuster" :#3# "DerivableArgumentsAdjuster"))))) #S(#10# :#1# "clbind::DerivableDefaultConstructorCreator<asttooling::DerivableMatchCallback>" :#3# "DerivableDefaultConstructorCreator" :#5# "/home/meister/Development/clasp/src/clbind/constructor.h:129:5" :#6# #S(#11# :#1# "clbind::DerivableDefaultConstructorCreator<asttooling::DerivableMatchCallback>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "asttooling::DerivableMatchCallback" :#3# "DerivableMatchCallback"))))) #S(#10# :#1# "clbind::DerivableDefaultConstructorCreator<asttooling::DerivableSyntaxOnlyAction>" :#3# "DerivableDefaultConstructorCreator" :#5# "/home/meister/Development/clasp/src/clbind/constructor.h:129:5" :#6# #S(#11# :#1# "clbind::DerivableDefaultConstructorCreator<asttooling::DerivableSyntaxOnlyAction>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "asttooling::DerivableSyntaxOnlyAction" :#3# "DerivableSyntaxOnlyAction"))))) #S(#10# :#1# "clbind::DefaultConstructorCreator<clang::CompilerInstance,clang::CompilerInstance *>" :#3# "DefaultConstructorCreator" :#5# "/home/meister/Development/clasp/src/clbind/constructor.h:57:5" :#6# #S(#11# :#1# "clbind::DefaultConstructorCreator<clang::CompilerInstance,clang::CompilerInstance *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::CompilerInstance" :#3# "CompilerInstance")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::CompilerInstance" :#3# "CompilerInstance")))))) #S(#10# :#1# "clbind::DefaultConstructorCreator<asttooling::Diagnostics,asttooling::Diagnostics *>" :#3# "DefaultConstructorCreator" :#5# "/home/meister/Development/clasp/src/clbind/constructor.h:57:5" :#6# #S(#11# :#1# "clbind::DefaultConstructorCreator<asttooling::Diagnostics,asttooling::Diagnostics *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "asttooling::Diagnostics" :#3# "Diagnostics")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "asttooling::Diagnostics" :#3# "Diagnostics")))))) #S(#10# :#1# "clbind::DefaultConstructorCreator<clang::tooling::ClangSyntaxOnlyAdjuster,clang::tooling::ClangSyntaxOnlyAdjuster *>" :#3# "DefaultConstructorCreator" :#5# "/home/meister/Development/clasp/src/clbind/constructor.h:57:5" :#6# #S(#11# :#1# "clbind::DefaultConstructorCreator<clang::tooling::ClangSyntaxOnlyAdjuster,clang::tooling::ClangSyntaxOnlyAdjuster *>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "clang::tooling::ClangSyntaxOnlyAdjuster" :#3# "ClangSyntaxOnlyAdjuster")) #S(#13# :#9# 1 :#6# #S(#15# :#1# NIL :#16# #S(#14# :#1# "clang::tooling::ClangSyntaxOnlyAdjuster" :#3# "ClangSyntaxOnlyAdjuster")))))) #S(#10# :#1# "clbind::DerivableDefaultConstructorCreator<asttooling::DerivableFrontendActionFactory>" :#3# "DerivableDefaultConstructorCreator" :#5# "/home/meister/Development/clasp/src/clbind/constructor.h:129:5" :#6# #S(#11# :#1# "clbind::DerivableDefaultConstructorCreator<asttooling::DerivableFrontendActionFactory>" :#3# NIL :#12# (#S(#13# :#9# 0 :#6# #S(#14# :#1# "asttooling::DerivableFrontendActionFactory" :#3# "DerivableFrontendActionFactory")))))))
template <> class gctools::GCKind<clbind::ConstructorCreator> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_TEMPLATED_CLASSALLOC_clbind__ConstructorCreator ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="clbind::ClassRep_O" :#3=NAME "KIND_LISPALLOC_clbind__ClassRep_O" :VALUE 221 :#4=CCLASS #S(#4# :#1# "clbind::ClassRep_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/clbind/class_rep.h:93:5" :BASES ("core::BuiltInClass_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "m_derivable" :#5# "/home/meister/Development/clasp/src/clbind/class_rep.h:199:9" :#8=CTYPE #S(#9=UNCLASSIFIED-CTYPE :#1# "_Bool")) #S(#6# :#7# "m_classes" :#5# "/home/meister/Development/clasp/src/clbind/class_rep.h:198:9" :#8# #S(#10=POINTER-CTYPE :#1# NIL :#11=POINTEE #S(#12=CXXRECORD-CTYPE :#1# "clbind::detail::class_id_map" :#3# "class_id_map"))) #S(#6# :#7# "m_casts" :#5# "/home/meister/Development/clasp/src/clbind/class_rep.h:196:9" :#8# #S(#10# :#1# NIL :#11# #S(#12# :#1# "clbind::detail::cast_graph" :#3# "cast_graph"))) #S(#6# :#7# "m_name" :#5# "/home/meister/Development/clasp/src/clbind/class_rep.h:194:9" :#8# #S(#10# :#1# NIL :#11# #S(#9# :#1# "char"))) #S(#6# :#7# "m_bases" :#5# "/home/meister/Development/clasp/src/clbind/class_rep.h:191:9" :#8# #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "gctools::Vec0<gctools::smart_ptr<core::Cons_O>>" :#3# NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#13=INDEX 0 :#8# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Cons_O>" :SPECIALIZER "class core::Cons_O"))))) #S(#6# :#7# "m_type" :#5# "/home/meister/Development/clasp/src/clbind/class_rep.h:186:9" :#8# #S(#12# :#1# "clbind::type_id" :#3# "type_id"))) :METHOD-NAMES (#14="NO-NAME" #14# "classes" "casts" "name" "type" "set_type" "bases" "add_base_class" "create" #14# #14# #14# #14# "primaryCxxDerivableClassP" "cxxDerivableClassP" "cxxClassP" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#15=SPECIES #S(#15# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#13# 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "ClassRep_O" :#5# "/home/meister/Development/clasp/src/clbind/class_rep.h:93:5" :#8# #S(#12# :#1# "clbind::ClassRep_O" :#3# "ClassRep_O")))
template <> class gctools::GCKind<clbind::ClassRep_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_clbind__ClassRep_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::StandardClass_O" :#3=NAME "KIND_BOOTSTRAP_core__StandardClass_O" :VALUE 218 :#4=CCLASS #S(#4# :#1# "core::StandardClass_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/standardClass.h:54:5" :BASES ("core::StdClass_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_InstanceCoreClass" :#5# "/home/meister/Development/clasp/src/core/standardClass.h:65:2" :#6=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Class_O>" :SPECIALIZER "class core::Class_O"))) :METHOD-NAMES (#7="NO-NAME" #7# #7# #7# "createUncollectable" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :BOOTSTRAP :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 0) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "StandardClass_O" :#5# "/home/meister/Development/clasp/src/core/standardClass.h:54:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::StandardClass_O" :#3# "StandardClass_O")))
template <> class gctools::GCKind<core::StandardClass_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_BOOTSTRAP_core__StandardClass_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::HashTableEqualp_O" :#3=NAME "KIND_LISPALLOC_core__HashTableEqualp_O" :VALUE 233 :#4=CCLASS #S(#4# :#1# "core::HashTableEqualp_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/hashTableEqualp.h:40:5" :BASES ("core::HashTable_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "sxhashKey" "keyTest" "hashTableTest" "create" #6# #6# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "HashTableEqualp_O" :#5# "/home/meister/Development/clasp/src/core/hashTableEqualp.h:40:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::HashTableEqualp_O" :#3# "HashTableEqualp_O")))
template <> class gctools::GCKind<core::HashTableEqualp_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__HashTableEqualp_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::PointerType_O" :#3=NAME "KIND_LISPALLOC_llvmo__PointerType_O" :VALUE 152 :#4=CCLASS #S(#4# :#1# "llvmo::PointerType_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3870:5" :BASES ("llvmo::SequentialType_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "get" #6# #6# "set_wrapped" "wrapped" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "PointerType_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:3870:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::PointerType_O" :#3# "PointerType_O")))
template <> class gctools::GCKind<llvmo::PointerType_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__PointerType_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::Pointer_O" :#3=NAME "KIND_LISPALLOC_core__Pointer_O" :VALUE 51 :#4=CCLASS #S(#4# :#1# "core::Pointer_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/pointer.h:36:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Pointer" :#5# "/home/meister/Development/clasp/src/core/pointer.h:51:2" :#6=CTYPE #S(POINTER-CTYPE :#1# NIL :POINTEE #S(UNCLASSIFIED-CTYPE :#1# "void")))) :METHOD-NAMES (#7="NO-NAME" #7# "__repr__" "eql" "ptr" "createForT_sp" "create" "initialize" #7# #7# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Pointer_O" :#5# "/home/meister/Development/clasp/src/core/pointer.h:36:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::Pointer_O" :#3# "Pointer_O")))
template <> class gctools::GCKind<core::Pointer_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Pointer_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::DirectoryEntry_O" :#3=NAME "KIND_LISPALLOC_core__DirectoryEntry_O" :VALUE 50 :#4=CCLASS #S(#4# :#1# "core::DirectoryEntry_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/fileSystem.h:204:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Entry" :#5# "/home/meister/Development/clasp/src/core/fileSystem.h:211:2" :#6=CTYPE #S(POINTER-CTYPE :#1# NIL :POINTEE #S(#7=CXXRECORD-CTYPE :#1# "boost::filesystem::directory_entry" :#3# "directory_entry")))) :METHOD-NAMES (#8="NO-NAME" #8# #8# #8# "path" "symlinkStatus" "fileStatus" "setEntry" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#9=SPECIES #S(#9# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "DirectoryEntry_O" :#5# "/home/meister/Development/clasp/src/core/fileSystem.h:204:5" :#6# #S(#7# :#1# "core::DirectoryEntry_O" :#3# "DirectoryEntry_O")))
template <> class gctools::GCKind<core::DirectoryEntry_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__DirectoryEntry_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::HashTableEqual_O" :#3=NAME "KIND_LISPALLOC_core__HashTableEqual_O" :VALUE 232 :#4=CCLASS #S(#4# :#1# "core::HashTableEqual_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/hashTableEqual.h:40:5" :BASES ("core::HashTable_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "sxhashKey" "keyTest" "hashTableTest" "create_default" "create" #6# #6# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "HashTableEqual_O" :#5# "/home/meister/Development/clasp/src/core/hashTableEqual.h:40:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::HashTableEqual_O" :#3# "HashTableEqual_O")))
template <> class gctools::GCKind<core::HashTableEqual_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__HashTableEqual_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::ExecutionEngine_O" :#3=NAME "KIND_LISPALLOC_llvmo__ExecutionEngine_O" :VALUE 139 :#4=CCLASS #S(#4# :#1# "llvmo::ExecutionEngine_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1131:5" :BASES ("core::ExternalObject_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_DependentModules" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1142:9" :#8=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::HashTableEqual_O>" :SPECIALIZER "class core::HashTableEqual_O")) #S(#6# :#7# "_ptr" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1141:2" :#8# #S(POINTER-CTYPE :#1# NIL :POINTEE #S(#9=CXXRECORD-CTYPE :#1# "llvm::ExecutionEngine" :#3# "ExecutionEngine")))) :METHOD-NAMES (#10="NO-NAME" #10# "runFunction" "addGlobalMappingForLoadTimeValueVector" "addGlobalMapping" "dependentModuleNames" "removeNamedModule" "hasNamedModule" "addNamedModule" "getCompiledFunction" "addModule" #10# #10# "__repr__" "set_wrapped" "wrappedPtr" "wrappedPtr" "externalObject" "initialize" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#11=SPECIES #S(#11# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "ExecutionEngine_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1131:5" :#8# #S(#9# :#1# "llvmo::ExecutionEngine_O" :#3# "ExecutionEngine_O")))
template <> class gctools::GCKind<llvmo::ExecutionEngine_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__ExecutionEngine_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::PHINode_O" :#3=NAME "KIND_LISPALLOC_llvmo__PHINode_O" :VALUE 168 :#4=CCLASS #S(#4# :#1# "llvmo::PHINode_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2183:1" :BASES ("llvmo::Instruction_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "PHINode_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2183:1" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::PHINode_O" :#3# "PHINode_O")))
template <> class gctools::GCKind<llvmo::PHINode_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__PHINode_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::TwoWayStream_O" :#3=NAME "KIND_LISPALLOC_core__TwoWayStream_O" :VALUE 16 :#4=CCLASS #S(#4# :#1# "core::TwoWayStream_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/lispStream.h:616:5" :BASES ("core::AnsiStream_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Out" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:629:2" :#8=CTYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :#10=SPECIALIZER "class core::T_O")) #S(#6# :#7# "_In" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:628:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::T_O>" :#10# "class core::T_O"))) :METHOD-NAMES (#11="NO-NAME" #11# "make" #11# #11# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#12=SPECIES #S(#12# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "TwoWayStream_O" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:616:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::TwoWayStream_O" :#3# "TwoWayStream_O")))
template <> class gctools::GCKind<core::TwoWayStream_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__TwoWayStream_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::ForwardReferencedClass_O" :#3=NAME "KIND_LISPALLOC_core__ForwardReferencedClass_O" :VALUE 216 :#4=CCLASS #S(#4# :#1# "core::ForwardReferencedClass_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/forwardReferencedClass.h:42:5" :BASES ("core::Class_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_InstanceCoreClass" :#5# "/home/meister/Development/clasp/src/core/forwardReferencedClass.h:54:2" :#6=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::BuiltInClass_O>" :SPECIALIZER "class core::BuiltInClass_O"))) :METHOD-NAMES (#7="NO-NAME" #7# "defineYourSlotsFromBinderArchiveNode" "setInstanceCoreClass" "initialize" #7# #7# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "ForwardReferencedClass_O" :#5# "/home/meister/Development/clasp/src/core/forwardReferencedClass.h:42:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::ForwardReferencedClass_O" :#3# "ForwardReferencedClass_O")))
template <> class gctools::GCKind<core::ForwardReferencedClass_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__ForwardReferencedClass_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::ObjectSet_O" :#3=NAME "KIND_LISPALLOC_core__ObjectSet_O" :VALUE 49 :#4=CCLASS #S(#4# :#1# "core::ObjectSet_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/objectSet.h:54:1" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Set" :#5# "/home/meister/Development/clasp/src/core/objectSet.h:66:5" :#6=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::HashTableEq_O>" :SPECIALIZER "class core::HashTableEq_O"))) :METHOD-NAMES (#7="NO-NAME" #7# #7# #7# "map" "map" "asString" "cartesianProductWrapped" "cartesianProduct" "removeAll" "relativeComplement" "intersection" "setUnion" "addObjects" "addObjectsInCons" "asCons" "size" "remove" "insert" "contains" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "ObjectSet_O" :#5# "/home/meister/Development/clasp/src/core/objectSet.h:54:1" :#6# #S(CXXRECORD-CTYPE :#1# "core::ObjectSet_O" :#3# "ObjectSet_O")))
template <> class gctools::GCKind<core::ObjectSet_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__ObjectSet_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::SourceFileInfo_O" :#3=NAME "KIND_LISPALLOC_core__SourceFileInfo_O" :VALUE 48 :#4=CCLASS #S(#4# :#1# "core::SourceFileInfo_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/sourceFileInfo.h:39:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_FileHandle" :#5# "/home/meister/Development/clasp/src/core/sourceFileInfo.h:57:9" :#8=CTYPE #S(#9=UNCLASSIFIED-CTYPE :#1# "int")) #S(#6# :#7# "_PermanentFileName" :#5# "/home/meister/Development/clasp/src/core/sourceFileInfo.h:56:2" :#8# #S(#10=POINTER-CTYPE :#1# NIL :#11=POINTEE #S(#9# :#1# "char"))) #S(#6# :#7# "_PermanentPathName" :#5# "/home/meister/Development/clasp/src/core/sourceFileInfo.h:55:2" :#8# #S(#10# :#1# NIL :#11# #S(#9# :#1# "char"))) #S(#6# :#7# "_pathname" :#5# "/home/meister/Development/clasp/src/core/sourceFileInfo.h:53:2" :#8# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Pathname_O>" :SPECIALIZER "class core::Pathname_O"))) :METHOD-NAMES (#12="NO-NAME" #12# "__repr__" "permanentFileName" "permanentPathName" "pathname" "namestring" "parentPathName" "fileName" "fileHandle" "initialize" #12# #12# "create" "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#13=SPECIES #S(#13# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "SourceFileInfo_O" :#5# "/home/meister/Development/clasp/src/core/sourceFileInfo.h:39:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::SourceFileInfo_O" :#3# "SourceFileInfo_O")))
template <> class gctools::GCKind<core::SourceFileInfo_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__SourceFileInfo_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::SingleDispatchMethod_O" :#3=NAME "KIND_LISPALLOC_core__SingleDispatchMethod_O" :VALUE 47 :#4=CCLASS #S(#4# :#1# "core::SingleDispatchMethod_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/singleDispatchMethod.h:37:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_docstring" :#5# "/home/meister/Development/clasp/src/core/singleDispatchMethod.h:64:2" :#8=CTYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Str_O>" :#10=SPECIALIZER "class core::Str_O")) #S(#6# :#7# "_declares" :#5# "/home/meister/Development/clasp/src/core/singleDispatchMethod.h:62:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::Cons_O>" :#10# "class core::Cons_O")) #S(#6# :#7# "_argument_handler" :#5# "/home/meister/Development/clasp/src/core/singleDispatchMethod.h:61:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::LambdaListHandler_O>" :#10# "class core::LambdaListHandler_O")) #S(#6# :#7# "code" :#5# "/home/meister/Development/clasp/src/core/singleDispatchMethod.h:57:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::Function_O>" :#10# "class core::Function_O")) #S(#6# :#7# "_receiver_class" :#5# "/home/meister/Development/clasp/src/core/singleDispatchMethod.h:55:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::Class_O>" :#10# "class core::Class_O")) #S(#6# :#7# "_name" :#5# "/home/meister/Development/clasp/src/core/singleDispatchMethod.h:53:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::Symbol_O>" :#10# "class core::Symbol_O"))) :METHOD-NAMES (#11="NO-NAME" #11# "singleDispatchMethodDocstring" "singleDispatchMethodDeclares" "singleDispatchMethodLambdaListHandler" "singleDispatchMethodCode" "singleDispatchMethodReceiverClass" "singleDispatchMethodName" "__repr__" "method_lambda_list_handler" "receiver_class" "create" #11# #11# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#12=SPECIES #S(#12# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "SingleDispatchMethod_O" :#5# "/home/meister/Development/clasp/src/core/singleDispatchMethod.h:37:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::SingleDispatchMethod_O" :#3# "SingleDispatchMethod_O")))
template <> class gctools::GCKind<core::SingleDispatchMethod_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__SingleDispatchMethod_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="asttooling::internal::VariadicOperatorMatcherDescriptor" :#3=NAME "KIND_CLASSALLOC_asttooling__internal__VariadicOperatorMatcherDescriptor" :VALUE 280 :#4=CCLASS #S(#4# :#1# "asttooling::internal::VariadicOperatorMatcherDescriptor" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/asttooling/Marshallers.h:405:9" :BASES ("asttooling::internal::MatcherDescriptor") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "MatcherName" :#5# "/home/meister/Development/clasp/src/asttooling/Marshallers.h:443:13" :#8=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O")) #S(#6# :#7# "Func" :#5# "/home/meister/Development/clasp/src/asttooling/Marshallers.h:442:13" :#8# #S(POINTER-CTYPE :#1# NIL :POINTEE #S(#9=UNCLASSIFIED-CTYPE :#1# "_Bool (clang::ast_type_traits::DynTypedNode, clang::ast_matchers::internal::ASTMatchFinder *, clang::ast_matchers::internal::BoundNodesTreeBuilder *, llvm::ArrayRef<clang::ast_matchers::internal::DynTypedMatcher>)"))) #S(#6# :#7# "MaxCount" :#5# "/home/meister/Development/clasp/src/asttooling/Marshallers.h:441:13" :#8# #S(#9# :#1# "unsigned int")) #S(#6# :#7# "MinCount" :#5# "/home/meister/Development/clasp/src/asttooling/Marshallers.h:440:13" :#8# #S(#9# :#1# "unsigned int"))) :METHOD-NAMES (#10="NO-NAME" #10# #10# #10# #10# "create" #10#) :METADATA NIL) :#11=SPECIES #S(#11# :#3# :CLASSALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 6) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CLASSALLOC :#1# #2# :#3# "VariadicOperatorMatcherDescriptor" :#5# "/home/meister/Development/clasp/src/asttooling/Marshallers.h:405:9" :#8# #S(CXXRECORD-CTYPE :#1# "asttooling::internal::VariadicOperatorMatcherDescriptor" :#3# "VariadicOperatorMatcherDescriptor")))
template <> class gctools::GCKind<asttooling::internal::VariadicOperatorMatcherDescriptor> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_CLASSALLOC_asttooling__internal__VariadicOperatorMatcherDescriptor ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::DIBuilder_O" :#3=NAME "KIND_LISPALLOC_llvmo__DIBuilder_O" :VALUE 138 :#4=CCLASS #S(#4# :#1# "llvmo::DIBuilder_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/debugInfoExpose.h:752:5" :BASES ("core::ExternalObject_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_ptr" :#5# "/home/meister/Development/clasp/src/llvmo/debugInfoExpose.h:759:2" :#6=CTYPE #S(POINTER-CTYPE :#1# NIL :POINTEE #S(#7=CXXRECORD-CTYPE :#1# "llvm::DIBuilder" :#3# "DIBuilder")))) :METHOD-NAMES (#8="NO-NAME" #8# #8# #8# "getOrCreateTypeArray" "getOrCreateArray" "set_wrapped" "make" "wrappedPtr" "externalObject" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#9=SPECIES #S(#9# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "DIBuilder_O" :#5# "/home/meister/Development/clasp/src/llvmo/debugInfoExpose.h:752:5" :#6# #S(#7# :#1# "llvmo::DIBuilder_O" :#3# "DIBuilder_O")))
template <> class gctools::GCKind<llvmo::DIBuilder_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__DIBuilder_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::DIBasicType_O" :#3=NAME "KIND_LISPALLOC_llvmo__DIBasicType_O" :VALUE 55 :#4=CCLASS #S(#4# :#1# "llvmo::DIBasicType_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/debugInfoExpose.h:495:5" :BASES ("llvm::DIBasicType" "llvmo::DebugInfo_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# #6# #6# #6# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "DIBasicType_O" :#5# "/home/meister/Development/clasp/src/llvmo/debugInfoExpose.h:495:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::DIBasicType_O" :#3# "DIBasicType_O")))
template <> class gctools::GCKind<llvmo::DIBasicType_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__DIBasicType_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::LoadInst_O" :#3=NAME "KIND_LISPALLOC_llvmo__LoadInst_O" :VALUE 172 :#4=CCLASS #S(#4# :#1# "llvmo::LoadInst_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2448:1" :BASES ("llvmo::UnaryInstruction_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "LoadInst_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2448:1" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::LoadInst_O" :#3# "LoadInst_O")))
template <> class gctools::GCKind<llvmo::LoadInst_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__LoadInst_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::IRBuilder_O" :#3=NAME "KIND_LISPALLOC_llvmo__IRBuilder_O" :VALUE 137 :#4=CCLASS #S(#4# :#1# "llvmo::IRBuilder_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1892:5" :BASES ("llvmo::IRBuilderBase_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "__repr__" "CreateInsertValue" "CreateExtractValue" "CreateInBoundsGEP" "CreateInvoke" "make" #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "IRBuilder_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1892:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::IRBuilder_O" :#3# "IRBuilder_O")))
template <> class gctools::GCKind<llvmo::IRBuilder_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__IRBuilder_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::Environment_O" :#3=NAME "KIND_LISPALLOC_core__Environment_O" :VALUE 29 :#4=CCLASS #S(#4# :#1# "core::Environment_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/environment.h:55:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_EnvId" :#5# "/home/meister/Development/clasp/src/core/environment.h:61:2" :#6=CTYPE #S(UNCLASSIFIED-CTYPE :#1# "unsigned int"))) :METHOD-NAMES (#7="NO-NAME" #7# #7# #7# "countFunctionContainerEnvironments" "findTag" "_findTag" "getBlockSymbolFrame" "recognizesBlockSymbol" "find_current_code_environment" "find_unwindable_environment" "find_block_named_environment" "find_tagbody_tag_environment" "__repr__" "lookupSymbolMacro" "classifyTag" "classifyFunctionLookup" "_updateValue" "classifyLookup" "findSymbolMacro" "_findSymbolMacro" "findMacro" "_findMacro" "findFunction" "_findFunction" "currentVisibleEnvironment" "findValue" "_findValue" "environmentStackAsString" "_lookupTagbodyId" "_lookupFunction" "_lookupValue" "classifyValue" "getActivationFrame" "_environmentStackFill" "summaryOfContents" "lookupMetadata" "localMetadata" "push_metadata" "gather_metadata" "setf_metadata" "lexicalSpecialP" "runtimeEnvironment" "setRuntimeEnvironment" "getParentEnvironment" "setupParent" "catchEnvironmentP" "unwindProtectEnvironmentP" "functionContainerEnvironmentP" "lexicalEnvironmentP" "setEnvironmentId" "environmentId" "clasp_summaryOfContents" "clasp_gather_metadata" "clasp_environmentStackFill" "clasp_lookupTagbodyId" "clasp_lookupFunction" "clasp_lookupValue" "clasp_lexicalSpecialP" "clasp_findMacro" "clasp_findSymbolMacro" "clasp_findTag" "clasp_findFunction" "clasp_findValue" "clasp_countFunctionContainerEnvironments" "clasp_getActivationFrame" "clasp_currentVisibleEnvironment" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("core::GlueEnvironment_O" "core::LexicalEnvironment_O" "core::ActivationFrame_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Environment_O" :#5# "/home/meister/Development/clasp/src/core/environment.h:55:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::Environment_O" :#3# "Environment_O")))
template <> class gctools::GCKind<core::Environment_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Environment_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>" :#3=NAME "KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_clbind__ClassRep_O__" :VALUE 281 :#4=CCLASS #S(#4# :#1# "gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>" :TEMPLATE-SPECIALIZER T :#5=LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Data" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:48:9" :#8=CTYPE #S(CONSTANT-ARRAY-CTYPE :#1# NIL :ELEMENT-TYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<clbind::ClassRep_O>" :#10=SPECIALIZER "class clbind::ClassRep_O"))) #S(#6# :#7# "_End" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:47:9" :#8# #S(#11=UNCLASSIFIED-CTYPE :#1# "unsigned long")) #S(#6# :#7# "_Capacity" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:46:9" :#8# #S(#11# :#1# "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" #12="NO-NAME" #12# "capacity" "size" "data" #12# #12# #12#) :METADATA NIL) :#13=SPECIES #S(#13# :#3# :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :DUMP DUMPER-FOR-GCCONTAINER :#14=INDEX 3) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CONTAINERALLOC :#1# #2# :#3# "GCVector_moveable" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#8# #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>" :#3# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#14# 0 :#8# #S(#9# :#1# "gctools::smart_ptr<clbind::ClassRep_O>" :#10# "class clbind::ClassRep_O"))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_clbind__ClassRep_O__ ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="gctools::GCVector_moveable<asttooling::RegMap::SymbolMatcherDescriptorPair>" :#3=NAME "KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__RegMap__SymbolMatcherDescriptorPair_" :VALUE 282 :#4=CCLASS #S(#4# :#1# "gctools::GCVector_moveable<asttooling::RegMap::SymbolMatcherDescriptorPair>" :TEMPLATE-SPECIALIZER T :#5=LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Data" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:48:9" :#8=CTYPE #S(CONSTANT-ARRAY-CTYPE :#1# NIL :ELEMENT-TYPE #S(#9=CXXRECORD-CTYPE :#1# "asttooling::RegMap::SymbolMatcherDescriptorPair" :#3# "SymbolMatcherDescriptorPair"))) #S(#6# :#7# "_End" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:47:9" :#8# #S(#10=UNCLASSIFIED-CTYPE :#1# "unsigned long")) #S(#6# :#7# "_Capacity" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:46:9" :#8# #S(#10# :#1# "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" #11="NO-NAME" #11# "capacity" "size" "data" #11# #11# #11#) :METADATA NIL) :#12=SPECIES #S(#12# :#3# :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :DUMP DUMPER-FOR-GCCONTAINER :#13=INDEX 3) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CONTAINERALLOC :#1# #2# :#3# "GCVector_moveable" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#8# #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::RegMap::SymbolMatcherDescriptorPair>" :#3# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#13# 0 :#8# #S(#9# :#1# "asttooling::RegMap::SymbolMatcherDescriptorPair" :#3# "SymbolMatcherDescriptorPair"))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<asttooling::RegMap::SymbolMatcherDescriptorPair>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__RegMap__SymbolMatcherDescriptorPair_ ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::IRBuilderBase_O" :#3=NAME "KIND_LISPALLOC_llvmo__IRBuilderBase_O" :VALUE 136 :#4=CCLASS #S(#4# :#1# "llvmo::IRBuilderBase_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1816:5" :BASES ("core::ExternalObject_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_ptr" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1823:2" :#6=CTYPE #S(POINTER-CTYPE :#1# NIL :POINTEE #S(#7=CXXRECORD-CTYPE :#1# "llvm::IRBuilderBase" :#3# "IRBuilderBase")))) :METHOD-NAMES (#8="NO-NAME" #8# "SetCurrentDebugLocation" "saveIP" "restoreIP" #8# #8# "create" "set_wrapped" "wrappedPtr" "wrappedPtr" "externalObject" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#9=SPECIES #S(#9# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("llvmo::IRBuilder_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "IRBuilderBase_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1816:5" :#6# #S(#7# :#1# "llvmo::IRBuilderBase_O" :#3# "IRBuilderBase_O")))
template <> class gctools::GCKind<llvmo::IRBuilderBase_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__IRBuilderBase_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::BlockAddress_O" :#3=NAME "KIND_LISPALLOC_llvmo__BlockAddress_O" :VALUE 189 :#4=CCLASS #S(#4# :#1# "llvmo::BlockAddress_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:917:5" :BASES ("llvmo::Constant_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# "get" #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "BlockAddress_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:917:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::BlockAddress_O" :#3# "BlockAddress_O")))
template <> class gctools::GCKind<llvmo::BlockAddress_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__BlockAddress_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::Pathname_O" :#3=NAME "KIND_LISPALLOC_core__Pathname_O" :VALUE 27 :#4=CCLASS #S(#4# :#1# "core::Pathname_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/pathname.h:91:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Version" :#5# "/home/meister/Development/clasp/src/core/pathname.h:122:2" :#8=CTYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :#10=SPECIALIZER "class core::T_O")) #S(#6# :#7# "_Type" :#5# "/home/meister/Development/clasp/src/core/pathname.h:121:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::T_O>" :#10# "class core::T_O")) #S(#6# :#7# "_Name" :#5# "/home/meister/Development/clasp/src/core/pathname.h:120:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::T_O>" :#10# "class core::T_O")) #S(#6# :#7# "_Directory" :#5# "/home/meister/Development/clasp/src/core/pathname.h:119:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::T_O>" :#10# "class core::T_O")) #S(#6# :#7# "_Device" :#5# "/home/meister/Development/clasp/src/core/pathname.h:118:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::T_O>" :#10# "class core::T_O")) #S(#6# :#7# "_Host" :#5# "/home/meister/Development/clasp/src/core/pathname.h:117:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::T_O>" :#10# "class core::T_O"))) :METHOD-NAMES (#11="NO-NAME" "__writeReadable__" "__write__" "__repr__" #11# #11# #11# "tilde_expand" "makePathname" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#12=SPECIES #S(#12# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("core::LogicalPathname_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Pathname_O" :#5# "/home/meister/Development/clasp/src/core/pathname.h:91:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::Pathname_O" :#3# "Pathname_O")))
template <> class gctools::GCKind<core::Pathname_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Pathname_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::Lisp_O" :#3=NAME "KIND_ROOTCLASSALLOC_core__Lisp_O" :VALUE 1 :#4=CCLASS #S(#4# :#1# "core::Lisp_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/lisp.h:225:5" :BASES NIL :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_LineNumber" :#5# "/home/meister/Development/clasp/src/core/lisp.h:572:2" :#8=CTYPE #S(#9=UNCLASSIFIED-CTYPE :#1# "unsigned int")) #S(#6# :#7# "_PathMax" :#5# "/home/meister/Development/clasp/src/core/lisp.h:397:2" :#8# #S(#9# :#1# "int")) #S(#6# :#7# "_BootClassTableIsValid" :#5# "/home/meister/Development/clasp/src/core/lisp.h:395:2" :#8# #S(#9# :#1# "_Bool")) #S(#6# :#7# "_LastCompileErrorMessage" :#5# "/home/meister/Development/clasp/src/core/lisp.h:394:2" :#8# #S(#10=CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" :#3# NIL :#11=ARGUMENTS (#S(#12=GC-TEMPLATE-ARGUMENT :#13=INDEX 0 :#8# #S(#9# :#1# "char")) #S(#12# :#13# 1 :#8# #S(#10# :#1# "std::char_traits<char>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char"))))) #S(#12# :#13# 2 :#8# #S(#10# :#1# "std::allocator<char>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char")))))))) #S(#6# :#7# "_NilsCreated" :#5# "/home/meister/Development/clasp/src/core/lisp.h:393:2" :#8# #S(#9# :#1# "_Bool")) #S(#6# :#7# "_EnvironmentInitialized" :#5# "/home/meister/Development/clasp/src/core/lisp.h:392:2" :#8# #S(#9# :#1# "_Bool")) #S(#6# :#7# "_PackagesInitialized" :#5# "/home/meister/Development/clasp/src/core/lisp.h:391:2" :#8# #S(#9# :#1# "_Bool")) #S(#6# :#7# "_BuiltInClassesInitialized" :#5# "/home/meister/Development/clasp/src/core/lisp.h:390:2" :#8# #S(#9# :#1# "_Bool")) #S(#6# :#7# "_CoreBuiltInClassesInitialized" :#5# "/home/meister/Development/clasp/src/core/lisp.h:389:2" :#8# #S(#9# :#1# "_Bool")) #S(#6# :#7# "_RequireLevel" :#5# "/home/meister/Development/clasp/src/core/lisp.h:388:2" :#8# #S(#9# :#1# "int")) #S(#6# :#7# "_ExportSymbolCallback" :#5# "/home/meister/Development/clasp/src/core/lisp.h:387:2" :#8# #S(#14=POINTER-CTYPE :#1# NIL :#15=POINTEE #S(#9# :#1# "void (gctools::smart_ptr<core::Symbol_O>, core::Lisp_O *)"))) #S(#6# :#7# "_MakePackageCallback" :#5# "/home/meister/Development/clasp/src/core/lisp.h:386:2" :#8# #S(#14# :#1# NIL :#15# #S(#9# :#1# "void (const std::basic_string<char> &, core::Lisp_O *)"))) #S(#6# :#7# "_EnvironmentId" :#5# "/home/meister/Development/clasp/src/core/lisp.h:383:2" :#8# #S(#9# :#1# "unsigned int")) #S(#6# :#7# "_PackageNameIndexMap" :#5# "/home/meister/Development/clasp/src/core/lisp.h:381:2" :#8# #S(#10# :#1# "std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>>>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#10# :#1# "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char")) #S(#12# :#13# 1 :#8# #S(#10# :#1# "std::char_traits<char>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char"))))) #S(#12# :#13# 2 :#8# #S(#10# :#1# "std::allocator<char>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char")))))))) #S(#12# :#13# 1 :#8# #S(#9# :#1# "int")) #S(#12# :#13# 2 :#8# #S(#10# :#1# "std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#10# :#1# "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char")) #S(#12# :#13# 1 :#8# #S(#10# :#1# "std::char_traits<char>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char"))))) #S(#12# :#13# 2 :#8# #S(#10# :#1# "std::allocator<char>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char"))))))))))) #S(#12# :#13# 3 :#8# #S(#10# :#1# "std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#10# :#1# "std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#10# :#1# "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char")) #S(#12# :#13# 1 :#8# #S(#10# :#1# "std::char_traits<char>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char"))))) #S(#12# :#13# 2 :#8# #S(#10# :#1# "std::allocator<char>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char")))))))) #S(#12# :#13# 1 :#8# #S(#9# :#1# "int"))))))))))) #S(#6# :#7# "_IgnoreInitLsp" :#5# "/home/meister/Development/clasp/src/core/lisp.h:380:2" :#8# #S(#9# :#1# "_Bool")) #S(#6# :#7# "_IgnoreInitImage" :#5# "/home/meister/Development/clasp/src/core/lisp.h:379:9" :#8# #S(#9# :#1# "_Bool")) #S(#6# :#7# "_RCFileName" :#5# "/home/meister/Development/clasp/src/core/lisp.h:378:2" :#8# #S(#10# :#1# "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char")) #S(#12# :#13# 1 :#8# #S(#10# :#1# "std::char_traits<char>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char"))))) #S(#12# :#13# 2 :#8# #S(#10# :#1# "std::allocator<char>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char")))))))) #S(#6# :#7# "_FunctionName" :#5# "/home/meister/Development/clasp/src/core/lisp.h:374:2" :#8# #S(#10# :#1# "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char")) #S(#12# :#13# 1 :#8# #S(#10# :#1# "std::char_traits<char>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char"))))) #S(#12# :#13# 2 :#8# #S(#10# :#1# "std::allocator<char>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char")))))))) #S(#6# :#7# "_EmbeddedInPython" :#5# "/home/meister/Development/clasp/src/core/lisp.h:373:2" :#8# #S(#9# :#1# "_Bool")) #S(#6# :#7# "_Interactive" :#5# "/home/meister/Development/clasp/src/core/lisp.h:372:2" :#8# #S(#9# :#1# "_Bool")) #S(#6# :#7# "_MpiSize" :#5# "/home/meister/Development/clasp/src/core/lisp.h:371:2" :#8# #S(#9# :#1# "int")) #S(#6# :#7# "_MpiRank" :#5# "/home/meister/Development/clasp/src/core/lisp.h:370:2" :#8# #S(#9# :#1# "int")) #S(#6# :#7# "_MpiEnabled" :#5# "/home/meister/Development/clasp/src/core/lisp.h:369:2" :#8# #S(#9# :#1# "_Bool")) #S(#6# :#7# "_GlobalInitializationCallbacks" :#5# "/home/meister/Development/clasp/src/core/lisp.h:368:2" :#8# #S(#10# :#1# "std::vector<void (*)(core::Lisp_O *),std::allocator<void (*)(core::Lisp_O *)>>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#14# :#1# NIL :#15# #S(#9# :#1# "void (core::Lisp_O *)"))) #S(#12# :#13# 1 :#8# #S(#10# :#1# "std::allocator<void (*)(core::Lisp_O *)>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#14# :#1# NIL :#15# #S(#9# :#1# "void (core::Lisp_O *)"))))))))) #S(#6# :#7# "_LockGlobalInitialization" :#5# "/home/meister/Development/clasp/src/core/lisp.h:367:2" :#8# #S(#9# :#1# "_Bool")) #S(#6# :#7# "_DebuggerLevel" :#5# "/home/meister/Development/clasp/src/core/lisp.h:363:2" :#8# #S(#9# :#1# "int")) #S(#6# :#7# "_TraceLevel" :#5# "/home/meister/Development/clasp/src/core/lisp.h:362:2" :#8# #S(#9# :#1# "int")) #S(#6# :#7# "_SingleStepLevel" :#5# "/home/meister/Development/clasp/src/core/lisp.h:361:2" :#8# #S(#9# :#1# "unsigned int")) #S(#6# :#7# "_DebugStream" :#5# "/home/meister/Development/clasp/src/core/lisp.h:360:2" :#8# #S(#14# :#1# NIL :#15# #S(#16=CXXRECORD-CTYPE :#1# "core::DebugStream" :#3# "DebugStream"))) #S(#6# :#7# "_IntegerOrdering" :#5# "/home/meister/Development/clasp/src/core/lisp.h:359:2" :#8# #S(#16# :#1# "core::IntegerOrdering" :#3# "IntegerOrdering")) #S(#6# :#7# "_Bundle" :#5# "/home/meister/Development/clasp/src/core/lisp.h:357:2" :#8# #S(#14# :#1# NIL :#15# #S(#16# :#1# "core::Bundle" :#3# "Bundle"))) #S(#6# :#7# "_ReplCounter" :#5# "/home/meister/Development/clasp/src/core/lisp.h:355:9" :#8# #S(#9# :#1# "unsigned int")) #S(#6# :#7# "_Mode" :#5# "/home/meister/Development/clasp/src/core/lisp.h:354:2" :#8# #S(#9# :#1# "unsigned int")) #S(#6# :#7# "_SourceFileIndices" :#5# "/home/meister/Development/clasp/src/core/lisp.h:353:9" :#8# #S(#10# :#1# "std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>>>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#10# :#1# "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char")) #S(#12# :#13# 1 :#8# #S(#10# :#1# "std::char_traits<char>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char"))))) #S(#12# :#13# 2 :#8# #S(#10# :#1# "std::allocator<char>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char")))))))) #S(#12# :#13# 1 :#8# #S(#9# :#1# "int")) #S(#12# :#13# 2 :#8# #S(#10# :#1# "std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#10# :#1# "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char")) #S(#12# :#13# 1 :#8# #S(#10# :#1# "std::char_traits<char>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char"))))) #S(#12# :#13# 2 :#8# #S(#10# :#1# "std::allocator<char>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char"))))))))))) #S(#12# :#13# 3 :#8# #S(#10# :#1# "std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#10# :#1# "std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#10# :#1# "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char")) #S(#12# :#13# 1 :#8# #S(#10# :#1# "std::char_traits<char>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char"))))) #S(#12# :#13# 2 :#8# #S(#10# :#1# "std::allocator<char>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char")))))))) #S(#12# :#13# 1 :#8# #S(#9# :#1# "int"))))))))))) #S(#6# :#7# "_Argv" :#5# "/home/meister/Development/clasp/src/core/lisp.h:350:9" :#8# #S(#10# :#1# "std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#10# :#1# "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char")) #S(#12# :#13# 1 :#8# #S(#10# :#1# "std::char_traits<char>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char"))))) #S(#12# :#13# 2 :#8# #S(#10# :#1# "std::allocator<char>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char")))))))) #S(#12# :#13# 1 :#8# #S(#10# :#1# "std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#10# :#1# "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char")) #S(#12# :#13# 1 :#8# #S(#10# :#1# "std::char_traits<char>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char"))))) #S(#12# :#13# 2 :#8# #S(#10# :#1# "std::allocator<char>" :#3# NIL :#11# (#S(#12# :#13# 0 :#8# #S(#9# :#1# "char")))))))))))))) #S(#6# :#7# "_Argc" :#5# "/home/meister/Development/clasp/src/core/lisp.h:348:9" :#8# #S(#9# :#1# "int")) #S(#6# :#7# "_PrintSymbolsProperly" :#5# "/home/meister/Development/clasp/src/core/lisp.h:344:9" :#8# #S(#9# :#1# "_Bool")) #S(#6# :#7# "_StackSampleMax" :#5# "/home/meister/Development/clasp/src/core/lisp.h:342:2" :#8# #S(#9# :#1# "unsigned int")) #S(#6# :#7# "_StackSampleSize" :#5# "/home/meister/Development/clasp/src/core/lisp.h:341:2" :#8# #S(#9# :#1# "unsigned int")) #S(#6# :#7# "_StackSampleCount" :#5# "/home/meister/Development/clasp/src/core/lisp.h:340:2" :#8# #S(#9# :#1# "unsigned int")) #S(#6# :#7# "_StackWarnSize" :#5# "/home/meister/Development/clasp/src/core/lisp.h:339:2" :#8# #S(#9# :#1# "unsigned int")) #S(#6# :#7# "_StackTop" :#5# "/home/meister/Development/clasp/src/core/lisp.h:338:2" :#8# #S(#14# :#1# NIL :#15# #S(#9# :#1# "char"))) #S(#6# :#7# "_Roots" :#5# "/home/meister/Development/clasp/src/core/lisp.h:337:2" :#8# #S(#16# :#1# "core::Lisp_O::GCRoots" :#3# "GCRoots"))) :METHOD-NAMES (#17="NO-NAME" #17# #17# #17# "exposePython" "exposeCando" "gdb_untrace_by_name" "gdb_trace_by_name" "__repr__" "addClass" "addClass" "addClassNameToPackageAsDynamic" "initializeEnvironment" "errorMessage" "run" "initializeEnvironments" "initializeClassManager" "addToStarModulesStar" "getMethodId" "getMethodName" "getIntrinsic" "createObjectOfClass" "defineStandardClass" "getCommandLineArguments" "parseCommandLineArguments" "translateLogicalPathnameUsingPaths" "translateLogicalPathname" "backTraceAsString" "getBackTrace" "usePackage" "makePackage" "unmapNameToPackage" "mapNameToPackage" "getCurrentPackage" "selectPackage" "inPackage" "findPackage" "recognizesPackage" "allClassNames" "getClassSymbolForClassName" "exportToPython" "internKeyword" "internWithDefaultPackageName" "internWithPackageName" "internUniqueWithPackageName" "intern" "intern" "intern" "readEvalPrintInteractive" "readEvalPrintString" "readEvalPrint" "allLocalNamesAsCons" "allLocalNames" "defconstant" "defvar" "findSymbol" "findSymbol" "installGlobalInitializationCallback" "isGlobalInitializationAllowed" "installPackage" "popRequireLevel" "pushRequireLevel" "getRequireLevel" "addModule" "recognizesModule" "specialFormOrNil" "defineSpecialOperator" "error" "initializePackages" "errorUndefinedSymbol" "defineMethod" "throwIfBuiltInClassesNotInitialized" "setBuiltInClassesInitialized" "classNameFromClassSymbol" "classFromClassName" "switchToClassNameHashTable" "boot_setf_findClass" "boot_findClass" "singleDispatchGenericFunctionTable" "forget_all_single_dispatch_generic_functions" "setf_find_single_dispatch_generic_function" "find_single_dispatch_generic_function" "setEmbeddedInPython" "isEmbeddedInPython" "setInteractive" "isInteractive" "bundle" "getCurrentReadTable" "getCurrentWorkingDirectory" "setCurrentWorkingDirectory" "shutdownLispEnvironment" "startupLispEnvironment" "createLispEnvironment" "NilsCreated" "BuiltInClassesInitialized" "CoreBuiltInClassesInitialized" "graphical" "_boolean" "_false" "_not" "_true" "activationFrameNil" "parseStringIntoPackageAndSymbolName" "commonLispPackage" "keywordPackage" "packages" "nullStream" "rehashThreshold" "rehashSize" "dump_backtrace" "dump_apropos" "exportingSymbol" "debuggerLevel" "decrementDebuggerLevel" "incrementDebuggerLevel" "remove_setfDefinition" "get_setfDefinition" "set_setfDefinition" "prin1" "print" "nextEnvironmentId" "isEnvironmentInitialized" "bigRegister2" "bigRegister1" "bigRegister0" "setRestartHandlers" "getRestartHandlers" "setConditionHandlers" "getConditionHandlers" "add_accessor_pair" "bindings" "trace_functions" "remove_trace" "add_trace" "allPackagesAsCons" "getSingleStepLevel" "setSingleStepLevel" "isSingleStepOn" "sourceDatabase" "mode" "setMakePackageAndExportSymbolCallbacks" "slotCachePtr" "methodCachePtr" "singleDispatchMethodCachePtr" "doubleFloatOne" "singleFloatOne" "doubleFloatPlusZero" "doubleFloatMinusZero" "singleFloatPlusZero" "singleFloatMinusZero" "minusHalf" "plusHalf" "imaginaryUnitNegative" "imaginaryUnit" "trapFpeBits" "setSourceFileInfo" "findLoadTimeValuesWithNameContaining" "findLoadTimeValues" "loadTimeSymbol" "loadTimeValue" "loadTimeValuesIds" "getOrCreateLoadTimeValues" "sourceFileInfo" "classSymbolsHolder" "characterInfo" "bootClassTableIsValid" "pathMax" "setPathnameTranslations" "pathnameTranslations" "mapClassNamesAndClasses" "integer_ordering" "mpiSize" "mpiRank" "mpiEnabled" "setupMpi" "nextReplCounter" "exceptionStack" "debugLog" "multipleValues" "invocationHistoryStack" "initialize" "lisp_initSymbols" "initializeGlobals") :METADATA NIL) :#18=SPECIES #S(#18# :#3# :ROOTCLASSALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :#13# 7) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(ROOTCLASSALLOC :#1# #2# :#3# "Lisp_O" :#5# "/home/meister/Development/clasp/src/core/lisp.h:225:5" :#8# #S(#16# :#1# "core::Lisp_O" :#3# "Lisp_O")))
template <> class gctools::GCKind<core::Lisp_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_ROOTCLASSALLOC_core__Lisp_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::DICompositeType_O" :#3=NAME "KIND_LISPALLOC_llvmo__DICompositeType_O" :VALUE 54 :#4=CCLASS #S(#4# :#1# "llvmo::DICompositeType_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/debugInfoExpose.h:550:5" :BASES ("llvm::DICompositeType" "llvmo::DebugInfo_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# #6# #6# #6# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "DICompositeType_O" :#5# "/home/meister/Development/clasp/src/llvmo/debugInfoExpose.h:550:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::DICompositeType_O" :#3# "DICompositeType_O")))
template <> class gctools::GCKind<llvmo::DICompositeType_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__DICompositeType_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::ModulePass_O" :#3=NAME "KIND_LISPALLOC_llvmo__ModulePass_O" :VALUE 133 :#4=CCLASS #S(#4# :#1# "llvmo::ModulePass_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:350:1" :BASES ("llvmo::Pass_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("llvmo::ImmutablePass_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "ModulePass_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:350:1" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::ModulePass_O" :#3# "ModulePass_O")))
template <> class gctools::GCKind<llvmo::ModulePass_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__ModulePass_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::StoreInst_O" :#3=NAME "KIND_LISPALLOC_llvmo__StoreInst_O" :VALUE 167 :#4=CCLASS #S(#4# :#1# "llvmo::StoreInst_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1991:5" :BASES ("llvmo::Instruction_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "StoreInst_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:1991:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::StoreInst_O" :#3# "StoreInst_O")))
template <> class gctools::GCKind<llvmo::StoreInst_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__StoreInst_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::Stream_O" :#3=NAME "KIND_LISPALLOC_core__Stream_O" :VALUE 14 :#4=CCLASS #S(#4# :#1# "core::Stream_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/lispStream.h:302:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_InputCursor" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:324:9" :#8=CTYPE #S(#9=CXXRECORD-CTYPE :#1# "core::StreamCursor" :#3# "StreamCursor")) #S(#6# :#7# "_OutputColumn" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:323:9" :#8# #S(#10=UNCLASSIFIED-CTYPE :#1# "int")) #S(#6# :#7# "_ExternalFormat" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:322:9" :#8# #S(#11=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :#12=SPECIALIZER "class core::T_O")) #S(#6# :#7# "_LastChar" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:321:9" :#8# #S(#10# :#1# "int")) #S(#6# :#7# "_LastOp" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:320:9" :#8# #S(#10# :#1# "int")) #S(#6# :#7# "_EofChar" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:319:9" :#8# #S(#10# :#1# "int")) #S(#6# :#7# "_LastCode" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:318:9" :#8# #S(CONSTANT-ARRAY-CTYPE :#1# NIL :ELEMENT-TYPE #S(#10# :#1# "int"))) #S(#6# :#7# "_Decoder" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:317:9" :#8# #S(#13=POINTER-CTYPE :#1# NIL :#14=POINTEE #S(#10# :#1# "int (gctools::smart_ptr<core::T_O>)"))) #S(#6# :#7# "_Encoder" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:316:9" :#8# #S(#13# :#1# NIL :#14# #S(#10# :#1# "int (gctools::smart_ptr<core::T_O>, unsigned char *, int)"))) #S(#6# :#7# "_ByteStack" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:315:9" :#8# #S(#11# :#1# "gctools::smart_ptr<core::Cons_O>" :#12# "class core::Cons_O")) #S(#6# :#7# "_Flags" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:314:9" :#8# #S(#10# :#1# "int")) #S(#6# :#7# "_ByteSize" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:313:9" :#8# #S(#10# :#1# "int")) #S(#6# :#7# "_Format" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:312:9" :#8# #S(#11# :#1# "gctools::smart_ptr<core::T_O>" :#12# "class core::T_O")) #S(#6# :#7# "_Buffer" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:311:9" :#8# #S(#13# :#1# NIL :#14# #S(#10# :#1# "char"))) #S(#6# :#7# "_Mode" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:310:9" :#8# #S(#10# :#1# "enum core::StreamMode")) #S(#6# :#7# "_Closed" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:309:9" :#8# #S(#10# :#1# "int")) #S(#6# :#7# "ops" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:308:9" :#8# #S(#9# :#1# "core::FileOps" :#3# "FileOps"))) :METHOD-NAMES (#15="NO-NAME" #15# "column" "lineno" "filename" #15# #15# "lisp_initGlobals" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#16=SPECIES #S(#16# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("core::AnsiStream_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Stream_O" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:302:5" :#8# #S(#9# :#1# "core::Stream_O" :#3# "Stream_O")))
template <> class gctools::GCKind<core::Stream_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Stream_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::SingleDispatchEffectiveMethodFunction_O" :#3=NAME "KIND_LISPALLOC_core__SingleDispatchEffectiveMethodFunction_O" :VALUE 88 :#4=CCLASS #S(#4# :#1# "core::SingleDispatchEffectiveMethodFunction_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/singleDispatchEffectiveMethodFunction.h:39:5" :BASES ("core::Function_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Methods" :#5# "/home/meister/Development/clasp/src/core/singleDispatchEffectiveMethodFunction.h:56:2" :#6=CTYPE #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Cons_O>" :SPECIALIZER "class core::Cons_O"))) :METHOD-NAMES (#7="NO-NAME" #7# "__repr__" "LISP_INVOKE" "initialize" "create" #7# #7# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "SingleDispatchEffectiveMethodFunction_O" :#5# "/home/meister/Development/clasp/src/core/singleDispatchEffectiveMethodFunction.h:39:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::SingleDispatchEffectiveMethodFunction_O" :#3# "SingleDispatchEffectiveMethodFunction_O")))
template <> class gctools::GCKind<core::SingleDispatchEffectiveMethodFunction_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__SingleDispatchEffectiveMethodFunction_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::ConstantStruct_O" :#3=NAME "KIND_LISPALLOC_llvmo__ConstantStruct_O" :VALUE 188 :#4=CCLASS #S(#4# :#1# "llvmo::ConstantStruct_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2955:5" :BASES ("llvmo::Constant_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "create" "set_wrapped" "wrappedPtr" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "ConstantStruct_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2955:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::ConstantStruct_O" :#3# "ConstantStruct_O")))
template <> class gctools::GCKind<llvmo::ConstantStruct_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__ConstantStruct_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::FunctionPass_O" :#3=NAME "KIND_LISPALLOC_llvmo__FunctionPass_O" :VALUE 132 :#4=CCLASS #S(#4# :#1# "llvmo::FunctionPass_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:302:1" :BASES ("llvmo::Pass_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "FunctionPass_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:302:1" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::FunctionPass_O" :#3# "FunctionPass_O")))
template <> class gctools::GCKind<llvmo::FunctionPass_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__FunctionPass_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::AtomicRMWInst_O" :#3=NAME "KIND_LISPALLOC_llvmo__AtomicRMWInst_O" :VALUE 166 :#4=CCLASS #S(#4# :#1# "llvmo::AtomicRMWInst_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2135:1" :BASES ("llvmo::Instruction_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "AtomicRMWInst_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:2135:1" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::AtomicRMWInst_O" :#3# "AtomicRMWInst_O")))
template <> class gctools::GCKind<llvmo::AtomicRMWInst_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__AtomicRMWInst_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="cffi::Pointer_O" :#3=NAME "KIND_LISPALLOC_cffi__Pointer_O" :VALUE 13 :#4=CCLASS #S(#4# :#1# "cffi::Pointer_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/cffi/cffi.h:43:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_ptr" :#5# "/home/meister/Development/clasp/src/cffi/cffi.h:55:2" :#6=CTYPE #S(POINTER-CTYPE :#1# NIL :POINTEE #S(UNCLASSIFIED-CTYPE :#1# "void")))) :METHOD-NAMES (#7="NO-NAME" #7# "PERCENTsetf_mem_ref" "PERCENTmem_ref" "foreign_free" "__repr__" "inc_pointer" "null_pointerP" "pointerP" "create" "make" "null_pointer" #7# #7# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Pointer_O" :#5# "/home/meister/Development/clasp/src/cffi/cffi.h:43:5" :#6# #S(CXXRECORD-CTYPE :#1# "cffi::Pointer_O" :#3# "Pointer_O")))
template <> class gctools::GCKind<cffi::Pointer_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_cffi__Pointer_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="gctools::GCVector_moveable<gctools::smart_ptr<core::Str_O>>" :#3=NAME "KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Str_O__" :VALUE 283 :#4=CCLASS #S(#4# :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Str_O>>" :TEMPLATE-SPECIALIZER T :#5=LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Data" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:48:9" :#8=CTYPE #S(CONSTANT-ARRAY-CTYPE :#1# NIL :ELEMENT-TYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Str_O>" :#10=SPECIALIZER "class core::Str_O"))) #S(#6# :#7# "_End" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:47:9" :#8# #S(#11=UNCLASSIFIED-CTYPE :#1# "unsigned long")) #S(#6# :#7# "_Capacity" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:46:9" :#8# #S(#11# :#1# "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" #12="NO-NAME" #12# "capacity" "size" "data" #12# #12# #12#) :METADATA NIL) :#13=SPECIES #S(#13# :#3# :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :DUMP DUMPER-FOR-GCCONTAINER :#14=INDEX 3) :CHILDREN NIL :IN-HIERARCHY NIL :ALLOC #S(CONTAINERALLOC :#1# #2# :#3# "GCVector_moveable" :#5# "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#8# #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Str_O>>" :#3# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :#14# 0 :#8# #S(#9# :#1# "gctools::smart_ptr<core::Str_O>" :#10# "class core::Str_O"))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<gctools::smart_ptr<core::Str_O>>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Str_O__ ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::IOFileStream_O" :#3=NAME "KIND_LISPALLOC_core__IOFileStream_O" :VALUE 18 :#4=CCLASS #S(#4# :#1# "core::IOFileStream_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/lispStream.h:395:5" :BASES ("core::FileStream_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_FileDescriptor" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:405:2" :#6=CTYPE #S(UNCLASSIFIED-CTYPE :#1# "int"))) :METHOD-NAMES (#7="NO-NAME" #7# #7# #7# #7# "make" "makeIO" "makeOutput" "makeInput" #7# "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#8=SPECIES #S(#8# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "IOFileStream_O" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:395:5" :#6# #S(CXXRECORD-CTYPE :#1# "core::IOFileStream_O" :#3# "IOFileStream_O")))
template <> class gctools::GCKind<core::IOFileStream_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__IOFileStream_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::Cons_O" :#3=NAME "KIND_LISPALLOC_core__Cons_O" :VALUE 12 :#4=CCLASS #S(#4# :#1# "core::Cons_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/cons.h:127:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(#6=INSTANCE-VARIABLE :#7=FIELD-NAME "_Cdr" :#5# "/home/meister/Development/clasp/src/core/cons.h:150:2" :#8=CTYPE #S(#9=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :#10=SPECIALIZER "class core::T_O")) #S(#6# :#7# "_Car" :#5# "/home/meister/Development/clasp/src/core/cons.h:149:2" :#8# #S(#9# :#1# "gctools::smart_ptr<core::T_O>" :#10# "class core::T_O"))) :METHOD-NAMES (#11="NO-NAME" #11# #11# #11# "getf" "setf_subseq" "subseq" "booleanAnd" "booleanOr" "min" "max" "product" "__write__" "__repr__" "exactlyMatches" "assoc" "member" "member1" "memberEql" "memberEq" "olookupKeyObjectDefault" "olookupKeyObject" "olistrefArgument" "olistref" "fastUnsafeLength" "length" "copyTreeCar" "copyTree" "copyListCar" "copyList" "last" "setf_cdr" "setOCdr" "setCdr" "nreconc" "revappend" "nreverse" "reverse" "extend" "filterOutNil" "setf_nth" "functoid" "equalp" "equal" "setf_car" "setCar" "cddddr" "cdddr" "cddr" "cdr" "ocaddr" "ocadr" "ocar" "cdrPtr" "setf_elt" "elt" "onthcdr" "onth" "rplacd" "rplaca" "walkToFindParsePos" "sxhash" "append" "appendInto" "create" "create" "createList" "createList" "createList" "createList" "createList" "createList" "createList" "createList" "createFrom_va_list" "archiveBase" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#12=SPECIES #S(#12# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN NIL :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Cons_O" :#5# "/home/meister/Development/clasp/src/core/cons.h:127:5" :#8# #S(CXXRECORD-CTYPE :#1# "core::Cons_O" :#3# "Cons_O")))
template <> class gctools::GCKind<core::Cons_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Cons_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="core::AnsiStream_O" :#3=NAME "KIND_LISPALLOC_core__AnsiStream_O" :VALUE 15 :#4=CCLASS #S(#4# :#1# "core::AnsiStream_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/core/lispStream.h:360:5" :BASES ("core::Stream_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "lisp_initGlobals" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("core::TwoWayStream_O" "core::FileStream_O" "core::BroadcastStream_O" "core::StringStream_O" "core::SynonymStream_O" "core::EchoStream_O" "core::ConcatenatedStream_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "AnsiStream_O" :#5# "/home/meister/Development/clasp/src/core/lispStream.h:360:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "core::AnsiStream_O" :#3# "AnsiStream_O")))
template <> class gctools::GCKind<core::AnsiStream_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__AnsiStream_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::Pass_O" :#3=NAME "KIND_LISPALLOC_llvmo__Pass_O" :VALUE 131 :#4=CCLASS #S(#4# :#1# "llvmo::Pass_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:182:5" :BASES ("core::ExternalObject_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_ptr" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:189:2" :#6=CTYPE #S(POINTER-CTYPE :#1# NIL :POINTEE #S(#7=CXXRECORD-CTYPE :#1# "llvm::Pass" :#3# "Pass")))) :METHOD-NAMES (#8="NO-NAME" #8# #8# #8# "set_wrapped" "wrappedPtr" "externalObject" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#9=SPECIES #S(#9# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("llvmo::FunctionPass_O" "llvmo::ModulePass_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "Pass_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:182:5" :#6# #S(#7# :#1# "llvmo::Pass_O" :#3# "Pass_O")))
template <> class gctools::GCKind<llvmo::Pass_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__Pass_O ;
};
//GCKind for #S(SIMPLE-ENUM :#1=KEY #2="llvmo::ConstantDataSequential_O" :#3=NAME "KIND_LISPALLOC_llvmo__ConstantDataSequential_O" :VALUE 186 :#4=CCLASS #S(#4# :#1# "llvmo::ConstantDataSequential_O" :TEMPLATE-SPECIALIZER NIL :#5=LOCATION "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:949:5" :BASES ("llvmo::Constant_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES (#6="NO-NAME" #6# #6# #6# "set_wrapped" "wrappedPtr" "static_supportsSlots" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :#7=SPECIES #S(#7# :#3# :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :DUMP DUMPER-FOR-LISPALLOCS :INDEX 1) :CHILDREN ("llvmo::ConstantDataArray_O") :IN-HIERARCHY T :ALLOC #S(LISPALLOC :#1# #2# :#3# "ConstantDataSequential_O" :#5# "/home/meister/Development/clasp/src/llvmo/llvmoExpose.h:949:5" :CTYPE #S(CXXRECORD-CTYPE :#1# "llvmo::ConstantDataSequential_O" :#3# "ConstantDataSequential_O")))
template <> class gctools::GCKind<llvmo::ConstantDataSequential_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_llvmo__ConstantDataSequential_O ;
};
#endif // defined(GC_KIND_SELECTORS)
#if defined(GC_OBJ_DUMP)
case KIND_ROOTCLASSALLOC_core__Lisp_O: {
    typedef core::Lisp_O type_KIND_ROOTCLASSALLOC_core__Lisp_O;
    sout << "KIND_ROOTCLASSALLOC_core__Lisp_O size[" << (AlignUp(sizeof(type_KIND_ROOTCLASSALLOC_core__Lisp_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_ROOTCLASSALLOC_asttooling__RegMap__RegistryMaps: {
    typedef asttooling::RegMap::RegistryMaps type_KIND_ROOTCLASSALLOC_asttooling__RegMap__RegistryMaps;
    sout << "KIND_ROOTCLASSALLOC_asttooling__RegMap__RegistryMaps size[" << (AlignUp(sizeof(type_KIND_ROOTCLASSALLOC_asttooling__RegMap__RegistryMaps))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_TEMPLATED_CLASSALLOC_core__Creator: {
    core::Creator* obj_gc_safe = reinterpret_cast<core::Creator*>(client);
    sout << "KIND_TEMPLATED_CLASSALLOC_core__Creator size[" << (AlignUp(obj_gc_safe->templatedSizeof()) + global_alignup_sizeof_header) << "]" ;
} break;
case KIND_TEMPLATED_CLASSALLOC_clbind__ConstructorCreator: {
    clbind::ConstructorCreator* obj_gc_safe = reinterpret_cast<clbind::ConstructorCreator*>(client);
    sout << "KIND_TEMPLATED_CLASSALLOC_clbind__ConstructorCreator size[" << (AlignUp(obj_gc_safe->templatedSizeof()) + global_alignup_sizeof_header) << "]" ;
} break;
case KIND_CLASSALLOC_core__InstanceCreator: {
    typedef core::InstanceCreator type_KIND_CLASSALLOC_core__InstanceCreator;
    sout << "KIND_CLASSALLOC_core__InstanceCreator size[" << (AlignUp(sizeof(type_KIND_CLASSALLOC_core__InstanceCreator))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_CLASSALLOC_clbind__DummyCreator: {
    typedef clbind::DummyCreator type_KIND_CLASSALLOC_clbind__DummyCreator;
    sout << "KIND_CLASSALLOC_clbind__DummyCreator size[" << (AlignUp(sizeof(type_KIND_CLASSALLOC_clbind__DummyCreator))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_CLASSALLOC_core__SequenceStepper: {
    typedef core::SequenceStepper type_KIND_CLASSALLOC_core__SequenceStepper;
    sout << "KIND_CLASSALLOC_core__SequenceStepper size[" << (AlignUp(sizeof(type_KIND_CLASSALLOC_core__SequenceStepper))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_CLASSALLOC_core__ConsStepper: {
    typedef core::ConsStepper type_KIND_CLASSALLOC_core__ConsStepper;
    sout << "KIND_CLASSALLOC_core__ConsStepper size[" << (AlignUp(sizeof(type_KIND_CLASSALLOC_core__ConsStepper))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_CLASSALLOC_core__VectorStepper: {
    typedef core::VectorStepper type_KIND_CLASSALLOC_core__VectorStepper;
    sout << "KIND_CLASSALLOC_core__VectorStepper size[" << (AlignUp(sizeof(type_KIND_CLASSALLOC_core__VectorStepper))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_ROOTCLASSALLOC_clbind__detail__class_map: {
    typedef clbind::detail::class_map type_KIND_ROOTCLASSALLOC_clbind__detail__class_map;
    sout << "KIND_ROOTCLASSALLOC_clbind__detail__class_map size[" << (AlignUp(sizeof(type_KIND_ROOTCLASSALLOC_clbind__detail__class_map))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_BOOTSTRAP_core__T_O: {
    typedef core::T_O type_KIND_BOOTSTRAP_core__T_O;
    sout << "KIND_BOOTSTRAP_core__T_O size[" << (AlignUp(sizeof(type_KIND_BOOTSTRAP_core__T_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__Cons_O: {
    typedef core::Cons_O type_KIND_LISPALLOC_core__Cons_O;
    sout << "KIND_LISPALLOC_core__Cons_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__Cons_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_cffi__Pointer_O: {
    typedef cffi::Pointer_O type_KIND_LISPALLOC_cffi__Pointer_O;
    sout << "KIND_LISPALLOC_cffi__Pointer_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_cffi__Pointer_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__Stream_O: {
    typedef core::Stream_O type_KIND_LISPALLOC_core__Stream_O;
    sout << "KIND_LISPALLOC_core__Stream_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__Stream_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__AnsiStream_O: {
    typedef core::AnsiStream_O type_KIND_LISPALLOC_core__AnsiStream_O;
    sout << "KIND_LISPALLOC_core__AnsiStream_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__AnsiStream_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__TwoWayStream_O: {
    typedef core::TwoWayStream_O type_KIND_LISPALLOC_core__TwoWayStream_O;
    sout << "KIND_LISPALLOC_core__TwoWayStream_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__TwoWayStream_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__FileStream_O: {
    typedef core::FileStream_O type_KIND_LISPALLOC_core__FileStream_O;
    sout << "KIND_LISPALLOC_core__FileStream_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__FileStream_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__IOFileStream_O: {
    typedef core::IOFileStream_O type_KIND_LISPALLOC_core__IOFileStream_O;
    sout << "KIND_LISPALLOC_core__IOFileStream_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__IOFileStream_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__IOStreamStream_O: {
    typedef core::IOStreamStream_O type_KIND_LISPALLOC_core__IOStreamStream_O;
    sout << "KIND_LISPALLOC_core__IOStreamStream_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__IOStreamStream_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__BroadcastStream_O: {
    typedef core::BroadcastStream_O type_KIND_LISPALLOC_core__BroadcastStream_O;
    sout << "KIND_LISPALLOC_core__BroadcastStream_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__BroadcastStream_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__StringStream_O: {
    typedef core::StringStream_O type_KIND_LISPALLOC_core__StringStream_O;
    sout << "KIND_LISPALLOC_core__StringStream_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__StringStream_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__StringOutputStream_O: {
    typedef core::StringOutputStream_O type_KIND_LISPALLOC_core__StringOutputStream_O;
    sout << "KIND_LISPALLOC_core__StringOutputStream_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__StringOutputStream_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__StringInputStream_O: {
    typedef core::StringInputStream_O type_KIND_LISPALLOC_core__StringInputStream_O;
    sout << "KIND_LISPALLOC_core__StringInputStream_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__StringInputStream_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__SynonymStream_O: {
    typedef core::SynonymStream_O type_KIND_LISPALLOC_core__SynonymStream_O;
    sout << "KIND_LISPALLOC_core__SynonymStream_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__SynonymStream_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__EchoStream_O: {
    typedef core::EchoStream_O type_KIND_LISPALLOC_core__EchoStream_O;
    sout << "KIND_LISPALLOC_core__EchoStream_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__EchoStream_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__ConcatenatedStream_O: {
    typedef core::ConcatenatedStream_O type_KIND_LISPALLOC_core__ConcatenatedStream_O;
    sout << "KIND_LISPALLOC_core__ConcatenatedStream_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__ConcatenatedStream_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__Pathname_O: {
    typedef core::Pathname_O type_KIND_LISPALLOC_core__Pathname_O;
    sout << "KIND_LISPALLOC_core__Pathname_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__Pathname_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__LogicalPathname_O: {
    typedef core::LogicalPathname_O type_KIND_LISPALLOC_core__LogicalPathname_O;
    sout << "KIND_LISPALLOC_core__LogicalPathname_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__LogicalPathname_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__Environment_O: {
    typedef core::Environment_O type_KIND_LISPALLOC_core__Environment_O;
    sout << "KIND_LISPALLOC_core__Environment_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__Environment_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__GlueEnvironment_O: {
    typedef core::GlueEnvironment_O type_KIND_LISPALLOC_core__GlueEnvironment_O;
    sout << "KIND_LISPALLOC_core__GlueEnvironment_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__GlueEnvironment_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__LexicalEnvironment_O: {
    typedef core::LexicalEnvironment_O type_KIND_LISPALLOC_core__LexicalEnvironment_O;
    sout << "KIND_LISPALLOC_core__LexicalEnvironment_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__LexicalEnvironment_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__CompileTimeEnvironment_O: {
    typedef core::CompileTimeEnvironment_O type_KIND_LISPALLOC_core__CompileTimeEnvironment_O;
    sout << "KIND_LISPALLOC_core__CompileTimeEnvironment_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__CompileTimeEnvironment_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__CatchEnvironment_O: {
    typedef core::CatchEnvironment_O type_KIND_LISPALLOC_core__CatchEnvironment_O;
    sout << "KIND_LISPALLOC_core__CatchEnvironment_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__CatchEnvironment_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__BlockEnvironment_O: {
    typedef core::BlockEnvironment_O type_KIND_LISPALLOC_core__BlockEnvironment_O;
    sout << "KIND_LISPALLOC_core__BlockEnvironment_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__BlockEnvironment_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__UnwindProtectEnvironment_O: {
    typedef core::UnwindProtectEnvironment_O type_KIND_LISPALLOC_core__UnwindProtectEnvironment_O;
    sout << "KIND_LISPALLOC_core__UnwindProtectEnvironment_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__UnwindProtectEnvironment_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__FunctionContainerEnvironment_O: {
    typedef core::FunctionContainerEnvironment_O type_KIND_LISPALLOC_core__FunctionContainerEnvironment_O;
    sout << "KIND_LISPALLOC_core__FunctionContainerEnvironment_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__FunctionContainerEnvironment_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__SymbolMacroletEnvironment_O: {
    typedef core::SymbolMacroletEnvironment_O type_KIND_LISPALLOC_core__SymbolMacroletEnvironment_O;
    sout << "KIND_LISPALLOC_core__SymbolMacroletEnvironment_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__SymbolMacroletEnvironment_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__MacroletEnvironment_O: {
    typedef core::MacroletEnvironment_O type_KIND_LISPALLOC_core__MacroletEnvironment_O;
    sout << "KIND_LISPALLOC_core__MacroletEnvironment_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__MacroletEnvironment_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__RuntimeVisibleEnvironment_O: {
    typedef core::RuntimeVisibleEnvironment_O type_KIND_LISPALLOC_core__RuntimeVisibleEnvironment_O;
    sout << "KIND_LISPALLOC_core__RuntimeVisibleEnvironment_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__RuntimeVisibleEnvironment_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__ValueEnvironment_O: {
    typedef core::ValueEnvironment_O type_KIND_LISPALLOC_core__ValueEnvironment_O;
    sout << "KIND_LISPALLOC_core__ValueEnvironment_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__ValueEnvironment_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__FunctionValueEnvironment_O: {
    typedef core::FunctionValueEnvironment_O type_KIND_LISPALLOC_core__FunctionValueEnvironment_O;
    sout << "KIND_LISPALLOC_core__FunctionValueEnvironment_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__FunctionValueEnvironment_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__TagbodyEnvironment_O: {
    typedef core::TagbodyEnvironment_O type_KIND_LISPALLOC_core__TagbodyEnvironment_O;
    sout << "KIND_LISPALLOC_core__TagbodyEnvironment_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__TagbodyEnvironment_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__ActivationFrame_O: {
    typedef core::ActivationFrame_O type_KIND_LISPALLOC_core__ActivationFrame_O;
    sout << "KIND_LISPALLOC_core__ActivationFrame_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__ActivationFrame_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__TagbodyFrame_O: {
    typedef core::TagbodyFrame_O type_KIND_LISPALLOC_core__TagbodyFrame_O;
    sout << "KIND_LISPALLOC_core__TagbodyFrame_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__TagbodyFrame_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__FunctionFrame_O: {
    typedef core::FunctionFrame_O type_KIND_LISPALLOC_core__FunctionFrame_O;
    sout << "KIND_LISPALLOC_core__FunctionFrame_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__FunctionFrame_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__ValueFrame_O: {
    typedef core::ValueFrame_O type_KIND_LISPALLOC_core__ValueFrame_O;
    sout << "KIND_LISPALLOC_core__ValueFrame_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__ValueFrame_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__SingleDispatchMethod_O: {
    typedef core::SingleDispatchMethod_O type_KIND_LISPALLOC_core__SingleDispatchMethod_O;
    sout << "KIND_LISPALLOC_core__SingleDispatchMethod_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__SingleDispatchMethod_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__SourceFileInfo_O: {
    typedef core::SourceFileInfo_O type_KIND_LISPALLOC_core__SourceFileInfo_O;
    sout << "KIND_LISPALLOC_core__SourceFileInfo_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__SourceFileInfo_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__ObjectSet_O: {
    typedef core::ObjectSet_O type_KIND_LISPALLOC_core__ObjectSet_O;
    sout << "KIND_LISPALLOC_core__ObjectSet_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__ObjectSet_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__DirectoryEntry_O: {
    typedef core::DirectoryEntry_O type_KIND_LISPALLOC_core__DirectoryEntry_O;
    sout << "KIND_LISPALLOC_core__DirectoryEntry_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__DirectoryEntry_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__Pointer_O: {
    typedef core::Pointer_O type_KIND_LISPALLOC_core__Pointer_O;
    sout << "KIND_LISPALLOC_core__Pointer_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__Pointer_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__Path_O: {
    typedef core::Path_O type_KIND_LISPALLOC_core__Path_O;
    sout << "KIND_LISPALLOC_core__Path_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__Path_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__DebugInfo_O: {
    typedef llvmo::DebugInfo_O type_KIND_LISPALLOC_llvmo__DebugInfo_O;
    sout << "KIND_LISPALLOC_llvmo__DebugInfo_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DebugInfo_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__DICompositeType_O: {
    typedef llvmo::DICompositeType_O type_KIND_LISPALLOC_llvmo__DICompositeType_O;
    sout << "KIND_LISPALLOC_llvmo__DICompositeType_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DICompositeType_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__DIBasicType_O: {
    typedef llvmo::DIBasicType_O type_KIND_LISPALLOC_llvmo__DIBasicType_O;
    sout << "KIND_LISPALLOC_llvmo__DIBasicType_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DIBasicType_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__DIType_O: {
    typedef llvmo::DIType_O type_KIND_LISPALLOC_llvmo__DIType_O;
    sout << "KIND_LISPALLOC_llvmo__DIType_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DIType_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__DISubprogram_O: {
    typedef llvmo::DISubprogram_O type_KIND_LISPALLOC_llvmo__DISubprogram_O;
    sout << "KIND_LISPALLOC_llvmo__DISubprogram_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DISubprogram_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__DIArray_O: {
    typedef llvmo::DIArray_O type_KIND_LISPALLOC_llvmo__DIArray_O;
    sout << "KIND_LISPALLOC_llvmo__DIArray_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DIArray_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__DITypeArray_O: {
    typedef llvmo::DITypeArray_O type_KIND_LISPALLOC_llvmo__DITypeArray_O;
    sout << "KIND_LISPALLOC_llvmo__DITypeArray_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DITypeArray_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__DISubroutineType_O: {
    typedef llvmo::DISubroutineType_O type_KIND_LISPALLOC_llvmo__DISubroutineType_O;
    sout << "KIND_LISPALLOC_llvmo__DISubroutineType_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DISubroutineType_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__DIScope_O: {
    typedef llvmo::DIScope_O type_KIND_LISPALLOC_llvmo__DIScope_O;
    sout << "KIND_LISPALLOC_llvmo__DIScope_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DIScope_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__DIFile_O: {
    typedef llvmo::DIFile_O type_KIND_LISPALLOC_llvmo__DIFile_O;
    sout << "KIND_LISPALLOC_llvmo__DIFile_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DIFile_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__DIDescriptor_O: {
    typedef llvmo::DIDescriptor_O type_KIND_LISPALLOC_llvmo__DIDescriptor_O;
    sout << "KIND_LISPALLOC_llvmo__DIDescriptor_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DIDescriptor_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__DICompileUnit_O: {
    typedef llvmo::DICompileUnit_O type_KIND_LISPALLOC_llvmo__DICompileUnit_O;
    sout << "KIND_LISPALLOC_llvmo__DICompileUnit_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DICompileUnit_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__DIDerivedType_O: {
    typedef llvmo::DIDerivedType_O type_KIND_LISPALLOC_llvmo__DIDerivedType_O;
    sout << "KIND_LISPALLOC_llvmo__DIDerivedType_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DIDerivedType_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__DILexicalBlock_O: {
    typedef llvmo::DILexicalBlock_O type_KIND_LISPALLOC_llvmo__DILexicalBlock_O;
    sout << "KIND_LISPALLOC_llvmo__DILexicalBlock_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DILexicalBlock_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__StructureObject_O: {
    typedef core::StructureObject_O type_KIND_LISPALLOC_core__StructureObject_O;
    sout << "KIND_LISPALLOC_core__StructureObject_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__StructureObject_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__LambdaListHandler_O: {
    typedef core::LambdaListHandler_O type_KIND_LISPALLOC_core__LambdaListHandler_O;
    sout << "KIND_LISPALLOC_core__LambdaListHandler_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__LambdaListHandler_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_TEMPLATED_LISPALLOC_core__Iterator_O: {
    core::Iterator_O* obj_gc_safe = reinterpret_cast<core::Iterator_O*>(client);
    sout << "KIND_TEMPLATED_LISPALLOC_core__Iterator_O size[" << (AlignUp(obj_gc_safe->templatedSizeof()) + global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__DirectoryIterator_O: {
    typedef core::DirectoryIterator_O type_KIND_LISPALLOC_core__DirectoryIterator_O;
    sout << "KIND_LISPALLOC_core__DirectoryIterator_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__DirectoryIterator_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__RecursiveDirectoryIterator_O: {
    typedef core::RecursiveDirectoryIterator_O type_KIND_LISPALLOC_core__RecursiveDirectoryIterator_O;
    sout << "KIND_LISPALLOC_core__RecursiveDirectoryIterator_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__RecursiveDirectoryIterator_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__PosixTimeDuration_O: {
    typedef core::PosixTimeDuration_O type_KIND_LISPALLOC_core__PosixTimeDuration_O;
    sout << "KIND_LISPALLOC_core__PosixTimeDuration_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__PosixTimeDuration_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__FileStatus_O: {
    typedef core::FileStatus_O type_KIND_LISPALLOC_core__FileStatus_O;
    sout << "KIND_LISPALLOC_core__FileStatus_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__FileStatus_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_clbind__ClassRegistry_O: {
    typedef clbind::ClassRegistry_O type_KIND_LISPALLOC_clbind__ClassRegistry_O;
    sout << "KIND_LISPALLOC_clbind__ClassRegistry_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_clbind__ClassRegistry_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__Archive_O: {
    typedef core::Archive_O type_KIND_LISPALLOC_core__Archive_O;
    sout << "KIND_LISPALLOC_core__Archive_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__Archive_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__SaveArchive_O: {
    typedef core::SaveArchive_O type_KIND_LISPALLOC_core__SaveArchive_O;
    sout << "KIND_LISPALLOC_core__SaveArchive_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__SaveArchive_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__SexpSaveArchive_O: {
    typedef core::SexpSaveArchive_O type_KIND_LISPALLOC_core__SexpSaveArchive_O;
    sout << "KIND_LISPALLOC_core__SexpSaveArchive_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__SexpSaveArchive_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__LoadArchive_O: {
    typedef core::LoadArchive_O type_KIND_LISPALLOC_core__LoadArchive_O;
    sout << "KIND_LISPALLOC_core__LoadArchive_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__LoadArchive_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__SexpLoadArchive_O: {
    typedef core::SexpLoadArchive_O type_KIND_LISPALLOC_core__SexpLoadArchive_O;
    sout << "KIND_LISPALLOC_core__SexpLoadArchive_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__SexpLoadArchive_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__RegexMatch_O: {
    typedef core::RegexMatch_O type_KIND_LISPALLOC_core__RegexMatch_O;
    sout << "KIND_LISPALLOC_core__RegexMatch_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__RegexMatch_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__SourcePosInfo_O: {
    typedef core::SourcePosInfo_O type_KIND_LISPALLOC_core__SourcePosInfo_O;
    sout << "KIND_LISPALLOC_core__SourcePosInfo_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__SourcePosInfo_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__Character_O: {
    typedef core::Character_O type_KIND_LISPALLOC_core__Character_O;
    sout << "KIND_LISPALLOC_core__Character_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__Character_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__ExtendedChar_O: {
    typedef core::ExtendedChar_O type_KIND_LISPALLOC_core__ExtendedChar_O;
    sout << "KIND_LISPALLOC_core__ExtendedChar_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__ExtendedChar_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__BaseChar_O: {
    typedef core::BaseChar_O type_KIND_LISPALLOC_core__BaseChar_O;
    sout << "KIND_LISPALLOC_core__BaseChar_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__BaseChar_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__StandardChar_O: {
    typedef core::StandardChar_O type_KIND_LISPALLOC_core__StandardChar_O;
    sout << "KIND_LISPALLOC_core__StandardChar_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__StandardChar_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__MicroHeap_O: {
    typedef core::MicroHeap_O type_KIND_LISPALLOC_core__MicroHeap_O;
    sout << "KIND_LISPALLOC_core__MicroHeap_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__MicroHeap_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__Function_O: {
    typedef core::Function_O type_KIND_LISPALLOC_core__Function_O;
    sout << "KIND_LISPALLOC_core__Function_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__Function_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__SingleDispatchEffectiveMethodFunction_O: {
    typedef core::SingleDispatchEffectiveMethodFunction_O type_KIND_LISPALLOC_core__SingleDispatchEffectiveMethodFunction_O;
    sout << "KIND_LISPALLOC_core__SingleDispatchEffectiveMethodFunction_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__SingleDispatchEffectiveMethodFunction_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__SingleDispatchGenericFunction_O: {
    typedef core::SingleDispatchGenericFunction_O type_KIND_LISPALLOC_core__SingleDispatchGenericFunction_O;
    sout << "KIND_LISPALLOC_core__SingleDispatchGenericFunction_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__SingleDispatchGenericFunction_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__CompiledFunction_O: {
    typedef core::CompiledFunction_O type_KIND_LISPALLOC_core__CompiledFunction_O;
    sout << "KIND_LISPALLOC_core__CompiledFunction_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__CompiledFunction_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__Instance_O: {
    typedef core::Instance_O type_KIND_LISPALLOC_core__Instance_O;
    sout << "KIND_LISPALLOC_core__Instance_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__Instance_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__SpecialForm_O: {
    typedef core::SpecialForm_O type_KIND_LISPALLOC_core__SpecialForm_O;
    sout << "KIND_LISPALLOC_core__SpecialForm_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__SpecialForm_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__WeakKeyMapping_O: {
    typedef core::WeakKeyMapping_O type_KIND_LISPALLOC_core__WeakKeyMapping_O;
    sout << "KIND_LISPALLOC_core__WeakKeyMapping_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__WeakKeyMapping_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__DebugLoc_O: {
    typedef llvmo::DebugLoc_O type_KIND_LISPALLOC_llvmo__DebugLoc_O;
    sout << "KIND_LISPALLOC_llvmo__DebugLoc_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DebugLoc_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__Regex_O: {
    typedef core::Regex_O type_KIND_LISPALLOC_core__Regex_O;
    sout << "KIND_LISPALLOC_core__Regex_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__Regex_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__Package_O: {
    typedef core::Package_O type_KIND_LISPALLOC_core__Package_O;
    sout << "KIND_LISPALLOC_core__Package_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__Package_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__CandoException_O: {
    typedef core::CandoException_O type_KIND_LISPALLOC_core__CandoException_O;
    sout << "KIND_LISPALLOC_core__CandoException_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__CandoException_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__StringList_O: {
    typedef core::StringList_O type_KIND_LISPALLOC_core__StringList_O;
    sout << "KIND_LISPALLOC_core__StringList_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__StringList_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__IntArray_O: {
    typedef core::IntArray_O type_KIND_LISPALLOC_core__IntArray_O;
    sout << "KIND_LISPALLOC_core__IntArray_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__IntArray_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__Number_O: {
    typedef core::Number_O type_KIND_LISPALLOC_core__Number_O;
    sout << "KIND_LISPALLOC_core__Number_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__Number_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__Real_O: {
    typedef core::Real_O type_KIND_LISPALLOC_core__Real_O;
    sout << "KIND_LISPALLOC_core__Real_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__Real_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__Float_O: {
    typedef core::Float_O type_KIND_LISPALLOC_core__Float_O;
    sout << "KIND_LISPALLOC_core__Float_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__Float_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__ShortFloat_O: {
    typedef core::ShortFloat_O type_KIND_LISPALLOC_core__ShortFloat_O;
    sout << "KIND_LISPALLOC_core__ShortFloat_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__ShortFloat_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__DoubleFloat_O: {
    typedef core::DoubleFloat_O type_KIND_LISPALLOC_core__DoubleFloat_O;
    sout << "KIND_LISPALLOC_core__DoubleFloat_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__DoubleFloat_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__SingleFloat_O: {
    typedef core::SingleFloat_O type_KIND_LISPALLOC_core__SingleFloat_O;
    sout << "KIND_LISPALLOC_core__SingleFloat_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__SingleFloat_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__Rational_O: {
    typedef core::Rational_O type_KIND_LISPALLOC_core__Rational_O;
    sout << "KIND_LISPALLOC_core__Rational_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__Rational_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__Ratio_O: {
    typedef core::Ratio_O type_KIND_LISPALLOC_core__Ratio_O;
    sout << "KIND_LISPALLOC_core__Ratio_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__Ratio_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__Integer_O: {
    typedef core::Integer_O type_KIND_LISPALLOC_core__Integer_O;
    sout << "KIND_LISPALLOC_core__Integer_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__Integer_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__Bignum_O: {
    typedef core::Bignum_O type_KIND_LISPALLOC_core__Bignum_O;
    sout << "KIND_LISPALLOC_core__Bignum_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__Bignum_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__Fixnum_O: {
    typedef core::Fixnum_O type_KIND_LISPALLOC_core__Fixnum_O;
    sout << "KIND_LISPALLOC_core__Fixnum_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__Fixnum_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__Complex_O: {
    typedef core::Complex_O type_KIND_LISPALLOC_core__Complex_O;
    sout << "KIND_LISPALLOC_core__Complex_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__Complex_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__PosixTime_O: {
    typedef core::PosixTime_O type_KIND_LISPALLOC_core__PosixTime_O;
    sout << "KIND_LISPALLOC_core__PosixTime_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__PosixTime_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__ReadTable_O: {
    typedef core::ReadTable_O type_KIND_LISPALLOC_core__ReadTable_O;
    sout << "KIND_LISPALLOC_core__ReadTable_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__ReadTable_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__Attribute_O: {
    typedef llvmo::Attribute_O type_KIND_LISPALLOC_llvmo__Attribute_O;
    sout << "KIND_LISPALLOC_llvmo__Attribute_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__Attribute_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__Array_O: {
    typedef core::Array_O type_KIND_LISPALLOC_core__Array_O;
    sout << "KIND_LISPALLOC_core__Array_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__Array_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__ArrayObjects_O: {
    typedef core::ArrayObjects_O type_KIND_LISPALLOC_core__ArrayObjects_O;
    sout << "KIND_LISPALLOC_core__ArrayObjects_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__ArrayObjects_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__Vector_O: {
    typedef core::Vector_O type_KIND_LISPALLOC_core__Vector_O;
    sout << "KIND_LISPALLOC_core__Vector_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__Vector_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__String_O: {
    typedef core::String_O type_KIND_LISPALLOC_core__String_O;
    sout << "KIND_LISPALLOC_core__String_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__String_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_BOOTSTRAP_core__Str_O: {
    typedef core::Str_O type_KIND_BOOTSTRAP_core__Str_O;
    sout << "KIND_BOOTSTRAP_core__Str_O size[" << (AlignUp(sizeof(type_KIND_BOOTSTRAP_core__Str_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__StrWithFillPtr_O: {
    typedef core::StrWithFillPtr_O type_KIND_LISPALLOC_core__StrWithFillPtr_O;
    sout << "KIND_LISPALLOC_core__StrWithFillPtr_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__StrWithFillPtr_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__VectorObjects_O: {
    typedef core::VectorObjects_O type_KIND_LISPALLOC_core__VectorObjects_O;
    sout << "KIND_LISPALLOC_core__VectorObjects_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__VectorObjects_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__VectorObjectsWithFillPtr_O: {
    typedef core::VectorObjectsWithFillPtr_O type_KIND_LISPALLOC_core__VectorObjectsWithFillPtr_O;
    sout << "KIND_LISPALLOC_core__VectorObjectsWithFillPtr_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__VectorObjectsWithFillPtr_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__BitVector_O: {
    typedef core::BitVector_O type_KIND_LISPALLOC_core__BitVector_O;
    sout << "KIND_LISPALLOC_core__BitVector_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__BitVector_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__SimpleBitVector_O: {
    typedef core::SimpleBitVector_O type_KIND_LISPALLOC_core__SimpleBitVector_O;
    sout << "KIND_LISPALLOC_core__SimpleBitVector_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__SimpleBitVector_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__SmallMap_O: {
    typedef core::SmallMap_O type_KIND_LISPALLOC_core__SmallMap_O;
    sout << "KIND_LISPALLOC_core__SmallMap_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__SmallMap_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__Reader_O: {
    typedef core::Reader_O type_KIND_LISPALLOC_core__Reader_O;
    sout << "KIND_LISPALLOC_core__Reader_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__Reader_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__ObjRef_O: {
    typedef core::ObjRef_O type_KIND_LISPALLOC_core__ObjRef_O;
    sout << "KIND_LISPALLOC_core__ObjRef_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__ObjRef_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__InsertPoint_O: {
    typedef llvmo::InsertPoint_O type_KIND_LISPALLOC_llvmo__InsertPoint_O;
    sout << "KIND_LISPALLOC_llvmo__InsertPoint_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__InsertPoint_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__SourceManager_O: {
    typedef core::SourceManager_O type_KIND_LISPALLOC_core__SourceManager_O;
    sout << "KIND_LISPALLOC_core__SourceManager_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__SourceManager_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__ExternalObject_O: {
    typedef core::ExternalObject_O type_KIND_LISPALLOC_core__ExternalObject_O;
    sout << "KIND_LISPALLOC_core__ExternalObject_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__ExternalObject_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__Pass_O: {
    typedef llvmo::Pass_O type_KIND_LISPALLOC_llvmo__Pass_O;
    sout << "KIND_LISPALLOC_llvmo__Pass_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__Pass_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__FunctionPass_O: {
    typedef llvmo::FunctionPass_O type_KIND_LISPALLOC_llvmo__FunctionPass_O;
    sout << "KIND_LISPALLOC_llvmo__FunctionPass_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__FunctionPass_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__ModulePass_O: {
    typedef llvmo::ModulePass_O type_KIND_LISPALLOC_llvmo__ModulePass_O;
    sout << "KIND_LISPALLOC_llvmo__ModulePass_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ModulePass_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__ImmutablePass_O: {
    typedef llvmo::ImmutablePass_O type_KIND_LISPALLOC_llvmo__ImmutablePass_O;
    sout << "KIND_LISPALLOC_llvmo__ImmutablePass_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ImmutablePass_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__DataLayoutPass_O: {
    typedef llvmo::DataLayoutPass_O type_KIND_LISPALLOC_llvmo__DataLayoutPass_O;
    sout << "KIND_LISPALLOC_llvmo__DataLayoutPass_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DataLayoutPass_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__IRBuilderBase_O: {
    typedef llvmo::IRBuilderBase_O type_KIND_LISPALLOC_llvmo__IRBuilderBase_O;
    sout << "KIND_LISPALLOC_llvmo__IRBuilderBase_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__IRBuilderBase_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__IRBuilder_O: {
    typedef llvmo::IRBuilder_O type_KIND_LISPALLOC_llvmo__IRBuilder_O;
    sout << "KIND_LISPALLOC_llvmo__IRBuilder_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__IRBuilder_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__DIBuilder_O: {
    typedef llvmo::DIBuilder_O type_KIND_LISPALLOC_llvmo__DIBuilder_O;
    sout << "KIND_LISPALLOC_llvmo__DIBuilder_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DIBuilder_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__ExecutionEngine_O: {
    typedef llvmo::ExecutionEngine_O type_KIND_LISPALLOC_llvmo__ExecutionEngine_O;
    sout << "KIND_LISPALLOC_llvmo__ExecutionEngine_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ExecutionEngine_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__EngineBuilder_O: {
    typedef llvmo::EngineBuilder_O type_KIND_LISPALLOC_llvmo__EngineBuilder_O;
    sout << "KIND_LISPALLOC_llvmo__EngineBuilder_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__EngineBuilder_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__APInt_O: {
    typedef llvmo::APInt_O type_KIND_LISPALLOC_llvmo__APInt_O;
    sout << "KIND_LISPALLOC_llvmo__APInt_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__APInt_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__APFloat_O: {
    typedef llvmo::APFloat_O type_KIND_LISPALLOC_llvmo__APFloat_O;
    sout << "KIND_LISPALLOC_llvmo__APFloat_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__APFloat_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__ForeignData_O: {
    typedef core::ForeignData_O type_KIND_LISPALLOC_core__ForeignData_O;
    sout << "KIND_LISPALLOC_core__ForeignData_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__ForeignData_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__PassManagerBuilder_O: {
    typedef llvmo::PassManagerBuilder_O type_KIND_LISPALLOC_llvmo__PassManagerBuilder_O;
    sout << "KIND_LISPALLOC_llvmo__PassManagerBuilder_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__PassManagerBuilder_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__PassManagerBase_O: {
    typedef llvmo::PassManagerBase_O type_KIND_LISPALLOC_llvmo__PassManagerBase_O;
    sout << "KIND_LISPALLOC_llvmo__PassManagerBase_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__PassManagerBase_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__PassManager_O: {
    typedef llvmo::PassManager_O type_KIND_LISPALLOC_llvmo__PassManager_O;
    sout << "KIND_LISPALLOC_llvmo__PassManager_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__PassManager_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__FunctionPassManager_O: {
    typedef llvmo::FunctionPassManager_O type_KIND_LISPALLOC_llvmo__FunctionPassManager_O;
    sout << "KIND_LISPALLOC_llvmo__FunctionPassManager_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__FunctionPassManager_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__DataLayout_O: {
    typedef llvmo::DataLayout_O type_KIND_LISPALLOC_llvmo__DataLayout_O;
    sout << "KIND_LISPALLOC_llvmo__DataLayout_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DataLayout_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__Type_O: {
    typedef llvmo::Type_O type_KIND_LISPALLOC_llvmo__Type_O;
    sout << "KIND_LISPALLOC_llvmo__Type_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__Type_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__CompositeType_O: {
    typedef llvmo::CompositeType_O type_KIND_LISPALLOC_llvmo__CompositeType_O;
    sout << "KIND_LISPALLOC_llvmo__CompositeType_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__CompositeType_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__SequentialType_O: {
    typedef llvmo::SequentialType_O type_KIND_LISPALLOC_llvmo__SequentialType_O;
    sout << "KIND_LISPALLOC_llvmo__SequentialType_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__SequentialType_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__PointerType_O: {
    typedef llvmo::PointerType_O type_KIND_LISPALLOC_llvmo__PointerType_O;
    sout << "KIND_LISPALLOC_llvmo__PointerType_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__PointerType_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__VectorType_O: {
    typedef llvmo::VectorType_O type_KIND_LISPALLOC_llvmo__VectorType_O;
    sout << "KIND_LISPALLOC_llvmo__VectorType_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__VectorType_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__ArrayType_O: {
    typedef llvmo::ArrayType_O type_KIND_LISPALLOC_llvmo__ArrayType_O;
    sout << "KIND_LISPALLOC_llvmo__ArrayType_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ArrayType_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__StructType_O: {
    typedef llvmo::StructType_O type_KIND_LISPALLOC_llvmo__StructType_O;
    sout << "KIND_LISPALLOC_llvmo__StructType_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__StructType_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__IntegerType_O: {
    typedef llvmo::IntegerType_O type_KIND_LISPALLOC_llvmo__IntegerType_O;
    sout << "KIND_LISPALLOC_llvmo__IntegerType_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__IntegerType_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__FunctionType_O: {
    typedef llvmo::FunctionType_O type_KIND_LISPALLOC_llvmo__FunctionType_O;
    sout << "KIND_LISPALLOC_llvmo__FunctionType_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__FunctionType_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__Linker_O: {
    typedef llvmo::Linker_O type_KIND_LISPALLOC_llvmo__Linker_O;
    sout << "KIND_LISPALLOC_llvmo__Linker_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__Linker_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__Value_O: {
    typedef llvmo::Value_O type_KIND_LISPALLOC_llvmo__Value_O;
    sout << "KIND_LISPALLOC_llvmo__Value_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__Value_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__Argument_O: {
    typedef llvmo::Argument_O type_KIND_LISPALLOC_llvmo__Argument_O;
    sout << "KIND_LISPALLOC_llvmo__Argument_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__Argument_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__MDString_O: {
    typedef llvmo::MDString_O type_KIND_LISPALLOC_llvmo__MDString_O;
    sout << "KIND_LISPALLOC_llvmo__MDString_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__MDString_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__MDNode_O: {
    typedef llvmo::MDNode_O type_KIND_LISPALLOC_llvmo__MDNode_O;
    sout << "KIND_LISPALLOC_llvmo__MDNode_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__MDNode_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__BasicBlock_O: {
    typedef llvmo::BasicBlock_O type_KIND_LISPALLOC_llvmo__BasicBlock_O;
    sout << "KIND_LISPALLOC_llvmo__BasicBlock_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__BasicBlock_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__User_O: {
    typedef llvmo::User_O type_KIND_LISPALLOC_llvmo__User_O;
    sout << "KIND_LISPALLOC_llvmo__User_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__User_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__Instruction_O: {
    typedef llvmo::Instruction_O type_KIND_LISPALLOC_llvmo__Instruction_O;
    sout << "KIND_LISPALLOC_llvmo__Instruction_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__Instruction_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__AtomicRMWInst_O: {
    typedef llvmo::AtomicRMWInst_O type_KIND_LISPALLOC_llvmo__AtomicRMWInst_O;
    sout << "KIND_LISPALLOC_llvmo__AtomicRMWInst_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__AtomicRMWInst_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__StoreInst_O: {
    typedef llvmo::StoreInst_O type_KIND_LISPALLOC_llvmo__StoreInst_O;
    sout << "KIND_LISPALLOC_llvmo__StoreInst_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__StoreInst_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__PHINode_O: {
    typedef llvmo::PHINode_O type_KIND_LISPALLOC_llvmo__PHINode_O;
    sout << "KIND_LISPALLOC_llvmo__PHINode_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__PHINode_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__AtomicCmpXchgInst_O: {
    typedef llvmo::AtomicCmpXchgInst_O type_KIND_LISPALLOC_llvmo__AtomicCmpXchgInst_O;
    sout << "KIND_LISPALLOC_llvmo__AtomicCmpXchgInst_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__AtomicCmpXchgInst_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__LandingPadInst_O: {
    typedef llvmo::LandingPadInst_O type_KIND_LISPALLOC_llvmo__LandingPadInst_O;
    sout << "KIND_LISPALLOC_llvmo__LandingPadInst_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__LandingPadInst_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__UnaryInstruction_O: {
    typedef llvmo::UnaryInstruction_O type_KIND_LISPALLOC_llvmo__UnaryInstruction_O;
    sout << "KIND_LISPALLOC_llvmo__UnaryInstruction_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__UnaryInstruction_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__LoadInst_O: {
    typedef llvmo::LoadInst_O type_KIND_LISPALLOC_llvmo__LoadInst_O;
    sout << "KIND_LISPALLOC_llvmo__LoadInst_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__LoadInst_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__VAArgInst_O: {
    typedef llvmo::VAArgInst_O type_KIND_LISPALLOC_llvmo__VAArgInst_O;
    sout << "KIND_LISPALLOC_llvmo__VAArgInst_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__VAArgInst_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__AllocaInst_O: {
    typedef llvmo::AllocaInst_O type_KIND_LISPALLOC_llvmo__AllocaInst_O;
    sout << "KIND_LISPALLOC_llvmo__AllocaInst_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__AllocaInst_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__TerminatorInst_O: {
    typedef llvmo::TerminatorInst_O type_KIND_LISPALLOC_llvmo__TerminatorInst_O;
    sout << "KIND_LISPALLOC_llvmo__TerminatorInst_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__TerminatorInst_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__IndirectBrInst_O: {
    typedef llvmo::IndirectBrInst_O type_KIND_LISPALLOC_llvmo__IndirectBrInst_O;
    sout << "KIND_LISPALLOC_llvmo__IndirectBrInst_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__IndirectBrInst_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__UnreachableInst_O: {
    typedef llvmo::UnreachableInst_O type_KIND_LISPALLOC_llvmo__UnreachableInst_O;
    sout << "KIND_LISPALLOC_llvmo__UnreachableInst_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__UnreachableInst_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__InvokeInst_O: {
    typedef llvmo::InvokeInst_O type_KIND_LISPALLOC_llvmo__InvokeInst_O;
    sout << "KIND_LISPALLOC_llvmo__InvokeInst_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__InvokeInst_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__ReturnInst_O: {
    typedef llvmo::ReturnInst_O type_KIND_LISPALLOC_llvmo__ReturnInst_O;
    sout << "KIND_LISPALLOC_llvmo__ReturnInst_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ReturnInst_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__BranchInst_O: {
    typedef llvmo::BranchInst_O type_KIND_LISPALLOC_llvmo__BranchInst_O;
    sout << "KIND_LISPALLOC_llvmo__BranchInst_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__BranchInst_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__ResumeInst_O: {
    typedef llvmo::ResumeInst_O type_KIND_LISPALLOC_llvmo__ResumeInst_O;
    sout << "KIND_LISPALLOC_llvmo__ResumeInst_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ResumeInst_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__SwitchInst_O: {
    typedef llvmo::SwitchInst_O type_KIND_LISPALLOC_llvmo__SwitchInst_O;
    sout << "KIND_LISPALLOC_llvmo__SwitchInst_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__SwitchInst_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__FenceInst_O: {
    typedef llvmo::FenceInst_O type_KIND_LISPALLOC_llvmo__FenceInst_O;
    sout << "KIND_LISPALLOC_llvmo__FenceInst_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__FenceInst_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__CallInst_O: {
    typedef llvmo::CallInst_O type_KIND_LISPALLOC_llvmo__CallInst_O;
    sout << "KIND_LISPALLOC_llvmo__CallInst_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__CallInst_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__Constant_O: {
    typedef llvmo::Constant_O type_KIND_LISPALLOC_llvmo__Constant_O;
    sout << "KIND_LISPALLOC_llvmo__Constant_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__Constant_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__ConstantDataSequential_O: {
    typedef llvmo::ConstantDataSequential_O type_KIND_LISPALLOC_llvmo__ConstantDataSequential_O;
    sout << "KIND_LISPALLOC_llvmo__ConstantDataSequential_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ConstantDataSequential_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__ConstantDataArray_O: {
    typedef llvmo::ConstantDataArray_O type_KIND_LISPALLOC_llvmo__ConstantDataArray_O;
    sout << "KIND_LISPALLOC_llvmo__ConstantDataArray_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ConstantDataArray_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__ConstantStruct_O: {
    typedef llvmo::ConstantStruct_O type_KIND_LISPALLOC_llvmo__ConstantStruct_O;
    sout << "KIND_LISPALLOC_llvmo__ConstantStruct_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ConstantStruct_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__BlockAddress_O: {
    typedef llvmo::BlockAddress_O type_KIND_LISPALLOC_llvmo__BlockAddress_O;
    sout << "KIND_LISPALLOC_llvmo__BlockAddress_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__BlockAddress_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__ConstantPointerNull_O: {
    typedef llvmo::ConstantPointerNull_O type_KIND_LISPALLOC_llvmo__ConstantPointerNull_O;
    sout << "KIND_LISPALLOC_llvmo__ConstantPointerNull_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ConstantPointerNull_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__ConstantArray_O: {
    typedef llvmo::ConstantArray_O type_KIND_LISPALLOC_llvmo__ConstantArray_O;
    sout << "KIND_LISPALLOC_llvmo__ConstantArray_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ConstantArray_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__ConstantFP_O: {
    typedef llvmo::ConstantFP_O type_KIND_LISPALLOC_llvmo__ConstantFP_O;
    sout << "KIND_LISPALLOC_llvmo__ConstantFP_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ConstantFP_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__GlobalValue_O: {
    typedef llvmo::GlobalValue_O type_KIND_LISPALLOC_llvmo__GlobalValue_O;
    sout << "KIND_LISPALLOC_llvmo__GlobalValue_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__GlobalValue_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__Function_O: {
    typedef llvmo::Function_O type_KIND_LISPALLOC_llvmo__Function_O;
    sout << "KIND_LISPALLOC_llvmo__Function_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__Function_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__GlobalVariable_O: {
    typedef llvmo::GlobalVariable_O type_KIND_LISPALLOC_llvmo__GlobalVariable_O;
    sout << "KIND_LISPALLOC_llvmo__GlobalVariable_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__GlobalVariable_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__ConstantExpr_O: {
    typedef llvmo::ConstantExpr_O type_KIND_LISPALLOC_llvmo__ConstantExpr_O;
    sout << "KIND_LISPALLOC_llvmo__ConstantExpr_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ConstantExpr_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__UndefValue_O: {
    typedef llvmo::UndefValue_O type_KIND_LISPALLOC_llvmo__UndefValue_O;
    sout << "KIND_LISPALLOC_llvmo__UndefValue_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__UndefValue_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__ConstantInt_O: {
    typedef llvmo::ConstantInt_O type_KIND_LISPALLOC_llvmo__ConstantInt_O;
    sout << "KIND_LISPALLOC_llvmo__ConstantInt_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ConstantInt_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__TargetMachine_O: {
    typedef llvmo::TargetMachine_O type_KIND_LISPALLOC_llvmo__TargetMachine_O;
    sout << "KIND_LISPALLOC_llvmo__TargetMachine_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__TargetMachine_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__LLVMContext_O: {
    typedef llvmo::LLVMContext_O type_KIND_LISPALLOC_llvmo__LLVMContext_O;
    sout << "KIND_LISPALLOC_llvmo__LLVMContext_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__LLVMContext_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__Module_O: {
    typedef llvmo::Module_O type_KIND_LISPALLOC_llvmo__Module_O;
    sout << "KIND_LISPALLOC_llvmo__Module_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__Module_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_llvmo__NamedMDNode_O: {
    typedef llvmo::NamedMDNode_O type_KIND_LISPALLOC_llvmo__NamedMDNode_O;
    sout << "KIND_LISPALLOC_llvmo__NamedMDNode_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__NamedMDNode_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__SNode_O: {
    typedef core::SNode_O type_KIND_LISPALLOC_core__SNode_O;
    sout << "KIND_LISPALLOC_core__SNode_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__SNode_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__BranchSNode_O: {
    typedef core::BranchSNode_O type_KIND_LISPALLOC_core__BranchSNode_O;
    sout << "KIND_LISPALLOC_core__BranchSNode_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__BranchSNode_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__LeafSNode_O: {
    typedef core::LeafSNode_O type_KIND_LISPALLOC_core__LeafSNode_O;
    sout << "KIND_LISPALLOC_core__LeafSNode_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__LeafSNode_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__LoadTimeValues_O: {
    typedef core::LoadTimeValues_O type_KIND_LISPALLOC_core__LoadTimeValues_O;
    sout << "KIND_LISPALLOC_core__LoadTimeValues_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__LoadTimeValues_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__LightUserData_O: {
    typedef core::LightUserData_O type_KIND_LISPALLOC_core__LightUserData_O;
    sout << "KIND_LISPALLOC_core__LightUserData_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__LightUserData_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__UserData_O: {
    typedef core::UserData_O type_KIND_LISPALLOC_core__UserData_O;
    sout << "KIND_LISPALLOC_core__UserData_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__UserData_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__WeakHashTable_O: {
    typedef core::WeakHashTable_O type_KIND_LISPALLOC_core__WeakHashTable_O;
    sout << "KIND_LISPALLOC_core__WeakHashTable_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__WeakHashTable_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__WeakKeyHashTable_O: {
    typedef core::WeakKeyHashTable_O type_KIND_LISPALLOC_core__WeakKeyHashTable_O;
    sout << "KIND_LISPALLOC_core__WeakKeyHashTable_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__WeakKeyHashTable_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_TEMPLATED_LISPALLOC_core__WrappedPointer_O: {
    core::WrappedPointer_O* obj_gc_safe = reinterpret_cast<core::WrappedPointer_O*>(client);
    sout << "KIND_TEMPLATED_LISPALLOC_core__WrappedPointer_O size[" << (AlignUp(obj_gc_safe->templatedSizeof()) + global_alignup_sizeof_header) << "]" ;
} break;
case KIND_BOOTSTRAP_core__StandardObject_O: {
    typedef core::StandardObject_O type_KIND_BOOTSTRAP_core__StandardObject_O;
    sout << "KIND_BOOTSTRAP_core__StandardObject_O size[" << (AlignUp(sizeof(type_KIND_BOOTSTRAP_core__StandardObject_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_BOOTSTRAP_core__Metaobject_O: {
    typedef core::Metaobject_O type_KIND_BOOTSTRAP_core__Metaobject_O;
    sout << "KIND_BOOTSTRAP_core__Metaobject_O size[" << (AlignUp(sizeof(type_KIND_BOOTSTRAP_core__Metaobject_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_BOOTSTRAP_core__Specializer_O: {
    typedef core::Specializer_O type_KIND_BOOTSTRAP_core__Specializer_O;
    sout << "KIND_BOOTSTRAP_core__Specializer_O size[" << (AlignUp(sizeof(type_KIND_BOOTSTRAP_core__Specializer_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_BOOTSTRAP_core__Class_O: {
    typedef core::Class_O type_KIND_BOOTSTRAP_core__Class_O;
    sout << "KIND_BOOTSTRAP_core__Class_O size[" << (AlignUp(sizeof(type_KIND_BOOTSTRAP_core__Class_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__ForwardReferencedClass_O: {
    typedef core::ForwardReferencedClass_O type_KIND_LISPALLOC_core__ForwardReferencedClass_O;
    sout << "KIND_LISPALLOC_core__ForwardReferencedClass_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__ForwardReferencedClass_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_BOOTSTRAP_core__StdClass_O: {
    typedef core::StdClass_O type_KIND_BOOTSTRAP_core__StdClass_O;
    sout << "KIND_BOOTSTRAP_core__StdClass_O size[" << (AlignUp(sizeof(type_KIND_BOOTSTRAP_core__StdClass_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_BOOTSTRAP_core__StandardClass_O: {
    typedef core::StandardClass_O type_KIND_BOOTSTRAP_core__StandardClass_O;
    sout << "KIND_BOOTSTRAP_core__StandardClass_O size[" << (AlignUp(sizeof(type_KIND_BOOTSTRAP_core__StandardClass_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__FuncallableStandardClass_O: {
    typedef core::FuncallableStandardClass_O type_KIND_LISPALLOC_core__FuncallableStandardClass_O;
    sout << "KIND_LISPALLOC_core__FuncallableStandardClass_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__FuncallableStandardClass_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_BOOTSTRAP_core__BuiltInClass_O: {
    typedef core::BuiltInClass_O type_KIND_BOOTSTRAP_core__BuiltInClass_O;
    sout << "KIND_BOOTSTRAP_core__BuiltInClass_O size[" << (AlignUp(sizeof(type_KIND_BOOTSTRAP_core__BuiltInClass_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_clbind__ClassRep_O: {
    typedef clbind::ClassRep_O type_KIND_LISPALLOC_clbind__ClassRep_O;
    sout << "KIND_LISPALLOC_clbind__ClassRep_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_clbind__ClassRep_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_BOOTSTRAP_core__StructureClass_O: {
    typedef core::StructureClass_O type_KIND_BOOTSTRAP_core__StructureClass_O;
    sout << "KIND_BOOTSTRAP_core__StructureClass_O size[" << (AlignUp(sizeof(type_KIND_BOOTSTRAP_core__StructureClass_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_asttooling__AstVisitor_O: {
    typedef asttooling::AstVisitor_O type_KIND_LISPALLOC_asttooling__AstVisitor_O;
    sout << "KIND_LISPALLOC_asttooling__AstVisitor_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_asttooling__AstVisitor_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_BOOTSTRAP_core__Symbol_O: {
    typedef core::Symbol_O type_KIND_BOOTSTRAP_core__Symbol_O;
    sout << "KIND_BOOTSTRAP_core__Symbol_O size[" << (AlignUp(sizeof(type_KIND_BOOTSTRAP_core__Symbol_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__Null_O: {
    typedef core::Null_O type_KIND_LISPALLOC_core__Null_O;
    sout << "KIND_LISPALLOC_core__Null_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__Null_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__StringSet_O: {
    typedef core::StringSet_O type_KIND_LISPALLOC_core__StringSet_O;
    sout << "KIND_LISPALLOC_core__StringSet_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__StringSet_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__SymbolToEnumConverter_O: {
    typedef core::SymbolToEnumConverter_O type_KIND_LISPALLOC_core__SymbolToEnumConverter_O;
    sout << "KIND_LISPALLOC_core__SymbolToEnumConverter_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__SymbolToEnumConverter_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__MultiStringBuffer_O: {
    typedef core::MultiStringBuffer_O type_KIND_LISPALLOC_core__MultiStringBuffer_O;
    sout << "KIND_LISPALLOC_core__MultiStringBuffer_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__MultiStringBuffer_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__SymbolList_O: {
    typedef core::SymbolList_O type_KIND_LISPALLOC_core__SymbolList_O;
    sout << "KIND_LISPALLOC_core__SymbolList_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__SymbolList_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__WeakPointer_O: {
    typedef core::WeakPointer_O type_KIND_LISPALLOC_core__WeakPointer_O;
    sout << "KIND_LISPALLOC_core__WeakPointer_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__WeakPointer_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__HashTable_O: {
    typedef core::HashTable_O type_KIND_LISPALLOC_core__HashTable_O;
    sout << "KIND_LISPALLOC_core__HashTable_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__HashTable_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__HashTableEqual_O: {
    typedef core::HashTableEqual_O type_KIND_LISPALLOC_core__HashTableEqual_O;
    sout << "KIND_LISPALLOC_core__HashTableEqual_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__HashTableEqual_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__HashTableEqualp_O: {
    typedef core::HashTableEqualp_O type_KIND_LISPALLOC_core__HashTableEqualp_O;
    sout << "KIND_LISPALLOC_core__HashTableEqualp_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__HashTableEqualp_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__HashTableEql_O: {
    typedef core::HashTableEql_O type_KIND_LISPALLOC_core__HashTableEql_O;
    sout << "KIND_LISPALLOC_core__HashTableEql_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__HashTableEql_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__HashTableEq_O: {
    typedef core::HashTableEq_O type_KIND_LISPALLOC_core__HashTableEq_O;
    sout << "KIND_LISPALLOC_core__HashTableEq_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__HashTableEq_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__SymbolSet_O: {
    typedef core::SymbolSet_O type_KIND_LISPALLOC_core__SymbolSet_O;
    sout << "KIND_LISPALLOC_core__SymbolSet_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__SymbolSet_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_core__Binder_O: {
    typedef core::Binder_O type_KIND_LISPALLOC_core__Binder_O;
    sout << "KIND_LISPALLOC_core__Binder_O size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_core__Binder_O))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_CLASSALLOC_core__Cache: {
    typedef core::Cache type_KIND_CLASSALLOC_core__Cache;
    sout << "KIND_CLASSALLOC_core__Cache size[" << (AlignUp(sizeof(type_KIND_CLASSALLOC_core__Cache))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__DynamicBinding_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::DynamicBinding>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::DynamicBinding>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::DynamicBinding" :#2# "DynamicBinding")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::DynamicBinding" :NAME "DynamicBinding")
    gctools::GCVector_moveable<core::DynamicBinding>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::DynamicBinding>*>(client);
    sout << "gctools::GCVector_moveable<core::DynamicBinding>" << " size/capacity[" << obj_gc_safe->size() << "/" << obj_gc_safe->capacity();
    typedef typename gctools::GCVector_moveable<core::DynamicBinding> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__DynamicBinding_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__DynamicBinding_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    sout << "bytes[" << header_and_gccontainer_size << "]";
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__SourceFileInfo_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::SourceFileInfo_O>" :SPECIALIZER "class core::SourceFileInfo_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::SourceFileInfo_O>" :SPECIALIZER "class core::SourceFileInfo_O")
    gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>*>(client);
    sout << "gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>" << " size/capacity[" << obj_gc_safe->size() << "/" << obj_gc_safe->capacity();
    typedef typename gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>> type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__SourceFileInfo_O__;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__SourceFileInfo_O__>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    sout << "bytes[" << header_and_gccontainer_size << "]";
} break;
case KIND_LISPALLOC_asttooling__DerivableFrontendActionFactory: {
    typedef asttooling::DerivableFrontendActionFactory type_KIND_LISPALLOC_asttooling__DerivableFrontendActionFactory;
    sout << "KIND_LISPALLOC_asttooling__DerivableFrontendActionFactory size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_asttooling__DerivableFrontendActionFactory))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ContextFrame_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<asttooling::ContextFrame>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::ContextFrame>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "asttooling::ContextFrame" :#2# "ContextFrame")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "asttooling::ContextFrame" :NAME "ContextFrame")
    gctools::GCVector_moveable<asttooling::ContextFrame>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<asttooling::ContextFrame>*>(client);
    sout << "gctools::GCVector_moveable<asttooling::ContextFrame>" << " size/capacity[" << obj_gc_safe->size() << "/" << obj_gc_safe->capacity();
    typedef typename gctools::GCVector_moveable<asttooling::ContextFrame> type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ContextFrame_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ContextFrame_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    sout << "bytes[" << header_and_gccontainer_size << "]";
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__Message_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<asttooling::Message>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::Message>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "asttooling::Message" :#2# "Message")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "asttooling::Message" :NAME "Message")
    gctools::GCVector_moveable<asttooling::Message>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<asttooling::Message>*>(client);
    sout << "gctools::GCVector_moveable<asttooling::Message>" << " size/capacity[" << obj_gc_safe->size() << "/" << obj_gc_safe->capacity();
    typedef typename gctools::GCVector_moveable<asttooling::Message> type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__Message_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__Message_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    sout << "bytes[" << header_and_gccontainer_size << "]";
} break;
case KIND_GCSTRING_gctools__GCString_moveable_char_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCString_moveable<char>" :#2=NAME "GCString_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcstring.h:40:5" :#3=CTYPE #S(GCSTRING-MOVEABLE-CTYPE :#1# "gctools::GCString_moveable<char>" :#2# "GCString_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(UNCLASSIFIED-CTYPE :#1# "char")))))
// parm0-ctype = #S(UNCLASSIFIED-CTYPE :KEY "char")
    gctools::GCString_moveable<char>* obj_gc_safe = reinterpret_cast<gctools::GCString_moveable<char>*>(client);
    typedef typename gctools::GCString_moveable<char> type_KIND_GCSTRING_gctools__GCString_moveable_char_;
    size_t header_and_gcstring_size = AlignUp(sizeof_container<type_KIND_GCSTRING_gctools__GCString_moveable_char_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    sout << "KIND_GCSTRING_gctools__GCString_moveable_char_" << "bytes[" << header_and_gcstring_size << "]";
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__T_O__gctools__smart_ptr_core__T_O___: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>" :#2# "GCVector_moveable" :#4=ARGUMENTS (#S(#5=GC-TEMPLATE-ARGUMENT :#6=INDEX 0 :#3# #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>" :#2# NIL :#4# (#S(#5# :#6# 0 :#3# #S(#7=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :#8=SPECIALIZER "class core::T_O")) #S(#5# :#6# 1 :#3# #S(#7# :#1# "gctools::smart_ptr<core::T_O>" :#8# "class core::T_O"))))))))
// parm0-ctype = #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1=KEY "std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>" :NAME NIL :ARGUMENTS (#S(#2=GC-TEMPLATE-ARGUMENT :#3=INDEX 0 :#4=CTYPE #S(#5=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :#6=SPECIALIZER "class core::T_O")) #S(#2# :#3# 1 :#4# #S(#5# :#1# "gctools::smart_ptr<core::T_O>" :#6# "class core::T_O"))))
    gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>*>(client);
    sout << "gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>" << " size/capacity[" << obj_gc_safe->size() << "/" << obj_gc_safe->capacity();
    typedef typename gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>> type_KIND_GCVECTOR_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__T_O__gctools__smart_ptr_core__T_O___;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__T_O__gctools__smart_ptr_core__T_O___>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    sout << "bytes[" << header_and_gccontainer_size << "]";
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__internal__MatcherDescriptor_P_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<asttooling::internal::MatcherDescriptor *>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::internal::MatcherDescriptor *>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(POINTER-CTYPE :#1# NIL :POINTEE #S(CXXRECORD-CTYPE :#1# "asttooling::internal::MatcherDescriptor" :#2# "MatcherDescriptor"))))))
// parm0-ctype = #S(POINTER-CTYPE :#1=KEY NIL :POINTEE #S(CXXRECORD-CTYPE :#1# "asttooling::internal::MatcherDescriptor" :NAME "MatcherDescriptor"))
    gctools::GCVector_moveable<asttooling::internal::MatcherDescriptor *>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<asttooling::internal::MatcherDescriptor *>*>(client);
    sout << "gctools::GCVector_moveable<asttooling::internal::MatcherDescriptor *>" << " size/capacity[" << obj_gc_safe->size() << "/" << obj_gc_safe->capacity();
    typedef typename gctools::GCVector_moveable<asttooling::internal::MatcherDescriptor *> type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__internal__MatcherDescriptor_P_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__internal__MatcherDescriptor_P_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    sout << "bytes[" << header_and_gccontainer_size << "]";
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__ExceptionEntry_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::ExceptionEntry>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::ExceptionEntry>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::ExceptionEntry" :#2# "ExceptionEntry")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::ExceptionEntry" :NAME "ExceptionEntry")
    gctools::GCVector_moveable<core::ExceptionEntry>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::ExceptionEntry>*>(client);
    sout << "gctools::GCVector_moveable<core::ExceptionEntry>" << " size/capacity[" << obj_gc_safe->size() << "/" << obj_gc_safe->capacity();
    typedef typename gctools::GCVector_moveable<core::ExceptionEntry> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__ExceptionEntry_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__ExceptionEntry_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    sout << "bytes[" << header_and_gccontainer_size << "]";
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Package_O>" :SPECIALIZER "class core::Package_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :SPECIALIZER "class core::Package_O")
    gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>*>(client);
    sout << "gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>" << " size/capacity[" << obj_gc_safe->size() << "/" << obj_gc_safe->capacity();
    typedef typename gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>> type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    sout << "bytes[" << header_and_gccontainer_size << "]";
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ErrorContent_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<asttooling::ErrorContent>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::ErrorContent>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "asttooling::ErrorContent" :#2# "ErrorContent")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "asttooling::ErrorContent" :NAME "ErrorContent")
    gctools::GCVector_moveable<asttooling::ErrorContent>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<asttooling::ErrorContent>*>(client);
    sout << "gctools::GCVector_moveable<asttooling::ErrorContent>" << " size/capacity[" << obj_gc_safe->size() << "/" << obj_gc_safe->capacity();
    typedef typename gctools::GCVector_moveable<asttooling::ErrorContent> type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ErrorContent_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ErrorContent_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    sout << "bytes[" << header_and_gccontainer_size << "]";
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
    gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>*>(client);
    sout << "gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>" << " size/capacity[" << obj_gc_safe->size() << "/" << obj_gc_safe->capacity();
    typedef typename gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>> type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    sout << "bytes[" << header_and_gccontainer_size << "]";
} break;
case KIND_LISPALLOC_asttooling__DerivableSyntaxOnlyAction: {
    typedef asttooling::DerivableSyntaxOnlyAction type_KIND_LISPALLOC_asttooling__DerivableSyntaxOnlyAction;
    sout << "KIND_LISPALLOC_asttooling__DerivableSyntaxOnlyAction size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_asttooling__DerivableSyntaxOnlyAction))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_TEMPLATED_CLASSALLOC_core__BuiltinClosure: {
    core::BuiltinClosure* obj_gc_safe = reinterpret_cast<core::BuiltinClosure*>(client);
    sout << "KIND_TEMPLATED_CLASSALLOC_core__BuiltinClosure size[" << (AlignUp(obj_gc_safe->templatedSizeof()) + global_alignup_sizeof_header) << "]" ;
} break;
case KIND_CLASSALLOC_llvmo__CompiledClosure: {
    typedef llvmo::CompiledClosure type_KIND_CLASSALLOC_llvmo__CompiledClosure;
    sout << "KIND_CLASSALLOC_llvmo__CompiledClosure size[" << (AlignUp(sizeof(type_KIND_CLASSALLOC_llvmo__CompiledClosure))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_CLASSALLOC_core__InterpretedClosure: {
    typedef core::InterpretedClosure type_KIND_CLASSALLOC_core__InterpretedClosure;
    sout << "KIND_CLASSALLOC_core__InterpretedClosure size[" << (AlignUp(sizeof(type_KIND_CLASSALLOC_core__InterpretedClosure))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ParserValue_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<asttooling::ParserValue>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::ParserValue>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "asttooling::ParserValue" :#2# "ParserValue")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "asttooling::ParserValue" :NAME "ParserValue")
    gctools::GCVector_moveable<asttooling::ParserValue>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<asttooling::ParserValue>*>(client);
    sout << "gctools::GCVector_moveable<asttooling::ParserValue>" << " size/capacity[" << obj_gc_safe->size() << "/" << obj_gc_safe->capacity();
    typedef typename gctools::GCVector_moveable<asttooling::ParserValue> type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ParserValue_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ParserValue_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    sout << "bytes[" << header_and_gccontainer_size << "]";
} break;
case KIND_CLASSALLOC_asttooling__internal__OverloadedMatcherDescriptor: {
    typedef asttooling::internal::OverloadedMatcherDescriptor type_KIND_CLASSALLOC_asttooling__internal__OverloadedMatcherDescriptor;
    sout << "KIND_CLASSALLOC_asttooling__internal__OverloadedMatcherDescriptor size[" << (AlignUp(sizeof(type_KIND_CLASSALLOC_asttooling__internal__OverloadedMatcherDescriptor))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_asttooling__DerivableMatchCallback: {
    typedef asttooling::DerivableMatchCallback type_KIND_LISPALLOC_asttooling__DerivableMatchCallback;
    sout << "KIND_LISPALLOC_asttooling__DerivableMatchCallback size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_asttooling__DerivableMatchCallback))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__SingleDispatchMethod_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::SingleDispatchMethod_O>" :SPECIALIZER "class core::SingleDispatchMethod_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::SingleDispatchMethod_O>" :SPECIALIZER "class core::SingleDispatchMethod_O")
    gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>*>(client);
    sout << "gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>" << " size/capacity[" << obj_gc_safe->size() << "/" << obj_gc_safe->capacity();
    typedef typename gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>> type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__SingleDispatchMethod_O__;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__SingleDispatchMethod_O__>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    sout << "bytes[" << header_and_gccontainer_size << "]";
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Cons_O>" :SPECIALIZER "class core::Cons_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Cons_O>" :SPECIALIZER "class core::Cons_O")
    gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>*>(client);
    sout << "gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>" << " size/capacity[" << obj_gc_safe->size() << "/" << obj_gc_safe->capacity();
    typedef typename gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>> type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    sout << "bytes[" << header_and_gccontainer_size << "]";
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Character_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Character_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Character_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Character_O>" :SPECIALIZER "class core::Character_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Character_O>" :SPECIALIZER "class core::Character_O")
    gctools::GCVector_moveable<gctools::smart_ptr<core::Character_O>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<gctools::smart_ptr<core::Character_O>>*>(client);
    sout << "gctools::GCVector_moveable<gctools::smart_ptr<core::Character_O>>" << " size/capacity[" << obj_gc_safe->size() << "/" << obj_gc_safe->capacity();
    typedef typename gctools::GCVector_moveable<gctools::smart_ptr<core::Character_O>> type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Character_O__;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Character_O__>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    sout << "bytes[" << header_and_gccontainer_size << "]";
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__SequenceStepper_P_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::SequenceStepper *>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::SequenceStepper *>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(POINTER-CTYPE :#1# NIL :POINTEE #S(CXXRECORD-CTYPE :#1# "core::SequenceStepper" :#2# "SequenceStepper"))))))
// parm0-ctype = #S(POINTER-CTYPE :#1=KEY NIL :POINTEE #S(CXXRECORD-CTYPE :#1# "core::SequenceStepper" :NAME "SequenceStepper"))
    gctools::GCVector_moveable<core::SequenceStepper *>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::SequenceStepper *>*>(client);
    sout << "gctools::GCVector_moveable<core::SequenceStepper *>" << " size/capacity[" << obj_gc_safe->size() << "/" << obj_gc_safe->capacity();
    typedef typename gctools::GCVector_moveable<core::SequenceStepper *> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__SequenceStepper_P_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__SequenceStepper_P_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    sout << "bytes[" << header_and_gccontainer_size << "]";
} break;
case KIND_CLASSALLOC_core__CoreExposer: {
    typedef core::CoreExposer type_KIND_CLASSALLOC_core__CoreExposer;
    sout << "KIND_CLASSALLOC_core__CoreExposer size[" << (AlignUp(sizeof(type_KIND_CLASSALLOC_core__CoreExposer))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_CLASSALLOC_core__SingleDispatchGenericFunctionClosure: {
    typedef core::SingleDispatchGenericFunctionClosure type_KIND_CLASSALLOC_core__SingleDispatchGenericFunctionClosure;
    sout << "KIND_CLASSALLOC_core__SingleDispatchGenericFunctionClosure size[" << (AlignUp(sizeof(type_KIND_CLASSALLOC_core__SingleDispatchGenericFunctionClosure))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__SymbolStorage_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::SymbolStorage>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::SymbolStorage>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::SymbolStorage" :#2# "SymbolStorage")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::SymbolStorage" :NAME "SymbolStorage")
    gctools::GCVector_moveable<core::SymbolStorage>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::SymbolStorage>*>(client);
    sout << "gctools::GCVector_moveable<core::SymbolStorage>" << " size/capacity[" << obj_gc_safe->size() << "/" << obj_gc_safe->capacity();
    typedef typename gctools::GCVector_moveable<core::SymbolStorage> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__SymbolStorage_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__SymbolStorage_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    sout << "bytes[" << header_and_gccontainer_size << "]";
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__OptionalArgument_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::OptionalArgument>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::OptionalArgument>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::OptionalArgument" :#2# "OptionalArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::OptionalArgument" :NAME "OptionalArgument")
    gctools::GCVector_moveable<core::OptionalArgument>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::OptionalArgument>*>(client);
    sout << "gctools::GCVector_moveable<core::OptionalArgument>" << " size/capacity[" << obj_gc_safe->size() << "/" << obj_gc_safe->capacity();
    typedef typename gctools::GCVector_moveable<core::OptionalArgument> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__OptionalArgument_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__OptionalArgument_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    sout << "bytes[" << header_and_gccontainer_size << "]";
} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__0_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>" :#2=NAME "GCArray_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcarray.h:33:5" :#3=CTYPE #S(GCARRAY-MOVEABLE-CTYPE :#1# "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>" :#2# "GCArray_moveable" :ARGUMENTS (#S(#4=GC-TEMPLATE-ARGUMENT :#5=INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")) #S(#4# :#5# 1 :#3# NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
    gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>* obj_gc_safe = reinterpret_cast<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>*>(client);
    sout << "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>" << " size/capacity[" << obj_gc_safe->size() << "/" << obj_gc_safe->capacity();
    typedef typename gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0> type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__0_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__0_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    sout << "bytes[" << header_and_gccontainer_size << "]";
} break;
case KIND_LISPALLOC_asttooling__DerivableArgumentsAdjuster: {
    typedef asttooling::DerivableArgumentsAdjuster type_KIND_LISPALLOC_asttooling__DerivableArgumentsAdjuster;
    sout << "KIND_LISPALLOC_asttooling__DerivableArgumentsAdjuster size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_asttooling__DerivableArgumentsAdjuster))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__3_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>" :#2=NAME "GCArray_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcarray.h:33:5" :#3=CTYPE #S(GCARRAY-MOVEABLE-CTYPE :#1# "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>" :#2# "GCArray_moveable" :ARGUMENTS (#S(#4=GC-TEMPLATE-ARGUMENT :#5=INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")) #S(#4# :#5# 1 :#3# NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
    gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>* obj_gc_safe = reinterpret_cast<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>*>(client);
    sout << "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>" << " size/capacity[" << obj_gc_safe->size() << "/" << obj_gc_safe->capacity();
    typedef typename gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3> type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__3_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__3_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    sout << "bytes[" << header_and_gccontainer_size << "]";
} break;
case KIND_CLASSALLOC_core__MacroClosure: {
    typedef core::MacroClosure type_KIND_CLASSALLOC_core__MacroClosure;
    sout << "KIND_CLASSALLOC_core__MacroClosure size[" << (AlignUp(sizeof(type_KIND_CLASSALLOC_core__MacroClosure))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_LISPALLOC_asttooling__DerivableASTFrontendAction: {
    typedef asttooling::DerivableASTFrontendAction type_KIND_LISPALLOC_asttooling__DerivableASTFrontendAction;
    sout << "KIND_LISPALLOC_asttooling__DerivableASTFrontendAction size[" << (AlignUp(sizeof(type_KIND_LISPALLOC_asttooling__DerivableASTFrontendAction))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_CLASSALLOC_asttooling__internal__FixedArgCountMatcherDescriptor: {
    typedef asttooling::internal::FixedArgCountMatcherDescriptor type_KIND_CLASSALLOC_asttooling__internal__FixedArgCountMatcherDescriptor;
    sout << "KIND_CLASSALLOC_asttooling__internal__FixedArgCountMatcherDescriptor size[" << (AlignUp(sizeof(type_KIND_CLASSALLOC_asttooling__internal__FixedArgCountMatcherDescriptor))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_CLASSALLOC_asttooling__internal__FreeFuncMatcherDescriptor: {
    typedef asttooling::internal::FreeFuncMatcherDescriptor type_KIND_CLASSALLOC_asttooling__internal__FreeFuncMatcherDescriptor;
    sout << "KIND_CLASSALLOC_asttooling__internal__FreeFuncMatcherDescriptor size[" << (AlignUp(sizeof(type_KIND_CLASSALLOC_asttooling__internal__FreeFuncMatcherDescriptor))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__AuxArgument_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::AuxArgument>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::AuxArgument>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::AuxArgument" :#2# "AuxArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::AuxArgument" :NAME "AuxArgument")
    gctools::GCVector_moveable<core::AuxArgument>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::AuxArgument>*>(client);
    sout << "gctools::GCVector_moveable<core::AuxArgument>" << " size/capacity[" << obj_gc_safe->size() << "/" << obj_gc_safe->capacity();
    typedef typename gctools::GCVector_moveable<core::AuxArgument> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__AuxArgument_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__AuxArgument_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    sout << "bytes[" << header_and_gccontainer_size << "]";
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__SymbolClassPair_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::SymbolClassPair>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::SymbolClassPair>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::SymbolClassPair" :#2# "SymbolClassPair")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::SymbolClassPair" :NAME "SymbolClassPair")
    gctools::GCVector_moveable<core::SymbolClassPair>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::SymbolClassPair>*>(client);
    sout << "gctools::GCVector_moveable<core::SymbolClassPair>" << " size/capacity[" << obj_gc_safe->size() << "/" << obj_gc_safe->capacity();
    typedef typename gctools::GCVector_moveable<core::SymbolClassPair> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__SymbolClassPair_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__SymbolClassPair_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    sout << "bytes[" << header_and_gccontainer_size << "]";
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__KeywordArgument_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::KeywordArgument>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::KeywordArgument>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::KeywordArgument" :#2# "KeywordArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::KeywordArgument" :NAME "KeywordArgument")
    gctools::GCVector_moveable<core::KeywordArgument>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::KeywordArgument>*>(client);
    sout << "gctools::GCVector_moveable<core::KeywordArgument>" << " size/capacity[" << obj_gc_safe->size() << "/" << obj_gc_safe->capacity();
    typedef typename gctools::GCVector_moveable<core::KeywordArgument> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__KeywordArgument_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__KeywordArgument_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    sout << "bytes[" << header_and_gccontainer_size << "]";
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__CacheRecord_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::CacheRecord>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::CacheRecord>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::CacheRecord" :#2# "CacheRecord")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::CacheRecord" :NAME "CacheRecord")
    gctools::GCVector_moveable<core::CacheRecord>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::CacheRecord>*>(client);
    sout << "gctools::GCVector_moveable<core::CacheRecord>" << " size/capacity[" << obj_gc_safe->size() << "/" << obj_gc_safe->capacity();
    typedef typename gctools::GCVector_moveable<core::CacheRecord> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__CacheRecord_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__CacheRecord_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    sout << "bytes[" << header_and_gccontainer_size << "]";
} break;
case KIND_CLASSALLOC_core__InstanceClosure: {
    typedef core::InstanceClosure type_KIND_CLASSALLOC_core__InstanceClosure;
    sout << "KIND_CLASSALLOC_core__InstanceClosure size[" << (AlignUp(sizeof(type_KIND_CLASSALLOC_core__InstanceClosure))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__RequiredArgument_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::RequiredArgument>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::RequiredArgument>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::RequiredArgument" :#2# "RequiredArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::RequiredArgument" :NAME "RequiredArgument")
    gctools::GCVector_moveable<core::RequiredArgument>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::RequiredArgument>*>(client);
    sout << "gctools::GCVector_moveable<core::RequiredArgument>" << " size/capacity[" << obj_gc_safe->size() << "/" << obj_gc_safe->capacity();
    typedef typename gctools::GCVector_moveable<core::RequiredArgument> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__RequiredArgument_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__RequiredArgument_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    sout << "bytes[" << header_and_gccontainer_size << "]";
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Symbol_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O")
    gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>*>(client);
    sout << "gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>" << " size/capacity[" << obj_gc_safe->size() << "/" << obj_gc_safe->capacity();
    typedef typename gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>> type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Symbol_O__;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Symbol_O__>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    sout << "bytes[" << header_and_gccontainer_size << "]";
} break;
case KIND_CLASSALLOC_asttooling__internal__VariadicOperatorMatcherDescriptor: {
    typedef asttooling::internal::VariadicOperatorMatcherDescriptor type_KIND_CLASSALLOC_asttooling__internal__VariadicOperatorMatcherDescriptor;
    sout << "KIND_CLASSALLOC_asttooling__internal__VariadicOperatorMatcherDescriptor size[" << (AlignUp(sizeof(type_KIND_CLASSALLOC_asttooling__internal__VariadicOperatorMatcherDescriptor))+global_alignup_sizeof_header) << "]" ;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_clbind__ClassRep_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<clbind::ClassRep_O>" :SPECIALIZER "class clbind::ClassRep_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<clbind::ClassRep_O>" :SPECIALIZER "class clbind::ClassRep_O")
    gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>*>(client);
    sout << "gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>" << " size/capacity[" << obj_gc_safe->size() << "/" << obj_gc_safe->capacity();
    typedef typename gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>> type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_clbind__ClassRep_O__;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_clbind__ClassRep_O__>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    sout << "bytes[" << header_and_gccontainer_size << "]";
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__RegMap__SymbolMatcherDescriptorPair_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<asttooling::RegMap::SymbolMatcherDescriptorPair>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::RegMap::SymbolMatcherDescriptorPair>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "asttooling::RegMap::SymbolMatcherDescriptorPair" :#2# "SymbolMatcherDescriptorPair")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "asttooling::RegMap::SymbolMatcherDescriptorPair" :NAME "SymbolMatcherDescriptorPair")
    gctools::GCVector_moveable<asttooling::RegMap::SymbolMatcherDescriptorPair>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<asttooling::RegMap::SymbolMatcherDescriptorPair>*>(client);
    sout << "gctools::GCVector_moveable<asttooling::RegMap::SymbolMatcherDescriptorPair>" << " size/capacity[" << obj_gc_safe->size() << "/" << obj_gc_safe->capacity();
    typedef typename gctools::GCVector_moveable<asttooling::RegMap::SymbolMatcherDescriptorPair> type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__RegMap__SymbolMatcherDescriptorPair_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__RegMap__SymbolMatcherDescriptorPair_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    sout << "bytes[" << header_and_gccontainer_size << "]";
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Str_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Str_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Str_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Str_O>" :SPECIALIZER "class core::Str_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Str_O>" :SPECIALIZER "class core::Str_O")
    gctools::GCVector_moveable<gctools::smart_ptr<core::Str_O>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<gctools::smart_ptr<core::Str_O>>*>(client);
    sout << "gctools::GCVector_moveable<gctools::smart_ptr<core::Str_O>>" << " size/capacity[" << obj_gc_safe->size() << "/" << obj_gc_safe->capacity();
    typedef typename gctools::GCVector_moveable<gctools::smart_ptr<core::Str_O>> type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Str_O__;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Str_O__>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    sout << "bytes[" << header_and_gccontainer_size << "]";
} break;
#endif // defined(GC_OBJ_DUMP)
#if defined(GC_OBJ_SCAN)
case KIND_ROOTCLASSALLOC_core__Lisp_O: {
    core::Lisp_O* obj_gc_safe = reinterpret_cast<core::Lisp_O*>(client);
    POINTER_FIX(obj_gc_safe->_Roots._ExceptionStack._Stack._Vector._Contents);
    POINTER_FIX(obj_gc_safe->_Roots._MultipleValues._Values._Vector._Contents);
    SMART_PTR_FIX(obj_gc_safe->_Roots._TerminalIO);
    SMART_PTR_FIX(obj_gc_safe->_Roots._BignumRegister0);
    SMART_PTR_FIX(obj_gc_safe->_Roots._BignumRegister1);
    SMART_PTR_FIX(obj_gc_safe->_Roots._BignumRegister2);
    POINTER_FIX(obj_gc_safe->_Roots.charInfo.gIndexedCharacters._Vector._Contents);
    POINTER_FIX(obj_gc_safe->_Roots.charInfo.gCharacterNames._Vector._Contents);
    POINTER_FIX(obj_gc_safe->_Roots._ClassSymbolsHolder._Vector._Contents);
    SMART_PTR_FIX(obj_gc_safe->_Roots._SystemProperties);
    POINTER_FIX(obj_gc_safe->_Roots._Bindings._Bindings._Vector._Contents);
    POINTER_FIX(obj_gc_safe->_Roots._SourceFiles._Vector._Contents);
    SMART_PTR_FIX(obj_gc_safe->_Roots._CatchInfo);
    POINTER_FIX(obj_gc_safe->_Roots.bootClassTable._Vector._Contents);
    SMART_PTR_FIX(obj_gc_safe->_Roots._LoadTimeValueArrays);
    SMART_PTR_FIX(obj_gc_safe->_Roots._CommandLineArguments);
    POINTER_FIX(obj_gc_safe->_Roots._Packages._Vector._Contents);
    SMART_PTR_FIX(obj_gc_safe->_Roots._SetfDefinitions);
    SMART_PTR_FIX(obj_gc_safe->_Roots._CorePackage);
    SMART_PTR_FIX(obj_gc_safe->_Roots._KeywordPackage);
    SMART_PTR_FIX(obj_gc_safe->_Roots._CommonLispPackage);
    SMART_PTR_FIX(obj_gc_safe->_Roots._SpecialForms);
    SMART_PTR_FIX(obj_gc_safe->_Roots._SingleDispatchGenericFunctionTable);
    SMART_PTR_FIX(obj_gc_safe->_Roots._TrueObject);
    SMART_PTR_FIX(obj_gc_safe->_Roots._ActivationFrameNil);
    POINTER_FIX(obj_gc_safe->_Roots._SingleDispatchMethodCachePtr);
    POINTER_FIX(obj_gc_safe->_Roots._MethodCachePtr);
    POINTER_FIX(obj_gc_safe->_Roots._SlotCachePtr);
    SMART_PTR_FIX(obj_gc_safe->_Roots._RehashSize);
    SMART_PTR_FIX(obj_gc_safe->_Roots._RehashThreshold);
    SMART_PTR_FIX(obj_gc_safe->_Roots._NullStream);
    SMART_PTR_FIX(obj_gc_safe->_Roots._PathnameTranslations);
    SMART_PTR_FIX(obj_gc_safe->_Roots._ImaginaryUnit);
    SMART_PTR_FIX(obj_gc_safe->_Roots._ImaginaryUnitNegative);
    SMART_PTR_FIX(obj_gc_safe->_Roots._PlusHalf);
    SMART_PTR_FIX(obj_gc_safe->_Roots._MinusHalf);
    SMART_PTR_FIX(obj_gc_safe->_Roots._SingleFloatMinusZero);
    SMART_PTR_FIX(obj_gc_safe->_Roots._SingleFloatPlusZero);
    SMART_PTR_FIX(obj_gc_safe->_Roots._DoubleFloatMinusZero);
    SMART_PTR_FIX(obj_gc_safe->_Roots._DoubleFloatPlusZero);
    SMART_PTR_FIX(obj_gc_safe->_Roots._SingleFloatOne);
    SMART_PTR_FIX(obj_gc_safe->_Roots._DoubleFloatOne);
    typedef core::Lisp_O type_KIND_ROOTCLASSALLOC_core__Lisp_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_ROOTCLASSALLOC_core__Lisp_O)) + global_alignup_sizeof_header;
} break;
case KIND_ROOTCLASSALLOC_asttooling__RegMap__RegistryMaps: {
    asttooling::RegMap::RegistryMaps* obj_gc_safe = reinterpret_cast<asttooling::RegMap::RegistryMaps*>(client);
    POINTER_FIX(obj_gc_safe->Constructors._Vector._Contents);
    typedef asttooling::RegMap::RegistryMaps type_KIND_ROOTCLASSALLOC_asttooling__RegMap__RegistryMaps;
    client = (char*)client + AlignUp(sizeof(type_KIND_ROOTCLASSALLOC_asttooling__RegMap__RegistryMaps)) + global_alignup_sizeof_header;
} break;
case KIND_TEMPLATED_CLASSALLOC_core__Creator: {
    core::Creator* obj_gc_safe = reinterpret_cast<core::Creator*>(client);
    typedef core::Creator type_KIND_TEMPLATED_CLASSALLOC_core__Creator;
    client = (char*)client + AlignUp(obj_gc_safe->templatedSizeof()) + global_alignup_sizeof_header;
} break;
case KIND_TEMPLATED_CLASSALLOC_clbind__ConstructorCreator: {
    clbind::ConstructorCreator* obj_gc_safe = reinterpret_cast<clbind::ConstructorCreator*>(client);
    SMART_PTR_FIX(obj_gc_safe->_mostDerivedClassSymbol);
    typedef clbind::ConstructorCreator type_KIND_TEMPLATED_CLASSALLOC_clbind__ConstructorCreator;
    client = (char*)client + AlignUp(obj_gc_safe->templatedSizeof()) + global_alignup_sizeof_header;
} break;
case KIND_CLASSALLOC_core__InstanceCreator: {
    core::InstanceCreator* obj_gc_safe = reinterpret_cast<core::InstanceCreator*>(client);
    SMART_PTR_FIX(obj_gc_safe->_className);
    typedef core::InstanceCreator type_KIND_CLASSALLOC_core__InstanceCreator;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_core__InstanceCreator)) + global_alignup_sizeof_header;
} break;
case KIND_CLASSALLOC_clbind__DummyCreator: {
    typedef clbind::DummyCreator type_KIND_CLASSALLOC_clbind__DummyCreator;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_clbind__DummyCreator)) + global_alignup_sizeof_header;
} break;
case KIND_CLASSALLOC_core__SequenceStepper: {
    typedef core::SequenceStepper type_KIND_CLASSALLOC_core__SequenceStepper;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_core__SequenceStepper)) + global_alignup_sizeof_header;
} break;
case KIND_CLASSALLOC_core__ConsStepper: {
    core::ConsStepper* obj_gc_safe = reinterpret_cast<core::ConsStepper*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Cur);
    typedef core::ConsStepper type_KIND_CLASSALLOC_core__ConsStepper;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_core__ConsStepper)) + global_alignup_sizeof_header;
} break;
case KIND_CLASSALLOC_core__VectorStepper: {
    core::VectorStepper* obj_gc_safe = reinterpret_cast<core::VectorStepper*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Domain);
    typedef core::VectorStepper type_KIND_CLASSALLOC_core__VectorStepper;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_core__VectorStepper)) + global_alignup_sizeof_header;
} break;
case KIND_ROOTCLASSALLOC_clbind__detail__class_map: {
    clbind::detail::class_map* obj_gc_safe = reinterpret_cast<clbind::detail::class_map*>(client);
    POINTER_FIX(obj_gc_safe->m_classes._Vector._Contents);
    typedef clbind::detail::class_map type_KIND_ROOTCLASSALLOC_clbind__detail__class_map;
    client = (char*)client + AlignUp(sizeof(type_KIND_ROOTCLASSALLOC_clbind__detail__class_map)) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__T_O: {
    typedef core::T_O type_KIND_BOOTSTRAP_core__T_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__T_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Cons_O: {
    core::Cons_O* obj_gc_safe = reinterpret_cast<core::Cons_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Car);
    SMART_PTR_FIX(obj_gc_safe->_Cdr);
    typedef core::Cons_O type_KIND_LISPALLOC_core__Cons_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Cons_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_cffi__Pointer_O: {
    typedef cffi::Pointer_O type_KIND_LISPALLOC_cffi__Pointer_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_cffi__Pointer_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Stream_O: {
    core::Stream_O* obj_gc_safe = reinterpret_cast<core::Stream_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Format);
    SMART_PTR_FIX(obj_gc_safe->_ByteStack);
    SMART_PTR_FIX(obj_gc_safe->_ExternalFormat);
    typedef core::Stream_O type_KIND_LISPALLOC_core__Stream_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Stream_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__AnsiStream_O: {
    core::AnsiStream_O* obj_gc_safe = reinterpret_cast<core::AnsiStream_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Format);
    SMART_PTR_FIX(obj_gc_safe->_ByteStack);
    SMART_PTR_FIX(obj_gc_safe->_ExternalFormat);
    typedef core::AnsiStream_O type_KIND_LISPALLOC_core__AnsiStream_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__AnsiStream_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__TwoWayStream_O: {
    core::TwoWayStream_O* obj_gc_safe = reinterpret_cast<core::TwoWayStream_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Format);
    SMART_PTR_FIX(obj_gc_safe->_ByteStack);
    SMART_PTR_FIX(obj_gc_safe->_ExternalFormat);
    SMART_PTR_FIX(obj_gc_safe->_In);
    SMART_PTR_FIX(obj_gc_safe->_Out);
    typedef core::TwoWayStream_O type_KIND_LISPALLOC_core__TwoWayStream_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__TwoWayStream_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__FileStream_O: {
    core::FileStream_O* obj_gc_safe = reinterpret_cast<core::FileStream_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Format);
    SMART_PTR_FIX(obj_gc_safe->_ByteStack);
    SMART_PTR_FIX(obj_gc_safe->_ExternalFormat);
    SMART_PTR_FIX(obj_gc_safe->_Filename);
    SMART_PTR_FIX(obj_gc_safe->_ElementType);
    typedef core::FileStream_O type_KIND_LISPALLOC_core__FileStream_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__FileStream_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__IOFileStream_O: {
    core::IOFileStream_O* obj_gc_safe = reinterpret_cast<core::IOFileStream_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Format);
    SMART_PTR_FIX(obj_gc_safe->_ByteStack);
    SMART_PTR_FIX(obj_gc_safe->_ExternalFormat);
    SMART_PTR_FIX(obj_gc_safe->_Filename);
    SMART_PTR_FIX(obj_gc_safe->_ElementType);
    typedef core::IOFileStream_O type_KIND_LISPALLOC_core__IOFileStream_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__IOFileStream_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__IOStreamStream_O: {
    core::IOStreamStream_O* obj_gc_safe = reinterpret_cast<core::IOStreamStream_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Format);
    SMART_PTR_FIX(obj_gc_safe->_ByteStack);
    SMART_PTR_FIX(obj_gc_safe->_ExternalFormat);
    SMART_PTR_FIX(obj_gc_safe->_Filename);
    SMART_PTR_FIX(obj_gc_safe->_ElementType);
    typedef core::IOStreamStream_O type_KIND_LISPALLOC_core__IOStreamStream_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__IOStreamStream_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__BroadcastStream_O: {
    core::BroadcastStream_O* obj_gc_safe = reinterpret_cast<core::BroadcastStream_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Format);
    SMART_PTR_FIX(obj_gc_safe->_ByteStack);
    SMART_PTR_FIX(obj_gc_safe->_ExternalFormat);
    SMART_PTR_FIX(obj_gc_safe->_Streams);
    typedef core::BroadcastStream_O type_KIND_LISPALLOC_core__BroadcastStream_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__BroadcastStream_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__StringStream_O: {
    core::StringStream_O* obj_gc_safe = reinterpret_cast<core::StringStream_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Format);
    SMART_PTR_FIX(obj_gc_safe->_ByteStack);
    SMART_PTR_FIX(obj_gc_safe->_ExternalFormat);
    typedef core::StringStream_O type_KIND_LISPALLOC_core__StringStream_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__StringStream_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__StringOutputStream_O: {
    core::StringOutputStream_O* obj_gc_safe = reinterpret_cast<core::StringOutputStream_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Format);
    SMART_PTR_FIX(obj_gc_safe->_ByteStack);
    SMART_PTR_FIX(obj_gc_safe->_ExternalFormat);
    SMART_PTR_FIX(obj_gc_safe->_Contents);
    typedef core::StringOutputStream_O type_KIND_LISPALLOC_core__StringOutputStream_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__StringOutputStream_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__StringInputStream_O: {
    core::StringInputStream_O* obj_gc_safe = reinterpret_cast<core::StringInputStream_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Format);
    SMART_PTR_FIX(obj_gc_safe->_ByteStack);
    SMART_PTR_FIX(obj_gc_safe->_ExternalFormat);
    SMART_PTR_FIX(obj_gc_safe->_Contents);
    typedef core::StringInputStream_O type_KIND_LISPALLOC_core__StringInputStream_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__StringInputStream_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SynonymStream_O: {
    core::SynonymStream_O* obj_gc_safe = reinterpret_cast<core::SynonymStream_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Format);
    SMART_PTR_FIX(obj_gc_safe->_ByteStack);
    SMART_PTR_FIX(obj_gc_safe->_ExternalFormat);
    SMART_PTR_FIX(obj_gc_safe->_SynonymSymbol);
    typedef core::SynonymStream_O type_KIND_LISPALLOC_core__SynonymStream_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SynonymStream_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__EchoStream_O: {
    core::EchoStream_O* obj_gc_safe = reinterpret_cast<core::EchoStream_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Format);
    SMART_PTR_FIX(obj_gc_safe->_ByteStack);
    SMART_PTR_FIX(obj_gc_safe->_ExternalFormat);
    SMART_PTR_FIX(obj_gc_safe->_In);
    SMART_PTR_FIX(obj_gc_safe->_Out);
    typedef core::EchoStream_O type_KIND_LISPALLOC_core__EchoStream_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__EchoStream_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__ConcatenatedStream_O: {
    core::ConcatenatedStream_O* obj_gc_safe = reinterpret_cast<core::ConcatenatedStream_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Format);
    SMART_PTR_FIX(obj_gc_safe->_ByteStack);
    SMART_PTR_FIX(obj_gc_safe->_ExternalFormat);
    SMART_PTR_FIX(obj_gc_safe->_List);
    typedef core::ConcatenatedStream_O type_KIND_LISPALLOC_core__ConcatenatedStream_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__ConcatenatedStream_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Pathname_O: {
    core::Pathname_O* obj_gc_safe = reinterpret_cast<core::Pathname_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Host);
    SMART_PTR_FIX(obj_gc_safe->_Device);
    SMART_PTR_FIX(obj_gc_safe->_Directory);
    SMART_PTR_FIX(obj_gc_safe->_Name);
    SMART_PTR_FIX(obj_gc_safe->_Type);
    SMART_PTR_FIX(obj_gc_safe->_Version);
    typedef core::Pathname_O type_KIND_LISPALLOC_core__Pathname_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Pathname_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__LogicalPathname_O: {
    core::LogicalPathname_O* obj_gc_safe = reinterpret_cast<core::LogicalPathname_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Host);
    SMART_PTR_FIX(obj_gc_safe->_Device);
    SMART_PTR_FIX(obj_gc_safe->_Directory);
    SMART_PTR_FIX(obj_gc_safe->_Name);
    SMART_PTR_FIX(obj_gc_safe->_Type);
    SMART_PTR_FIX(obj_gc_safe->_Version);
    typedef core::LogicalPathname_O type_KIND_LISPALLOC_core__LogicalPathname_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__LogicalPathname_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Environment_O: {
    typedef core::Environment_O type_KIND_LISPALLOC_core__Environment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Environment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__GlueEnvironment_O: {
    core::GlueEnvironment_O* obj_gc_safe = reinterpret_cast<core::GlueEnvironment_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Map);
    SMART_PTR_FIX(obj_gc_safe->_Args);
    typedef core::GlueEnvironment_O type_KIND_LISPALLOC_core__GlueEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__GlueEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__LexicalEnvironment_O: {
    core::LexicalEnvironment_O* obj_gc_safe = reinterpret_cast<core::LexicalEnvironment_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ParentEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_Metadata);
    typedef core::LexicalEnvironment_O type_KIND_LISPALLOC_core__LexicalEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__LexicalEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__CompileTimeEnvironment_O: {
    core::CompileTimeEnvironment_O* obj_gc_safe = reinterpret_cast<core::CompileTimeEnvironment_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ParentEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_Metadata);
    typedef core::CompileTimeEnvironment_O type_KIND_LISPALLOC_core__CompileTimeEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__CompileTimeEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__CatchEnvironment_O: {
    core::CatchEnvironment_O* obj_gc_safe = reinterpret_cast<core::CatchEnvironment_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ParentEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_Metadata);
    typedef core::CatchEnvironment_O type_KIND_LISPALLOC_core__CatchEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__CatchEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__BlockEnvironment_O: {
    core::BlockEnvironment_O* obj_gc_safe = reinterpret_cast<core::BlockEnvironment_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ParentEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_Metadata);
    SMART_PTR_FIX(obj_gc_safe->_BlockSymbol);
    typedef core::BlockEnvironment_O type_KIND_LISPALLOC_core__BlockEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__BlockEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__UnwindProtectEnvironment_O: {
    core::UnwindProtectEnvironment_O* obj_gc_safe = reinterpret_cast<core::UnwindProtectEnvironment_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ParentEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_Metadata);
    typedef core::UnwindProtectEnvironment_O type_KIND_LISPALLOC_core__UnwindProtectEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__UnwindProtectEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__FunctionContainerEnvironment_O: {
    core::FunctionContainerEnvironment_O* obj_gc_safe = reinterpret_cast<core::FunctionContainerEnvironment_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ParentEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_Metadata);
    typedef core::FunctionContainerEnvironment_O type_KIND_LISPALLOC_core__FunctionContainerEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__FunctionContainerEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SymbolMacroletEnvironment_O: {
    core::SymbolMacroletEnvironment_O* obj_gc_safe = reinterpret_cast<core::SymbolMacroletEnvironment_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ParentEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_Metadata);
    SMART_PTR_FIX(obj_gc_safe->_Macros);
    typedef core::SymbolMacroletEnvironment_O type_KIND_LISPALLOC_core__SymbolMacroletEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SymbolMacroletEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__MacroletEnvironment_O: {
    core::MacroletEnvironment_O* obj_gc_safe = reinterpret_cast<core::MacroletEnvironment_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ParentEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_Metadata);
    SMART_PTR_FIX(obj_gc_safe->_Macros);
    typedef core::MacroletEnvironment_O type_KIND_LISPALLOC_core__MacroletEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__MacroletEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__RuntimeVisibleEnvironment_O: {
    core::RuntimeVisibleEnvironment_O* obj_gc_safe = reinterpret_cast<core::RuntimeVisibleEnvironment_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ParentEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_Metadata);
    SMART_PTR_FIX(obj_gc_safe->_RuntimeEnvironment);
    typedef core::RuntimeVisibleEnvironment_O type_KIND_LISPALLOC_core__RuntimeVisibleEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__RuntimeVisibleEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__ValueEnvironment_O: {
    core::ValueEnvironment_O* obj_gc_safe = reinterpret_cast<core::ValueEnvironment_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ParentEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_Metadata);
    SMART_PTR_FIX(obj_gc_safe->_RuntimeEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_SymbolIndex);
    SMART_PTR_FIX(obj_gc_safe->_ActivationFrame);
    typedef core::ValueEnvironment_O type_KIND_LISPALLOC_core__ValueEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__ValueEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__FunctionValueEnvironment_O: {
    core::FunctionValueEnvironment_O* obj_gc_safe = reinterpret_cast<core::FunctionValueEnvironment_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ParentEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_Metadata);
    SMART_PTR_FIX(obj_gc_safe->_RuntimeEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_FunctionIndices);
    SMART_PTR_FIX(obj_gc_safe->_FunctionFrame);
    typedef core::FunctionValueEnvironment_O type_KIND_LISPALLOC_core__FunctionValueEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__FunctionValueEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__TagbodyEnvironment_O: {
    core::TagbodyEnvironment_O* obj_gc_safe = reinterpret_cast<core::TagbodyEnvironment_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ParentEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_Metadata);
    SMART_PTR_FIX(obj_gc_safe->_RuntimeEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_Tags);
    POINTER_FIX(obj_gc_safe->_TagCode._Vector._Contents);
    SMART_PTR_FIX(obj_gc_safe->_ActivationFrame);
    typedef core::TagbodyEnvironment_O type_KIND_LISPALLOC_core__TagbodyEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__TagbodyEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__ActivationFrame_O: {
    typedef core::ActivationFrame_O type_KIND_LISPALLOC_core__ActivationFrame_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__ActivationFrame_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__TagbodyFrame_O: {
    core::TagbodyFrame_O* obj_gc_safe = reinterpret_cast<core::TagbodyFrame_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ParentFrame);
    typedef core::TagbodyFrame_O type_KIND_LISPALLOC_core__TagbodyFrame_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__TagbodyFrame_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__FunctionFrame_O: {
    core::FunctionFrame_O* obj_gc_safe = reinterpret_cast<core::FunctionFrame_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ParentFrame);
    POINTER_FIX(obj_gc_safe->_Objects._Array._Contents);
    typedef core::FunctionFrame_O type_KIND_LISPALLOC_core__FunctionFrame_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__FunctionFrame_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__ValueFrame_O: {
    core::ValueFrame_O* obj_gc_safe = reinterpret_cast<core::ValueFrame_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ParentFrame);
    POINTER_FIX(obj_gc_safe->_Objects._Array._Contents);
    SMART_PTR_FIX(obj_gc_safe->_DebuggingInfo);
    typedef core::ValueFrame_O type_KIND_LISPALLOC_core__ValueFrame_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__ValueFrame_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SingleDispatchMethod_O: {
    core::SingleDispatchMethod_O* obj_gc_safe = reinterpret_cast<core::SingleDispatchMethod_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_name);
    SMART_PTR_FIX(obj_gc_safe->_receiver_class);
    SMART_PTR_FIX(obj_gc_safe->code);
    SMART_PTR_FIX(obj_gc_safe->_argument_handler);
    SMART_PTR_FIX(obj_gc_safe->_declares);
    SMART_PTR_FIX(obj_gc_safe->_docstring);
    typedef core::SingleDispatchMethod_O type_KIND_LISPALLOC_core__SingleDispatchMethod_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SingleDispatchMethod_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SourceFileInfo_O: {
    core::SourceFileInfo_O* obj_gc_safe = reinterpret_cast<core::SourceFileInfo_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_pathname);
    typedef core::SourceFileInfo_O type_KIND_LISPALLOC_core__SourceFileInfo_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SourceFileInfo_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__ObjectSet_O: {
    core::ObjectSet_O* obj_gc_safe = reinterpret_cast<core::ObjectSet_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Set);
    typedef core::ObjectSet_O type_KIND_LISPALLOC_core__ObjectSet_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__ObjectSet_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__DirectoryEntry_O: {
    typedef core::DirectoryEntry_O type_KIND_LISPALLOC_core__DirectoryEntry_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__DirectoryEntry_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Pointer_O: {
    typedef core::Pointer_O type_KIND_LISPALLOC_core__Pointer_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Pointer_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Path_O: {
    typedef core::Path_O type_KIND_LISPALLOC_core__Path_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Path_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DebugInfo_O: {
    typedef llvmo::DebugInfo_O type_KIND_LISPALLOC_llvmo__DebugInfo_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DebugInfo_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DICompositeType_O: {
    typedef llvmo::DICompositeType_O type_KIND_LISPALLOC_llvmo__DICompositeType_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DICompositeType_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DIBasicType_O: {
    typedef llvmo::DIBasicType_O type_KIND_LISPALLOC_llvmo__DIBasicType_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DIBasicType_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DIType_O: {
    typedef llvmo::DIType_O type_KIND_LISPALLOC_llvmo__DIType_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DIType_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DISubprogram_O: {
    typedef llvmo::DISubprogram_O type_KIND_LISPALLOC_llvmo__DISubprogram_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DISubprogram_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DIArray_O: {
    typedef llvmo::DIArray_O type_KIND_LISPALLOC_llvmo__DIArray_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DIArray_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DITypeArray_O: {
    typedef llvmo::DITypeArray_O type_KIND_LISPALLOC_llvmo__DITypeArray_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DITypeArray_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DISubroutineType_O: {
    typedef llvmo::DISubroutineType_O type_KIND_LISPALLOC_llvmo__DISubroutineType_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DISubroutineType_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DIScope_O: {
    typedef llvmo::DIScope_O type_KIND_LISPALLOC_llvmo__DIScope_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DIScope_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DIFile_O: {
    typedef llvmo::DIFile_O type_KIND_LISPALLOC_llvmo__DIFile_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DIFile_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DIDescriptor_O: {
    typedef llvmo::DIDescriptor_O type_KIND_LISPALLOC_llvmo__DIDescriptor_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DIDescriptor_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DICompileUnit_O: {
    typedef llvmo::DICompileUnit_O type_KIND_LISPALLOC_llvmo__DICompileUnit_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DICompileUnit_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DIDerivedType_O: {
    typedef llvmo::DIDerivedType_O type_KIND_LISPALLOC_llvmo__DIDerivedType_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DIDerivedType_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DILexicalBlock_O: {
    typedef llvmo::DILexicalBlock_O type_KIND_LISPALLOC_llvmo__DILexicalBlock_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DILexicalBlock_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__StructureObject_O: {
    core::StructureObject_O* obj_gc_safe = reinterpret_cast<core::StructureObject_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Type);
    POINTER_FIX(obj_gc_safe->_Slots._Vector._Contents);
    typedef core::StructureObject_O type_KIND_LISPALLOC_core__StructureObject_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__StructureObject_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__LambdaListHandler_O: {
    core::LambdaListHandler_O* obj_gc_safe = reinterpret_cast<core::LambdaListHandler_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_LambdaList);
    SMART_PTR_FIX(obj_gc_safe->_ClassifiedSymbolList);
    SMART_PTR_FIX(obj_gc_safe->_SpecialSymbolSet);
    SMART_PTR_FIX(obj_gc_safe->_DeclareSpecifierList);
    POINTER_FIX(obj_gc_safe->_RequiredArguments._Vector._Contents);
    POINTER_FIX(obj_gc_safe->_OptionalArguments._Vector._Contents);
    SMART_PTR_FIX(obj_gc_safe->_RestArgument._ArgTarget);
    POINTER_FIX(obj_gc_safe->_KeywordArguments._Vector._Contents);
    SMART_PTR_FIX(obj_gc_safe->_AllowOtherKeys);
    POINTER_FIX(obj_gc_safe->_AuxArguments._Vector._Contents);
    POINTER_FIX(obj_gc_safe->_Comment._Contents);
    SMART_PTR_FIX(obj_gc_safe->_LexicalVariableNamesForDebugging);
    typedef core::LambdaListHandler_O type_KIND_LISPALLOC_core__LambdaListHandler_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__LambdaListHandler_O)) + global_alignup_sizeof_header;
} break;
case KIND_TEMPLATED_LISPALLOC_core__Iterator_O: {
    core::Iterator_O* obj_gc_safe = reinterpret_cast<core::Iterator_O*>(client);
    typedef core::Iterator_O type_KIND_TEMPLATED_LISPALLOC_core__Iterator_O;
    client = (char*)client + AlignUp(obj_gc_safe->templatedSizeof()) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__DirectoryIterator_O: {
    core::DirectoryIterator_O* obj_gc_safe = reinterpret_cast<core::DirectoryIterator_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Path);
    typedef core::DirectoryIterator_O type_KIND_LISPALLOC_core__DirectoryIterator_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__DirectoryIterator_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__RecursiveDirectoryIterator_O: {
    core::RecursiveDirectoryIterator_O* obj_gc_safe = reinterpret_cast<core::RecursiveDirectoryIterator_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Path);
    typedef core::RecursiveDirectoryIterator_O type_KIND_LISPALLOC_core__RecursiveDirectoryIterator_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__RecursiveDirectoryIterator_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__PosixTimeDuration_O: {
    typedef core::PosixTimeDuration_O type_KIND_LISPALLOC_core__PosixTimeDuration_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__PosixTimeDuration_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__FileStatus_O: {
    typedef core::FileStatus_O type_KIND_LISPALLOC_core__FileStatus_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__FileStatus_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_clbind__ClassRegistry_O: {
    clbind::ClassRegistry_O* obj_gc_safe = reinterpret_cast<clbind::ClassRegistry_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->m_classes);
    typedef clbind::ClassRegistry_O type_KIND_LISPALLOC_clbind__ClassRegistry_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_clbind__ClassRegistry_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Archive_O: {
    core::Archive_O* obj_gc_safe = reinterpret_cast<core::Archive_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_TopNode);
    typedef core::Archive_O type_KIND_LISPALLOC_core__Archive_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Archive_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SaveArchive_O: {
    core::SaveArchive_O* obj_gc_safe = reinterpret_cast<core::SaveArchive_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_TopNode);
    SMART_PTR_FIX(obj_gc_safe->_SNodeForObject);
    typedef core::SaveArchive_O type_KIND_LISPALLOC_core__SaveArchive_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SaveArchive_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SexpSaveArchive_O: {
    core::SexpSaveArchive_O* obj_gc_safe = reinterpret_cast<core::SexpSaveArchive_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_TopNode);
    SMART_PTR_FIX(obj_gc_safe->_SNodeForObject);
    typedef core::SexpSaveArchive_O type_KIND_LISPALLOC_core__SexpSaveArchive_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SexpSaveArchive_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__LoadArchive_O: {
    core::LoadArchive_O* obj_gc_safe = reinterpret_cast<core::LoadArchive_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_TopNode);
    SMART_PTR_FIX(obj_gc_safe->_ObjectForSNode);
    SMART_PTR_FIX(obj_gc_safe->_NodesToFinalize);
    typedef core::LoadArchive_O type_KIND_LISPALLOC_core__LoadArchive_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__LoadArchive_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SexpLoadArchive_O: {
    core::SexpLoadArchive_O* obj_gc_safe = reinterpret_cast<core::SexpLoadArchive_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_TopNode);
    SMART_PTR_FIX(obj_gc_safe->_ObjectForSNode);
    SMART_PTR_FIX(obj_gc_safe->_NodesToFinalize);
    typedef core::SexpLoadArchive_O type_KIND_LISPALLOC_core__SexpLoadArchive_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SexpLoadArchive_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__RegexMatch_O: {
    typedef core::RegexMatch_O type_KIND_LISPALLOC_core__RegexMatch_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__RegexMatch_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SourcePosInfo_O: {
    typedef core::SourcePosInfo_O type_KIND_LISPALLOC_core__SourcePosInfo_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SourcePosInfo_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Character_O: {
    typedef core::Character_O type_KIND_LISPALLOC_core__Character_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Character_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__ExtendedChar_O: {
    typedef core::ExtendedChar_O type_KIND_LISPALLOC_core__ExtendedChar_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__ExtendedChar_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__BaseChar_O: {
    typedef core::BaseChar_O type_KIND_LISPALLOC_core__BaseChar_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__BaseChar_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__StandardChar_O: {
    typedef core::StandardChar_O type_KIND_LISPALLOC_core__StandardChar_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__StandardChar_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__MicroHeap_O: {
    typedef core::MicroHeap_O type_KIND_LISPALLOC_core__MicroHeap_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__MicroHeap_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Function_O: {
    core::Function_O* obj_gc_safe = reinterpret_cast<core::Function_O*>(client);
    POINTER_FIX(obj_gc_safe->closure);
    typedef core::Function_O type_KIND_LISPALLOC_core__Function_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Function_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SingleDispatchEffectiveMethodFunction_O: {
    core::SingleDispatchEffectiveMethodFunction_O* obj_gc_safe = reinterpret_cast<core::SingleDispatchEffectiveMethodFunction_O*>(client);
    POINTER_FIX(obj_gc_safe->closure);
    SMART_PTR_FIX(obj_gc_safe->_Methods);
    typedef core::SingleDispatchEffectiveMethodFunction_O type_KIND_LISPALLOC_core__SingleDispatchEffectiveMethodFunction_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SingleDispatchEffectiveMethodFunction_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SingleDispatchGenericFunction_O: {
    core::SingleDispatchGenericFunction_O* obj_gc_safe = reinterpret_cast<core::SingleDispatchGenericFunction_O*>(client);
    POINTER_FIX(obj_gc_safe->closure);
    typedef core::SingleDispatchGenericFunction_O type_KIND_LISPALLOC_core__SingleDispatchGenericFunction_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SingleDispatchGenericFunction_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__CompiledFunction_O: {
    core::CompiledFunction_O* obj_gc_safe = reinterpret_cast<core::CompiledFunction_O*>(client);
    POINTER_FIX(obj_gc_safe->closure);
    typedef core::CompiledFunction_O type_KIND_LISPALLOC_core__CompiledFunction_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__CompiledFunction_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Instance_O: {
    core::Instance_O* obj_gc_safe = reinterpret_cast<core::Instance_O*>(client);
    POINTER_FIX(obj_gc_safe->closure);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    POINTER_FIX(obj_gc_safe->_Slots._Vector._Contents);
    SMART_PTR_FIX(obj_gc_safe->_Sig);
    typedef core::Instance_O type_KIND_LISPALLOC_core__Instance_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Instance_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SpecialForm_O: {
    core::SpecialForm_O* obj_gc_safe = reinterpret_cast<core::SpecialForm_O*>(client);
    POINTER_FIX(obj_gc_safe->closure);
    SMART_PTR_FIX(obj_gc_safe->_SpecialSymbol);
    typedef core::SpecialForm_O type_KIND_LISPALLOC_core__SpecialForm_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SpecialForm_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__WeakKeyMapping_O: {
    core::WeakKeyMapping_O* obj_gc_safe = reinterpret_cast<core::WeakKeyMapping_O*>(client);
    POINTER_FIX(obj_gc_safe->_WeakObject.Key);
    POINTER_FIX(obj_gc_safe->_WeakObject.Value);
    typedef core::WeakKeyMapping_O type_KIND_LISPALLOC_core__WeakKeyMapping_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__WeakKeyMapping_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DebugLoc_O: {
    typedef llvmo::DebugLoc_O type_KIND_LISPALLOC_llvmo__DebugLoc_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DebugLoc_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Regex_O: {
    typedef core::Regex_O type_KIND_LISPALLOC_core__Regex_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Regex_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Package_O: {
    core::Package_O* obj_gc_safe = reinterpret_cast<core::Package_O*>(client);
    POINTER_FIX(obj_gc_safe->_Name._Contents);
    SMART_PTR_FIX(obj_gc_safe->_InternalSymbols);
    SMART_PTR_FIX(obj_gc_safe->_ExternalSymbols);
    SMART_PTR_FIX(obj_gc_safe->_ShadowingSymbols);
    POINTER_FIX(obj_gc_safe->_UsingPackages._Vector._Contents);
    POINTER_FIX(obj_gc_safe->_PackagesUsedBy._Vector._Contents);
    SMART_PTR_FIX(obj_gc_safe->_Nicknames);
    typedef core::Package_O type_KIND_LISPALLOC_core__Package_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Package_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__CandoException_O: {
    core::CandoException_O* obj_gc_safe = reinterpret_cast<core::CandoException_O*>(client);
    POINTER_FIX(obj_gc_safe->_message._Contents);
    typedef core::CandoException_O type_KIND_LISPALLOC_core__CandoException_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__CandoException_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__StringList_O: {
    typedef core::StringList_O type_KIND_LISPALLOC_core__StringList_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__StringList_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__IntArray_O: {
    typedef core::IntArray_O type_KIND_LISPALLOC_core__IntArray_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__IntArray_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Number_O: {
    typedef core::Number_O type_KIND_LISPALLOC_core__Number_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Number_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Real_O: {
    typedef core::Real_O type_KIND_LISPALLOC_core__Real_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Real_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Float_O: {
    typedef core::Float_O type_KIND_LISPALLOC_core__Float_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Float_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__ShortFloat_O: {
    typedef core::ShortFloat_O type_KIND_LISPALLOC_core__ShortFloat_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__ShortFloat_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__DoubleFloat_O: {
    typedef core::DoubleFloat_O type_KIND_LISPALLOC_core__DoubleFloat_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__DoubleFloat_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SingleFloat_O: {
    typedef core::SingleFloat_O type_KIND_LISPALLOC_core__SingleFloat_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SingleFloat_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Rational_O: {
    typedef core::Rational_O type_KIND_LISPALLOC_core__Rational_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Rational_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Ratio_O: {
    core::Ratio_O* obj_gc_safe = reinterpret_cast<core::Ratio_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_numerator);
    SMART_PTR_FIX(obj_gc_safe->_denominator);
    typedef core::Ratio_O type_KIND_LISPALLOC_core__Ratio_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Ratio_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Integer_O: {
    typedef core::Integer_O type_KIND_LISPALLOC_core__Integer_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Integer_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Bignum_O: {
    typedef core::Bignum_O type_KIND_LISPALLOC_core__Bignum_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Bignum_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Fixnum_O: {
    typedef core::Fixnum_O type_KIND_LISPALLOC_core__Fixnum_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Fixnum_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Complex_O: {
    core::Complex_O* obj_gc_safe = reinterpret_cast<core::Complex_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_real);
    SMART_PTR_FIX(obj_gc_safe->_imaginary);
    typedef core::Complex_O type_KIND_LISPALLOC_core__Complex_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Complex_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__PosixTime_O: {
    typedef core::PosixTime_O type_KIND_LISPALLOC_core__PosixTime_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__PosixTime_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__ReadTable_O: {
    core::ReadTable_O* obj_gc_safe = reinterpret_cast<core::ReadTable_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Case);
    SMART_PTR_FIX(obj_gc_safe->_Syntax);
    typedef core::ReadTable_O type_KIND_LISPALLOC_core__ReadTable_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__ReadTable_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__Attribute_O: {
    typedef llvmo::Attribute_O type_KIND_LISPALLOC_llvmo__Attribute_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__Attribute_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Array_O: {
    typedef core::Array_O type_KIND_LISPALLOC_core__Array_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Array_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__ArrayObjects_O: {
    core::ArrayObjects_O* obj_gc_safe = reinterpret_cast<core::ArrayObjects_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ElementType);
    POINTER_FIX(obj_gc_safe->_Values._Vector._Contents);
    typedef core::ArrayObjects_O type_KIND_LISPALLOC_core__ArrayObjects_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__ArrayObjects_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Vector_O: {
    typedef core::Vector_O type_KIND_LISPALLOC_core__Vector_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Vector_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__String_O: {
    typedef core::String_O type_KIND_LISPALLOC_core__String_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__String_O)) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__Str_O: {
    core::Str_O* obj_gc_safe = reinterpret_cast<core::Str_O*>(client);
    POINTER_FIX(obj_gc_safe->_Contents._Contents);
    typedef core::Str_O type_KIND_BOOTSTRAP_core__Str_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__Str_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__StrWithFillPtr_O: {
    core::StrWithFillPtr_O* obj_gc_safe = reinterpret_cast<core::StrWithFillPtr_O*>(client);
    POINTER_FIX(obj_gc_safe->_Contents._Contents);
    typedef core::StrWithFillPtr_O type_KIND_LISPALLOC_core__StrWithFillPtr_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__StrWithFillPtr_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__VectorObjects_O: {
    core::VectorObjects_O* obj_gc_safe = reinterpret_cast<core::VectorObjects_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ElementType);
    POINTER_FIX(obj_gc_safe->_Values._Vector._Contents);
    typedef core::VectorObjects_O type_KIND_LISPALLOC_core__VectorObjects_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__VectorObjects_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__VectorObjectsWithFillPtr_O: {
    core::VectorObjectsWithFillPtr_O* obj_gc_safe = reinterpret_cast<core::VectorObjectsWithFillPtr_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ElementType);
    POINTER_FIX(obj_gc_safe->_Values._Vector._Contents);
    typedef core::VectorObjectsWithFillPtr_O type_KIND_LISPALLOC_core__VectorObjectsWithFillPtr_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__VectorObjectsWithFillPtr_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__BitVector_O: {
    typedef core::BitVector_O type_KIND_LISPALLOC_core__BitVector_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__BitVector_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SimpleBitVector_O: {
    typedef core::SimpleBitVector_O type_KIND_LISPALLOC_core__SimpleBitVector_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SimpleBitVector_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SmallMap_O: {
    core::SmallMap_O* obj_gc_safe = reinterpret_cast<core::SmallMap_O*>(client);
    POINTER_FIX(obj_gc_safe->map._Contents);
    typedef core::SmallMap_O type_KIND_LISPALLOC_core__SmallMap_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SmallMap_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Reader_O: {
    core::Reader_O* obj_gc_safe = reinterpret_cast<core::Reader_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Input);
    typedef core::Reader_O type_KIND_LISPALLOC_core__Reader_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Reader_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__ObjRef_O: {
    core::ObjRef_O* obj_gc_safe = reinterpret_cast<core::ObjRef_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_SubRef);
    typedef core::ObjRef_O type_KIND_LISPALLOC_core__ObjRef_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__ObjRef_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__InsertPoint_O: {
    typedef llvmo::InsertPoint_O type_KIND_LISPALLOC_llvmo__InsertPoint_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__InsertPoint_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SourceManager_O: {
    core::SourceManager_O* obj_gc_safe = reinterpret_cast<core::SourceManager_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_SourcePosInfo);
    typedef core::SourceManager_O type_KIND_LISPALLOC_core__SourceManager_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SourceManager_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__ExternalObject_O: {
    core::ExternalObject_O* obj_gc_safe = reinterpret_cast<core::ExternalObject_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef core::ExternalObject_O type_KIND_LISPALLOC_core__ExternalObject_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__ExternalObject_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__Pass_O: {
    llvmo::Pass_O* obj_gc_safe = reinterpret_cast<llvmo::Pass_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::Pass_O type_KIND_LISPALLOC_llvmo__Pass_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__Pass_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__FunctionPass_O: {
    llvmo::FunctionPass_O* obj_gc_safe = reinterpret_cast<llvmo::FunctionPass_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::FunctionPass_O type_KIND_LISPALLOC_llvmo__FunctionPass_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__FunctionPass_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__ModulePass_O: {
    llvmo::ModulePass_O* obj_gc_safe = reinterpret_cast<llvmo::ModulePass_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::ModulePass_O type_KIND_LISPALLOC_llvmo__ModulePass_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ModulePass_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__ImmutablePass_O: {
    llvmo::ImmutablePass_O* obj_gc_safe = reinterpret_cast<llvmo::ImmutablePass_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::ImmutablePass_O type_KIND_LISPALLOC_llvmo__ImmutablePass_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ImmutablePass_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DataLayoutPass_O: {
    llvmo::DataLayoutPass_O* obj_gc_safe = reinterpret_cast<llvmo::DataLayoutPass_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::DataLayoutPass_O type_KIND_LISPALLOC_llvmo__DataLayoutPass_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DataLayoutPass_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__IRBuilderBase_O: {
    llvmo::IRBuilderBase_O* obj_gc_safe = reinterpret_cast<llvmo::IRBuilderBase_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::IRBuilderBase_O type_KIND_LISPALLOC_llvmo__IRBuilderBase_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__IRBuilderBase_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__IRBuilder_O: {
    llvmo::IRBuilder_O* obj_gc_safe = reinterpret_cast<llvmo::IRBuilder_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::IRBuilder_O type_KIND_LISPALLOC_llvmo__IRBuilder_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__IRBuilder_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DIBuilder_O: {
    llvmo::DIBuilder_O* obj_gc_safe = reinterpret_cast<llvmo::DIBuilder_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::DIBuilder_O type_KIND_LISPALLOC_llvmo__DIBuilder_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DIBuilder_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__ExecutionEngine_O: {
    llvmo::ExecutionEngine_O* obj_gc_safe = reinterpret_cast<llvmo::ExecutionEngine_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    SMART_PTR_FIX(obj_gc_safe->_DependentModules);
    typedef llvmo::ExecutionEngine_O type_KIND_LISPALLOC_llvmo__ExecutionEngine_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ExecutionEngine_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__EngineBuilder_O: {
    llvmo::EngineBuilder_O* obj_gc_safe = reinterpret_cast<llvmo::EngineBuilder_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::EngineBuilder_O type_KIND_LISPALLOC_llvmo__EngineBuilder_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__EngineBuilder_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__APInt_O: {
    llvmo::APInt_O* obj_gc_safe = reinterpret_cast<llvmo::APInt_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::APInt_O type_KIND_LISPALLOC_llvmo__APInt_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__APInt_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__APFloat_O: {
    llvmo::APFloat_O* obj_gc_safe = reinterpret_cast<llvmo::APFloat_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::APFloat_O type_KIND_LISPALLOC_llvmo__APFloat_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__APFloat_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__ForeignData_O: {
    core::ForeignData_O* obj_gc_safe = reinterpret_cast<core::ForeignData_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    SMART_PTR_FIX(obj_gc_safe->_Kind);
    typedef core::ForeignData_O type_KIND_LISPALLOC_core__ForeignData_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__ForeignData_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__PassManagerBuilder_O: {
    llvmo::PassManagerBuilder_O* obj_gc_safe = reinterpret_cast<llvmo::PassManagerBuilder_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::PassManagerBuilder_O type_KIND_LISPALLOC_llvmo__PassManagerBuilder_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__PassManagerBuilder_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__PassManagerBase_O: {
    llvmo::PassManagerBase_O* obj_gc_safe = reinterpret_cast<llvmo::PassManagerBase_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::PassManagerBase_O type_KIND_LISPALLOC_llvmo__PassManagerBase_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__PassManagerBase_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__PassManager_O: {
    llvmo::PassManager_O* obj_gc_safe = reinterpret_cast<llvmo::PassManager_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::PassManager_O type_KIND_LISPALLOC_llvmo__PassManager_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__PassManager_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__FunctionPassManager_O: {
    llvmo::FunctionPassManager_O* obj_gc_safe = reinterpret_cast<llvmo::FunctionPassManager_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::FunctionPassManager_O type_KIND_LISPALLOC_llvmo__FunctionPassManager_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__FunctionPassManager_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DataLayout_O: {
    llvmo::DataLayout_O* obj_gc_safe = reinterpret_cast<llvmo::DataLayout_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::DataLayout_O type_KIND_LISPALLOC_llvmo__DataLayout_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DataLayout_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__Type_O: {
    llvmo::Type_O* obj_gc_safe = reinterpret_cast<llvmo::Type_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::Type_O type_KIND_LISPALLOC_llvmo__Type_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__Type_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__CompositeType_O: {
    llvmo::CompositeType_O* obj_gc_safe = reinterpret_cast<llvmo::CompositeType_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::CompositeType_O type_KIND_LISPALLOC_llvmo__CompositeType_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__CompositeType_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__SequentialType_O: {
    llvmo::SequentialType_O* obj_gc_safe = reinterpret_cast<llvmo::SequentialType_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::SequentialType_O type_KIND_LISPALLOC_llvmo__SequentialType_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__SequentialType_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__PointerType_O: {
    llvmo::PointerType_O* obj_gc_safe = reinterpret_cast<llvmo::PointerType_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::PointerType_O type_KIND_LISPALLOC_llvmo__PointerType_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__PointerType_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__VectorType_O: {
    llvmo::VectorType_O* obj_gc_safe = reinterpret_cast<llvmo::VectorType_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::VectorType_O type_KIND_LISPALLOC_llvmo__VectorType_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__VectorType_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__ArrayType_O: {
    llvmo::ArrayType_O* obj_gc_safe = reinterpret_cast<llvmo::ArrayType_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::ArrayType_O type_KIND_LISPALLOC_llvmo__ArrayType_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ArrayType_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__StructType_O: {
    llvmo::StructType_O* obj_gc_safe = reinterpret_cast<llvmo::StructType_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::StructType_O type_KIND_LISPALLOC_llvmo__StructType_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__StructType_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__IntegerType_O: {
    llvmo::IntegerType_O* obj_gc_safe = reinterpret_cast<llvmo::IntegerType_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::IntegerType_O type_KIND_LISPALLOC_llvmo__IntegerType_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__IntegerType_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__FunctionType_O: {
    llvmo::FunctionType_O* obj_gc_safe = reinterpret_cast<llvmo::FunctionType_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::FunctionType_O type_KIND_LISPALLOC_llvmo__FunctionType_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__FunctionType_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__Linker_O: {
    llvmo::Linker_O* obj_gc_safe = reinterpret_cast<llvmo::Linker_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::Linker_O type_KIND_LISPALLOC_llvmo__Linker_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__Linker_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__Value_O: {
    llvmo::Value_O* obj_gc_safe = reinterpret_cast<llvmo::Value_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::Value_O type_KIND_LISPALLOC_llvmo__Value_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__Value_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__Argument_O: {
    llvmo::Argument_O* obj_gc_safe = reinterpret_cast<llvmo::Argument_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::Argument_O type_KIND_LISPALLOC_llvmo__Argument_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__Argument_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__MDString_O: {
    llvmo::MDString_O* obj_gc_safe = reinterpret_cast<llvmo::MDString_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::MDString_O type_KIND_LISPALLOC_llvmo__MDString_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__MDString_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__MDNode_O: {
    llvmo::MDNode_O* obj_gc_safe = reinterpret_cast<llvmo::MDNode_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::MDNode_O type_KIND_LISPALLOC_llvmo__MDNode_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__MDNode_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__BasicBlock_O: {
    llvmo::BasicBlock_O* obj_gc_safe = reinterpret_cast<llvmo::BasicBlock_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::BasicBlock_O type_KIND_LISPALLOC_llvmo__BasicBlock_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__BasicBlock_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__User_O: {
    llvmo::User_O* obj_gc_safe = reinterpret_cast<llvmo::User_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::User_O type_KIND_LISPALLOC_llvmo__User_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__User_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__Instruction_O: {
    llvmo::Instruction_O* obj_gc_safe = reinterpret_cast<llvmo::Instruction_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::Instruction_O type_KIND_LISPALLOC_llvmo__Instruction_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__Instruction_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__AtomicRMWInst_O: {
    llvmo::AtomicRMWInst_O* obj_gc_safe = reinterpret_cast<llvmo::AtomicRMWInst_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::AtomicRMWInst_O type_KIND_LISPALLOC_llvmo__AtomicRMWInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__AtomicRMWInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__StoreInst_O: {
    llvmo::StoreInst_O* obj_gc_safe = reinterpret_cast<llvmo::StoreInst_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::StoreInst_O type_KIND_LISPALLOC_llvmo__StoreInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__StoreInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__PHINode_O: {
    llvmo::PHINode_O* obj_gc_safe = reinterpret_cast<llvmo::PHINode_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::PHINode_O type_KIND_LISPALLOC_llvmo__PHINode_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__PHINode_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__AtomicCmpXchgInst_O: {
    llvmo::AtomicCmpXchgInst_O* obj_gc_safe = reinterpret_cast<llvmo::AtomicCmpXchgInst_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::AtomicCmpXchgInst_O type_KIND_LISPALLOC_llvmo__AtomicCmpXchgInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__AtomicCmpXchgInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__LandingPadInst_O: {
    llvmo::LandingPadInst_O* obj_gc_safe = reinterpret_cast<llvmo::LandingPadInst_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::LandingPadInst_O type_KIND_LISPALLOC_llvmo__LandingPadInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__LandingPadInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__UnaryInstruction_O: {
    llvmo::UnaryInstruction_O* obj_gc_safe = reinterpret_cast<llvmo::UnaryInstruction_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::UnaryInstruction_O type_KIND_LISPALLOC_llvmo__UnaryInstruction_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__UnaryInstruction_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__LoadInst_O: {
    llvmo::LoadInst_O* obj_gc_safe = reinterpret_cast<llvmo::LoadInst_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::LoadInst_O type_KIND_LISPALLOC_llvmo__LoadInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__LoadInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__VAArgInst_O: {
    llvmo::VAArgInst_O* obj_gc_safe = reinterpret_cast<llvmo::VAArgInst_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::VAArgInst_O type_KIND_LISPALLOC_llvmo__VAArgInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__VAArgInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__AllocaInst_O: {
    llvmo::AllocaInst_O* obj_gc_safe = reinterpret_cast<llvmo::AllocaInst_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::AllocaInst_O type_KIND_LISPALLOC_llvmo__AllocaInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__AllocaInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__TerminatorInst_O: {
    llvmo::TerminatorInst_O* obj_gc_safe = reinterpret_cast<llvmo::TerminatorInst_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::TerminatorInst_O type_KIND_LISPALLOC_llvmo__TerminatorInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__TerminatorInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__IndirectBrInst_O: {
    llvmo::IndirectBrInst_O* obj_gc_safe = reinterpret_cast<llvmo::IndirectBrInst_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::IndirectBrInst_O type_KIND_LISPALLOC_llvmo__IndirectBrInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__IndirectBrInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__UnreachableInst_O: {
    llvmo::UnreachableInst_O* obj_gc_safe = reinterpret_cast<llvmo::UnreachableInst_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::UnreachableInst_O type_KIND_LISPALLOC_llvmo__UnreachableInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__UnreachableInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__InvokeInst_O: {
    llvmo::InvokeInst_O* obj_gc_safe = reinterpret_cast<llvmo::InvokeInst_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::InvokeInst_O type_KIND_LISPALLOC_llvmo__InvokeInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__InvokeInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__ReturnInst_O: {
    llvmo::ReturnInst_O* obj_gc_safe = reinterpret_cast<llvmo::ReturnInst_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::ReturnInst_O type_KIND_LISPALLOC_llvmo__ReturnInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ReturnInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__BranchInst_O: {
    llvmo::BranchInst_O* obj_gc_safe = reinterpret_cast<llvmo::BranchInst_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::BranchInst_O type_KIND_LISPALLOC_llvmo__BranchInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__BranchInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__ResumeInst_O: {
    llvmo::ResumeInst_O* obj_gc_safe = reinterpret_cast<llvmo::ResumeInst_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::ResumeInst_O type_KIND_LISPALLOC_llvmo__ResumeInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ResumeInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__SwitchInst_O: {
    llvmo::SwitchInst_O* obj_gc_safe = reinterpret_cast<llvmo::SwitchInst_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::SwitchInst_O type_KIND_LISPALLOC_llvmo__SwitchInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__SwitchInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__FenceInst_O: {
    llvmo::FenceInst_O* obj_gc_safe = reinterpret_cast<llvmo::FenceInst_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::FenceInst_O type_KIND_LISPALLOC_llvmo__FenceInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__FenceInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__CallInst_O: {
    llvmo::CallInst_O* obj_gc_safe = reinterpret_cast<llvmo::CallInst_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::CallInst_O type_KIND_LISPALLOC_llvmo__CallInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__CallInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__Constant_O: {
    llvmo::Constant_O* obj_gc_safe = reinterpret_cast<llvmo::Constant_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::Constant_O type_KIND_LISPALLOC_llvmo__Constant_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__Constant_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__ConstantDataSequential_O: {
    llvmo::ConstantDataSequential_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantDataSequential_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::ConstantDataSequential_O type_KIND_LISPALLOC_llvmo__ConstantDataSequential_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ConstantDataSequential_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__ConstantDataArray_O: {
    llvmo::ConstantDataArray_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantDataArray_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::ConstantDataArray_O type_KIND_LISPALLOC_llvmo__ConstantDataArray_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ConstantDataArray_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__ConstantStruct_O: {
    llvmo::ConstantStruct_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantStruct_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::ConstantStruct_O type_KIND_LISPALLOC_llvmo__ConstantStruct_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ConstantStruct_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__BlockAddress_O: {
    llvmo::BlockAddress_O* obj_gc_safe = reinterpret_cast<llvmo::BlockAddress_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::BlockAddress_O type_KIND_LISPALLOC_llvmo__BlockAddress_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__BlockAddress_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__ConstantPointerNull_O: {
    llvmo::ConstantPointerNull_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantPointerNull_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::ConstantPointerNull_O type_KIND_LISPALLOC_llvmo__ConstantPointerNull_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ConstantPointerNull_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__ConstantArray_O: {
    llvmo::ConstantArray_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantArray_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::ConstantArray_O type_KIND_LISPALLOC_llvmo__ConstantArray_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ConstantArray_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__ConstantFP_O: {
    llvmo::ConstantFP_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantFP_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::ConstantFP_O type_KIND_LISPALLOC_llvmo__ConstantFP_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ConstantFP_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__GlobalValue_O: {
    llvmo::GlobalValue_O* obj_gc_safe = reinterpret_cast<llvmo::GlobalValue_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::GlobalValue_O type_KIND_LISPALLOC_llvmo__GlobalValue_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__GlobalValue_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__Function_O: {
    llvmo::Function_O* obj_gc_safe = reinterpret_cast<llvmo::Function_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    SMART_PTR_FIX(obj_gc_safe->_RunTimeValues);
    typedef llvmo::Function_O type_KIND_LISPALLOC_llvmo__Function_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__Function_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__GlobalVariable_O: {
    llvmo::GlobalVariable_O* obj_gc_safe = reinterpret_cast<llvmo::GlobalVariable_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::GlobalVariable_O type_KIND_LISPALLOC_llvmo__GlobalVariable_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__GlobalVariable_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__ConstantExpr_O: {
    llvmo::ConstantExpr_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantExpr_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::ConstantExpr_O type_KIND_LISPALLOC_llvmo__ConstantExpr_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ConstantExpr_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__UndefValue_O: {
    llvmo::UndefValue_O* obj_gc_safe = reinterpret_cast<llvmo::UndefValue_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::UndefValue_O type_KIND_LISPALLOC_llvmo__UndefValue_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__UndefValue_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__ConstantInt_O: {
    llvmo::ConstantInt_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantInt_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::ConstantInt_O type_KIND_LISPALLOC_llvmo__ConstantInt_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ConstantInt_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__TargetMachine_O: {
    llvmo::TargetMachine_O* obj_gc_safe = reinterpret_cast<llvmo::TargetMachine_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::TargetMachine_O type_KIND_LISPALLOC_llvmo__TargetMachine_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__TargetMachine_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__LLVMContext_O: {
    llvmo::LLVMContext_O* obj_gc_safe = reinterpret_cast<llvmo::LLVMContext_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::LLVMContext_O type_KIND_LISPALLOC_llvmo__LLVMContext_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__LLVMContext_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__Module_O: {
    llvmo::Module_O* obj_gc_safe = reinterpret_cast<llvmo::Module_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    SMART_PTR_FIX(obj_gc_safe->_UniqueGlobalVariableStrings);
    typedef llvmo::Module_O type_KIND_LISPALLOC_llvmo__Module_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__Module_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__NamedMDNode_O: {
    llvmo::NamedMDNode_O* obj_gc_safe = reinterpret_cast<llvmo::NamedMDNode_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef llvmo::NamedMDNode_O type_KIND_LISPALLOC_llvmo__NamedMDNode_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__NamedMDNode_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SNode_O: {
    typedef core::SNode_O type_KIND_LISPALLOC_core__SNode_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SNode_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__BranchSNode_O: {
    core::BranchSNode_O* obj_gc_safe = reinterpret_cast<core::BranchSNode_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Kind);
    SMART_PTR_FIX(obj_gc_safe->_SNodePList);
    SMART_PTR_FIX(obj_gc_safe->_VectorSNodes);
    typedef core::BranchSNode_O type_KIND_LISPALLOC_core__BranchSNode_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__BranchSNode_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__LeafSNode_O: {
    core::LeafSNode_O* obj_gc_safe = reinterpret_cast<core::LeafSNode_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Object);
    typedef core::LeafSNode_O type_KIND_LISPALLOC_core__LeafSNode_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__LeafSNode_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__LoadTimeValues_O: {
    core::LoadTimeValues_O* obj_gc_safe = reinterpret_cast<core::LoadTimeValues_O*>(client);
    POINTER_FIX(obj_gc_safe->_Objects._Vector._Contents);
    POINTER_FIX(obj_gc_safe->_Symbols._Vector._Contents);
    typedef core::LoadTimeValues_O type_KIND_LISPALLOC_core__LoadTimeValues_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__LoadTimeValues_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__LightUserData_O: {
    typedef core::LightUserData_O type_KIND_LISPALLOC_core__LightUserData_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__LightUserData_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__UserData_O: {
    typedef core::UserData_O type_KIND_LISPALLOC_core__UserData_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__UserData_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__WeakHashTable_O: {
    typedef core::WeakHashTable_O type_KIND_LISPALLOC_core__WeakHashTable_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__WeakHashTable_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__WeakKeyHashTable_O: {
    core::WeakKeyHashTable_O* obj_gc_safe = reinterpret_cast<core::WeakKeyHashTable_O*>(client);
    POINTER_FIX(obj_gc_safe->_HashTable._Keys);
    POINTER_FIX(obj_gc_safe->_HashTable._Values);
    typedef core::WeakKeyHashTable_O type_KIND_LISPALLOC_core__WeakKeyHashTable_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__WeakKeyHashTable_O)) + global_alignup_sizeof_header;
} break;
case KIND_TEMPLATED_LISPALLOC_core__WrappedPointer_O: {
    core::WrappedPointer_O* obj_gc_safe = reinterpret_cast<core::WrappedPointer_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    typedef core::WrappedPointer_O type_KIND_TEMPLATED_LISPALLOC_core__WrappedPointer_O;
    client = (char*)client + AlignUp(obj_gc_safe->templatedSizeof()) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__StandardObject_O: {
    typedef core::StandardObject_O type_KIND_BOOTSTRAP_core__StandardObject_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__StandardObject_O)) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__Metaobject_O: {
    typedef core::Metaobject_O type_KIND_BOOTSTRAP_core__Metaobject_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__Metaobject_O)) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__Specializer_O: {
    typedef core::Specializer_O type_KIND_BOOTSTRAP_core__Specializer_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__Specializer_O)) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__Class_O: {
    core::Class_O* obj_gc_safe = reinterpret_cast<core::Class_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Signature_ClassSlots);
    POINTER_FIX(obj_gc_safe->_creator);
    POINTER_FIX(obj_gc_safe->_MetaClassSlots._Vector._Contents);
    typedef core::Class_O type_KIND_BOOTSTRAP_core__Class_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__Class_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__ForwardReferencedClass_O: {
    core::ForwardReferencedClass_O* obj_gc_safe = reinterpret_cast<core::ForwardReferencedClass_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Signature_ClassSlots);
    POINTER_FIX(obj_gc_safe->_creator);
    POINTER_FIX(obj_gc_safe->_MetaClassSlots._Vector._Contents);
    SMART_PTR_FIX(obj_gc_safe->_InstanceCoreClass);
    typedef core::ForwardReferencedClass_O type_KIND_LISPALLOC_core__ForwardReferencedClass_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__ForwardReferencedClass_O)) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__StdClass_O: {
    core::StdClass_O* obj_gc_safe = reinterpret_cast<core::StdClass_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Signature_ClassSlots);
    POINTER_FIX(obj_gc_safe->_creator);
    POINTER_FIX(obj_gc_safe->_MetaClassSlots._Vector._Contents);
    typedef core::StdClass_O type_KIND_BOOTSTRAP_core__StdClass_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__StdClass_O)) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__StandardClass_O: {
    core::StandardClass_O* obj_gc_safe = reinterpret_cast<core::StandardClass_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Signature_ClassSlots);
    POINTER_FIX(obj_gc_safe->_creator);
    POINTER_FIX(obj_gc_safe->_MetaClassSlots._Vector._Contents);
    SMART_PTR_FIX(obj_gc_safe->_InstanceCoreClass);
    typedef core::StandardClass_O type_KIND_BOOTSTRAP_core__StandardClass_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__StandardClass_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__FuncallableStandardClass_O: {
    core::FuncallableStandardClass_O* obj_gc_safe = reinterpret_cast<core::FuncallableStandardClass_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Signature_ClassSlots);
    POINTER_FIX(obj_gc_safe->_creator);
    POINTER_FIX(obj_gc_safe->_MetaClassSlots._Vector._Contents);
    SMART_PTR_FIX(obj_gc_safe->_InstanceCoreClass);
    typedef core::FuncallableStandardClass_O type_KIND_LISPALLOC_core__FuncallableStandardClass_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__FuncallableStandardClass_O)) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__BuiltInClass_O: {
    core::BuiltInClass_O* obj_gc_safe = reinterpret_cast<core::BuiltInClass_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Signature_ClassSlots);
    POINTER_FIX(obj_gc_safe->_creator);
    POINTER_FIX(obj_gc_safe->_MetaClassSlots._Vector._Contents);
    typedef core::BuiltInClass_O type_KIND_BOOTSTRAP_core__BuiltInClass_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__BuiltInClass_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_clbind__ClassRep_O: {
    clbind::ClassRep_O* obj_gc_safe = reinterpret_cast<clbind::ClassRep_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Signature_ClassSlots);
    POINTER_FIX(obj_gc_safe->_creator);
    POINTER_FIX(obj_gc_safe->_MetaClassSlots._Vector._Contents);
    POINTER_FIX(obj_gc_safe->m_bases._Vector._Contents);
    typedef clbind::ClassRep_O type_KIND_LISPALLOC_clbind__ClassRep_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_clbind__ClassRep_O)) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__StructureClass_O: {
    core::StructureClass_O* obj_gc_safe = reinterpret_cast<core::StructureClass_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Signature_ClassSlots);
    POINTER_FIX(obj_gc_safe->_creator);
    POINTER_FIX(obj_gc_safe->_MetaClassSlots._Vector._Contents);
    SMART_PTR_FIX(obj_gc_safe->_InstanceCoreClass);
    typedef core::StructureClass_O type_KIND_BOOTSTRAP_core__StructureClass_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__StructureClass_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_asttooling__AstVisitor_O: {
    asttooling::AstVisitor_O* obj_gc_safe = reinterpret_cast<asttooling::AstVisitor_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Target);
    typedef asttooling::AstVisitor_O type_KIND_LISPALLOC_asttooling__AstVisitor_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_asttooling__AstVisitor_O)) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__Symbol_O: {
    core::Symbol_O* obj_gc_safe = reinterpret_cast<core::Symbol_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Name);
    SMART_PTR_FIX(obj_gc_safe->_HomePackage);
    SMART_PTR_FIX(obj_gc_safe->_Value);
    SMART_PTR_FIX(obj_gc_safe->_Function);
    SMART_PTR_FIX(obj_gc_safe->_PropertyList);
    typedef core::Symbol_O type_KIND_BOOTSTRAP_core__Symbol_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__Symbol_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Null_O: {
    core::Null_O* obj_gc_safe = reinterpret_cast<core::Null_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Name);
    SMART_PTR_FIX(obj_gc_safe->_HomePackage);
    SMART_PTR_FIX(obj_gc_safe->_Value);
    SMART_PTR_FIX(obj_gc_safe->_Function);
    SMART_PTR_FIX(obj_gc_safe->_PropertyList);
    typedef core::Null_O type_KIND_LISPALLOC_core__Null_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Null_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__StringSet_O: {
    typedef core::StringSet_O type_KIND_LISPALLOC_core__StringSet_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__StringSet_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SymbolToEnumConverter_O: {
    core::SymbolToEnumConverter_O* obj_gc_safe = reinterpret_cast<core::SymbolToEnumConverter_O*>(client);
    POINTER_FIX(obj_gc_safe->_WhatTheEnumsRepresent._Contents);
    SMART_PTR_FIX(obj_gc_safe->_EnumToSymbol);
    SMART_PTR_FIX(obj_gc_safe->_ArchiveSymbolToEnum);
    SMART_PTR_FIX(obj_gc_safe->_EnumToArchiveSymbol);
    SMART_PTR_FIX(obj_gc_safe->_SymbolToEnum);
    typedef core::SymbolToEnumConverter_O type_KIND_LISPALLOC_core__SymbolToEnumConverter_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SymbolToEnumConverter_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__MultiStringBuffer_O: {
    typedef core::MultiStringBuffer_O type_KIND_LISPALLOC_core__MultiStringBuffer_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__MultiStringBuffer_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SymbolList_O: {
    core::SymbolList_O* obj_gc_safe = reinterpret_cast<core::SymbolList_O*>(client);
    POINTER_FIX(obj_gc_safe->_Contents._Vector._Contents);
    typedef core::SymbolList_O type_KIND_LISPALLOC_core__SymbolList_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SymbolList_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__WeakPointer_O: {
    core::WeakPointer_O* obj_gc_safe = reinterpret_cast<core::WeakPointer_O*>(client);
    POINTER_FIX(obj_gc_safe->_WeakObject.pointer);
    typedef core::WeakPointer_O type_KIND_LISPALLOC_core__WeakPointer_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__WeakPointer_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__HashTable_O: {
    core::HashTable_O* obj_gc_safe = reinterpret_cast<core::HashTable_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_RehashSize);
    SMART_PTR_FIX(obj_gc_safe->_HashTable);
    typedef core::HashTable_O type_KIND_LISPALLOC_core__HashTable_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__HashTable_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__HashTableEqual_O: {
    core::HashTableEqual_O* obj_gc_safe = reinterpret_cast<core::HashTableEqual_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_RehashSize);
    SMART_PTR_FIX(obj_gc_safe->_HashTable);
    typedef core::HashTableEqual_O type_KIND_LISPALLOC_core__HashTableEqual_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__HashTableEqual_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__HashTableEqualp_O: {
    core::HashTableEqualp_O* obj_gc_safe = reinterpret_cast<core::HashTableEqualp_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_RehashSize);
    SMART_PTR_FIX(obj_gc_safe->_HashTable);
    typedef core::HashTableEqualp_O type_KIND_LISPALLOC_core__HashTableEqualp_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__HashTableEqualp_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__HashTableEql_O: {
    core::HashTableEql_O* obj_gc_safe = reinterpret_cast<core::HashTableEql_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_RehashSize);
    SMART_PTR_FIX(obj_gc_safe->_HashTable);
    typedef core::HashTableEql_O type_KIND_LISPALLOC_core__HashTableEql_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__HashTableEql_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__HashTableEq_O: {
    core::HashTableEq_O* obj_gc_safe = reinterpret_cast<core::HashTableEq_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_RehashSize);
    SMART_PTR_FIX(obj_gc_safe->_HashTable);
    typedef core::HashTableEq_O type_KIND_LISPALLOC_core__HashTableEq_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__HashTableEq_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SymbolSet_O: {
    core::SymbolSet_O* obj_gc_safe = reinterpret_cast<core::SymbolSet_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Symbols);
    typedef core::SymbolSet_O type_KIND_LISPALLOC_core__SymbolSet_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SymbolSet_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Binder_O: {
    core::Binder_O* obj_gc_safe = reinterpret_cast<core::Binder_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Bindings);
    SMART_PTR_FIX(obj_gc_safe->_Values);
    typedef core::Binder_O type_KIND_LISPALLOC_core__Binder_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Binder_O)) + global_alignup_sizeof_header;
} break;
case KIND_CLASSALLOC_core__Cache: {
    core::Cache* obj_gc_safe = reinterpret_cast<core::Cache*>(client);
    POINTER_FIX(obj_gc_safe->_keys._Vector._Contents);
    POINTER_FIX(obj_gc_safe->_table._Vector._Contents);
    typedef core::Cache type_KIND_CLASSALLOC_core__Cache;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_core__Cache)) + global_alignup_sizeof_header;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__DynamicBinding_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::DynamicBinding>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::DynamicBinding>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::DynamicBinding" :#2# "DynamicBinding")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::DynamicBinding" :NAME "DynamicBinding")
    gctools::GCVector_moveable<core::DynamicBinding>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::DynamicBinding>*>(client);
    for (gctools::GCVector_moveable<core::DynamicBinding>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(CXXRECORD-CTYPE :KEY "core::DynamicBinding" :NAME "DynamicBinding")
    SMART_PTR_FIX(it->_Var);
    SMART_PTR_FIX(it->_Val);
    }
    typedef typename gctools::GCVector_moveable<core::DynamicBinding> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__DynamicBinding_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__DynamicBinding_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__SourceFileInfo_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::SourceFileInfo_O>" :SPECIALIZER "class core::SourceFileInfo_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::SourceFileInfo_O>" :SPECIALIZER "class core::SourceFileInfo_O")
    gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>*>(client);
    for (gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::SourceFileInfo_O>" :SPECIALIZER "class core::SourceFileInfo_O")
          SMART_PTR_FIX(*it);
    }
    typedef typename gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>> type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__SourceFileInfo_O__;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__SourceFileInfo_O__>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_LISPALLOC_asttooling__DerivableFrontendActionFactory: {
    asttooling::DerivableFrontendActionFactory* obj_gc_safe = reinterpret_cast<asttooling::DerivableFrontendActionFactory*>(client);
    POINTER_FIX(obj_gc_safe->closure);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    POINTER_FIX(obj_gc_safe->_Slots._Vector._Contents);
    SMART_PTR_FIX(obj_gc_safe->_Sig);
    typedef asttooling::DerivableFrontendActionFactory type_KIND_LISPALLOC_asttooling__DerivableFrontendActionFactory;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_asttooling__DerivableFrontendActionFactory)) + global_alignup_sizeof_header;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ContextFrame_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<asttooling::ContextFrame>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::ContextFrame>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "asttooling::ContextFrame" :#2# "ContextFrame")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "asttooling::ContextFrame" :NAME "ContextFrame")
    gctools::GCVector_moveable<asttooling::ContextFrame>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<asttooling::ContextFrame>*>(client);
    for (gctools::GCVector_moveable<asttooling::ContextFrame>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(CXXRECORD-CTYPE :KEY "asttooling::ContextFrame" :NAME "ContextFrame")
    SMART_PTR_FIX(it->Range);
    }
    typedef typename gctools::GCVector_moveable<asttooling::ContextFrame> type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ContextFrame_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ContextFrame_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__Message_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<asttooling::Message>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::Message>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "asttooling::Message" :#2# "Message")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "asttooling::Message" :NAME "Message")
    gctools::GCVector_moveable<asttooling::Message>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<asttooling::Message>*>(client);
    for (gctools::GCVector_moveable<asttooling::Message>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(CXXRECORD-CTYPE :KEY "asttooling::Message" :NAME "Message")
    SMART_PTR_FIX(it->Range);
    }
    typedef typename gctools::GCVector_moveable<asttooling::Message> type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__Message_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__Message_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCSTRING_gctools__GCString_moveable_char_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCString_moveable<char>" :#2=NAME "GCString_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcstring.h:40:5" :#3=CTYPE #S(GCSTRING-MOVEABLE-CTYPE :#1# "gctools::GCString_moveable<char>" :#2# "GCString_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(UNCLASSIFIED-CTYPE :#1# "char")))))
// parm0-ctype = #S(UNCLASSIFIED-CTYPE :KEY "char")
    gctools::GCString_moveable<char>* obj_gc_safe = reinterpret_cast<gctools::GCString_moveable<char>*>(client);
    typedef typename gctools::GCString_moveable<char> type_KIND_GCSTRING_gctools__GCString_moveable_char_;
    size_t header_and_gcstring_size = AlignUp(sizeof_container<type_KIND_GCSTRING_gctools__GCString_moveable_char_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + Align(header_and_gcstring_size);
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__T_O__gctools__smart_ptr_core__T_O___: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>" :#2# "GCVector_moveable" :#4=ARGUMENTS (#S(#5=GC-TEMPLATE-ARGUMENT :#6=INDEX 0 :#3# #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>" :#2# NIL :#4# (#S(#5# :#6# 0 :#3# #S(#7=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :#8=SPECIALIZER "class core::T_O")) #S(#5# :#6# 1 :#3# #S(#7# :#1# "gctools::smart_ptr<core::T_O>" :#8# "class core::T_O"))))))))
// parm0-ctype = #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1=KEY "std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>" :NAME NIL :ARGUMENTS (#S(#2=GC-TEMPLATE-ARGUMENT :#3=INDEX 0 :#4=CTYPE #S(#5=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :#6=SPECIALIZER "class core::T_O")) #S(#2# :#3# 1 :#4# #S(#5# :#1# "gctools::smart_ptr<core::T_O>" :#6# "class core::T_O"))))
    gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>*>(client);
    for (gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1=KEY "std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>" :NAME NIL :ARGUMENTS (#S(#2=GC-TEMPLATE-ARGUMENT :#3=INDEX 0 :#4=CTYPE #S(#5=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :#6=SPECIALIZER "class core::T_O")) #S(#2# :#3# 1 :#4# #S(#5# :#1# "gctools::smart_ptr<core::T_O>" :#6# "class core::T_O"))))
    SMART_PTR_FIX(it->first);
    SMART_PTR_FIX(it->second);
    }
    typedef typename gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>> type_KIND_GCVECTOR_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__T_O__gctools__smart_ptr_core__T_O___;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__T_O__gctools__smart_ptr_core__T_O___>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__internal__MatcherDescriptor_P_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<asttooling::internal::MatcherDescriptor *>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::internal::MatcherDescriptor *>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(POINTER-CTYPE :#1# NIL :POINTEE #S(CXXRECORD-CTYPE :#1# "asttooling::internal::MatcherDescriptor" :#2# "MatcherDescriptor"))))))
// parm0-ctype = #S(POINTER-CTYPE :#1=KEY NIL :POINTEE #S(CXXRECORD-CTYPE :#1# "asttooling::internal::MatcherDescriptor" :NAME "MatcherDescriptor"))
    gctools::GCVector_moveable<asttooling::internal::MatcherDescriptor *>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<asttooling::internal::MatcherDescriptor *>*>(client);
    for (gctools::GCVector_moveable<asttooling::internal::MatcherDescriptor *>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(POINTER-CTYPE :#1=KEY NIL :POINTEE #S(CXXRECORD-CTYPE :#1# "asttooling::internal::MatcherDescriptor" :NAME "MatcherDescriptor"))
          POINTER_FIX(*it);
    }
    typedef typename gctools::GCVector_moveable<asttooling::internal::MatcherDescriptor *> type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__internal__MatcherDescriptor_P_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__internal__MatcherDescriptor_P_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__ExceptionEntry_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::ExceptionEntry>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::ExceptionEntry>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::ExceptionEntry" :#2# "ExceptionEntry")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::ExceptionEntry" :NAME "ExceptionEntry")
    gctools::GCVector_moveable<core::ExceptionEntry>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::ExceptionEntry>*>(client);
    for (gctools::GCVector_moveable<core::ExceptionEntry>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(CXXRECORD-CTYPE :KEY "core::ExceptionEntry" :NAME "ExceptionEntry")
    SMART_PTR_FIX(it->_Key);
    }
    typedef typename gctools::GCVector_moveable<core::ExceptionEntry> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__ExceptionEntry_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__ExceptionEntry_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Package_O>" :SPECIALIZER "class core::Package_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :SPECIALIZER "class core::Package_O")
    gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>*>(client);
    for (gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :SPECIALIZER "class core::Package_O")
          SMART_PTR_FIX(*it);
    }
    typedef typename gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>> type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ErrorContent_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<asttooling::ErrorContent>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::ErrorContent>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "asttooling::ErrorContent" :#2# "ErrorContent")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "asttooling::ErrorContent" :NAME "ErrorContent")
    gctools::GCVector_moveable<asttooling::ErrorContent>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<asttooling::ErrorContent>*>(client);
    for (gctools::GCVector_moveable<asttooling::ErrorContent>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(CXXRECORD-CTYPE :KEY "asttooling::ErrorContent" :NAME "ErrorContent")
    POINTER_FIX(it->ContextStack._Vector._Contents);
    POINTER_FIX(it->Messages._Vector._Contents);
    }
    typedef typename gctools::GCVector_moveable<asttooling::ErrorContent> type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ErrorContent_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ErrorContent_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
    gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>*>(client);
    for (gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
          SMART_PTR_FIX(*it);
    }
    typedef typename gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>> type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_LISPALLOC_asttooling__DerivableSyntaxOnlyAction: {
    asttooling::DerivableSyntaxOnlyAction* obj_gc_safe = reinterpret_cast<asttooling::DerivableSyntaxOnlyAction*>(client);
    POINTER_FIX(obj_gc_safe->closure);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    POINTER_FIX(obj_gc_safe->_Slots._Vector._Contents);
    SMART_PTR_FIX(obj_gc_safe->_Sig);
    typedef asttooling::DerivableSyntaxOnlyAction type_KIND_LISPALLOC_asttooling__DerivableSyntaxOnlyAction;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_asttooling__DerivableSyntaxOnlyAction)) + global_alignup_sizeof_header;
} break;
case KIND_TEMPLATED_CLASSALLOC_core__BuiltinClosure: {
    core::BuiltinClosure* obj_gc_safe = reinterpret_cast<core::BuiltinClosure*>(client);
    SMART_PTR_FIX(obj_gc_safe->name);
    SMART_PTR_FIX(obj_gc_safe->closedEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_SourcePosInfo);
    SMART_PTR_FIX(obj_gc_safe->kind);
    SMART_PTR_FIX(obj_gc_safe->_lambdaListHandler);
    typedef core::BuiltinClosure type_KIND_TEMPLATED_CLASSALLOC_core__BuiltinClosure;
    client = (char*)client + AlignUp(obj_gc_safe->templatedSizeof()) + global_alignup_sizeof_header;
} break;
case KIND_CLASSALLOC_llvmo__CompiledClosure: {
    llvmo::CompiledClosure* obj_gc_safe = reinterpret_cast<llvmo::CompiledClosure*>(client);
    SMART_PTR_FIX(obj_gc_safe->name);
    SMART_PTR_FIX(obj_gc_safe->closedEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_SourcePosInfo);
    SMART_PTR_FIX(obj_gc_safe->kind);
    SMART_PTR_FIX(obj_gc_safe->llvmFunction);
    SMART_PTR_FIX(obj_gc_safe->associatedFunctions);
    typedef llvmo::CompiledClosure type_KIND_CLASSALLOC_llvmo__CompiledClosure;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_llvmo__CompiledClosure)) + global_alignup_sizeof_header;
} break;
case KIND_CLASSALLOC_core__InterpretedClosure: {
    core::InterpretedClosure* obj_gc_safe = reinterpret_cast<core::InterpretedClosure*>(client);
    SMART_PTR_FIX(obj_gc_safe->name);
    SMART_PTR_FIX(obj_gc_safe->closedEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_SourcePosInfo);
    SMART_PTR_FIX(obj_gc_safe->kind);
    SMART_PTR_FIX(obj_gc_safe->_lambdaListHandler);
    SMART_PTR_FIX(obj_gc_safe->declares);
    SMART_PTR_FIX(obj_gc_safe->docstring);
    SMART_PTR_FIX(obj_gc_safe->code);
    typedef core::InterpretedClosure type_KIND_CLASSALLOC_core__InterpretedClosure;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_core__InterpretedClosure)) + global_alignup_sizeof_header;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ParserValue_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<asttooling::ParserValue>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::ParserValue>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "asttooling::ParserValue" :#2# "ParserValue")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "asttooling::ParserValue" :NAME "ParserValue")
    gctools::GCVector_moveable<asttooling::ParserValue>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<asttooling::ParserValue>*>(client);
    for (gctools::GCVector_moveable<asttooling::ParserValue>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(CXXRECORD-CTYPE :KEY "asttooling::ParserValue" :NAME "ParserValue")
    SMART_PTR_FIX(it->Range);
    }
    typedef typename gctools::GCVector_moveable<asttooling::ParserValue> type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ParserValue_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ParserValue_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_CLASSALLOC_asttooling__internal__OverloadedMatcherDescriptor: {
    asttooling::internal::OverloadedMatcherDescriptor* obj_gc_safe = reinterpret_cast<asttooling::internal::OverloadedMatcherDescriptor*>(client);
    POINTER_FIX(obj_gc_safe->Overloads._Vector._Contents);
    typedef asttooling::internal::OverloadedMatcherDescriptor type_KIND_CLASSALLOC_asttooling__internal__OverloadedMatcherDescriptor;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_asttooling__internal__OverloadedMatcherDescriptor)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_asttooling__DerivableMatchCallback: {
    asttooling::DerivableMatchCallback* obj_gc_safe = reinterpret_cast<asttooling::DerivableMatchCallback*>(client);
    POINTER_FIX(obj_gc_safe->closure);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    POINTER_FIX(obj_gc_safe->_Slots._Vector._Contents);
    SMART_PTR_FIX(obj_gc_safe->_Sig);
    typedef asttooling::DerivableMatchCallback type_KIND_LISPALLOC_asttooling__DerivableMatchCallback;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_asttooling__DerivableMatchCallback)) + global_alignup_sizeof_header;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__SingleDispatchMethod_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::SingleDispatchMethod_O>" :SPECIALIZER "class core::SingleDispatchMethod_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::SingleDispatchMethod_O>" :SPECIALIZER "class core::SingleDispatchMethod_O")
    gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>*>(client);
    for (gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::SingleDispatchMethod_O>" :SPECIALIZER "class core::SingleDispatchMethod_O")
          SMART_PTR_FIX(*it);
    }
    typedef typename gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>> type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__SingleDispatchMethod_O__;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__SingleDispatchMethod_O__>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Cons_O>" :SPECIALIZER "class core::Cons_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Cons_O>" :SPECIALIZER "class core::Cons_O")
    gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>*>(client);
    for (gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Cons_O>" :SPECIALIZER "class core::Cons_O")
          SMART_PTR_FIX(*it);
    }
    typedef typename gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>> type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Character_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Character_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Character_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Character_O>" :SPECIALIZER "class core::Character_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Character_O>" :SPECIALIZER "class core::Character_O")
    gctools::GCVector_moveable<gctools::smart_ptr<core::Character_O>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<gctools::smart_ptr<core::Character_O>>*>(client);
    for (gctools::GCVector_moveable<gctools::smart_ptr<core::Character_O>>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Character_O>" :SPECIALIZER "class core::Character_O")
          SMART_PTR_FIX(*it);
    }
    typedef typename gctools::GCVector_moveable<gctools::smart_ptr<core::Character_O>> type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Character_O__;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Character_O__>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__SequenceStepper_P_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::SequenceStepper *>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::SequenceStepper *>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(POINTER-CTYPE :#1# NIL :POINTEE #S(CXXRECORD-CTYPE :#1# "core::SequenceStepper" :#2# "SequenceStepper"))))))
// parm0-ctype = #S(POINTER-CTYPE :#1=KEY NIL :POINTEE #S(CXXRECORD-CTYPE :#1# "core::SequenceStepper" :NAME "SequenceStepper"))
    gctools::GCVector_moveable<core::SequenceStepper *>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::SequenceStepper *>*>(client);
    for (gctools::GCVector_moveable<core::SequenceStepper *>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(POINTER-CTYPE :#1=KEY NIL :POINTEE #S(CXXRECORD-CTYPE :#1# "core::SequenceStepper" :NAME "SequenceStepper"))
          POINTER_FIX(*it);
    }
    typedef typename gctools::GCVector_moveable<core::SequenceStepper *> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__SequenceStepper_P_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__SequenceStepper_P_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_CLASSALLOC_core__CoreExposer: {
    core::CoreExposer* obj_gc_safe = reinterpret_cast<core::CoreExposer*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Package);
    typedef core::CoreExposer type_KIND_CLASSALLOC_core__CoreExposer;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_core__CoreExposer)) + global_alignup_sizeof_header;
} break;
case KIND_CLASSALLOC_core__SingleDispatchGenericFunctionClosure: {
    core::SingleDispatchGenericFunctionClosure* obj_gc_safe = reinterpret_cast<core::SingleDispatchGenericFunctionClosure*>(client);
    SMART_PTR_FIX(obj_gc_safe->name);
    SMART_PTR_FIX(obj_gc_safe->closedEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_SourcePosInfo);
    SMART_PTR_FIX(obj_gc_safe->kind);
    SMART_PTR_FIX(obj_gc_safe->_Methods);
    SMART_PTR_FIX(obj_gc_safe->_lambdaListHandler);
    typedef core::SingleDispatchGenericFunctionClosure type_KIND_CLASSALLOC_core__SingleDispatchGenericFunctionClosure;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_core__SingleDispatchGenericFunctionClosure)) + global_alignup_sizeof_header;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__SymbolStorage_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::SymbolStorage>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::SymbolStorage>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::SymbolStorage" :#2# "SymbolStorage")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::SymbolStorage" :NAME "SymbolStorage")
    gctools::GCVector_moveable<core::SymbolStorage>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::SymbolStorage>*>(client);
    for (gctools::GCVector_moveable<core::SymbolStorage>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(CXXRECORD-CTYPE :KEY "core::SymbolStorage" :NAME "SymbolStorage")
    SMART_PTR_FIX(it->_Symbol);
    }
    typedef typename gctools::GCVector_moveable<core::SymbolStorage> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__SymbolStorage_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__SymbolStorage_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__OptionalArgument_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::OptionalArgument>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::OptionalArgument>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::OptionalArgument" :#2# "OptionalArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::OptionalArgument" :NAME "OptionalArgument")
    gctools::GCVector_moveable<core::OptionalArgument>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::OptionalArgument>*>(client);
    for (gctools::GCVector_moveable<core::OptionalArgument>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(CXXRECORD-CTYPE :KEY "core::OptionalArgument" :NAME "OptionalArgument")
    SMART_PTR_FIX(it->_ArgTarget);
    SMART_PTR_FIX(it->_Default);
    SMART_PTR_FIX(it->_Sensor._ArgTarget);
    }
    typedef typename gctools::GCVector_moveable<core::OptionalArgument> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__OptionalArgument_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__OptionalArgument_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__0_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>" :#2=NAME "GCArray_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcarray.h:33:5" :#3=CTYPE #S(GCARRAY-MOVEABLE-CTYPE :#1# "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>" :#2# "GCArray_moveable" :ARGUMENTS (#S(#4=GC-TEMPLATE-ARGUMENT :#5=INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")) #S(#4# :#5# 1 :#3# NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
    gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>* obj_gc_safe = reinterpret_cast<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>*>(client);
    for (gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
          SMART_PTR_FIX(*it);
    }
    typedef typename gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0> type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__0_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__0_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_LISPALLOC_asttooling__DerivableArgumentsAdjuster: {
    asttooling::DerivableArgumentsAdjuster* obj_gc_safe = reinterpret_cast<asttooling::DerivableArgumentsAdjuster*>(client);
    POINTER_FIX(obj_gc_safe->closure);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    POINTER_FIX(obj_gc_safe->_Slots._Vector._Contents);
    SMART_PTR_FIX(obj_gc_safe->_Sig);
    typedef asttooling::DerivableArgumentsAdjuster type_KIND_LISPALLOC_asttooling__DerivableArgumentsAdjuster;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_asttooling__DerivableArgumentsAdjuster)) + global_alignup_sizeof_header;
} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__3_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>" :#2=NAME "GCArray_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcarray.h:33:5" :#3=CTYPE #S(GCARRAY-MOVEABLE-CTYPE :#1# "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>" :#2# "GCArray_moveable" :ARGUMENTS (#S(#4=GC-TEMPLATE-ARGUMENT :#5=INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")) #S(#4# :#5# 1 :#3# NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
    gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>* obj_gc_safe = reinterpret_cast<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>*>(client);
    for (gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
          SMART_PTR_FIX(*it);
    }
    typedef typename gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3> type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__3_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__3_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_CLASSALLOC_core__MacroClosure: {
    core::MacroClosure* obj_gc_safe = reinterpret_cast<core::MacroClosure*>(client);
    SMART_PTR_FIX(obj_gc_safe->name);
    SMART_PTR_FIX(obj_gc_safe->closedEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_SourcePosInfo);
    SMART_PTR_FIX(obj_gc_safe->kind);
    SMART_PTR_FIX(obj_gc_safe->_lambdaListHandler);
    typedef core::MacroClosure type_KIND_CLASSALLOC_core__MacroClosure;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_core__MacroClosure)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_asttooling__DerivableASTFrontendAction: {
    asttooling::DerivableASTFrontendAction* obj_gc_safe = reinterpret_cast<asttooling::DerivableASTFrontendAction*>(client);
    POINTER_FIX(obj_gc_safe->closure);
    SMART_PTR_FIX(obj_gc_safe->_Class);
    POINTER_FIX(obj_gc_safe->_Slots._Vector._Contents);
    SMART_PTR_FIX(obj_gc_safe->_Sig);
    typedef asttooling::DerivableASTFrontendAction type_KIND_LISPALLOC_asttooling__DerivableASTFrontendAction;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_asttooling__DerivableASTFrontendAction)) + global_alignup_sizeof_header;
} break;
case KIND_CLASSALLOC_asttooling__internal__FixedArgCountMatcherDescriptor: {
    asttooling::internal::FixedArgCountMatcherDescriptor* obj_gc_safe = reinterpret_cast<asttooling::internal::FixedArgCountMatcherDescriptor*>(client);
    SMART_PTR_FIX(obj_gc_safe->MatcherName);
    typedef asttooling::internal::FixedArgCountMatcherDescriptor type_KIND_CLASSALLOC_asttooling__internal__FixedArgCountMatcherDescriptor;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_asttooling__internal__FixedArgCountMatcherDescriptor)) + global_alignup_sizeof_header;
} break;
case KIND_CLASSALLOC_asttooling__internal__FreeFuncMatcherDescriptor: {
    asttooling::internal::FreeFuncMatcherDescriptor* obj_gc_safe = reinterpret_cast<asttooling::internal::FreeFuncMatcherDescriptor*>(client);
    SMART_PTR_FIX(obj_gc_safe->MatcherName);
    typedef asttooling::internal::FreeFuncMatcherDescriptor type_KIND_CLASSALLOC_asttooling__internal__FreeFuncMatcherDescriptor;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_asttooling__internal__FreeFuncMatcherDescriptor)) + global_alignup_sizeof_header;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__AuxArgument_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::AuxArgument>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::AuxArgument>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::AuxArgument" :#2# "AuxArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::AuxArgument" :NAME "AuxArgument")
    gctools::GCVector_moveable<core::AuxArgument>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::AuxArgument>*>(client);
    for (gctools::GCVector_moveable<core::AuxArgument>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(CXXRECORD-CTYPE :KEY "core::AuxArgument" :NAME "AuxArgument")
    SMART_PTR_FIX(it->_ArgTarget);
    SMART_PTR_FIX(it->_Expression);
    }
    typedef typename gctools::GCVector_moveable<core::AuxArgument> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__AuxArgument_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__AuxArgument_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__SymbolClassPair_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::SymbolClassPair>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::SymbolClassPair>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::SymbolClassPair" :#2# "SymbolClassPair")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::SymbolClassPair" :NAME "SymbolClassPair")
    gctools::GCVector_moveable<core::SymbolClassPair>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::SymbolClassPair>*>(client);
    for (gctools::GCVector_moveable<core::SymbolClassPair>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(CXXRECORD-CTYPE :KEY "core::SymbolClassPair" :NAME "SymbolClassPair")
    SMART_PTR_FIX(it->symbol);
    SMART_PTR_FIX(it->theClass);
    }
    typedef typename gctools::GCVector_moveable<core::SymbolClassPair> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__SymbolClassPair_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__SymbolClassPair_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__KeywordArgument_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::KeywordArgument>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::KeywordArgument>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::KeywordArgument" :#2# "KeywordArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::KeywordArgument" :NAME "KeywordArgument")
    gctools::GCVector_moveable<core::KeywordArgument>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::KeywordArgument>*>(client);
    for (gctools::GCVector_moveable<core::KeywordArgument>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(CXXRECORD-CTYPE :KEY "core::KeywordArgument" :NAME "KeywordArgument")
    SMART_PTR_FIX(it->_ArgTarget);
    SMART_PTR_FIX(it->_Default);
    SMART_PTR_FIX(it->_Keyword);
    SMART_PTR_FIX(it->_Sensor._ArgTarget);
    }
    typedef typename gctools::GCVector_moveable<core::KeywordArgument> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__KeywordArgument_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__KeywordArgument_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__CacheRecord_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::CacheRecord>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::CacheRecord>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::CacheRecord" :#2# "CacheRecord")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::CacheRecord" :NAME "CacheRecord")
    gctools::GCVector_moveable<core::CacheRecord>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::CacheRecord>*>(client);
    for (gctools::GCVector_moveable<core::CacheRecord>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(CXXRECORD-CTYPE :KEY "core::CacheRecord" :NAME "CacheRecord")
    SMART_PTR_FIX(it->_key);
    SMART_PTR_FIX(it->_value);
    }
    typedef typename gctools::GCVector_moveable<core::CacheRecord> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__CacheRecord_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__CacheRecord_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_CLASSALLOC_core__InstanceClosure: {
    core::InstanceClosure* obj_gc_safe = reinterpret_cast<core::InstanceClosure*>(client);
    SMART_PTR_FIX(obj_gc_safe->name);
    SMART_PTR_FIX(obj_gc_safe->closedEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_SourcePosInfo);
    SMART_PTR_FIX(obj_gc_safe->kind);
    SMART_PTR_FIX(obj_gc_safe->instance);
    typedef core::InstanceClosure type_KIND_CLASSALLOC_core__InstanceClosure;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_core__InstanceClosure)) + global_alignup_sizeof_header;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__RequiredArgument_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::RequiredArgument>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::RequiredArgument>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::RequiredArgument" :#2# "RequiredArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::RequiredArgument" :NAME "RequiredArgument")
    gctools::GCVector_moveable<core::RequiredArgument>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::RequiredArgument>*>(client);
    for (gctools::GCVector_moveable<core::RequiredArgument>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(CXXRECORD-CTYPE :KEY "core::RequiredArgument" :NAME "RequiredArgument")
    SMART_PTR_FIX(it->_ArgTarget);
    }
    typedef typename gctools::GCVector_moveable<core::RequiredArgument> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__RequiredArgument_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__RequiredArgument_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Symbol_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O")
    gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>*>(client);
    for (gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O")
          SMART_PTR_FIX(*it);
    }
    typedef typename gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>> type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Symbol_O__;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Symbol_O__>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_CLASSALLOC_asttooling__internal__VariadicOperatorMatcherDescriptor: {
    asttooling::internal::VariadicOperatorMatcherDescriptor* obj_gc_safe = reinterpret_cast<asttooling::internal::VariadicOperatorMatcherDescriptor*>(client);
    SMART_PTR_FIX(obj_gc_safe->MatcherName);
    typedef asttooling::internal::VariadicOperatorMatcherDescriptor type_KIND_CLASSALLOC_asttooling__internal__VariadicOperatorMatcherDescriptor;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_asttooling__internal__VariadicOperatorMatcherDescriptor)) + global_alignup_sizeof_header;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_clbind__ClassRep_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<clbind::ClassRep_O>" :SPECIALIZER "class clbind::ClassRep_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<clbind::ClassRep_O>" :SPECIALIZER "class clbind::ClassRep_O")
    gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>*>(client);
    for (gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<clbind::ClassRep_O>" :SPECIALIZER "class clbind::ClassRep_O")
          SMART_PTR_FIX(*it);
    }
    typedef typename gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>> type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_clbind__ClassRep_O__;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_clbind__ClassRep_O__>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__RegMap__SymbolMatcherDescriptorPair_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<asttooling::RegMap::SymbolMatcherDescriptorPair>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::RegMap::SymbolMatcherDescriptorPair>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "asttooling::RegMap::SymbolMatcherDescriptorPair" :#2# "SymbolMatcherDescriptorPair")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "asttooling::RegMap::SymbolMatcherDescriptorPair" :NAME "SymbolMatcherDescriptorPair")
    gctools::GCVector_moveable<asttooling::RegMap::SymbolMatcherDescriptorPair>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<asttooling::RegMap::SymbolMatcherDescriptorPair>*>(client);
    for (gctools::GCVector_moveable<asttooling::RegMap::SymbolMatcherDescriptorPair>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(CXXRECORD-CTYPE :KEY "asttooling::RegMap::SymbolMatcherDescriptorPair" :NAME "SymbolMatcherDescriptorPair")
    SMART_PTR_FIX(it->Name);
    POINTER_FIX(it->matcher);
    }
    typedef typename gctools::GCVector_moveable<asttooling::RegMap::SymbolMatcherDescriptorPair> type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__RegMap__SymbolMatcherDescriptorPair_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__RegMap__SymbolMatcherDescriptorPair_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Str_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Str_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Str_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Str_O>" :SPECIALIZER "class core::Str_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Str_O>" :SPECIALIZER "class core::Str_O")
    gctools::GCVector_moveable<gctools::smart_ptr<core::Str_O>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<gctools::smart_ptr<core::Str_O>>*>(client);
    for (gctools::GCVector_moveable<gctools::smart_ptr<core::Str_O>>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Str_O>" :SPECIALIZER "class core::Str_O")
          SMART_PTR_FIX(*it);
    }
    typedef typename gctools::GCVector_moveable<gctools::smart_ptr<core::Str_O>> type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Str_O__;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Str_O__>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
#endif // defined(GC_OBJ_SCAN)
#if defined(GC_OBJ_SKIP)
case KIND_ROOTCLASSALLOC_core__Lisp_O: {
    typedef core::Lisp_O type_KIND_ROOTCLASSALLOC_core__Lisp_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_ROOTCLASSALLOC_core__Lisp_O)) + global_alignup_sizeof_header;
} break;
case KIND_ROOTCLASSALLOC_asttooling__RegMap__RegistryMaps: {
    typedef asttooling::RegMap::RegistryMaps type_KIND_ROOTCLASSALLOC_asttooling__RegMap__RegistryMaps;
    client = (char*)client + AlignUp(sizeof(type_KIND_ROOTCLASSALLOC_asttooling__RegMap__RegistryMaps)) + global_alignup_sizeof_header;
} break;
case KIND_TEMPLATED_CLASSALLOC_core__Creator: {
    core::Creator* obj_gc_safe = reinterpret_cast<core::Creator*>(client);
    typedef core::Creator type_KIND_TEMPLATED_CLASSALLOC_core__Creator;
    client = (char*)client + AlignUp(obj_gc_safe->templatedSizeof()) + global_alignup_sizeof_header;
} break;
case KIND_TEMPLATED_CLASSALLOC_clbind__ConstructorCreator: {
    clbind::ConstructorCreator* obj_gc_safe = reinterpret_cast<clbind::ConstructorCreator*>(client);
    typedef clbind::ConstructorCreator type_KIND_TEMPLATED_CLASSALLOC_clbind__ConstructorCreator;
    client = (char*)client + AlignUp(obj_gc_safe->templatedSizeof()) + global_alignup_sizeof_header;
} break;
case KIND_CLASSALLOC_core__InstanceCreator: {
    typedef core::InstanceCreator type_KIND_CLASSALLOC_core__InstanceCreator;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_core__InstanceCreator)) + global_alignup_sizeof_header;
} break;
case KIND_CLASSALLOC_clbind__DummyCreator: {
    typedef clbind::DummyCreator type_KIND_CLASSALLOC_clbind__DummyCreator;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_clbind__DummyCreator)) + global_alignup_sizeof_header;
} break;
case KIND_CLASSALLOC_core__SequenceStepper: {
    typedef core::SequenceStepper type_KIND_CLASSALLOC_core__SequenceStepper;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_core__SequenceStepper)) + global_alignup_sizeof_header;
} break;
case KIND_CLASSALLOC_core__ConsStepper: {
    typedef core::ConsStepper type_KIND_CLASSALLOC_core__ConsStepper;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_core__ConsStepper)) + global_alignup_sizeof_header;
} break;
case KIND_CLASSALLOC_core__VectorStepper: {
    typedef core::VectorStepper type_KIND_CLASSALLOC_core__VectorStepper;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_core__VectorStepper)) + global_alignup_sizeof_header;
} break;
case KIND_ROOTCLASSALLOC_clbind__detail__class_map: {
    typedef clbind::detail::class_map type_KIND_ROOTCLASSALLOC_clbind__detail__class_map;
    client = (char*)client + AlignUp(sizeof(type_KIND_ROOTCLASSALLOC_clbind__detail__class_map)) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__T_O: {
    typedef core::T_O type_KIND_BOOTSTRAP_core__T_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__T_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Cons_O: {
    typedef core::Cons_O type_KIND_LISPALLOC_core__Cons_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Cons_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_cffi__Pointer_O: {
    typedef cffi::Pointer_O type_KIND_LISPALLOC_cffi__Pointer_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_cffi__Pointer_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Stream_O: {
    typedef core::Stream_O type_KIND_LISPALLOC_core__Stream_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Stream_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__AnsiStream_O: {
    typedef core::AnsiStream_O type_KIND_LISPALLOC_core__AnsiStream_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__AnsiStream_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__TwoWayStream_O: {
    typedef core::TwoWayStream_O type_KIND_LISPALLOC_core__TwoWayStream_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__TwoWayStream_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__FileStream_O: {
    typedef core::FileStream_O type_KIND_LISPALLOC_core__FileStream_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__FileStream_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__IOFileStream_O: {
    typedef core::IOFileStream_O type_KIND_LISPALLOC_core__IOFileStream_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__IOFileStream_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__IOStreamStream_O: {
    typedef core::IOStreamStream_O type_KIND_LISPALLOC_core__IOStreamStream_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__IOStreamStream_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__BroadcastStream_O: {
    typedef core::BroadcastStream_O type_KIND_LISPALLOC_core__BroadcastStream_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__BroadcastStream_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__StringStream_O: {
    typedef core::StringStream_O type_KIND_LISPALLOC_core__StringStream_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__StringStream_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__StringOutputStream_O: {
    typedef core::StringOutputStream_O type_KIND_LISPALLOC_core__StringOutputStream_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__StringOutputStream_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__StringInputStream_O: {
    typedef core::StringInputStream_O type_KIND_LISPALLOC_core__StringInputStream_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__StringInputStream_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SynonymStream_O: {
    typedef core::SynonymStream_O type_KIND_LISPALLOC_core__SynonymStream_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SynonymStream_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__EchoStream_O: {
    typedef core::EchoStream_O type_KIND_LISPALLOC_core__EchoStream_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__EchoStream_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__ConcatenatedStream_O: {
    typedef core::ConcatenatedStream_O type_KIND_LISPALLOC_core__ConcatenatedStream_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__ConcatenatedStream_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Pathname_O: {
    typedef core::Pathname_O type_KIND_LISPALLOC_core__Pathname_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Pathname_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__LogicalPathname_O: {
    typedef core::LogicalPathname_O type_KIND_LISPALLOC_core__LogicalPathname_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__LogicalPathname_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Environment_O: {
    typedef core::Environment_O type_KIND_LISPALLOC_core__Environment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Environment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__GlueEnvironment_O: {
    typedef core::GlueEnvironment_O type_KIND_LISPALLOC_core__GlueEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__GlueEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__LexicalEnvironment_O: {
    typedef core::LexicalEnvironment_O type_KIND_LISPALLOC_core__LexicalEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__LexicalEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__CompileTimeEnvironment_O: {
    typedef core::CompileTimeEnvironment_O type_KIND_LISPALLOC_core__CompileTimeEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__CompileTimeEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__CatchEnvironment_O: {
    typedef core::CatchEnvironment_O type_KIND_LISPALLOC_core__CatchEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__CatchEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__BlockEnvironment_O: {
    typedef core::BlockEnvironment_O type_KIND_LISPALLOC_core__BlockEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__BlockEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__UnwindProtectEnvironment_O: {
    typedef core::UnwindProtectEnvironment_O type_KIND_LISPALLOC_core__UnwindProtectEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__UnwindProtectEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__FunctionContainerEnvironment_O: {
    typedef core::FunctionContainerEnvironment_O type_KIND_LISPALLOC_core__FunctionContainerEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__FunctionContainerEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SymbolMacroletEnvironment_O: {
    typedef core::SymbolMacroletEnvironment_O type_KIND_LISPALLOC_core__SymbolMacroletEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SymbolMacroletEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__MacroletEnvironment_O: {
    typedef core::MacroletEnvironment_O type_KIND_LISPALLOC_core__MacroletEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__MacroletEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__RuntimeVisibleEnvironment_O: {
    typedef core::RuntimeVisibleEnvironment_O type_KIND_LISPALLOC_core__RuntimeVisibleEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__RuntimeVisibleEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__ValueEnvironment_O: {
    typedef core::ValueEnvironment_O type_KIND_LISPALLOC_core__ValueEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__ValueEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__FunctionValueEnvironment_O: {
    typedef core::FunctionValueEnvironment_O type_KIND_LISPALLOC_core__FunctionValueEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__FunctionValueEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__TagbodyEnvironment_O: {
    typedef core::TagbodyEnvironment_O type_KIND_LISPALLOC_core__TagbodyEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__TagbodyEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__ActivationFrame_O: {
    typedef core::ActivationFrame_O type_KIND_LISPALLOC_core__ActivationFrame_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__ActivationFrame_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__TagbodyFrame_O: {
    typedef core::TagbodyFrame_O type_KIND_LISPALLOC_core__TagbodyFrame_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__TagbodyFrame_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__FunctionFrame_O: {
    typedef core::FunctionFrame_O type_KIND_LISPALLOC_core__FunctionFrame_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__FunctionFrame_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__ValueFrame_O: {
    typedef core::ValueFrame_O type_KIND_LISPALLOC_core__ValueFrame_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__ValueFrame_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SingleDispatchMethod_O: {
    typedef core::SingleDispatchMethod_O type_KIND_LISPALLOC_core__SingleDispatchMethod_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SingleDispatchMethod_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SourceFileInfo_O: {
    typedef core::SourceFileInfo_O type_KIND_LISPALLOC_core__SourceFileInfo_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SourceFileInfo_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__ObjectSet_O: {
    typedef core::ObjectSet_O type_KIND_LISPALLOC_core__ObjectSet_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__ObjectSet_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__DirectoryEntry_O: {
    typedef core::DirectoryEntry_O type_KIND_LISPALLOC_core__DirectoryEntry_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__DirectoryEntry_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Pointer_O: {
    typedef core::Pointer_O type_KIND_LISPALLOC_core__Pointer_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Pointer_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Path_O: {
    typedef core::Path_O type_KIND_LISPALLOC_core__Path_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Path_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DebugInfo_O: {
    typedef llvmo::DebugInfo_O type_KIND_LISPALLOC_llvmo__DebugInfo_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DebugInfo_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DICompositeType_O: {
    typedef llvmo::DICompositeType_O type_KIND_LISPALLOC_llvmo__DICompositeType_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DICompositeType_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DIBasicType_O: {
    typedef llvmo::DIBasicType_O type_KIND_LISPALLOC_llvmo__DIBasicType_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DIBasicType_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DIType_O: {
    typedef llvmo::DIType_O type_KIND_LISPALLOC_llvmo__DIType_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DIType_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DISubprogram_O: {
    typedef llvmo::DISubprogram_O type_KIND_LISPALLOC_llvmo__DISubprogram_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DISubprogram_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DIArray_O: {
    typedef llvmo::DIArray_O type_KIND_LISPALLOC_llvmo__DIArray_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DIArray_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DITypeArray_O: {
    typedef llvmo::DITypeArray_O type_KIND_LISPALLOC_llvmo__DITypeArray_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DITypeArray_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DISubroutineType_O: {
    typedef llvmo::DISubroutineType_O type_KIND_LISPALLOC_llvmo__DISubroutineType_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DISubroutineType_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DIScope_O: {
    typedef llvmo::DIScope_O type_KIND_LISPALLOC_llvmo__DIScope_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DIScope_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DIFile_O: {
    typedef llvmo::DIFile_O type_KIND_LISPALLOC_llvmo__DIFile_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DIFile_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DIDescriptor_O: {
    typedef llvmo::DIDescriptor_O type_KIND_LISPALLOC_llvmo__DIDescriptor_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DIDescriptor_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DICompileUnit_O: {
    typedef llvmo::DICompileUnit_O type_KIND_LISPALLOC_llvmo__DICompileUnit_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DICompileUnit_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DIDerivedType_O: {
    typedef llvmo::DIDerivedType_O type_KIND_LISPALLOC_llvmo__DIDerivedType_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DIDerivedType_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DILexicalBlock_O: {
    typedef llvmo::DILexicalBlock_O type_KIND_LISPALLOC_llvmo__DILexicalBlock_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DILexicalBlock_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__StructureObject_O: {
    typedef core::StructureObject_O type_KIND_LISPALLOC_core__StructureObject_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__StructureObject_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__LambdaListHandler_O: {
    typedef core::LambdaListHandler_O type_KIND_LISPALLOC_core__LambdaListHandler_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__LambdaListHandler_O)) + global_alignup_sizeof_header;
} break;
case KIND_TEMPLATED_LISPALLOC_core__Iterator_O: {
    core::Iterator_O* obj_gc_safe = reinterpret_cast<core::Iterator_O*>(client);
    typedef core::Iterator_O type_KIND_TEMPLATED_LISPALLOC_core__Iterator_O;
    client = (char*)client + AlignUp(obj_gc_safe->templatedSizeof()) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__DirectoryIterator_O: {
    typedef core::DirectoryIterator_O type_KIND_LISPALLOC_core__DirectoryIterator_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__DirectoryIterator_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__RecursiveDirectoryIterator_O: {
    typedef core::RecursiveDirectoryIterator_O type_KIND_LISPALLOC_core__RecursiveDirectoryIterator_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__RecursiveDirectoryIterator_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__PosixTimeDuration_O: {
    typedef core::PosixTimeDuration_O type_KIND_LISPALLOC_core__PosixTimeDuration_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__PosixTimeDuration_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__FileStatus_O: {
    typedef core::FileStatus_O type_KIND_LISPALLOC_core__FileStatus_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__FileStatus_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_clbind__ClassRegistry_O: {
    typedef clbind::ClassRegistry_O type_KIND_LISPALLOC_clbind__ClassRegistry_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_clbind__ClassRegistry_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Archive_O: {
    typedef core::Archive_O type_KIND_LISPALLOC_core__Archive_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Archive_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SaveArchive_O: {
    typedef core::SaveArchive_O type_KIND_LISPALLOC_core__SaveArchive_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SaveArchive_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SexpSaveArchive_O: {
    typedef core::SexpSaveArchive_O type_KIND_LISPALLOC_core__SexpSaveArchive_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SexpSaveArchive_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__LoadArchive_O: {
    typedef core::LoadArchive_O type_KIND_LISPALLOC_core__LoadArchive_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__LoadArchive_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SexpLoadArchive_O: {
    typedef core::SexpLoadArchive_O type_KIND_LISPALLOC_core__SexpLoadArchive_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SexpLoadArchive_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__RegexMatch_O: {
    typedef core::RegexMatch_O type_KIND_LISPALLOC_core__RegexMatch_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__RegexMatch_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SourcePosInfo_O: {
    typedef core::SourcePosInfo_O type_KIND_LISPALLOC_core__SourcePosInfo_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SourcePosInfo_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Character_O: {
    typedef core::Character_O type_KIND_LISPALLOC_core__Character_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Character_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__ExtendedChar_O: {
    typedef core::ExtendedChar_O type_KIND_LISPALLOC_core__ExtendedChar_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__ExtendedChar_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__BaseChar_O: {
    typedef core::BaseChar_O type_KIND_LISPALLOC_core__BaseChar_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__BaseChar_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__StandardChar_O: {
    typedef core::StandardChar_O type_KIND_LISPALLOC_core__StandardChar_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__StandardChar_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__MicroHeap_O: {
    typedef core::MicroHeap_O type_KIND_LISPALLOC_core__MicroHeap_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__MicroHeap_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Function_O: {
    typedef core::Function_O type_KIND_LISPALLOC_core__Function_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Function_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SingleDispatchEffectiveMethodFunction_O: {
    typedef core::SingleDispatchEffectiveMethodFunction_O type_KIND_LISPALLOC_core__SingleDispatchEffectiveMethodFunction_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SingleDispatchEffectiveMethodFunction_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SingleDispatchGenericFunction_O: {
    typedef core::SingleDispatchGenericFunction_O type_KIND_LISPALLOC_core__SingleDispatchGenericFunction_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SingleDispatchGenericFunction_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__CompiledFunction_O: {
    typedef core::CompiledFunction_O type_KIND_LISPALLOC_core__CompiledFunction_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__CompiledFunction_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Instance_O: {
    typedef core::Instance_O type_KIND_LISPALLOC_core__Instance_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Instance_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SpecialForm_O: {
    typedef core::SpecialForm_O type_KIND_LISPALLOC_core__SpecialForm_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SpecialForm_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__WeakKeyMapping_O: {
    typedef core::WeakKeyMapping_O type_KIND_LISPALLOC_core__WeakKeyMapping_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__WeakKeyMapping_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DebugLoc_O: {
    typedef llvmo::DebugLoc_O type_KIND_LISPALLOC_llvmo__DebugLoc_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DebugLoc_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Regex_O: {
    typedef core::Regex_O type_KIND_LISPALLOC_core__Regex_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Regex_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Package_O: {
    typedef core::Package_O type_KIND_LISPALLOC_core__Package_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Package_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__CandoException_O: {
    typedef core::CandoException_O type_KIND_LISPALLOC_core__CandoException_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__CandoException_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__StringList_O: {
    typedef core::StringList_O type_KIND_LISPALLOC_core__StringList_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__StringList_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__IntArray_O: {
    typedef core::IntArray_O type_KIND_LISPALLOC_core__IntArray_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__IntArray_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Number_O: {
    typedef core::Number_O type_KIND_LISPALLOC_core__Number_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Number_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Real_O: {
    typedef core::Real_O type_KIND_LISPALLOC_core__Real_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Real_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Float_O: {
    typedef core::Float_O type_KIND_LISPALLOC_core__Float_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Float_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__ShortFloat_O: {
    typedef core::ShortFloat_O type_KIND_LISPALLOC_core__ShortFloat_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__ShortFloat_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__DoubleFloat_O: {
    typedef core::DoubleFloat_O type_KIND_LISPALLOC_core__DoubleFloat_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__DoubleFloat_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SingleFloat_O: {
    typedef core::SingleFloat_O type_KIND_LISPALLOC_core__SingleFloat_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SingleFloat_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Rational_O: {
    typedef core::Rational_O type_KIND_LISPALLOC_core__Rational_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Rational_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Ratio_O: {
    typedef core::Ratio_O type_KIND_LISPALLOC_core__Ratio_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Ratio_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Integer_O: {
    typedef core::Integer_O type_KIND_LISPALLOC_core__Integer_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Integer_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Bignum_O: {
    typedef core::Bignum_O type_KIND_LISPALLOC_core__Bignum_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Bignum_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Fixnum_O: {
    typedef core::Fixnum_O type_KIND_LISPALLOC_core__Fixnum_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Fixnum_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Complex_O: {
    typedef core::Complex_O type_KIND_LISPALLOC_core__Complex_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Complex_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__PosixTime_O: {
    typedef core::PosixTime_O type_KIND_LISPALLOC_core__PosixTime_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__PosixTime_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__ReadTable_O: {
    typedef core::ReadTable_O type_KIND_LISPALLOC_core__ReadTable_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__ReadTable_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__Attribute_O: {
    typedef llvmo::Attribute_O type_KIND_LISPALLOC_llvmo__Attribute_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__Attribute_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Array_O: {
    typedef core::Array_O type_KIND_LISPALLOC_core__Array_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Array_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__ArrayObjects_O: {
    typedef core::ArrayObjects_O type_KIND_LISPALLOC_core__ArrayObjects_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__ArrayObjects_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Vector_O: {
    typedef core::Vector_O type_KIND_LISPALLOC_core__Vector_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Vector_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__String_O: {
    typedef core::String_O type_KIND_LISPALLOC_core__String_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__String_O)) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__Str_O: {
    typedef core::Str_O type_KIND_BOOTSTRAP_core__Str_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__Str_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__StrWithFillPtr_O: {
    typedef core::StrWithFillPtr_O type_KIND_LISPALLOC_core__StrWithFillPtr_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__StrWithFillPtr_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__VectorObjects_O: {
    typedef core::VectorObjects_O type_KIND_LISPALLOC_core__VectorObjects_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__VectorObjects_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__VectorObjectsWithFillPtr_O: {
    typedef core::VectorObjectsWithFillPtr_O type_KIND_LISPALLOC_core__VectorObjectsWithFillPtr_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__VectorObjectsWithFillPtr_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__BitVector_O: {
    typedef core::BitVector_O type_KIND_LISPALLOC_core__BitVector_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__BitVector_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SimpleBitVector_O: {
    typedef core::SimpleBitVector_O type_KIND_LISPALLOC_core__SimpleBitVector_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SimpleBitVector_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SmallMap_O: {
    typedef core::SmallMap_O type_KIND_LISPALLOC_core__SmallMap_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SmallMap_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Reader_O: {
    typedef core::Reader_O type_KIND_LISPALLOC_core__Reader_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Reader_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__ObjRef_O: {
    typedef core::ObjRef_O type_KIND_LISPALLOC_core__ObjRef_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__ObjRef_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__InsertPoint_O: {
    typedef llvmo::InsertPoint_O type_KIND_LISPALLOC_llvmo__InsertPoint_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__InsertPoint_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SourceManager_O: {
    typedef core::SourceManager_O type_KIND_LISPALLOC_core__SourceManager_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SourceManager_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__ExternalObject_O: {
    typedef core::ExternalObject_O type_KIND_LISPALLOC_core__ExternalObject_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__ExternalObject_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__Pass_O: {
    typedef llvmo::Pass_O type_KIND_LISPALLOC_llvmo__Pass_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__Pass_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__FunctionPass_O: {
    typedef llvmo::FunctionPass_O type_KIND_LISPALLOC_llvmo__FunctionPass_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__FunctionPass_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__ModulePass_O: {
    typedef llvmo::ModulePass_O type_KIND_LISPALLOC_llvmo__ModulePass_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ModulePass_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__ImmutablePass_O: {
    typedef llvmo::ImmutablePass_O type_KIND_LISPALLOC_llvmo__ImmutablePass_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ImmutablePass_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DataLayoutPass_O: {
    typedef llvmo::DataLayoutPass_O type_KIND_LISPALLOC_llvmo__DataLayoutPass_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DataLayoutPass_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__IRBuilderBase_O: {
    typedef llvmo::IRBuilderBase_O type_KIND_LISPALLOC_llvmo__IRBuilderBase_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__IRBuilderBase_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__IRBuilder_O: {
    typedef llvmo::IRBuilder_O type_KIND_LISPALLOC_llvmo__IRBuilder_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__IRBuilder_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DIBuilder_O: {
    typedef llvmo::DIBuilder_O type_KIND_LISPALLOC_llvmo__DIBuilder_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DIBuilder_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__ExecutionEngine_O: {
    typedef llvmo::ExecutionEngine_O type_KIND_LISPALLOC_llvmo__ExecutionEngine_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ExecutionEngine_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__EngineBuilder_O: {
    typedef llvmo::EngineBuilder_O type_KIND_LISPALLOC_llvmo__EngineBuilder_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__EngineBuilder_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__APInt_O: {
    typedef llvmo::APInt_O type_KIND_LISPALLOC_llvmo__APInt_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__APInt_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__APFloat_O: {
    typedef llvmo::APFloat_O type_KIND_LISPALLOC_llvmo__APFloat_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__APFloat_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__ForeignData_O: {
    typedef core::ForeignData_O type_KIND_LISPALLOC_core__ForeignData_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__ForeignData_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__PassManagerBuilder_O: {
    typedef llvmo::PassManagerBuilder_O type_KIND_LISPALLOC_llvmo__PassManagerBuilder_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__PassManagerBuilder_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__PassManagerBase_O: {
    typedef llvmo::PassManagerBase_O type_KIND_LISPALLOC_llvmo__PassManagerBase_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__PassManagerBase_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__PassManager_O: {
    typedef llvmo::PassManager_O type_KIND_LISPALLOC_llvmo__PassManager_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__PassManager_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__FunctionPassManager_O: {
    typedef llvmo::FunctionPassManager_O type_KIND_LISPALLOC_llvmo__FunctionPassManager_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__FunctionPassManager_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__DataLayout_O: {
    typedef llvmo::DataLayout_O type_KIND_LISPALLOC_llvmo__DataLayout_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__DataLayout_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__Type_O: {
    typedef llvmo::Type_O type_KIND_LISPALLOC_llvmo__Type_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__Type_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__CompositeType_O: {
    typedef llvmo::CompositeType_O type_KIND_LISPALLOC_llvmo__CompositeType_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__CompositeType_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__SequentialType_O: {
    typedef llvmo::SequentialType_O type_KIND_LISPALLOC_llvmo__SequentialType_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__SequentialType_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__PointerType_O: {
    typedef llvmo::PointerType_O type_KIND_LISPALLOC_llvmo__PointerType_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__PointerType_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__VectorType_O: {
    typedef llvmo::VectorType_O type_KIND_LISPALLOC_llvmo__VectorType_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__VectorType_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__ArrayType_O: {
    typedef llvmo::ArrayType_O type_KIND_LISPALLOC_llvmo__ArrayType_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ArrayType_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__StructType_O: {
    typedef llvmo::StructType_O type_KIND_LISPALLOC_llvmo__StructType_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__StructType_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__IntegerType_O: {
    typedef llvmo::IntegerType_O type_KIND_LISPALLOC_llvmo__IntegerType_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__IntegerType_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__FunctionType_O: {
    typedef llvmo::FunctionType_O type_KIND_LISPALLOC_llvmo__FunctionType_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__FunctionType_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__Linker_O: {
    typedef llvmo::Linker_O type_KIND_LISPALLOC_llvmo__Linker_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__Linker_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__Value_O: {
    typedef llvmo::Value_O type_KIND_LISPALLOC_llvmo__Value_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__Value_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__Argument_O: {
    typedef llvmo::Argument_O type_KIND_LISPALLOC_llvmo__Argument_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__Argument_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__MDString_O: {
    typedef llvmo::MDString_O type_KIND_LISPALLOC_llvmo__MDString_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__MDString_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__MDNode_O: {
    typedef llvmo::MDNode_O type_KIND_LISPALLOC_llvmo__MDNode_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__MDNode_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__BasicBlock_O: {
    typedef llvmo::BasicBlock_O type_KIND_LISPALLOC_llvmo__BasicBlock_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__BasicBlock_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__User_O: {
    typedef llvmo::User_O type_KIND_LISPALLOC_llvmo__User_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__User_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__Instruction_O: {
    typedef llvmo::Instruction_O type_KIND_LISPALLOC_llvmo__Instruction_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__Instruction_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__AtomicRMWInst_O: {
    typedef llvmo::AtomicRMWInst_O type_KIND_LISPALLOC_llvmo__AtomicRMWInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__AtomicRMWInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__StoreInst_O: {
    typedef llvmo::StoreInst_O type_KIND_LISPALLOC_llvmo__StoreInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__StoreInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__PHINode_O: {
    typedef llvmo::PHINode_O type_KIND_LISPALLOC_llvmo__PHINode_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__PHINode_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__AtomicCmpXchgInst_O: {
    typedef llvmo::AtomicCmpXchgInst_O type_KIND_LISPALLOC_llvmo__AtomicCmpXchgInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__AtomicCmpXchgInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__LandingPadInst_O: {
    typedef llvmo::LandingPadInst_O type_KIND_LISPALLOC_llvmo__LandingPadInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__LandingPadInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__UnaryInstruction_O: {
    typedef llvmo::UnaryInstruction_O type_KIND_LISPALLOC_llvmo__UnaryInstruction_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__UnaryInstruction_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__LoadInst_O: {
    typedef llvmo::LoadInst_O type_KIND_LISPALLOC_llvmo__LoadInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__LoadInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__VAArgInst_O: {
    typedef llvmo::VAArgInst_O type_KIND_LISPALLOC_llvmo__VAArgInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__VAArgInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__AllocaInst_O: {
    typedef llvmo::AllocaInst_O type_KIND_LISPALLOC_llvmo__AllocaInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__AllocaInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__TerminatorInst_O: {
    typedef llvmo::TerminatorInst_O type_KIND_LISPALLOC_llvmo__TerminatorInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__TerminatorInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__IndirectBrInst_O: {
    typedef llvmo::IndirectBrInst_O type_KIND_LISPALLOC_llvmo__IndirectBrInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__IndirectBrInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__UnreachableInst_O: {
    typedef llvmo::UnreachableInst_O type_KIND_LISPALLOC_llvmo__UnreachableInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__UnreachableInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__InvokeInst_O: {
    typedef llvmo::InvokeInst_O type_KIND_LISPALLOC_llvmo__InvokeInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__InvokeInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__ReturnInst_O: {
    typedef llvmo::ReturnInst_O type_KIND_LISPALLOC_llvmo__ReturnInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ReturnInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__BranchInst_O: {
    typedef llvmo::BranchInst_O type_KIND_LISPALLOC_llvmo__BranchInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__BranchInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__ResumeInst_O: {
    typedef llvmo::ResumeInst_O type_KIND_LISPALLOC_llvmo__ResumeInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ResumeInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__SwitchInst_O: {
    typedef llvmo::SwitchInst_O type_KIND_LISPALLOC_llvmo__SwitchInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__SwitchInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__FenceInst_O: {
    typedef llvmo::FenceInst_O type_KIND_LISPALLOC_llvmo__FenceInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__FenceInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__CallInst_O: {
    typedef llvmo::CallInst_O type_KIND_LISPALLOC_llvmo__CallInst_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__CallInst_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__Constant_O: {
    typedef llvmo::Constant_O type_KIND_LISPALLOC_llvmo__Constant_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__Constant_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__ConstantDataSequential_O: {
    typedef llvmo::ConstantDataSequential_O type_KIND_LISPALLOC_llvmo__ConstantDataSequential_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ConstantDataSequential_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__ConstantDataArray_O: {
    typedef llvmo::ConstantDataArray_O type_KIND_LISPALLOC_llvmo__ConstantDataArray_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ConstantDataArray_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__ConstantStruct_O: {
    typedef llvmo::ConstantStruct_O type_KIND_LISPALLOC_llvmo__ConstantStruct_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ConstantStruct_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__BlockAddress_O: {
    typedef llvmo::BlockAddress_O type_KIND_LISPALLOC_llvmo__BlockAddress_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__BlockAddress_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__ConstantPointerNull_O: {
    typedef llvmo::ConstantPointerNull_O type_KIND_LISPALLOC_llvmo__ConstantPointerNull_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ConstantPointerNull_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__ConstantArray_O: {
    typedef llvmo::ConstantArray_O type_KIND_LISPALLOC_llvmo__ConstantArray_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ConstantArray_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__ConstantFP_O: {
    typedef llvmo::ConstantFP_O type_KIND_LISPALLOC_llvmo__ConstantFP_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ConstantFP_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__GlobalValue_O: {
    typedef llvmo::GlobalValue_O type_KIND_LISPALLOC_llvmo__GlobalValue_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__GlobalValue_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__Function_O: {
    typedef llvmo::Function_O type_KIND_LISPALLOC_llvmo__Function_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__Function_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__GlobalVariable_O: {
    typedef llvmo::GlobalVariable_O type_KIND_LISPALLOC_llvmo__GlobalVariable_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__GlobalVariable_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__ConstantExpr_O: {
    typedef llvmo::ConstantExpr_O type_KIND_LISPALLOC_llvmo__ConstantExpr_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ConstantExpr_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__UndefValue_O: {
    typedef llvmo::UndefValue_O type_KIND_LISPALLOC_llvmo__UndefValue_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__UndefValue_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__ConstantInt_O: {
    typedef llvmo::ConstantInt_O type_KIND_LISPALLOC_llvmo__ConstantInt_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__ConstantInt_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__TargetMachine_O: {
    typedef llvmo::TargetMachine_O type_KIND_LISPALLOC_llvmo__TargetMachine_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__TargetMachine_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__LLVMContext_O: {
    typedef llvmo::LLVMContext_O type_KIND_LISPALLOC_llvmo__LLVMContext_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__LLVMContext_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__Module_O: {
    typedef llvmo::Module_O type_KIND_LISPALLOC_llvmo__Module_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__Module_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_llvmo__NamedMDNode_O: {
    typedef llvmo::NamedMDNode_O type_KIND_LISPALLOC_llvmo__NamedMDNode_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_llvmo__NamedMDNode_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SNode_O: {
    typedef core::SNode_O type_KIND_LISPALLOC_core__SNode_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SNode_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__BranchSNode_O: {
    typedef core::BranchSNode_O type_KIND_LISPALLOC_core__BranchSNode_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__BranchSNode_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__LeafSNode_O: {
    typedef core::LeafSNode_O type_KIND_LISPALLOC_core__LeafSNode_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__LeafSNode_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__LoadTimeValues_O: {
    typedef core::LoadTimeValues_O type_KIND_LISPALLOC_core__LoadTimeValues_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__LoadTimeValues_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__LightUserData_O: {
    typedef core::LightUserData_O type_KIND_LISPALLOC_core__LightUserData_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__LightUserData_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__UserData_O: {
    typedef core::UserData_O type_KIND_LISPALLOC_core__UserData_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__UserData_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__WeakHashTable_O: {
    typedef core::WeakHashTable_O type_KIND_LISPALLOC_core__WeakHashTable_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__WeakHashTable_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__WeakKeyHashTable_O: {
    typedef core::WeakKeyHashTable_O type_KIND_LISPALLOC_core__WeakKeyHashTable_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__WeakKeyHashTable_O)) + global_alignup_sizeof_header;
} break;
case KIND_TEMPLATED_LISPALLOC_core__WrappedPointer_O: {
    core::WrappedPointer_O* obj_gc_safe = reinterpret_cast<core::WrappedPointer_O*>(client);
    typedef core::WrappedPointer_O type_KIND_TEMPLATED_LISPALLOC_core__WrappedPointer_O;
    client = (char*)client + AlignUp(obj_gc_safe->templatedSizeof()) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__StandardObject_O: {
    typedef core::StandardObject_O type_KIND_BOOTSTRAP_core__StandardObject_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__StandardObject_O)) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__Metaobject_O: {
    typedef core::Metaobject_O type_KIND_BOOTSTRAP_core__Metaobject_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__Metaobject_O)) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__Specializer_O: {
    typedef core::Specializer_O type_KIND_BOOTSTRAP_core__Specializer_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__Specializer_O)) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__Class_O: {
    typedef core::Class_O type_KIND_BOOTSTRAP_core__Class_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__Class_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__ForwardReferencedClass_O: {
    typedef core::ForwardReferencedClass_O type_KIND_LISPALLOC_core__ForwardReferencedClass_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__ForwardReferencedClass_O)) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__StdClass_O: {
    typedef core::StdClass_O type_KIND_BOOTSTRAP_core__StdClass_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__StdClass_O)) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__StandardClass_O: {
    typedef core::StandardClass_O type_KIND_BOOTSTRAP_core__StandardClass_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__StandardClass_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__FuncallableStandardClass_O: {
    typedef core::FuncallableStandardClass_O type_KIND_LISPALLOC_core__FuncallableStandardClass_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__FuncallableStandardClass_O)) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__BuiltInClass_O: {
    typedef core::BuiltInClass_O type_KIND_BOOTSTRAP_core__BuiltInClass_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__BuiltInClass_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_clbind__ClassRep_O: {
    typedef clbind::ClassRep_O type_KIND_LISPALLOC_clbind__ClassRep_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_clbind__ClassRep_O)) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__StructureClass_O: {
    typedef core::StructureClass_O type_KIND_BOOTSTRAP_core__StructureClass_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__StructureClass_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_asttooling__AstVisitor_O: {
    typedef asttooling::AstVisitor_O type_KIND_LISPALLOC_asttooling__AstVisitor_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_asttooling__AstVisitor_O)) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__Symbol_O: {
    typedef core::Symbol_O type_KIND_BOOTSTRAP_core__Symbol_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__Symbol_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Null_O: {
    typedef core::Null_O type_KIND_LISPALLOC_core__Null_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Null_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__StringSet_O: {
    typedef core::StringSet_O type_KIND_LISPALLOC_core__StringSet_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__StringSet_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SymbolToEnumConverter_O: {
    typedef core::SymbolToEnumConverter_O type_KIND_LISPALLOC_core__SymbolToEnumConverter_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SymbolToEnumConverter_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__MultiStringBuffer_O: {
    typedef core::MultiStringBuffer_O type_KIND_LISPALLOC_core__MultiStringBuffer_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__MultiStringBuffer_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SymbolList_O: {
    typedef core::SymbolList_O type_KIND_LISPALLOC_core__SymbolList_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SymbolList_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__WeakPointer_O: {
    typedef core::WeakPointer_O type_KIND_LISPALLOC_core__WeakPointer_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__WeakPointer_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__HashTable_O: {
    typedef core::HashTable_O type_KIND_LISPALLOC_core__HashTable_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__HashTable_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__HashTableEqual_O: {
    typedef core::HashTableEqual_O type_KIND_LISPALLOC_core__HashTableEqual_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__HashTableEqual_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__HashTableEqualp_O: {
    typedef core::HashTableEqualp_O type_KIND_LISPALLOC_core__HashTableEqualp_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__HashTableEqualp_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__HashTableEql_O: {
    typedef core::HashTableEql_O type_KIND_LISPALLOC_core__HashTableEql_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__HashTableEql_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__HashTableEq_O: {
    typedef core::HashTableEq_O type_KIND_LISPALLOC_core__HashTableEq_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__HashTableEq_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SymbolSet_O: {
    typedef core::SymbolSet_O type_KIND_LISPALLOC_core__SymbolSet_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SymbolSet_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Binder_O: {
    typedef core::Binder_O type_KIND_LISPALLOC_core__Binder_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Binder_O)) + global_alignup_sizeof_header;
} break;
case KIND_CLASSALLOC_core__Cache: {
    typedef core::Cache type_KIND_CLASSALLOC_core__Cache;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_core__Cache)) + global_alignup_sizeof_header;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__DynamicBinding_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::DynamicBinding>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::DynamicBinding>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::DynamicBinding" :#2# "DynamicBinding")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::DynamicBinding" :NAME "DynamicBinding")
    gctools::GCVector_moveable<core::DynamicBinding>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::DynamicBinding>*>(client);
    typedef typename gctools::GCVector_moveable<core::DynamicBinding> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__DynamicBinding_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__DynamicBinding_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__SourceFileInfo_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::SourceFileInfo_O>" :SPECIALIZER "class core::SourceFileInfo_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::SourceFileInfo_O>" :SPECIALIZER "class core::SourceFileInfo_O")
    gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>*>(client);
    typedef typename gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>> type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__SourceFileInfo_O__;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__SourceFileInfo_O__>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_LISPALLOC_asttooling__DerivableFrontendActionFactory: {
    typedef asttooling::DerivableFrontendActionFactory type_KIND_LISPALLOC_asttooling__DerivableFrontendActionFactory;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_asttooling__DerivableFrontendActionFactory)) + global_alignup_sizeof_header;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ContextFrame_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<asttooling::ContextFrame>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::ContextFrame>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "asttooling::ContextFrame" :#2# "ContextFrame")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "asttooling::ContextFrame" :NAME "ContextFrame")
    gctools::GCVector_moveable<asttooling::ContextFrame>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<asttooling::ContextFrame>*>(client);
    typedef typename gctools::GCVector_moveable<asttooling::ContextFrame> type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ContextFrame_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ContextFrame_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__Message_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<asttooling::Message>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::Message>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "asttooling::Message" :#2# "Message")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "asttooling::Message" :NAME "Message")
    gctools::GCVector_moveable<asttooling::Message>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<asttooling::Message>*>(client);
    typedef typename gctools::GCVector_moveable<asttooling::Message> type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__Message_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__Message_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCSTRING_gctools__GCString_moveable_char_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCString_moveable<char>" :#2=NAME "GCString_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcstring.h:40:5" :#3=CTYPE #S(GCSTRING-MOVEABLE-CTYPE :#1# "gctools::GCString_moveable<char>" :#2# "GCString_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(UNCLASSIFIED-CTYPE :#1# "char")))))
// parm0-ctype = #S(UNCLASSIFIED-CTYPE :KEY "char")
    gctools::GCString_moveable<char>* obj_gc_safe = reinterpret_cast<gctools::GCString_moveable<char>*>(client);
    typedef typename gctools::GCString_moveable<char> type_KIND_GCSTRING_gctools__GCString_moveable_char_;
    size_t header_and_gcstring_size = AlignUp(sizeof_container<type_KIND_GCSTRING_gctools__GCString_moveable_char_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + Align(header_and_gcstring_size);
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__T_O__gctools__smart_ptr_core__T_O___: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>" :#2# "GCVector_moveable" :#4=ARGUMENTS (#S(#5=GC-TEMPLATE-ARGUMENT :#6=INDEX 0 :#3# #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>" :#2# NIL :#4# (#S(#5# :#6# 0 :#3# #S(#7=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :#8=SPECIALIZER "class core::T_O")) #S(#5# :#6# 1 :#3# #S(#7# :#1# "gctools::smart_ptr<core::T_O>" :#8# "class core::T_O"))))))))
// parm0-ctype = #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1=KEY "std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>" :NAME NIL :ARGUMENTS (#S(#2=GC-TEMPLATE-ARGUMENT :#3=INDEX 0 :#4=CTYPE #S(#5=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :#6=SPECIALIZER "class core::T_O")) #S(#2# :#3# 1 :#4# #S(#5# :#1# "gctools::smart_ptr<core::T_O>" :#6# "class core::T_O"))))
    gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>*>(client);
    typedef typename gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>> type_KIND_GCVECTOR_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__T_O__gctools__smart_ptr_core__T_O___;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__T_O__gctools__smart_ptr_core__T_O___>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__internal__MatcherDescriptor_P_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<asttooling::internal::MatcherDescriptor *>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::internal::MatcherDescriptor *>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(POINTER-CTYPE :#1# NIL :POINTEE #S(CXXRECORD-CTYPE :#1# "asttooling::internal::MatcherDescriptor" :#2# "MatcherDescriptor"))))))
// parm0-ctype = #S(POINTER-CTYPE :#1=KEY NIL :POINTEE #S(CXXRECORD-CTYPE :#1# "asttooling::internal::MatcherDescriptor" :NAME "MatcherDescriptor"))
    gctools::GCVector_moveable<asttooling::internal::MatcherDescriptor *>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<asttooling::internal::MatcherDescriptor *>*>(client);
    typedef typename gctools::GCVector_moveable<asttooling::internal::MatcherDescriptor *> type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__internal__MatcherDescriptor_P_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__internal__MatcherDescriptor_P_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__ExceptionEntry_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::ExceptionEntry>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::ExceptionEntry>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::ExceptionEntry" :#2# "ExceptionEntry")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::ExceptionEntry" :NAME "ExceptionEntry")
    gctools::GCVector_moveable<core::ExceptionEntry>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::ExceptionEntry>*>(client);
    typedef typename gctools::GCVector_moveable<core::ExceptionEntry> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__ExceptionEntry_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__ExceptionEntry_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Package_O>" :SPECIALIZER "class core::Package_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :SPECIALIZER "class core::Package_O")
    gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>*>(client);
    typedef typename gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>> type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ErrorContent_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<asttooling::ErrorContent>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::ErrorContent>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "asttooling::ErrorContent" :#2# "ErrorContent")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "asttooling::ErrorContent" :NAME "ErrorContent")
    gctools::GCVector_moveable<asttooling::ErrorContent>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<asttooling::ErrorContent>*>(client);
    typedef typename gctools::GCVector_moveable<asttooling::ErrorContent> type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ErrorContent_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ErrorContent_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
    gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>*>(client);
    typedef typename gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>> type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_LISPALLOC_asttooling__DerivableSyntaxOnlyAction: {
    typedef asttooling::DerivableSyntaxOnlyAction type_KIND_LISPALLOC_asttooling__DerivableSyntaxOnlyAction;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_asttooling__DerivableSyntaxOnlyAction)) + global_alignup_sizeof_header;
} break;
case KIND_TEMPLATED_CLASSALLOC_core__BuiltinClosure: {
    core::BuiltinClosure* obj_gc_safe = reinterpret_cast<core::BuiltinClosure*>(client);
    typedef core::BuiltinClosure type_KIND_TEMPLATED_CLASSALLOC_core__BuiltinClosure;
    client = (char*)client + AlignUp(obj_gc_safe->templatedSizeof()) + global_alignup_sizeof_header;
} break;
case KIND_CLASSALLOC_llvmo__CompiledClosure: {
    typedef llvmo::CompiledClosure type_KIND_CLASSALLOC_llvmo__CompiledClosure;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_llvmo__CompiledClosure)) + global_alignup_sizeof_header;
} break;
case KIND_CLASSALLOC_core__InterpretedClosure: {
    typedef core::InterpretedClosure type_KIND_CLASSALLOC_core__InterpretedClosure;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_core__InterpretedClosure)) + global_alignup_sizeof_header;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ParserValue_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<asttooling::ParserValue>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::ParserValue>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "asttooling::ParserValue" :#2# "ParserValue")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "asttooling::ParserValue" :NAME "ParserValue")
    gctools::GCVector_moveable<asttooling::ParserValue>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<asttooling::ParserValue>*>(client);
    typedef typename gctools::GCVector_moveable<asttooling::ParserValue> type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ParserValue_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ParserValue_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_CLASSALLOC_asttooling__internal__OverloadedMatcherDescriptor: {
    typedef asttooling::internal::OverloadedMatcherDescriptor type_KIND_CLASSALLOC_asttooling__internal__OverloadedMatcherDescriptor;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_asttooling__internal__OverloadedMatcherDescriptor)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_asttooling__DerivableMatchCallback: {
    typedef asttooling::DerivableMatchCallback type_KIND_LISPALLOC_asttooling__DerivableMatchCallback;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_asttooling__DerivableMatchCallback)) + global_alignup_sizeof_header;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__SingleDispatchMethod_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::SingleDispatchMethod_O>" :SPECIALIZER "class core::SingleDispatchMethod_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::SingleDispatchMethod_O>" :SPECIALIZER "class core::SingleDispatchMethod_O")
    gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>*>(client);
    typedef typename gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>> type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__SingleDispatchMethod_O__;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__SingleDispatchMethod_O__>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Cons_O>" :SPECIALIZER "class core::Cons_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Cons_O>" :SPECIALIZER "class core::Cons_O")
    gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>*>(client);
    typedef typename gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>> type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Character_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Character_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Character_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Character_O>" :SPECIALIZER "class core::Character_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Character_O>" :SPECIALIZER "class core::Character_O")
    gctools::GCVector_moveable<gctools::smart_ptr<core::Character_O>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<gctools::smart_ptr<core::Character_O>>*>(client);
    typedef typename gctools::GCVector_moveable<gctools::smart_ptr<core::Character_O>> type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Character_O__;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Character_O__>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__SequenceStepper_P_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::SequenceStepper *>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::SequenceStepper *>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(POINTER-CTYPE :#1# NIL :POINTEE #S(CXXRECORD-CTYPE :#1# "core::SequenceStepper" :#2# "SequenceStepper"))))))
// parm0-ctype = #S(POINTER-CTYPE :#1=KEY NIL :POINTEE #S(CXXRECORD-CTYPE :#1# "core::SequenceStepper" :NAME "SequenceStepper"))
    gctools::GCVector_moveable<core::SequenceStepper *>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::SequenceStepper *>*>(client);
    typedef typename gctools::GCVector_moveable<core::SequenceStepper *> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__SequenceStepper_P_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__SequenceStepper_P_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_CLASSALLOC_core__CoreExposer: {
    typedef core::CoreExposer type_KIND_CLASSALLOC_core__CoreExposer;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_core__CoreExposer)) + global_alignup_sizeof_header;
} break;
case KIND_CLASSALLOC_core__SingleDispatchGenericFunctionClosure: {
    typedef core::SingleDispatchGenericFunctionClosure type_KIND_CLASSALLOC_core__SingleDispatchGenericFunctionClosure;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_core__SingleDispatchGenericFunctionClosure)) + global_alignup_sizeof_header;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__SymbolStorage_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::SymbolStorage>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::SymbolStorage>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::SymbolStorage" :#2# "SymbolStorage")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::SymbolStorage" :NAME "SymbolStorage")
    gctools::GCVector_moveable<core::SymbolStorage>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::SymbolStorage>*>(client);
    typedef typename gctools::GCVector_moveable<core::SymbolStorage> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__SymbolStorage_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__SymbolStorage_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__OptionalArgument_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::OptionalArgument>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::OptionalArgument>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::OptionalArgument" :#2# "OptionalArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::OptionalArgument" :NAME "OptionalArgument")
    gctools::GCVector_moveable<core::OptionalArgument>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::OptionalArgument>*>(client);
    typedef typename gctools::GCVector_moveable<core::OptionalArgument> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__OptionalArgument_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__OptionalArgument_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__0_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>" :#2=NAME "GCArray_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcarray.h:33:5" :#3=CTYPE #S(GCARRAY-MOVEABLE-CTYPE :#1# "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>" :#2# "GCArray_moveable" :ARGUMENTS (#S(#4=GC-TEMPLATE-ARGUMENT :#5=INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")) #S(#4# :#5# 1 :#3# NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
    gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>* obj_gc_safe = reinterpret_cast<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>*>(client);
    typedef typename gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0> type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__0_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__0_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_LISPALLOC_asttooling__DerivableArgumentsAdjuster: {
    typedef asttooling::DerivableArgumentsAdjuster type_KIND_LISPALLOC_asttooling__DerivableArgumentsAdjuster;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_asttooling__DerivableArgumentsAdjuster)) + global_alignup_sizeof_header;
} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__3_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>" :#2=NAME "GCArray_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcarray.h:33:5" :#3=CTYPE #S(GCARRAY-MOVEABLE-CTYPE :#1# "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>" :#2# "GCArray_moveable" :ARGUMENTS (#S(#4=GC-TEMPLATE-ARGUMENT :#5=INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")) #S(#4# :#5# 1 :#3# NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
    gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>* obj_gc_safe = reinterpret_cast<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>*>(client);
    typedef typename gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3> type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__3_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__3_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_CLASSALLOC_core__MacroClosure: {
    typedef core::MacroClosure type_KIND_CLASSALLOC_core__MacroClosure;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_core__MacroClosure)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_asttooling__DerivableASTFrontendAction: {
    typedef asttooling::DerivableASTFrontendAction type_KIND_LISPALLOC_asttooling__DerivableASTFrontendAction;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_asttooling__DerivableASTFrontendAction)) + global_alignup_sizeof_header;
} break;
case KIND_CLASSALLOC_asttooling__internal__FixedArgCountMatcherDescriptor: {
    typedef asttooling::internal::FixedArgCountMatcherDescriptor type_KIND_CLASSALLOC_asttooling__internal__FixedArgCountMatcherDescriptor;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_asttooling__internal__FixedArgCountMatcherDescriptor)) + global_alignup_sizeof_header;
} break;
case KIND_CLASSALLOC_asttooling__internal__FreeFuncMatcherDescriptor: {
    typedef asttooling::internal::FreeFuncMatcherDescriptor type_KIND_CLASSALLOC_asttooling__internal__FreeFuncMatcherDescriptor;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_asttooling__internal__FreeFuncMatcherDescriptor)) + global_alignup_sizeof_header;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__AuxArgument_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::AuxArgument>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::AuxArgument>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::AuxArgument" :#2# "AuxArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::AuxArgument" :NAME "AuxArgument")
    gctools::GCVector_moveable<core::AuxArgument>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::AuxArgument>*>(client);
    typedef typename gctools::GCVector_moveable<core::AuxArgument> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__AuxArgument_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__AuxArgument_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__SymbolClassPair_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::SymbolClassPair>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::SymbolClassPair>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::SymbolClassPair" :#2# "SymbolClassPair")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::SymbolClassPair" :NAME "SymbolClassPair")
    gctools::GCVector_moveable<core::SymbolClassPair>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::SymbolClassPair>*>(client);
    typedef typename gctools::GCVector_moveable<core::SymbolClassPair> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__SymbolClassPair_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__SymbolClassPair_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__KeywordArgument_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::KeywordArgument>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::KeywordArgument>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::KeywordArgument" :#2# "KeywordArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::KeywordArgument" :NAME "KeywordArgument")
    gctools::GCVector_moveable<core::KeywordArgument>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::KeywordArgument>*>(client);
    typedef typename gctools::GCVector_moveable<core::KeywordArgument> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__KeywordArgument_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__KeywordArgument_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__CacheRecord_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::CacheRecord>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::CacheRecord>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::CacheRecord" :#2# "CacheRecord")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::CacheRecord" :NAME "CacheRecord")
    gctools::GCVector_moveable<core::CacheRecord>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::CacheRecord>*>(client);
    typedef typename gctools::GCVector_moveable<core::CacheRecord> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__CacheRecord_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__CacheRecord_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_CLASSALLOC_core__InstanceClosure: {
    typedef core::InstanceClosure type_KIND_CLASSALLOC_core__InstanceClosure;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_core__InstanceClosure)) + global_alignup_sizeof_header;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__RequiredArgument_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::RequiredArgument>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::RequiredArgument>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::RequiredArgument" :#2# "RequiredArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::RequiredArgument" :NAME "RequiredArgument")
    gctools::GCVector_moveable<core::RequiredArgument>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::RequiredArgument>*>(client);
    typedef typename gctools::GCVector_moveable<core::RequiredArgument> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__RequiredArgument_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__RequiredArgument_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Symbol_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O")
    gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>*>(client);
    typedef typename gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>> type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Symbol_O__;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Symbol_O__>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_CLASSALLOC_asttooling__internal__VariadicOperatorMatcherDescriptor: {
    typedef asttooling::internal::VariadicOperatorMatcherDescriptor type_KIND_CLASSALLOC_asttooling__internal__VariadicOperatorMatcherDescriptor;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_asttooling__internal__VariadicOperatorMatcherDescriptor)) + global_alignup_sizeof_header;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_clbind__ClassRep_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<clbind::ClassRep_O>" :SPECIALIZER "class clbind::ClassRep_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<clbind::ClassRep_O>" :SPECIALIZER "class clbind::ClassRep_O")
    gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>*>(client);
    typedef typename gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>> type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_clbind__ClassRep_O__;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_clbind__ClassRep_O__>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__RegMap__SymbolMatcherDescriptorPair_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<asttooling::RegMap::SymbolMatcherDescriptorPair>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::RegMap::SymbolMatcherDescriptorPair>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "asttooling::RegMap::SymbolMatcherDescriptorPair" :#2# "SymbolMatcherDescriptorPair")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "asttooling::RegMap::SymbolMatcherDescriptorPair" :NAME "SymbolMatcherDescriptorPair")
    gctools::GCVector_moveable<asttooling::RegMap::SymbolMatcherDescriptorPair>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<asttooling::RegMap::SymbolMatcherDescriptorPair>*>(client);
    typedef typename gctools::GCVector_moveable<asttooling::RegMap::SymbolMatcherDescriptorPair> type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__RegMap__SymbolMatcherDescriptorPair_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__RegMap__SymbolMatcherDescriptorPair_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Str_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Str_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Str_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Str_O>" :SPECIALIZER "class core::Str_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Str_O>" :SPECIALIZER "class core::Str_O")
    gctools::GCVector_moveable<gctools::smart_ptr<core::Str_O>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<gctools::smart_ptr<core::Str_O>>*>(client);
    typedef typename gctools::GCVector_moveable<gctools::smart_ptr<core::Str_O>> type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Str_O__;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Str_O__>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
#endif // defined(GC_OBJ_SKIP)
#if defined(GC_OBJ_FINALIZE)
case KIND_ROOTCLASSALLOC_core__Lisp_O: {
    core::Lisp_O* obj_gc_safe = reinterpret_cast<core::Lisp_O*>(client);
    obj_gc_safe->~Lisp_O();
    return;
} break;
case KIND_ROOTCLASSALLOC_asttooling__RegMap__RegistryMaps: {
    asttooling::RegMap::RegistryMaps* obj_gc_safe = reinterpret_cast<asttooling::RegMap::RegistryMaps*>(client);
    obj_gc_safe->~RegistryMaps();
    return;
} break;
case KIND_TEMPLATED_CLASSALLOC_core__Creator: {
    core::Creator* obj_gc_safe = reinterpret_cast<core::Creator*>(client);
    obj_gc_safe->~Creator();
} break;
case KIND_TEMPLATED_CLASSALLOC_clbind__ConstructorCreator: {
    clbind::ConstructorCreator* obj_gc_safe = reinterpret_cast<clbind::ConstructorCreator*>(client);
    obj_gc_safe->~ConstructorCreator();
} break;
case KIND_CLASSALLOC_core__InstanceCreator: {
    core::InstanceCreator* obj_gc_safe = reinterpret_cast<core::InstanceCreator*>(client);
    obj_gc_safe->~InstanceCreator();
    return;
} break;
case KIND_CLASSALLOC_clbind__DummyCreator: {
    clbind::DummyCreator* obj_gc_safe = reinterpret_cast<clbind::DummyCreator*>(client);
    obj_gc_safe->~DummyCreator();
    return;
} break;
case KIND_CLASSALLOC_core__SequenceStepper: {
    core::SequenceStepper* obj_gc_safe = reinterpret_cast<core::SequenceStepper*>(client);
    obj_gc_safe->~SequenceStepper();
    return;
} break;
case KIND_CLASSALLOC_core__ConsStepper: {
    core::ConsStepper* obj_gc_safe = reinterpret_cast<core::ConsStepper*>(client);
    obj_gc_safe->~ConsStepper();
    return;
} break;
case KIND_CLASSALLOC_core__VectorStepper: {
    core::VectorStepper* obj_gc_safe = reinterpret_cast<core::VectorStepper*>(client);
    obj_gc_safe->~VectorStepper();
    return;
} break;
case KIND_ROOTCLASSALLOC_clbind__detail__class_map: {
    clbind::detail::class_map* obj_gc_safe = reinterpret_cast<clbind::detail::class_map*>(client);
    obj_gc_safe->~class_map();
    return;
} break;
case KIND_BOOTSTRAP_core__T_O: {
    core::T_O* obj_gc_safe = reinterpret_cast<core::T_O*>(client);
    obj_gc_safe->~T_O();
    return;
} break;
case KIND_LISPALLOC_core__Cons_O: {
    core::Cons_O* obj_gc_safe = reinterpret_cast<core::Cons_O*>(client);
    obj_gc_safe->~Cons_O();
    return;
} break;
case KIND_LISPALLOC_cffi__Pointer_O: {
    cffi::Pointer_O* obj_gc_safe = reinterpret_cast<cffi::Pointer_O*>(client);
    obj_gc_safe->~Pointer_O();
    return;
} break;
case KIND_LISPALLOC_core__Stream_O: {
    core::Stream_O* obj_gc_safe = reinterpret_cast<core::Stream_O*>(client);
    obj_gc_safe->~Stream_O();
    return;
} break;
case KIND_LISPALLOC_core__AnsiStream_O: {
    core::AnsiStream_O* obj_gc_safe = reinterpret_cast<core::AnsiStream_O*>(client);
    obj_gc_safe->~AnsiStream_O();
    return;
} break;
case KIND_LISPALLOC_core__TwoWayStream_O: {
    core::TwoWayStream_O* obj_gc_safe = reinterpret_cast<core::TwoWayStream_O*>(client);
    obj_gc_safe->~TwoWayStream_O();
    return;
} break;
case KIND_LISPALLOC_core__FileStream_O: {
    core::FileStream_O* obj_gc_safe = reinterpret_cast<core::FileStream_O*>(client);
    obj_gc_safe->~FileStream_O();
    return;
} break;
case KIND_LISPALLOC_core__IOFileStream_O: {
    core::IOFileStream_O* obj_gc_safe = reinterpret_cast<core::IOFileStream_O*>(client);
    obj_gc_safe->~IOFileStream_O();
    return;
} break;
case KIND_LISPALLOC_core__IOStreamStream_O: {
    core::IOStreamStream_O* obj_gc_safe = reinterpret_cast<core::IOStreamStream_O*>(client);
    obj_gc_safe->~IOStreamStream_O();
    return;
} break;
case KIND_LISPALLOC_core__BroadcastStream_O: {
    core::BroadcastStream_O* obj_gc_safe = reinterpret_cast<core::BroadcastStream_O*>(client);
    obj_gc_safe->~BroadcastStream_O();
    return;
} break;
case KIND_LISPALLOC_core__StringStream_O: {
    core::StringStream_O* obj_gc_safe = reinterpret_cast<core::StringStream_O*>(client);
    obj_gc_safe->~StringStream_O();
    return;
} break;
case KIND_LISPALLOC_core__StringOutputStream_O: {
    core::StringOutputStream_O* obj_gc_safe = reinterpret_cast<core::StringOutputStream_O*>(client);
    obj_gc_safe->~StringOutputStream_O();
    return;
} break;
case KIND_LISPALLOC_core__StringInputStream_O: {
    core::StringInputStream_O* obj_gc_safe = reinterpret_cast<core::StringInputStream_O*>(client);
    obj_gc_safe->~StringInputStream_O();
    return;
} break;
case KIND_LISPALLOC_core__SynonymStream_O: {
    core::SynonymStream_O* obj_gc_safe = reinterpret_cast<core::SynonymStream_O*>(client);
    obj_gc_safe->~SynonymStream_O();
    return;
} break;
case KIND_LISPALLOC_core__EchoStream_O: {
    core::EchoStream_O* obj_gc_safe = reinterpret_cast<core::EchoStream_O*>(client);
    obj_gc_safe->~EchoStream_O();
    return;
} break;
case KIND_LISPALLOC_core__ConcatenatedStream_O: {
    core::ConcatenatedStream_O* obj_gc_safe = reinterpret_cast<core::ConcatenatedStream_O*>(client);
    obj_gc_safe->~ConcatenatedStream_O();
    return;
} break;
case KIND_LISPALLOC_core__Pathname_O: {
    core::Pathname_O* obj_gc_safe = reinterpret_cast<core::Pathname_O*>(client);
    obj_gc_safe->~Pathname_O();
    return;
} break;
case KIND_LISPALLOC_core__LogicalPathname_O: {
    core::LogicalPathname_O* obj_gc_safe = reinterpret_cast<core::LogicalPathname_O*>(client);
    obj_gc_safe->~LogicalPathname_O();
    return;
} break;
case KIND_LISPALLOC_core__Environment_O: {
    core::Environment_O* obj_gc_safe = reinterpret_cast<core::Environment_O*>(client);
    obj_gc_safe->~Environment_O();
    return;
} break;
case KIND_LISPALLOC_core__GlueEnvironment_O: {
    core::GlueEnvironment_O* obj_gc_safe = reinterpret_cast<core::GlueEnvironment_O*>(client);
    obj_gc_safe->~GlueEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__LexicalEnvironment_O: {
    core::LexicalEnvironment_O* obj_gc_safe = reinterpret_cast<core::LexicalEnvironment_O*>(client);
    obj_gc_safe->~LexicalEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__CompileTimeEnvironment_O: {
    core::CompileTimeEnvironment_O* obj_gc_safe = reinterpret_cast<core::CompileTimeEnvironment_O*>(client);
    obj_gc_safe->~CompileTimeEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__CatchEnvironment_O: {
    core::CatchEnvironment_O* obj_gc_safe = reinterpret_cast<core::CatchEnvironment_O*>(client);
    obj_gc_safe->~CatchEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__BlockEnvironment_O: {
    core::BlockEnvironment_O* obj_gc_safe = reinterpret_cast<core::BlockEnvironment_O*>(client);
    obj_gc_safe->~BlockEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__UnwindProtectEnvironment_O: {
    core::UnwindProtectEnvironment_O* obj_gc_safe = reinterpret_cast<core::UnwindProtectEnvironment_O*>(client);
    obj_gc_safe->~UnwindProtectEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__FunctionContainerEnvironment_O: {
    core::FunctionContainerEnvironment_O* obj_gc_safe = reinterpret_cast<core::FunctionContainerEnvironment_O*>(client);
    obj_gc_safe->~FunctionContainerEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__SymbolMacroletEnvironment_O: {
    core::SymbolMacroletEnvironment_O* obj_gc_safe = reinterpret_cast<core::SymbolMacroletEnvironment_O*>(client);
    obj_gc_safe->~SymbolMacroletEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__MacroletEnvironment_O: {
    core::MacroletEnvironment_O* obj_gc_safe = reinterpret_cast<core::MacroletEnvironment_O*>(client);
    obj_gc_safe->~MacroletEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__RuntimeVisibleEnvironment_O: {
    core::RuntimeVisibleEnvironment_O* obj_gc_safe = reinterpret_cast<core::RuntimeVisibleEnvironment_O*>(client);
    obj_gc_safe->~RuntimeVisibleEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__ValueEnvironment_O: {
    core::ValueEnvironment_O* obj_gc_safe = reinterpret_cast<core::ValueEnvironment_O*>(client);
    obj_gc_safe->~ValueEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__FunctionValueEnvironment_O: {
    core::FunctionValueEnvironment_O* obj_gc_safe = reinterpret_cast<core::FunctionValueEnvironment_O*>(client);
    obj_gc_safe->~FunctionValueEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__TagbodyEnvironment_O: {
    core::TagbodyEnvironment_O* obj_gc_safe = reinterpret_cast<core::TagbodyEnvironment_O*>(client);
    obj_gc_safe->~TagbodyEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__ActivationFrame_O: {
    core::ActivationFrame_O* obj_gc_safe = reinterpret_cast<core::ActivationFrame_O*>(client);
    obj_gc_safe->~ActivationFrame_O();
    return;
} break;
case KIND_LISPALLOC_core__TagbodyFrame_O: {
    core::TagbodyFrame_O* obj_gc_safe = reinterpret_cast<core::TagbodyFrame_O*>(client);
    obj_gc_safe->~TagbodyFrame_O();
    return;
} break;
case KIND_LISPALLOC_core__FunctionFrame_O: {
    core::FunctionFrame_O* obj_gc_safe = reinterpret_cast<core::FunctionFrame_O*>(client);
    obj_gc_safe->~FunctionFrame_O();
    return;
} break;
case KIND_LISPALLOC_core__ValueFrame_O: {
    core::ValueFrame_O* obj_gc_safe = reinterpret_cast<core::ValueFrame_O*>(client);
    obj_gc_safe->~ValueFrame_O();
    return;
} break;
case KIND_LISPALLOC_core__SingleDispatchMethod_O: {
    core::SingleDispatchMethod_O* obj_gc_safe = reinterpret_cast<core::SingleDispatchMethod_O*>(client);
    obj_gc_safe->~SingleDispatchMethod_O();
    return;
} break;
case KIND_LISPALLOC_core__SourceFileInfo_O: {
    core::SourceFileInfo_O* obj_gc_safe = reinterpret_cast<core::SourceFileInfo_O*>(client);
    obj_gc_safe->~SourceFileInfo_O();
    return;
} break;
case KIND_LISPALLOC_core__ObjectSet_O: {
    core::ObjectSet_O* obj_gc_safe = reinterpret_cast<core::ObjectSet_O*>(client);
    obj_gc_safe->~ObjectSet_O();
    return;
} break;
case KIND_LISPALLOC_core__DirectoryEntry_O: {
    core::DirectoryEntry_O* obj_gc_safe = reinterpret_cast<core::DirectoryEntry_O*>(client);
    obj_gc_safe->~DirectoryEntry_O();
    return;
} break;
case KIND_LISPALLOC_core__Pointer_O: {
    core::Pointer_O* obj_gc_safe = reinterpret_cast<core::Pointer_O*>(client);
    obj_gc_safe->~Pointer_O();
    return;
} break;
case KIND_LISPALLOC_core__Path_O: {
    core::Path_O* obj_gc_safe = reinterpret_cast<core::Path_O*>(client);
    obj_gc_safe->~Path_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DebugInfo_O: {
    llvmo::DebugInfo_O* obj_gc_safe = reinterpret_cast<llvmo::DebugInfo_O*>(client);
    obj_gc_safe->~DebugInfo_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DICompositeType_O: {
    llvmo::DICompositeType_O* obj_gc_safe = reinterpret_cast<llvmo::DICompositeType_O*>(client);
    obj_gc_safe->~DICompositeType_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DIBasicType_O: {
    llvmo::DIBasicType_O* obj_gc_safe = reinterpret_cast<llvmo::DIBasicType_O*>(client);
    obj_gc_safe->~DIBasicType_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DIType_O: {
    llvmo::DIType_O* obj_gc_safe = reinterpret_cast<llvmo::DIType_O*>(client);
    obj_gc_safe->~DIType_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DISubprogram_O: {
    llvmo::DISubprogram_O* obj_gc_safe = reinterpret_cast<llvmo::DISubprogram_O*>(client);
    obj_gc_safe->~DISubprogram_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DIArray_O: {
    llvmo::DIArray_O* obj_gc_safe = reinterpret_cast<llvmo::DIArray_O*>(client);
    obj_gc_safe->~DIArray_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DITypeArray_O: {
    llvmo::DITypeArray_O* obj_gc_safe = reinterpret_cast<llvmo::DITypeArray_O*>(client);
    obj_gc_safe->~DITypeArray_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DISubroutineType_O: {
    llvmo::DISubroutineType_O* obj_gc_safe = reinterpret_cast<llvmo::DISubroutineType_O*>(client);
    obj_gc_safe->~DISubroutineType_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DIScope_O: {
    llvmo::DIScope_O* obj_gc_safe = reinterpret_cast<llvmo::DIScope_O*>(client);
    obj_gc_safe->~DIScope_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DIFile_O: {
    llvmo::DIFile_O* obj_gc_safe = reinterpret_cast<llvmo::DIFile_O*>(client);
    obj_gc_safe->~DIFile_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DIDescriptor_O: {
    llvmo::DIDescriptor_O* obj_gc_safe = reinterpret_cast<llvmo::DIDescriptor_O*>(client);
    obj_gc_safe->~DIDescriptor_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DICompileUnit_O: {
    llvmo::DICompileUnit_O* obj_gc_safe = reinterpret_cast<llvmo::DICompileUnit_O*>(client);
    obj_gc_safe->~DICompileUnit_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DIDerivedType_O: {
    llvmo::DIDerivedType_O* obj_gc_safe = reinterpret_cast<llvmo::DIDerivedType_O*>(client);
    obj_gc_safe->~DIDerivedType_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DILexicalBlock_O: {
    llvmo::DILexicalBlock_O* obj_gc_safe = reinterpret_cast<llvmo::DILexicalBlock_O*>(client);
    obj_gc_safe->~DILexicalBlock_O();
    return;
} break;
case KIND_LISPALLOC_core__StructureObject_O: {
    core::StructureObject_O* obj_gc_safe = reinterpret_cast<core::StructureObject_O*>(client);
    obj_gc_safe->~StructureObject_O();
    return;
} break;
case KIND_LISPALLOC_core__LambdaListHandler_O: {
    core::LambdaListHandler_O* obj_gc_safe = reinterpret_cast<core::LambdaListHandler_O*>(client);
    obj_gc_safe->~LambdaListHandler_O();
    return;
} break;
case KIND_TEMPLATED_LISPALLOC_core__Iterator_O: {
    core::Iterator_O* obj_gc_safe = reinterpret_cast<core::Iterator_O*>(client);
    obj_gc_safe->~Iterator_O();
} break;
case KIND_LISPALLOC_core__DirectoryIterator_O: {
    core::DirectoryIterator_O* obj_gc_safe = reinterpret_cast<core::DirectoryIterator_O*>(client);
    obj_gc_safe->~DirectoryIterator_O();
    return;
} break;
case KIND_LISPALLOC_core__RecursiveDirectoryIterator_O: {
    core::RecursiveDirectoryIterator_O* obj_gc_safe = reinterpret_cast<core::RecursiveDirectoryIterator_O*>(client);
    obj_gc_safe->~RecursiveDirectoryIterator_O();
    return;
} break;
case KIND_LISPALLOC_core__PosixTimeDuration_O: {
    core::PosixTimeDuration_O* obj_gc_safe = reinterpret_cast<core::PosixTimeDuration_O*>(client);
    obj_gc_safe->~PosixTimeDuration_O();
    return;
} break;
case KIND_LISPALLOC_core__FileStatus_O: {
    core::FileStatus_O* obj_gc_safe = reinterpret_cast<core::FileStatus_O*>(client);
    obj_gc_safe->~FileStatus_O();
    return;
} break;
case KIND_LISPALLOC_clbind__ClassRegistry_O: {
    clbind::ClassRegistry_O* obj_gc_safe = reinterpret_cast<clbind::ClassRegistry_O*>(client);
    obj_gc_safe->~ClassRegistry_O();
    return;
} break;
case KIND_LISPALLOC_core__Archive_O: {
    core::Archive_O* obj_gc_safe = reinterpret_cast<core::Archive_O*>(client);
    obj_gc_safe->~Archive_O();
    return;
} break;
case KIND_LISPALLOC_core__SaveArchive_O: {
    core::SaveArchive_O* obj_gc_safe = reinterpret_cast<core::SaveArchive_O*>(client);
    obj_gc_safe->~SaveArchive_O();
    return;
} break;
case KIND_LISPALLOC_core__SexpSaveArchive_O: {
    core::SexpSaveArchive_O* obj_gc_safe = reinterpret_cast<core::SexpSaveArchive_O*>(client);
    obj_gc_safe->~SexpSaveArchive_O();
    return;
} break;
case KIND_LISPALLOC_core__LoadArchive_O: {
    core::LoadArchive_O* obj_gc_safe = reinterpret_cast<core::LoadArchive_O*>(client);
    obj_gc_safe->~LoadArchive_O();
    return;
} break;
case KIND_LISPALLOC_core__SexpLoadArchive_O: {
    core::SexpLoadArchive_O* obj_gc_safe = reinterpret_cast<core::SexpLoadArchive_O*>(client);
    obj_gc_safe->~SexpLoadArchive_O();
    return;
} break;
case KIND_LISPALLOC_core__RegexMatch_O: {
    core::RegexMatch_O* obj_gc_safe = reinterpret_cast<core::RegexMatch_O*>(client);
    obj_gc_safe->~RegexMatch_O();
    return;
} break;
case KIND_LISPALLOC_core__SourcePosInfo_O: {
    core::SourcePosInfo_O* obj_gc_safe = reinterpret_cast<core::SourcePosInfo_O*>(client);
    obj_gc_safe->~SourcePosInfo_O();
    return;
} break;
case KIND_LISPALLOC_core__Character_O: {
    core::Character_O* obj_gc_safe = reinterpret_cast<core::Character_O*>(client);
    obj_gc_safe->~Character_O();
    return;
} break;
case KIND_LISPALLOC_core__ExtendedChar_O: {
    core::ExtendedChar_O* obj_gc_safe = reinterpret_cast<core::ExtendedChar_O*>(client);
    obj_gc_safe->~ExtendedChar_O();
    return;
} break;
case KIND_LISPALLOC_core__BaseChar_O: {
    core::BaseChar_O* obj_gc_safe = reinterpret_cast<core::BaseChar_O*>(client);
    obj_gc_safe->~BaseChar_O();
    return;
} break;
case KIND_LISPALLOC_core__StandardChar_O: {
    core::StandardChar_O* obj_gc_safe = reinterpret_cast<core::StandardChar_O*>(client);
    obj_gc_safe->~StandardChar_O();
    return;
} break;
case KIND_LISPALLOC_core__MicroHeap_O: {
    core::MicroHeap_O* obj_gc_safe = reinterpret_cast<core::MicroHeap_O*>(client);
    obj_gc_safe->~MicroHeap_O();
    return;
} break;
case KIND_LISPALLOC_core__Function_O: {
    core::Function_O* obj_gc_safe = reinterpret_cast<core::Function_O*>(client);
    obj_gc_safe->~Function_O();
    return;
} break;
case KIND_LISPALLOC_core__SingleDispatchEffectiveMethodFunction_O: {
    core::SingleDispatchEffectiveMethodFunction_O* obj_gc_safe = reinterpret_cast<core::SingleDispatchEffectiveMethodFunction_O*>(client);
    obj_gc_safe->~SingleDispatchEffectiveMethodFunction_O();
    return;
} break;
case KIND_LISPALLOC_core__SingleDispatchGenericFunction_O: {
    core::SingleDispatchGenericFunction_O* obj_gc_safe = reinterpret_cast<core::SingleDispatchGenericFunction_O*>(client);
    obj_gc_safe->~SingleDispatchGenericFunction_O();
    return;
} break;
case KIND_LISPALLOC_core__CompiledFunction_O: {
    core::CompiledFunction_O* obj_gc_safe = reinterpret_cast<core::CompiledFunction_O*>(client);
    obj_gc_safe->~CompiledFunction_O();
    return;
} break;
case KIND_LISPALLOC_core__Instance_O: {
    core::Instance_O* obj_gc_safe = reinterpret_cast<core::Instance_O*>(client);
    obj_gc_safe->~Instance_O();
    return;
} break;
case KIND_LISPALLOC_core__SpecialForm_O: {
    core::SpecialForm_O* obj_gc_safe = reinterpret_cast<core::SpecialForm_O*>(client);
    obj_gc_safe->~SpecialForm_O();
    return;
} break;
case KIND_LISPALLOC_core__WeakKeyMapping_O: {
    core::WeakKeyMapping_O* obj_gc_safe = reinterpret_cast<core::WeakKeyMapping_O*>(client);
    obj_gc_safe->~WeakKeyMapping_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DebugLoc_O: {
    llvmo::DebugLoc_O* obj_gc_safe = reinterpret_cast<llvmo::DebugLoc_O*>(client);
    obj_gc_safe->~DebugLoc_O();
    return;
} break;
case KIND_LISPALLOC_core__Regex_O: {
    core::Regex_O* obj_gc_safe = reinterpret_cast<core::Regex_O*>(client);
    obj_gc_safe->~Regex_O();
    return;
} break;
case KIND_LISPALLOC_core__Package_O: {
    core::Package_O* obj_gc_safe = reinterpret_cast<core::Package_O*>(client);
    obj_gc_safe->~Package_O();
    return;
} break;
case KIND_LISPALLOC_core__CandoException_O: {
    core::CandoException_O* obj_gc_safe = reinterpret_cast<core::CandoException_O*>(client);
    obj_gc_safe->~CandoException_O();
    return;
} break;
case KIND_LISPALLOC_core__StringList_O: {
    core::StringList_O* obj_gc_safe = reinterpret_cast<core::StringList_O*>(client);
    obj_gc_safe->~StringList_O();
    return;
} break;
case KIND_LISPALLOC_core__IntArray_O: {
    core::IntArray_O* obj_gc_safe = reinterpret_cast<core::IntArray_O*>(client);
    obj_gc_safe->~IntArray_O();
    return;
} break;
case KIND_LISPALLOC_core__Number_O: {
    core::Number_O* obj_gc_safe = reinterpret_cast<core::Number_O*>(client);
    obj_gc_safe->~Number_O();
    return;
} break;
case KIND_LISPALLOC_core__Real_O: {
    core::Real_O* obj_gc_safe = reinterpret_cast<core::Real_O*>(client);
    obj_gc_safe->~Real_O();
    return;
} break;
case KIND_LISPALLOC_core__Float_O: {
    core::Float_O* obj_gc_safe = reinterpret_cast<core::Float_O*>(client);
    obj_gc_safe->~Float_O();
    return;
} break;
case KIND_LISPALLOC_core__ShortFloat_O: {
    core::ShortFloat_O* obj_gc_safe = reinterpret_cast<core::ShortFloat_O*>(client);
    obj_gc_safe->~ShortFloat_O();
    return;
} break;
case KIND_LISPALLOC_core__DoubleFloat_O: {
    core::DoubleFloat_O* obj_gc_safe = reinterpret_cast<core::DoubleFloat_O*>(client);
    obj_gc_safe->~DoubleFloat_O();
    return;
} break;
case KIND_LISPALLOC_core__SingleFloat_O: {
    core::SingleFloat_O* obj_gc_safe = reinterpret_cast<core::SingleFloat_O*>(client);
    obj_gc_safe->~SingleFloat_O();
    return;
} break;
case KIND_LISPALLOC_core__Rational_O: {
    core::Rational_O* obj_gc_safe = reinterpret_cast<core::Rational_O*>(client);
    obj_gc_safe->~Rational_O();
    return;
} break;
case KIND_LISPALLOC_core__Ratio_O: {
    core::Ratio_O* obj_gc_safe = reinterpret_cast<core::Ratio_O*>(client);
    obj_gc_safe->~Ratio_O();
    return;
} break;
case KIND_LISPALLOC_core__Integer_O: {
    core::Integer_O* obj_gc_safe = reinterpret_cast<core::Integer_O*>(client);
    obj_gc_safe->~Integer_O();
    return;
} break;
case KIND_LISPALLOC_core__Bignum_O: {
    core::Bignum_O* obj_gc_safe = reinterpret_cast<core::Bignum_O*>(client);
    obj_gc_safe->~Bignum_O();
    return;
} break;
case KIND_LISPALLOC_core__Fixnum_O: {
    core::Fixnum_O* obj_gc_safe = reinterpret_cast<core::Fixnum_O*>(client);
    obj_gc_safe->~Fixnum_O();
    return;
} break;
case KIND_LISPALLOC_core__Complex_O: {
    core::Complex_O* obj_gc_safe = reinterpret_cast<core::Complex_O*>(client);
    obj_gc_safe->~Complex_O();
    return;
} break;
case KIND_LISPALLOC_core__PosixTime_O: {
    core::PosixTime_O* obj_gc_safe = reinterpret_cast<core::PosixTime_O*>(client);
    obj_gc_safe->~PosixTime_O();
    return;
} break;
case KIND_LISPALLOC_core__ReadTable_O: {
    core::ReadTable_O* obj_gc_safe = reinterpret_cast<core::ReadTable_O*>(client);
    obj_gc_safe->~ReadTable_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__Attribute_O: {
    llvmo::Attribute_O* obj_gc_safe = reinterpret_cast<llvmo::Attribute_O*>(client);
    obj_gc_safe->~Attribute_O();
    return;
} break;
case KIND_LISPALLOC_core__Array_O: {
    core::Array_O* obj_gc_safe = reinterpret_cast<core::Array_O*>(client);
    obj_gc_safe->~Array_O();
    return;
} break;
case KIND_LISPALLOC_core__ArrayObjects_O: {
    core::ArrayObjects_O* obj_gc_safe = reinterpret_cast<core::ArrayObjects_O*>(client);
    obj_gc_safe->~ArrayObjects_O();
    return;
} break;
case KIND_LISPALLOC_core__Vector_O: {
    core::Vector_O* obj_gc_safe = reinterpret_cast<core::Vector_O*>(client);
    obj_gc_safe->~Vector_O();
    return;
} break;
case KIND_LISPALLOC_core__String_O: {
    core::String_O* obj_gc_safe = reinterpret_cast<core::String_O*>(client);
    obj_gc_safe->~String_O();
    return;
} break;
case KIND_BOOTSTRAP_core__Str_O: {
    core::Str_O* obj_gc_safe = reinterpret_cast<core::Str_O*>(client);
    obj_gc_safe->~Str_O();
    return;
} break;
case KIND_LISPALLOC_core__StrWithFillPtr_O: {
    core::StrWithFillPtr_O* obj_gc_safe = reinterpret_cast<core::StrWithFillPtr_O*>(client);
    obj_gc_safe->~StrWithFillPtr_O();
    return;
} break;
case KIND_LISPALLOC_core__VectorObjects_O: {
    core::VectorObjects_O* obj_gc_safe = reinterpret_cast<core::VectorObjects_O*>(client);
    obj_gc_safe->~VectorObjects_O();
    return;
} break;
case KIND_LISPALLOC_core__VectorObjectsWithFillPtr_O: {
    core::VectorObjectsWithFillPtr_O* obj_gc_safe = reinterpret_cast<core::VectorObjectsWithFillPtr_O*>(client);
    obj_gc_safe->~VectorObjectsWithFillPtr_O();
    return;
} break;
case KIND_LISPALLOC_core__BitVector_O: {
    core::BitVector_O* obj_gc_safe = reinterpret_cast<core::BitVector_O*>(client);
    obj_gc_safe->~BitVector_O();
    return;
} break;
case KIND_LISPALLOC_core__SimpleBitVector_O: {
    core::SimpleBitVector_O* obj_gc_safe = reinterpret_cast<core::SimpleBitVector_O*>(client);
    obj_gc_safe->~SimpleBitVector_O();
    return;
} break;
case KIND_LISPALLOC_core__SmallMap_O: {
    core::SmallMap_O* obj_gc_safe = reinterpret_cast<core::SmallMap_O*>(client);
    obj_gc_safe->~SmallMap_O();
    return;
} break;
case KIND_LISPALLOC_core__Reader_O: {
    core::Reader_O* obj_gc_safe = reinterpret_cast<core::Reader_O*>(client);
    obj_gc_safe->~Reader_O();
    return;
} break;
case KIND_LISPALLOC_core__ObjRef_O: {
    core::ObjRef_O* obj_gc_safe = reinterpret_cast<core::ObjRef_O*>(client);
    obj_gc_safe->~ObjRef_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__InsertPoint_O: {
    llvmo::InsertPoint_O* obj_gc_safe = reinterpret_cast<llvmo::InsertPoint_O*>(client);
    obj_gc_safe->~InsertPoint_O();
    return;
} break;
case KIND_LISPALLOC_core__SourceManager_O: {
    core::SourceManager_O* obj_gc_safe = reinterpret_cast<core::SourceManager_O*>(client);
    obj_gc_safe->~SourceManager_O();
    return;
} break;
case KIND_LISPALLOC_core__ExternalObject_O: {
    core::ExternalObject_O* obj_gc_safe = reinterpret_cast<core::ExternalObject_O*>(client);
    obj_gc_safe->~ExternalObject_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__Pass_O: {
    llvmo::Pass_O* obj_gc_safe = reinterpret_cast<llvmo::Pass_O*>(client);
    obj_gc_safe->~Pass_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__FunctionPass_O: {
    llvmo::FunctionPass_O* obj_gc_safe = reinterpret_cast<llvmo::FunctionPass_O*>(client);
    obj_gc_safe->~FunctionPass_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__ModulePass_O: {
    llvmo::ModulePass_O* obj_gc_safe = reinterpret_cast<llvmo::ModulePass_O*>(client);
    obj_gc_safe->~ModulePass_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__ImmutablePass_O: {
    llvmo::ImmutablePass_O* obj_gc_safe = reinterpret_cast<llvmo::ImmutablePass_O*>(client);
    obj_gc_safe->~ImmutablePass_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DataLayoutPass_O: {
    llvmo::DataLayoutPass_O* obj_gc_safe = reinterpret_cast<llvmo::DataLayoutPass_O*>(client);
    obj_gc_safe->~DataLayoutPass_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__IRBuilderBase_O: {
    llvmo::IRBuilderBase_O* obj_gc_safe = reinterpret_cast<llvmo::IRBuilderBase_O*>(client);
    obj_gc_safe->~IRBuilderBase_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__IRBuilder_O: {
    llvmo::IRBuilder_O* obj_gc_safe = reinterpret_cast<llvmo::IRBuilder_O*>(client);
    obj_gc_safe->~IRBuilder_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DIBuilder_O: {
    llvmo::DIBuilder_O* obj_gc_safe = reinterpret_cast<llvmo::DIBuilder_O*>(client);
    obj_gc_safe->~DIBuilder_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__ExecutionEngine_O: {
    llvmo::ExecutionEngine_O* obj_gc_safe = reinterpret_cast<llvmo::ExecutionEngine_O*>(client);
    obj_gc_safe->~ExecutionEngine_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__EngineBuilder_O: {
    llvmo::EngineBuilder_O* obj_gc_safe = reinterpret_cast<llvmo::EngineBuilder_O*>(client);
    obj_gc_safe->~EngineBuilder_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__APInt_O: {
    llvmo::APInt_O* obj_gc_safe = reinterpret_cast<llvmo::APInt_O*>(client);
    obj_gc_safe->~APInt_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__APFloat_O: {
    llvmo::APFloat_O* obj_gc_safe = reinterpret_cast<llvmo::APFloat_O*>(client);
    obj_gc_safe->~APFloat_O();
    return;
} break;
case KIND_LISPALLOC_core__ForeignData_O: {
    core::ForeignData_O* obj_gc_safe = reinterpret_cast<core::ForeignData_O*>(client);
    obj_gc_safe->~ForeignData_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__PassManagerBuilder_O: {
    llvmo::PassManagerBuilder_O* obj_gc_safe = reinterpret_cast<llvmo::PassManagerBuilder_O*>(client);
    obj_gc_safe->~PassManagerBuilder_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__PassManagerBase_O: {
    llvmo::PassManagerBase_O* obj_gc_safe = reinterpret_cast<llvmo::PassManagerBase_O*>(client);
    obj_gc_safe->~PassManagerBase_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__PassManager_O: {
    llvmo::PassManager_O* obj_gc_safe = reinterpret_cast<llvmo::PassManager_O*>(client);
    obj_gc_safe->~PassManager_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__FunctionPassManager_O: {
    llvmo::FunctionPassManager_O* obj_gc_safe = reinterpret_cast<llvmo::FunctionPassManager_O*>(client);
    obj_gc_safe->~FunctionPassManager_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DataLayout_O: {
    llvmo::DataLayout_O* obj_gc_safe = reinterpret_cast<llvmo::DataLayout_O*>(client);
    obj_gc_safe->~DataLayout_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__Type_O: {
    llvmo::Type_O* obj_gc_safe = reinterpret_cast<llvmo::Type_O*>(client);
    obj_gc_safe->~Type_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__CompositeType_O: {
    llvmo::CompositeType_O* obj_gc_safe = reinterpret_cast<llvmo::CompositeType_O*>(client);
    obj_gc_safe->~CompositeType_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__SequentialType_O: {
    llvmo::SequentialType_O* obj_gc_safe = reinterpret_cast<llvmo::SequentialType_O*>(client);
    obj_gc_safe->~SequentialType_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__PointerType_O: {
    llvmo::PointerType_O* obj_gc_safe = reinterpret_cast<llvmo::PointerType_O*>(client);
    obj_gc_safe->~PointerType_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__VectorType_O: {
    llvmo::VectorType_O* obj_gc_safe = reinterpret_cast<llvmo::VectorType_O*>(client);
    obj_gc_safe->~VectorType_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__ArrayType_O: {
    llvmo::ArrayType_O* obj_gc_safe = reinterpret_cast<llvmo::ArrayType_O*>(client);
    obj_gc_safe->~ArrayType_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__StructType_O: {
    llvmo::StructType_O* obj_gc_safe = reinterpret_cast<llvmo::StructType_O*>(client);
    obj_gc_safe->~StructType_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__IntegerType_O: {
    llvmo::IntegerType_O* obj_gc_safe = reinterpret_cast<llvmo::IntegerType_O*>(client);
    obj_gc_safe->~IntegerType_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__FunctionType_O: {
    llvmo::FunctionType_O* obj_gc_safe = reinterpret_cast<llvmo::FunctionType_O*>(client);
    obj_gc_safe->~FunctionType_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__Linker_O: {
    llvmo::Linker_O* obj_gc_safe = reinterpret_cast<llvmo::Linker_O*>(client);
    obj_gc_safe->~Linker_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__Value_O: {
    llvmo::Value_O* obj_gc_safe = reinterpret_cast<llvmo::Value_O*>(client);
    obj_gc_safe->~Value_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__Argument_O: {
    llvmo::Argument_O* obj_gc_safe = reinterpret_cast<llvmo::Argument_O*>(client);
    obj_gc_safe->~Argument_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__MDString_O: {
    llvmo::MDString_O* obj_gc_safe = reinterpret_cast<llvmo::MDString_O*>(client);
    obj_gc_safe->~MDString_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__MDNode_O: {
    llvmo::MDNode_O* obj_gc_safe = reinterpret_cast<llvmo::MDNode_O*>(client);
    obj_gc_safe->~MDNode_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__BasicBlock_O: {
    llvmo::BasicBlock_O* obj_gc_safe = reinterpret_cast<llvmo::BasicBlock_O*>(client);
    obj_gc_safe->~BasicBlock_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__User_O: {
    llvmo::User_O* obj_gc_safe = reinterpret_cast<llvmo::User_O*>(client);
    obj_gc_safe->~User_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__Instruction_O: {
    llvmo::Instruction_O* obj_gc_safe = reinterpret_cast<llvmo::Instruction_O*>(client);
    obj_gc_safe->~Instruction_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__AtomicRMWInst_O: {
    llvmo::AtomicRMWInst_O* obj_gc_safe = reinterpret_cast<llvmo::AtomicRMWInst_O*>(client);
    obj_gc_safe->~AtomicRMWInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__StoreInst_O: {
    llvmo::StoreInst_O* obj_gc_safe = reinterpret_cast<llvmo::StoreInst_O*>(client);
    obj_gc_safe->~StoreInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__PHINode_O: {
    llvmo::PHINode_O* obj_gc_safe = reinterpret_cast<llvmo::PHINode_O*>(client);
    obj_gc_safe->~PHINode_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__AtomicCmpXchgInst_O: {
    llvmo::AtomicCmpXchgInst_O* obj_gc_safe = reinterpret_cast<llvmo::AtomicCmpXchgInst_O*>(client);
    obj_gc_safe->~AtomicCmpXchgInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__LandingPadInst_O: {
    llvmo::LandingPadInst_O* obj_gc_safe = reinterpret_cast<llvmo::LandingPadInst_O*>(client);
    obj_gc_safe->~LandingPadInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__UnaryInstruction_O: {
    llvmo::UnaryInstruction_O* obj_gc_safe = reinterpret_cast<llvmo::UnaryInstruction_O*>(client);
    obj_gc_safe->~UnaryInstruction_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__LoadInst_O: {
    llvmo::LoadInst_O* obj_gc_safe = reinterpret_cast<llvmo::LoadInst_O*>(client);
    obj_gc_safe->~LoadInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__VAArgInst_O: {
    llvmo::VAArgInst_O* obj_gc_safe = reinterpret_cast<llvmo::VAArgInst_O*>(client);
    obj_gc_safe->~VAArgInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__AllocaInst_O: {
    llvmo::AllocaInst_O* obj_gc_safe = reinterpret_cast<llvmo::AllocaInst_O*>(client);
    obj_gc_safe->~AllocaInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__TerminatorInst_O: {
    llvmo::TerminatorInst_O* obj_gc_safe = reinterpret_cast<llvmo::TerminatorInst_O*>(client);
    obj_gc_safe->~TerminatorInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__IndirectBrInst_O: {
    llvmo::IndirectBrInst_O* obj_gc_safe = reinterpret_cast<llvmo::IndirectBrInst_O*>(client);
    obj_gc_safe->~IndirectBrInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__UnreachableInst_O: {
    llvmo::UnreachableInst_O* obj_gc_safe = reinterpret_cast<llvmo::UnreachableInst_O*>(client);
    obj_gc_safe->~UnreachableInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__InvokeInst_O: {
    llvmo::InvokeInst_O* obj_gc_safe = reinterpret_cast<llvmo::InvokeInst_O*>(client);
    obj_gc_safe->~InvokeInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__ReturnInst_O: {
    llvmo::ReturnInst_O* obj_gc_safe = reinterpret_cast<llvmo::ReturnInst_O*>(client);
    obj_gc_safe->~ReturnInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__BranchInst_O: {
    llvmo::BranchInst_O* obj_gc_safe = reinterpret_cast<llvmo::BranchInst_O*>(client);
    obj_gc_safe->~BranchInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__ResumeInst_O: {
    llvmo::ResumeInst_O* obj_gc_safe = reinterpret_cast<llvmo::ResumeInst_O*>(client);
    obj_gc_safe->~ResumeInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__SwitchInst_O: {
    llvmo::SwitchInst_O* obj_gc_safe = reinterpret_cast<llvmo::SwitchInst_O*>(client);
    obj_gc_safe->~SwitchInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__FenceInst_O: {
    llvmo::FenceInst_O* obj_gc_safe = reinterpret_cast<llvmo::FenceInst_O*>(client);
    obj_gc_safe->~FenceInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__CallInst_O: {
    llvmo::CallInst_O* obj_gc_safe = reinterpret_cast<llvmo::CallInst_O*>(client);
    obj_gc_safe->~CallInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__Constant_O: {
    llvmo::Constant_O* obj_gc_safe = reinterpret_cast<llvmo::Constant_O*>(client);
    obj_gc_safe->~Constant_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__ConstantDataSequential_O: {
    llvmo::ConstantDataSequential_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantDataSequential_O*>(client);
    obj_gc_safe->~ConstantDataSequential_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__ConstantDataArray_O: {
    llvmo::ConstantDataArray_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantDataArray_O*>(client);
    obj_gc_safe->~ConstantDataArray_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__ConstantStruct_O: {
    llvmo::ConstantStruct_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantStruct_O*>(client);
    obj_gc_safe->~ConstantStruct_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__BlockAddress_O: {
    llvmo::BlockAddress_O* obj_gc_safe = reinterpret_cast<llvmo::BlockAddress_O*>(client);
    obj_gc_safe->~BlockAddress_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__ConstantPointerNull_O: {
    llvmo::ConstantPointerNull_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantPointerNull_O*>(client);
    obj_gc_safe->~ConstantPointerNull_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__ConstantArray_O: {
    llvmo::ConstantArray_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantArray_O*>(client);
    obj_gc_safe->~ConstantArray_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__ConstantFP_O: {
    llvmo::ConstantFP_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantFP_O*>(client);
    obj_gc_safe->~ConstantFP_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__GlobalValue_O: {
    llvmo::GlobalValue_O* obj_gc_safe = reinterpret_cast<llvmo::GlobalValue_O*>(client);
    obj_gc_safe->~GlobalValue_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__Function_O: {
    llvmo::Function_O* obj_gc_safe = reinterpret_cast<llvmo::Function_O*>(client);
    obj_gc_safe->~Function_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__GlobalVariable_O: {
    llvmo::GlobalVariable_O* obj_gc_safe = reinterpret_cast<llvmo::GlobalVariable_O*>(client);
    obj_gc_safe->~GlobalVariable_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__ConstantExpr_O: {
    llvmo::ConstantExpr_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantExpr_O*>(client);
    obj_gc_safe->~ConstantExpr_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__UndefValue_O: {
    llvmo::UndefValue_O* obj_gc_safe = reinterpret_cast<llvmo::UndefValue_O*>(client);
    obj_gc_safe->~UndefValue_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__ConstantInt_O: {
    llvmo::ConstantInt_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantInt_O*>(client);
    obj_gc_safe->~ConstantInt_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__TargetMachine_O: {
    llvmo::TargetMachine_O* obj_gc_safe = reinterpret_cast<llvmo::TargetMachine_O*>(client);
    obj_gc_safe->~TargetMachine_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__LLVMContext_O: {
    llvmo::LLVMContext_O* obj_gc_safe = reinterpret_cast<llvmo::LLVMContext_O*>(client);
    obj_gc_safe->~LLVMContext_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__Module_O: {
    llvmo::Module_O* obj_gc_safe = reinterpret_cast<llvmo::Module_O*>(client);
    obj_gc_safe->~Module_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__NamedMDNode_O: {
    llvmo::NamedMDNode_O* obj_gc_safe = reinterpret_cast<llvmo::NamedMDNode_O*>(client);
    obj_gc_safe->~NamedMDNode_O();
    return;
} break;
case KIND_LISPALLOC_core__SNode_O: {
    core::SNode_O* obj_gc_safe = reinterpret_cast<core::SNode_O*>(client);
    obj_gc_safe->~SNode_O();
    return;
} break;
case KIND_LISPALLOC_core__BranchSNode_O: {
    core::BranchSNode_O* obj_gc_safe = reinterpret_cast<core::BranchSNode_O*>(client);
    obj_gc_safe->~BranchSNode_O();
    return;
} break;
case KIND_LISPALLOC_core__LeafSNode_O: {
    core::LeafSNode_O* obj_gc_safe = reinterpret_cast<core::LeafSNode_O*>(client);
    obj_gc_safe->~LeafSNode_O();
    return;
} break;
case KIND_LISPALLOC_core__LoadTimeValues_O: {
    core::LoadTimeValues_O* obj_gc_safe = reinterpret_cast<core::LoadTimeValues_O*>(client);
    obj_gc_safe->~LoadTimeValues_O();
    return;
} break;
case KIND_LISPALLOC_core__LightUserData_O: {
    core::LightUserData_O* obj_gc_safe = reinterpret_cast<core::LightUserData_O*>(client);
    obj_gc_safe->~LightUserData_O();
    return;
} break;
case KIND_LISPALLOC_core__UserData_O: {
    core::UserData_O* obj_gc_safe = reinterpret_cast<core::UserData_O*>(client);
    obj_gc_safe->~UserData_O();
    return;
} break;
case KIND_LISPALLOC_core__WeakHashTable_O: {
    core::WeakHashTable_O* obj_gc_safe = reinterpret_cast<core::WeakHashTable_O*>(client);
    obj_gc_safe->~WeakHashTable_O();
    return;
} break;
case KIND_LISPALLOC_core__WeakKeyHashTable_O: {
    core::WeakKeyHashTable_O* obj_gc_safe = reinterpret_cast<core::WeakKeyHashTable_O*>(client);
    obj_gc_safe->~WeakKeyHashTable_O();
    return;
} break;
case KIND_TEMPLATED_LISPALLOC_core__WrappedPointer_O: {
    core::WrappedPointer_O* obj_gc_safe = reinterpret_cast<core::WrappedPointer_O*>(client);
    obj_gc_safe->~WrappedPointer_O();
} break;
case KIND_BOOTSTRAP_core__StandardObject_O: {
    core::StandardObject_O* obj_gc_safe = reinterpret_cast<core::StandardObject_O*>(client);
    obj_gc_safe->~StandardObject_O();
    return;
} break;
case KIND_BOOTSTRAP_core__Metaobject_O: {
    core::Metaobject_O* obj_gc_safe = reinterpret_cast<core::Metaobject_O*>(client);
    obj_gc_safe->~Metaobject_O();
    return;
} break;
case KIND_BOOTSTRAP_core__Specializer_O: {
    core::Specializer_O* obj_gc_safe = reinterpret_cast<core::Specializer_O*>(client);
    obj_gc_safe->~Specializer_O();
    return;
} break;
case KIND_BOOTSTRAP_core__Class_O: {
    core::Class_O* obj_gc_safe = reinterpret_cast<core::Class_O*>(client);
    obj_gc_safe->~Class_O();
    return;
} break;
case KIND_LISPALLOC_core__ForwardReferencedClass_O: {
    core::ForwardReferencedClass_O* obj_gc_safe = reinterpret_cast<core::ForwardReferencedClass_O*>(client);
    obj_gc_safe->~ForwardReferencedClass_O();
    return;
} break;
case KIND_BOOTSTRAP_core__StdClass_O: {
    core::StdClass_O* obj_gc_safe = reinterpret_cast<core::StdClass_O*>(client);
    obj_gc_safe->~StdClass_O();
    return;
} break;
case KIND_BOOTSTRAP_core__StandardClass_O: {
    core::StandardClass_O* obj_gc_safe = reinterpret_cast<core::StandardClass_O*>(client);
    obj_gc_safe->~StandardClass_O();
    return;
} break;
case KIND_LISPALLOC_core__FuncallableStandardClass_O: {
    core::FuncallableStandardClass_O* obj_gc_safe = reinterpret_cast<core::FuncallableStandardClass_O*>(client);
    obj_gc_safe->~FuncallableStandardClass_O();
    return;
} break;
case KIND_BOOTSTRAP_core__BuiltInClass_O: {
    core::BuiltInClass_O* obj_gc_safe = reinterpret_cast<core::BuiltInClass_O*>(client);
    obj_gc_safe->~BuiltInClass_O();
    return;
} break;
case KIND_LISPALLOC_clbind__ClassRep_O: {
    clbind::ClassRep_O* obj_gc_safe = reinterpret_cast<clbind::ClassRep_O*>(client);
    obj_gc_safe->~ClassRep_O();
    return;
} break;
case KIND_BOOTSTRAP_core__StructureClass_O: {
    core::StructureClass_O* obj_gc_safe = reinterpret_cast<core::StructureClass_O*>(client);
    obj_gc_safe->~StructureClass_O();
    return;
} break;
case KIND_LISPALLOC_asttooling__AstVisitor_O: {
    asttooling::AstVisitor_O* obj_gc_safe = reinterpret_cast<asttooling::AstVisitor_O*>(client);
    obj_gc_safe->~AstVisitor_O();
    return;
} break;
case KIND_BOOTSTRAP_core__Symbol_O: {
    core::Symbol_O* obj_gc_safe = reinterpret_cast<core::Symbol_O*>(client);
    obj_gc_safe->~Symbol_O();
    return;
} break;
case KIND_LISPALLOC_core__Null_O: {
    core::Null_O* obj_gc_safe = reinterpret_cast<core::Null_O*>(client);
    obj_gc_safe->~Null_O();
    return;
} break;
case KIND_LISPALLOC_core__StringSet_O: {
    core::StringSet_O* obj_gc_safe = reinterpret_cast<core::StringSet_O*>(client);
    obj_gc_safe->~StringSet_O();
    return;
} break;
case KIND_LISPALLOC_core__SymbolToEnumConverter_O: {
    core::SymbolToEnumConverter_O* obj_gc_safe = reinterpret_cast<core::SymbolToEnumConverter_O*>(client);
    obj_gc_safe->~SymbolToEnumConverter_O();
    return;
} break;
case KIND_LISPALLOC_core__MultiStringBuffer_O: {
    core::MultiStringBuffer_O* obj_gc_safe = reinterpret_cast<core::MultiStringBuffer_O*>(client);
    obj_gc_safe->~MultiStringBuffer_O();
    return;
} break;
case KIND_LISPALLOC_core__SymbolList_O: {
    core::SymbolList_O* obj_gc_safe = reinterpret_cast<core::SymbolList_O*>(client);
    obj_gc_safe->~SymbolList_O();
    return;
} break;
case KIND_LISPALLOC_core__WeakPointer_O: {
    core::WeakPointer_O* obj_gc_safe = reinterpret_cast<core::WeakPointer_O*>(client);
    obj_gc_safe->~WeakPointer_O();
    return;
} break;
case KIND_LISPALLOC_core__HashTable_O: {
    core::HashTable_O* obj_gc_safe = reinterpret_cast<core::HashTable_O*>(client);
    obj_gc_safe->~HashTable_O();
    return;
} break;
case KIND_LISPALLOC_core__HashTableEqual_O: {
    core::HashTableEqual_O* obj_gc_safe = reinterpret_cast<core::HashTableEqual_O*>(client);
    obj_gc_safe->~HashTableEqual_O();
    return;
} break;
case KIND_LISPALLOC_core__HashTableEqualp_O: {
    core::HashTableEqualp_O* obj_gc_safe = reinterpret_cast<core::HashTableEqualp_O*>(client);
    obj_gc_safe->~HashTableEqualp_O();
    return;
} break;
case KIND_LISPALLOC_core__HashTableEql_O: {
    core::HashTableEql_O* obj_gc_safe = reinterpret_cast<core::HashTableEql_O*>(client);
    obj_gc_safe->~HashTableEql_O();
    return;
} break;
case KIND_LISPALLOC_core__HashTableEq_O: {
    core::HashTableEq_O* obj_gc_safe = reinterpret_cast<core::HashTableEq_O*>(client);
    obj_gc_safe->~HashTableEq_O();
    return;
} break;
case KIND_LISPALLOC_core__SymbolSet_O: {
    core::SymbolSet_O* obj_gc_safe = reinterpret_cast<core::SymbolSet_O*>(client);
    obj_gc_safe->~SymbolSet_O();
    return;
} break;
case KIND_LISPALLOC_core__Binder_O: {
    core::Binder_O* obj_gc_safe = reinterpret_cast<core::Binder_O*>(client);
    obj_gc_safe->~Binder_O();
    return;
} break;
case KIND_CLASSALLOC_core__Cache: {
    core::Cache* obj_gc_safe = reinterpret_cast<core::Cache*>(client);
    obj_gc_safe->~Cache();
    return;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__DynamicBinding_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::DynamicBinding>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::DynamicBinding>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::DynamicBinding" :#2# "DynamicBinding")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::DynamicBinding" :NAME "DynamicBinding")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::DynamicBinding>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__SourceFileInfo_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::SourceFileInfo_O>" :SPECIALIZER "class core::SourceFileInfo_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::SourceFileInfo_O>" :SPECIALIZER "class core::SourceFileInfo_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>"));} break;
case KIND_LISPALLOC_asttooling__DerivableFrontendActionFactory: {
    asttooling::DerivableFrontendActionFactory* obj_gc_safe = reinterpret_cast<asttooling::DerivableFrontendActionFactory*>(client);
    obj_gc_safe->~DerivableFrontendActionFactory();
    return;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ContextFrame_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<asttooling::ContextFrame>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::ContextFrame>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "asttooling::ContextFrame" :#2# "ContextFrame")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "asttooling::ContextFrame" :NAME "ContextFrame")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<asttooling::ContextFrame>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__Message_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<asttooling::Message>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::Message>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "asttooling::Message" :#2# "Message")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "asttooling::Message" :NAME "Message")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<asttooling::Message>"));} break;
case KIND_GCSTRING_gctools__GCString_moveable_char_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCString_moveable<char>" :#2=NAME "GCString_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcstring.h:40:5" :#3=CTYPE #S(GCSTRING-MOVEABLE-CTYPE :#1# "gctools::GCString_moveable<char>" :#2# "GCString_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(UNCLASSIFIED-CTYPE :#1# "char")))))
// parm0-ctype = #S(UNCLASSIFIED-CTYPE :KEY "char")
    THROW_HARD_ERROR(BF("Should never finalize gcstrings gctools::GCString_moveable<char>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__T_O__gctools__smart_ptr_core__T_O___: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>" :#2# "GCVector_moveable" :#4=ARGUMENTS (#S(#5=GC-TEMPLATE-ARGUMENT :#6=INDEX 0 :#3# #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>" :#2# NIL :#4# (#S(#5# :#6# 0 :#3# #S(#7=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :#8=SPECIALIZER "class core::T_O")) #S(#5# :#6# 1 :#3# #S(#7# :#1# "gctools::smart_ptr<core::T_O>" :#8# "class core::T_O"))))))))
// parm0-ctype = #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1=KEY "std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>" :NAME NIL :ARGUMENTS (#S(#2=GC-TEMPLATE-ARGUMENT :#3=INDEX 0 :#4=CTYPE #S(#5=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :#6=SPECIALIZER "class core::T_O")) #S(#2# :#3# 1 :#4# #S(#5# :#1# "gctools::smart_ptr<core::T_O>" :#6# "class core::T_O"))))
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__internal__MatcherDescriptor_P_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<asttooling::internal::MatcherDescriptor *>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::internal::MatcherDescriptor *>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(POINTER-CTYPE :#1# NIL :POINTEE #S(CXXRECORD-CTYPE :#1# "asttooling::internal::MatcherDescriptor" :#2# "MatcherDescriptor"))))))
// parm0-ctype = #S(POINTER-CTYPE :#1=KEY NIL :POINTEE #S(CXXRECORD-CTYPE :#1# "asttooling::internal::MatcherDescriptor" :NAME "MatcherDescriptor"))
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<asttooling::internal::MatcherDescriptor *>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__ExceptionEntry_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::ExceptionEntry>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::ExceptionEntry>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::ExceptionEntry" :#2# "ExceptionEntry")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::ExceptionEntry" :NAME "ExceptionEntry")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::ExceptionEntry>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Package_O>" :SPECIALIZER "class core::Package_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :SPECIALIZER "class core::Package_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ErrorContent_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<asttooling::ErrorContent>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::ErrorContent>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "asttooling::ErrorContent" :#2# "ErrorContent")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "asttooling::ErrorContent" :NAME "ErrorContent")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<asttooling::ErrorContent>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>"));} break;
case KIND_LISPALLOC_asttooling__DerivableSyntaxOnlyAction: {
    asttooling::DerivableSyntaxOnlyAction* obj_gc_safe = reinterpret_cast<asttooling::DerivableSyntaxOnlyAction*>(client);
    obj_gc_safe->~DerivableSyntaxOnlyAction();
    return;
} break;
case KIND_TEMPLATED_CLASSALLOC_core__BuiltinClosure: {
    core::BuiltinClosure* obj_gc_safe = reinterpret_cast<core::BuiltinClosure*>(client);
    obj_gc_safe->~BuiltinClosure();
} break;
case KIND_CLASSALLOC_llvmo__CompiledClosure: {
    llvmo::CompiledClosure* obj_gc_safe = reinterpret_cast<llvmo::CompiledClosure*>(client);
    obj_gc_safe->~CompiledClosure();
    return;
} break;
case KIND_CLASSALLOC_core__InterpretedClosure: {
    core::InterpretedClosure* obj_gc_safe = reinterpret_cast<core::InterpretedClosure*>(client);
    obj_gc_safe->~InterpretedClosure();
    return;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ParserValue_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<asttooling::ParserValue>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::ParserValue>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "asttooling::ParserValue" :#2# "ParserValue")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "asttooling::ParserValue" :NAME "ParserValue")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<asttooling::ParserValue>"));} break;
case KIND_CLASSALLOC_asttooling__internal__OverloadedMatcherDescriptor: {
    asttooling::internal::OverloadedMatcherDescriptor* obj_gc_safe = reinterpret_cast<asttooling::internal::OverloadedMatcherDescriptor*>(client);
    obj_gc_safe->~OverloadedMatcherDescriptor();
    return;
} break;
case KIND_LISPALLOC_asttooling__DerivableMatchCallback: {
    asttooling::DerivableMatchCallback* obj_gc_safe = reinterpret_cast<asttooling::DerivableMatchCallback*>(client);
    obj_gc_safe->~DerivableMatchCallback();
    return;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__SingleDispatchMethod_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::SingleDispatchMethod_O>" :SPECIALIZER "class core::SingleDispatchMethod_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::SingleDispatchMethod_O>" :SPECIALIZER "class core::SingleDispatchMethod_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Cons_O>" :SPECIALIZER "class core::Cons_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Cons_O>" :SPECIALIZER "class core::Cons_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Character_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Character_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Character_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Character_O>" :SPECIALIZER "class core::Character_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Character_O>" :SPECIALIZER "class core::Character_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::Character_O>>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__SequenceStepper_P_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::SequenceStepper *>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::SequenceStepper *>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(POINTER-CTYPE :#1# NIL :POINTEE #S(CXXRECORD-CTYPE :#1# "core::SequenceStepper" :#2# "SequenceStepper"))))))
// parm0-ctype = #S(POINTER-CTYPE :#1=KEY NIL :POINTEE #S(CXXRECORD-CTYPE :#1# "core::SequenceStepper" :NAME "SequenceStepper"))
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::SequenceStepper *>"));} break;
case KIND_CLASSALLOC_core__CoreExposer: {
    core::CoreExposer* obj_gc_safe = reinterpret_cast<core::CoreExposer*>(client);
    obj_gc_safe->~CoreExposer();
    return;
} break;
case KIND_CLASSALLOC_core__SingleDispatchGenericFunctionClosure: {
    core::SingleDispatchGenericFunctionClosure* obj_gc_safe = reinterpret_cast<core::SingleDispatchGenericFunctionClosure*>(client);
    obj_gc_safe->~SingleDispatchGenericFunctionClosure();
    return;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__SymbolStorage_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::SymbolStorage>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::SymbolStorage>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::SymbolStorage" :#2# "SymbolStorage")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::SymbolStorage" :NAME "SymbolStorage")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::SymbolStorage>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__OptionalArgument_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::OptionalArgument>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::OptionalArgument>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::OptionalArgument" :#2# "OptionalArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::OptionalArgument" :NAME "OptionalArgument")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::OptionalArgument>"));} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__0_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>" :#2=NAME "GCArray_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcarray.h:33:5" :#3=CTYPE #S(GCARRAY-MOVEABLE-CTYPE :#1# "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>" :#2# "GCArray_moveable" :ARGUMENTS (#S(#4=GC-TEMPLATE-ARGUMENT :#5=INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")) #S(#4# :#5# 1 :#3# NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>"));} break;
case KIND_LISPALLOC_asttooling__DerivableArgumentsAdjuster: {
    asttooling::DerivableArgumentsAdjuster* obj_gc_safe = reinterpret_cast<asttooling::DerivableArgumentsAdjuster*>(client);
    obj_gc_safe->~DerivableArgumentsAdjuster();
    return;
} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__3_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>" :#2=NAME "GCArray_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcarray.h:33:5" :#3=CTYPE #S(GCARRAY-MOVEABLE-CTYPE :#1# "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>" :#2# "GCArray_moveable" :ARGUMENTS (#S(#4=GC-TEMPLATE-ARGUMENT :#5=INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")) #S(#4# :#5# 1 :#3# NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>"));} break;
case KIND_CLASSALLOC_core__MacroClosure: {
    core::MacroClosure* obj_gc_safe = reinterpret_cast<core::MacroClosure*>(client);
    obj_gc_safe->~MacroClosure();
    return;
} break;
case KIND_LISPALLOC_asttooling__DerivableASTFrontendAction: {
    asttooling::DerivableASTFrontendAction* obj_gc_safe = reinterpret_cast<asttooling::DerivableASTFrontendAction*>(client);
    obj_gc_safe->~DerivableASTFrontendAction();
    return;
} break;
case KIND_CLASSALLOC_asttooling__internal__FixedArgCountMatcherDescriptor: {
    asttooling::internal::FixedArgCountMatcherDescriptor* obj_gc_safe = reinterpret_cast<asttooling::internal::FixedArgCountMatcherDescriptor*>(client);
    obj_gc_safe->~FixedArgCountMatcherDescriptor();
    return;
} break;
case KIND_CLASSALLOC_asttooling__internal__FreeFuncMatcherDescriptor: {
    asttooling::internal::FreeFuncMatcherDescriptor* obj_gc_safe = reinterpret_cast<asttooling::internal::FreeFuncMatcherDescriptor*>(client);
    obj_gc_safe->~FreeFuncMatcherDescriptor();
    return;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__AuxArgument_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::AuxArgument>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::AuxArgument>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::AuxArgument" :#2# "AuxArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::AuxArgument" :NAME "AuxArgument")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::AuxArgument>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__SymbolClassPair_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::SymbolClassPair>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::SymbolClassPair>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::SymbolClassPair" :#2# "SymbolClassPair")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::SymbolClassPair" :NAME "SymbolClassPair")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::SymbolClassPair>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__KeywordArgument_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::KeywordArgument>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::KeywordArgument>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::KeywordArgument" :#2# "KeywordArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::KeywordArgument" :NAME "KeywordArgument")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::KeywordArgument>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__CacheRecord_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::CacheRecord>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::CacheRecord>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::CacheRecord" :#2# "CacheRecord")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::CacheRecord" :NAME "CacheRecord")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::CacheRecord>"));} break;
case KIND_CLASSALLOC_core__InstanceClosure: {
    core::InstanceClosure* obj_gc_safe = reinterpret_cast<core::InstanceClosure*>(client);
    obj_gc_safe->~InstanceClosure();
    return;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__RequiredArgument_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::RequiredArgument>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::RequiredArgument>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::RequiredArgument" :#2# "RequiredArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::RequiredArgument" :NAME "RequiredArgument")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::RequiredArgument>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Symbol_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>"));} break;
case KIND_CLASSALLOC_asttooling__internal__VariadicOperatorMatcherDescriptor: {
    asttooling::internal::VariadicOperatorMatcherDescriptor* obj_gc_safe = reinterpret_cast<asttooling::internal::VariadicOperatorMatcherDescriptor*>(client);
    obj_gc_safe->~VariadicOperatorMatcherDescriptor();
    return;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_clbind__ClassRep_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<clbind::ClassRep_O>" :SPECIALIZER "class clbind::ClassRep_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<clbind::ClassRep_O>" :SPECIALIZER "class clbind::ClassRep_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__RegMap__SymbolMatcherDescriptorPair_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<asttooling::RegMap::SymbolMatcherDescriptorPair>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::RegMap::SymbolMatcherDescriptorPair>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "asttooling::RegMap::SymbolMatcherDescriptorPair" :#2# "SymbolMatcherDescriptorPair")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "asttooling::RegMap::SymbolMatcherDescriptorPair" :NAME "SymbolMatcherDescriptorPair")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<asttooling::RegMap::SymbolMatcherDescriptorPair>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Str_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Str_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Str_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Str_O>" :SPECIALIZER "class core::Str_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Str_O>" :SPECIALIZER "class core::Str_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::Str_O>>"));} break;
#endif // defined(GC_OBJ_FINALIZE)
#if defined(GC_OBJ_USES_FINALIZE)
case KIND_ROOTCLASSALLOC_core__Lisp_O: {
    core::Lisp_O* obj_gc_safe = reinterpret_cast<core::Lisp_O*>(client);
    obj_gc_safe->~Lisp_O();
    return;
} break;
case KIND_ROOTCLASSALLOC_asttooling__RegMap__RegistryMaps: {
    asttooling::RegMap::RegistryMaps* obj_gc_safe = reinterpret_cast<asttooling::RegMap::RegistryMaps*>(client);
    obj_gc_safe->~RegistryMaps();
    return;
} break;
case KIND_TEMPLATED_CLASSALLOC_core__Creator: {
    core::Creator* obj_gc_safe = reinterpret_cast<core::Creator*>(client);
    obj_gc_safe->~Creator();
} break;
case KIND_TEMPLATED_CLASSALLOC_clbind__ConstructorCreator: {
    clbind::ConstructorCreator* obj_gc_safe = reinterpret_cast<clbind::ConstructorCreator*>(client);
    obj_gc_safe->~ConstructorCreator();
} break;
case KIND_CLASSALLOC_core__InstanceCreator: {
    core::InstanceCreator* obj_gc_safe = reinterpret_cast<core::InstanceCreator*>(client);
    obj_gc_safe->~InstanceCreator();
    return;
} break;
case KIND_CLASSALLOC_clbind__DummyCreator: {
    clbind::DummyCreator* obj_gc_safe = reinterpret_cast<clbind::DummyCreator*>(client);
    obj_gc_safe->~DummyCreator();
    return;
} break;
case KIND_CLASSALLOC_core__SequenceStepper: {
    core::SequenceStepper* obj_gc_safe = reinterpret_cast<core::SequenceStepper*>(client);
    obj_gc_safe->~SequenceStepper();
    return;
} break;
case KIND_CLASSALLOC_core__ConsStepper: {
    core::ConsStepper* obj_gc_safe = reinterpret_cast<core::ConsStepper*>(client);
    obj_gc_safe->~ConsStepper();
    return;
} break;
case KIND_CLASSALLOC_core__VectorStepper: {
    core::VectorStepper* obj_gc_safe = reinterpret_cast<core::VectorStepper*>(client);
    obj_gc_safe->~VectorStepper();
    return;
} break;
case KIND_ROOTCLASSALLOC_clbind__detail__class_map: {
    clbind::detail::class_map* obj_gc_safe = reinterpret_cast<clbind::detail::class_map*>(client);
    obj_gc_safe->~class_map();
    return;
} break;
case KIND_BOOTSTRAP_core__T_O: {
    core::T_O* obj_gc_safe = reinterpret_cast<core::T_O*>(client);
    obj_gc_safe->~T_O();
    return;
} break;
case KIND_LISPALLOC_core__Cons_O: {
    core::Cons_O* obj_gc_safe = reinterpret_cast<core::Cons_O*>(client);
    obj_gc_safe->~Cons_O();
    return;
} break;
case KIND_LISPALLOC_cffi__Pointer_O: {
    cffi::Pointer_O* obj_gc_safe = reinterpret_cast<cffi::Pointer_O*>(client);
    obj_gc_safe->~Pointer_O();
    return;
} break;
case KIND_LISPALLOC_core__Stream_O: {
    core::Stream_O* obj_gc_safe = reinterpret_cast<core::Stream_O*>(client);
    obj_gc_safe->~Stream_O();
    return;
} break;
case KIND_LISPALLOC_core__AnsiStream_O: {
    core::AnsiStream_O* obj_gc_safe = reinterpret_cast<core::AnsiStream_O*>(client);
    obj_gc_safe->~AnsiStream_O();
    return;
} break;
case KIND_LISPALLOC_core__TwoWayStream_O: {
    core::TwoWayStream_O* obj_gc_safe = reinterpret_cast<core::TwoWayStream_O*>(client);
    obj_gc_safe->~TwoWayStream_O();
    return;
} break;
case KIND_LISPALLOC_core__FileStream_O: {
    core::FileStream_O* obj_gc_safe = reinterpret_cast<core::FileStream_O*>(client);
    obj_gc_safe->~FileStream_O();
    return;
} break;
case KIND_LISPALLOC_core__IOFileStream_O: {
    core::IOFileStream_O* obj_gc_safe = reinterpret_cast<core::IOFileStream_O*>(client);
    obj_gc_safe->~IOFileStream_O();
    return;
} break;
case KIND_LISPALLOC_core__IOStreamStream_O: {
    core::IOStreamStream_O* obj_gc_safe = reinterpret_cast<core::IOStreamStream_O*>(client);
    obj_gc_safe->~IOStreamStream_O();
    return;
} break;
case KIND_LISPALLOC_core__BroadcastStream_O: {
    core::BroadcastStream_O* obj_gc_safe = reinterpret_cast<core::BroadcastStream_O*>(client);
    obj_gc_safe->~BroadcastStream_O();
    return;
} break;
case KIND_LISPALLOC_core__StringStream_O: {
    core::StringStream_O* obj_gc_safe = reinterpret_cast<core::StringStream_O*>(client);
    obj_gc_safe->~StringStream_O();
    return;
} break;
case KIND_LISPALLOC_core__StringOutputStream_O: {
    core::StringOutputStream_O* obj_gc_safe = reinterpret_cast<core::StringOutputStream_O*>(client);
    obj_gc_safe->~StringOutputStream_O();
    return;
} break;
case KIND_LISPALLOC_core__StringInputStream_O: {
    core::StringInputStream_O* obj_gc_safe = reinterpret_cast<core::StringInputStream_O*>(client);
    obj_gc_safe->~StringInputStream_O();
    return;
} break;
case KIND_LISPALLOC_core__SynonymStream_O: {
    core::SynonymStream_O* obj_gc_safe = reinterpret_cast<core::SynonymStream_O*>(client);
    obj_gc_safe->~SynonymStream_O();
    return;
} break;
case KIND_LISPALLOC_core__EchoStream_O: {
    core::EchoStream_O* obj_gc_safe = reinterpret_cast<core::EchoStream_O*>(client);
    obj_gc_safe->~EchoStream_O();
    return;
} break;
case KIND_LISPALLOC_core__ConcatenatedStream_O: {
    core::ConcatenatedStream_O* obj_gc_safe = reinterpret_cast<core::ConcatenatedStream_O*>(client);
    obj_gc_safe->~ConcatenatedStream_O();
    return;
} break;
case KIND_LISPALLOC_core__Pathname_O: {
    core::Pathname_O* obj_gc_safe = reinterpret_cast<core::Pathname_O*>(client);
    obj_gc_safe->~Pathname_O();
    return;
} break;
case KIND_LISPALLOC_core__LogicalPathname_O: {
    core::LogicalPathname_O* obj_gc_safe = reinterpret_cast<core::LogicalPathname_O*>(client);
    obj_gc_safe->~LogicalPathname_O();
    return;
} break;
case KIND_LISPALLOC_core__Environment_O: {
    core::Environment_O* obj_gc_safe = reinterpret_cast<core::Environment_O*>(client);
    obj_gc_safe->~Environment_O();
    return;
} break;
case KIND_LISPALLOC_core__GlueEnvironment_O: {
    core::GlueEnvironment_O* obj_gc_safe = reinterpret_cast<core::GlueEnvironment_O*>(client);
    obj_gc_safe->~GlueEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__LexicalEnvironment_O: {
    core::LexicalEnvironment_O* obj_gc_safe = reinterpret_cast<core::LexicalEnvironment_O*>(client);
    obj_gc_safe->~LexicalEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__CompileTimeEnvironment_O: {
    core::CompileTimeEnvironment_O* obj_gc_safe = reinterpret_cast<core::CompileTimeEnvironment_O*>(client);
    obj_gc_safe->~CompileTimeEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__CatchEnvironment_O: {
    core::CatchEnvironment_O* obj_gc_safe = reinterpret_cast<core::CatchEnvironment_O*>(client);
    obj_gc_safe->~CatchEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__BlockEnvironment_O: {
    core::BlockEnvironment_O* obj_gc_safe = reinterpret_cast<core::BlockEnvironment_O*>(client);
    obj_gc_safe->~BlockEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__UnwindProtectEnvironment_O: {
    core::UnwindProtectEnvironment_O* obj_gc_safe = reinterpret_cast<core::UnwindProtectEnvironment_O*>(client);
    obj_gc_safe->~UnwindProtectEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__FunctionContainerEnvironment_O: {
    core::FunctionContainerEnvironment_O* obj_gc_safe = reinterpret_cast<core::FunctionContainerEnvironment_O*>(client);
    obj_gc_safe->~FunctionContainerEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__SymbolMacroletEnvironment_O: {
    core::SymbolMacroletEnvironment_O* obj_gc_safe = reinterpret_cast<core::SymbolMacroletEnvironment_O*>(client);
    obj_gc_safe->~SymbolMacroletEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__MacroletEnvironment_O: {
    core::MacroletEnvironment_O* obj_gc_safe = reinterpret_cast<core::MacroletEnvironment_O*>(client);
    obj_gc_safe->~MacroletEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__RuntimeVisibleEnvironment_O: {
    core::RuntimeVisibleEnvironment_O* obj_gc_safe = reinterpret_cast<core::RuntimeVisibleEnvironment_O*>(client);
    obj_gc_safe->~RuntimeVisibleEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__ValueEnvironment_O: {
    core::ValueEnvironment_O* obj_gc_safe = reinterpret_cast<core::ValueEnvironment_O*>(client);
    obj_gc_safe->~ValueEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__FunctionValueEnvironment_O: {
    core::FunctionValueEnvironment_O* obj_gc_safe = reinterpret_cast<core::FunctionValueEnvironment_O*>(client);
    obj_gc_safe->~FunctionValueEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__TagbodyEnvironment_O: {
    core::TagbodyEnvironment_O* obj_gc_safe = reinterpret_cast<core::TagbodyEnvironment_O*>(client);
    obj_gc_safe->~TagbodyEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__ActivationFrame_O: {
    core::ActivationFrame_O* obj_gc_safe = reinterpret_cast<core::ActivationFrame_O*>(client);
    obj_gc_safe->~ActivationFrame_O();
    return;
} break;
case KIND_LISPALLOC_core__TagbodyFrame_O: {
    core::TagbodyFrame_O* obj_gc_safe = reinterpret_cast<core::TagbodyFrame_O*>(client);
    obj_gc_safe->~TagbodyFrame_O();
    return;
} break;
case KIND_LISPALLOC_core__FunctionFrame_O: {
    core::FunctionFrame_O* obj_gc_safe = reinterpret_cast<core::FunctionFrame_O*>(client);
    obj_gc_safe->~FunctionFrame_O();
    return;
} break;
case KIND_LISPALLOC_core__ValueFrame_O: {
    core::ValueFrame_O* obj_gc_safe = reinterpret_cast<core::ValueFrame_O*>(client);
    obj_gc_safe->~ValueFrame_O();
    return;
} break;
case KIND_LISPALLOC_core__SingleDispatchMethod_O: {
    core::SingleDispatchMethod_O* obj_gc_safe = reinterpret_cast<core::SingleDispatchMethod_O*>(client);
    obj_gc_safe->~SingleDispatchMethod_O();
    return;
} break;
case KIND_LISPALLOC_core__SourceFileInfo_O: {
    core::SourceFileInfo_O* obj_gc_safe = reinterpret_cast<core::SourceFileInfo_O*>(client);
    obj_gc_safe->~SourceFileInfo_O();
    return;
} break;
case KIND_LISPALLOC_core__ObjectSet_O: {
    core::ObjectSet_O* obj_gc_safe = reinterpret_cast<core::ObjectSet_O*>(client);
    obj_gc_safe->~ObjectSet_O();
    return;
} break;
case KIND_LISPALLOC_core__DirectoryEntry_O: {
    core::DirectoryEntry_O* obj_gc_safe = reinterpret_cast<core::DirectoryEntry_O*>(client);
    obj_gc_safe->~DirectoryEntry_O();
    return;
} break;
case KIND_LISPALLOC_core__Pointer_O: {
    core::Pointer_O* obj_gc_safe = reinterpret_cast<core::Pointer_O*>(client);
    obj_gc_safe->~Pointer_O();
    return;
} break;
case KIND_LISPALLOC_core__Path_O: {
    core::Path_O* obj_gc_safe = reinterpret_cast<core::Path_O*>(client);
    obj_gc_safe->~Path_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DebugInfo_O: {
    llvmo::DebugInfo_O* obj_gc_safe = reinterpret_cast<llvmo::DebugInfo_O*>(client);
    obj_gc_safe->~DebugInfo_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DICompositeType_O: {
    llvmo::DICompositeType_O* obj_gc_safe = reinterpret_cast<llvmo::DICompositeType_O*>(client);
    obj_gc_safe->~DICompositeType_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DIBasicType_O: {
    llvmo::DIBasicType_O* obj_gc_safe = reinterpret_cast<llvmo::DIBasicType_O*>(client);
    obj_gc_safe->~DIBasicType_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DIType_O: {
    llvmo::DIType_O* obj_gc_safe = reinterpret_cast<llvmo::DIType_O*>(client);
    obj_gc_safe->~DIType_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DISubprogram_O: {
    llvmo::DISubprogram_O* obj_gc_safe = reinterpret_cast<llvmo::DISubprogram_O*>(client);
    obj_gc_safe->~DISubprogram_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DIArray_O: {
    llvmo::DIArray_O* obj_gc_safe = reinterpret_cast<llvmo::DIArray_O*>(client);
    obj_gc_safe->~DIArray_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DITypeArray_O: {
    llvmo::DITypeArray_O* obj_gc_safe = reinterpret_cast<llvmo::DITypeArray_O*>(client);
    obj_gc_safe->~DITypeArray_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DISubroutineType_O: {
    llvmo::DISubroutineType_O* obj_gc_safe = reinterpret_cast<llvmo::DISubroutineType_O*>(client);
    obj_gc_safe->~DISubroutineType_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DIScope_O: {
    llvmo::DIScope_O* obj_gc_safe = reinterpret_cast<llvmo::DIScope_O*>(client);
    obj_gc_safe->~DIScope_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DIFile_O: {
    llvmo::DIFile_O* obj_gc_safe = reinterpret_cast<llvmo::DIFile_O*>(client);
    obj_gc_safe->~DIFile_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DIDescriptor_O: {
    llvmo::DIDescriptor_O* obj_gc_safe = reinterpret_cast<llvmo::DIDescriptor_O*>(client);
    obj_gc_safe->~DIDescriptor_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DICompileUnit_O: {
    llvmo::DICompileUnit_O* obj_gc_safe = reinterpret_cast<llvmo::DICompileUnit_O*>(client);
    obj_gc_safe->~DICompileUnit_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DIDerivedType_O: {
    llvmo::DIDerivedType_O* obj_gc_safe = reinterpret_cast<llvmo::DIDerivedType_O*>(client);
    obj_gc_safe->~DIDerivedType_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DILexicalBlock_O: {
    llvmo::DILexicalBlock_O* obj_gc_safe = reinterpret_cast<llvmo::DILexicalBlock_O*>(client);
    obj_gc_safe->~DILexicalBlock_O();
    return;
} break;
case KIND_LISPALLOC_core__StructureObject_O: {
    core::StructureObject_O* obj_gc_safe = reinterpret_cast<core::StructureObject_O*>(client);
    obj_gc_safe->~StructureObject_O();
    return;
} break;
case KIND_LISPALLOC_core__LambdaListHandler_O: {
    core::LambdaListHandler_O* obj_gc_safe = reinterpret_cast<core::LambdaListHandler_O*>(client);
    obj_gc_safe->~LambdaListHandler_O();
    return;
} break;
case KIND_TEMPLATED_LISPALLOC_core__Iterator_O: {
    core::Iterator_O* obj_gc_safe = reinterpret_cast<core::Iterator_O*>(client);
    obj_gc_safe->~Iterator_O();
} break;
case KIND_LISPALLOC_core__DirectoryIterator_O: {
    core::DirectoryIterator_O* obj_gc_safe = reinterpret_cast<core::DirectoryIterator_O*>(client);
    obj_gc_safe->~DirectoryIterator_O();
    return;
} break;
case KIND_LISPALLOC_core__RecursiveDirectoryIterator_O: {
    core::RecursiveDirectoryIterator_O* obj_gc_safe = reinterpret_cast<core::RecursiveDirectoryIterator_O*>(client);
    obj_gc_safe->~RecursiveDirectoryIterator_O();
    return;
} break;
case KIND_LISPALLOC_core__PosixTimeDuration_O: {
    core::PosixTimeDuration_O* obj_gc_safe = reinterpret_cast<core::PosixTimeDuration_O*>(client);
    obj_gc_safe->~PosixTimeDuration_O();
    return;
} break;
case KIND_LISPALLOC_core__FileStatus_O: {
    core::FileStatus_O* obj_gc_safe = reinterpret_cast<core::FileStatus_O*>(client);
    obj_gc_safe->~FileStatus_O();
    return;
} break;
case KIND_LISPALLOC_clbind__ClassRegistry_O: {
    clbind::ClassRegistry_O* obj_gc_safe = reinterpret_cast<clbind::ClassRegistry_O*>(client);
    obj_gc_safe->~ClassRegistry_O();
    return;
} break;
case KIND_LISPALLOC_core__Archive_O: {
    core::Archive_O* obj_gc_safe = reinterpret_cast<core::Archive_O*>(client);
    obj_gc_safe->~Archive_O();
    return;
} break;
case KIND_LISPALLOC_core__SaveArchive_O: {
    core::SaveArchive_O* obj_gc_safe = reinterpret_cast<core::SaveArchive_O*>(client);
    obj_gc_safe->~SaveArchive_O();
    return;
} break;
case KIND_LISPALLOC_core__SexpSaveArchive_O: {
    core::SexpSaveArchive_O* obj_gc_safe = reinterpret_cast<core::SexpSaveArchive_O*>(client);
    obj_gc_safe->~SexpSaveArchive_O();
    return;
} break;
case KIND_LISPALLOC_core__LoadArchive_O: {
    core::LoadArchive_O* obj_gc_safe = reinterpret_cast<core::LoadArchive_O*>(client);
    obj_gc_safe->~LoadArchive_O();
    return;
} break;
case KIND_LISPALLOC_core__SexpLoadArchive_O: {
    core::SexpLoadArchive_O* obj_gc_safe = reinterpret_cast<core::SexpLoadArchive_O*>(client);
    obj_gc_safe->~SexpLoadArchive_O();
    return;
} break;
case KIND_LISPALLOC_core__RegexMatch_O: {
    core::RegexMatch_O* obj_gc_safe = reinterpret_cast<core::RegexMatch_O*>(client);
    obj_gc_safe->~RegexMatch_O();
    return;
} break;
case KIND_LISPALLOC_core__SourcePosInfo_O: {
    core::SourcePosInfo_O* obj_gc_safe = reinterpret_cast<core::SourcePosInfo_O*>(client);
    obj_gc_safe->~SourcePosInfo_O();
    return;
} break;
case KIND_LISPALLOC_core__Character_O: {
    core::Character_O* obj_gc_safe = reinterpret_cast<core::Character_O*>(client);
    obj_gc_safe->~Character_O();
    return;
} break;
case KIND_LISPALLOC_core__ExtendedChar_O: {
    core::ExtendedChar_O* obj_gc_safe = reinterpret_cast<core::ExtendedChar_O*>(client);
    obj_gc_safe->~ExtendedChar_O();
    return;
} break;
case KIND_LISPALLOC_core__BaseChar_O: {
    core::BaseChar_O* obj_gc_safe = reinterpret_cast<core::BaseChar_O*>(client);
    obj_gc_safe->~BaseChar_O();
    return;
} break;
case KIND_LISPALLOC_core__StandardChar_O: {
    core::StandardChar_O* obj_gc_safe = reinterpret_cast<core::StandardChar_O*>(client);
    obj_gc_safe->~StandardChar_O();
    return;
} break;
case KIND_LISPALLOC_core__MicroHeap_O: {
    core::MicroHeap_O* obj_gc_safe = reinterpret_cast<core::MicroHeap_O*>(client);
    obj_gc_safe->~MicroHeap_O();
    return;
} break;
case KIND_LISPALLOC_core__Function_O: {
    core::Function_O* obj_gc_safe = reinterpret_cast<core::Function_O*>(client);
    obj_gc_safe->~Function_O();
    return;
} break;
case KIND_LISPALLOC_core__SingleDispatchEffectiveMethodFunction_O: {
    core::SingleDispatchEffectiveMethodFunction_O* obj_gc_safe = reinterpret_cast<core::SingleDispatchEffectiveMethodFunction_O*>(client);
    obj_gc_safe->~SingleDispatchEffectiveMethodFunction_O();
    return;
} break;
case KIND_LISPALLOC_core__SingleDispatchGenericFunction_O: {
    core::SingleDispatchGenericFunction_O* obj_gc_safe = reinterpret_cast<core::SingleDispatchGenericFunction_O*>(client);
    obj_gc_safe->~SingleDispatchGenericFunction_O();
    return;
} break;
case KIND_LISPALLOC_core__CompiledFunction_O: {
    core::CompiledFunction_O* obj_gc_safe = reinterpret_cast<core::CompiledFunction_O*>(client);
    obj_gc_safe->~CompiledFunction_O();
    return;
} break;
case KIND_LISPALLOC_core__Instance_O: {
    core::Instance_O* obj_gc_safe = reinterpret_cast<core::Instance_O*>(client);
    obj_gc_safe->~Instance_O();
    return;
} break;
case KIND_LISPALLOC_core__SpecialForm_O: {
    core::SpecialForm_O* obj_gc_safe = reinterpret_cast<core::SpecialForm_O*>(client);
    obj_gc_safe->~SpecialForm_O();
    return;
} break;
case KIND_LISPALLOC_core__WeakKeyMapping_O: {
    core::WeakKeyMapping_O* obj_gc_safe = reinterpret_cast<core::WeakKeyMapping_O*>(client);
    obj_gc_safe->~WeakKeyMapping_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DebugLoc_O: {
    llvmo::DebugLoc_O* obj_gc_safe = reinterpret_cast<llvmo::DebugLoc_O*>(client);
    obj_gc_safe->~DebugLoc_O();
    return;
} break;
case KIND_LISPALLOC_core__Regex_O: {
    core::Regex_O* obj_gc_safe = reinterpret_cast<core::Regex_O*>(client);
    obj_gc_safe->~Regex_O();
    return;
} break;
case KIND_LISPALLOC_core__Package_O: {
    core::Package_O* obj_gc_safe = reinterpret_cast<core::Package_O*>(client);
    obj_gc_safe->~Package_O();
    return;
} break;
case KIND_LISPALLOC_core__CandoException_O: {
    core::CandoException_O* obj_gc_safe = reinterpret_cast<core::CandoException_O*>(client);
    obj_gc_safe->~CandoException_O();
    return;
} break;
case KIND_LISPALLOC_core__StringList_O: {
    core::StringList_O* obj_gc_safe = reinterpret_cast<core::StringList_O*>(client);
    obj_gc_safe->~StringList_O();
    return;
} break;
case KIND_LISPALLOC_core__IntArray_O: {
    core::IntArray_O* obj_gc_safe = reinterpret_cast<core::IntArray_O*>(client);
    obj_gc_safe->~IntArray_O();
    return;
} break;
case KIND_LISPALLOC_core__Number_O: {
    core::Number_O* obj_gc_safe = reinterpret_cast<core::Number_O*>(client);
    obj_gc_safe->~Number_O();
    return;
} break;
case KIND_LISPALLOC_core__Real_O: {
    core::Real_O* obj_gc_safe = reinterpret_cast<core::Real_O*>(client);
    obj_gc_safe->~Real_O();
    return;
} break;
case KIND_LISPALLOC_core__Float_O: {
    core::Float_O* obj_gc_safe = reinterpret_cast<core::Float_O*>(client);
    obj_gc_safe->~Float_O();
    return;
} break;
case KIND_LISPALLOC_core__ShortFloat_O: {
    core::ShortFloat_O* obj_gc_safe = reinterpret_cast<core::ShortFloat_O*>(client);
    obj_gc_safe->~ShortFloat_O();
    return;
} break;
case KIND_LISPALLOC_core__DoubleFloat_O: {
    core::DoubleFloat_O* obj_gc_safe = reinterpret_cast<core::DoubleFloat_O*>(client);
    obj_gc_safe->~DoubleFloat_O();
    return;
} break;
case KIND_LISPALLOC_core__SingleFloat_O: {
    core::SingleFloat_O* obj_gc_safe = reinterpret_cast<core::SingleFloat_O*>(client);
    obj_gc_safe->~SingleFloat_O();
    return;
} break;
case KIND_LISPALLOC_core__Rational_O: {
    core::Rational_O* obj_gc_safe = reinterpret_cast<core::Rational_O*>(client);
    obj_gc_safe->~Rational_O();
    return;
} break;
case KIND_LISPALLOC_core__Ratio_O: {
    core::Ratio_O* obj_gc_safe = reinterpret_cast<core::Ratio_O*>(client);
    obj_gc_safe->~Ratio_O();
    return;
} break;
case KIND_LISPALLOC_core__Integer_O: {
    core::Integer_O* obj_gc_safe = reinterpret_cast<core::Integer_O*>(client);
    obj_gc_safe->~Integer_O();
    return;
} break;
case KIND_LISPALLOC_core__Bignum_O: {
    core::Bignum_O* obj_gc_safe = reinterpret_cast<core::Bignum_O*>(client);
    obj_gc_safe->~Bignum_O();
    return;
} break;
case KIND_LISPALLOC_core__Fixnum_O: {
    core::Fixnum_O* obj_gc_safe = reinterpret_cast<core::Fixnum_O*>(client);
    obj_gc_safe->~Fixnum_O();
    return;
} break;
case KIND_LISPALLOC_core__Complex_O: {
    core::Complex_O* obj_gc_safe = reinterpret_cast<core::Complex_O*>(client);
    obj_gc_safe->~Complex_O();
    return;
} break;
case KIND_LISPALLOC_core__PosixTime_O: {
    core::PosixTime_O* obj_gc_safe = reinterpret_cast<core::PosixTime_O*>(client);
    obj_gc_safe->~PosixTime_O();
    return;
} break;
case KIND_LISPALLOC_core__ReadTable_O: {
    core::ReadTable_O* obj_gc_safe = reinterpret_cast<core::ReadTable_O*>(client);
    obj_gc_safe->~ReadTable_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__Attribute_O: {
    llvmo::Attribute_O* obj_gc_safe = reinterpret_cast<llvmo::Attribute_O*>(client);
    obj_gc_safe->~Attribute_O();
    return;
} break;
case KIND_LISPALLOC_core__Array_O: {
    core::Array_O* obj_gc_safe = reinterpret_cast<core::Array_O*>(client);
    obj_gc_safe->~Array_O();
    return;
} break;
case KIND_LISPALLOC_core__ArrayObjects_O: {
    core::ArrayObjects_O* obj_gc_safe = reinterpret_cast<core::ArrayObjects_O*>(client);
    obj_gc_safe->~ArrayObjects_O();
    return;
} break;
case KIND_LISPALLOC_core__Vector_O: {
    core::Vector_O* obj_gc_safe = reinterpret_cast<core::Vector_O*>(client);
    obj_gc_safe->~Vector_O();
    return;
} break;
case KIND_LISPALLOC_core__String_O: {
    core::String_O* obj_gc_safe = reinterpret_cast<core::String_O*>(client);
    obj_gc_safe->~String_O();
    return;
} break;
case KIND_BOOTSTRAP_core__Str_O: {
    core::Str_O* obj_gc_safe = reinterpret_cast<core::Str_O*>(client);
    obj_gc_safe->~Str_O();
    return;
} break;
case KIND_LISPALLOC_core__StrWithFillPtr_O: {
    core::StrWithFillPtr_O* obj_gc_safe = reinterpret_cast<core::StrWithFillPtr_O*>(client);
    obj_gc_safe->~StrWithFillPtr_O();
    return;
} break;
case KIND_LISPALLOC_core__VectorObjects_O: {
    core::VectorObjects_O* obj_gc_safe = reinterpret_cast<core::VectorObjects_O*>(client);
    obj_gc_safe->~VectorObjects_O();
    return;
} break;
case KIND_LISPALLOC_core__VectorObjectsWithFillPtr_O: {
    core::VectorObjectsWithFillPtr_O* obj_gc_safe = reinterpret_cast<core::VectorObjectsWithFillPtr_O*>(client);
    obj_gc_safe->~VectorObjectsWithFillPtr_O();
    return;
} break;
case KIND_LISPALLOC_core__BitVector_O: {
    core::BitVector_O* obj_gc_safe = reinterpret_cast<core::BitVector_O*>(client);
    obj_gc_safe->~BitVector_O();
    return;
} break;
case KIND_LISPALLOC_core__SimpleBitVector_O: {
    core::SimpleBitVector_O* obj_gc_safe = reinterpret_cast<core::SimpleBitVector_O*>(client);
    obj_gc_safe->~SimpleBitVector_O();
    return;
} break;
case KIND_LISPALLOC_core__SmallMap_O: {
    core::SmallMap_O* obj_gc_safe = reinterpret_cast<core::SmallMap_O*>(client);
    obj_gc_safe->~SmallMap_O();
    return;
} break;
case KIND_LISPALLOC_core__Reader_O: {
    core::Reader_O* obj_gc_safe = reinterpret_cast<core::Reader_O*>(client);
    obj_gc_safe->~Reader_O();
    return;
} break;
case KIND_LISPALLOC_core__ObjRef_O: {
    core::ObjRef_O* obj_gc_safe = reinterpret_cast<core::ObjRef_O*>(client);
    obj_gc_safe->~ObjRef_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__InsertPoint_O: {
    llvmo::InsertPoint_O* obj_gc_safe = reinterpret_cast<llvmo::InsertPoint_O*>(client);
    obj_gc_safe->~InsertPoint_O();
    return;
} break;
case KIND_LISPALLOC_core__SourceManager_O: {
    core::SourceManager_O* obj_gc_safe = reinterpret_cast<core::SourceManager_O*>(client);
    obj_gc_safe->~SourceManager_O();
    return;
} break;
case KIND_LISPALLOC_core__ExternalObject_O: {
    core::ExternalObject_O* obj_gc_safe = reinterpret_cast<core::ExternalObject_O*>(client);
    obj_gc_safe->~ExternalObject_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__Pass_O: {
    llvmo::Pass_O* obj_gc_safe = reinterpret_cast<llvmo::Pass_O*>(client);
    obj_gc_safe->~Pass_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__FunctionPass_O: {
    llvmo::FunctionPass_O* obj_gc_safe = reinterpret_cast<llvmo::FunctionPass_O*>(client);
    obj_gc_safe->~FunctionPass_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__ModulePass_O: {
    llvmo::ModulePass_O* obj_gc_safe = reinterpret_cast<llvmo::ModulePass_O*>(client);
    obj_gc_safe->~ModulePass_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__ImmutablePass_O: {
    llvmo::ImmutablePass_O* obj_gc_safe = reinterpret_cast<llvmo::ImmutablePass_O*>(client);
    obj_gc_safe->~ImmutablePass_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DataLayoutPass_O: {
    llvmo::DataLayoutPass_O* obj_gc_safe = reinterpret_cast<llvmo::DataLayoutPass_O*>(client);
    obj_gc_safe->~DataLayoutPass_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__IRBuilderBase_O: {
    llvmo::IRBuilderBase_O* obj_gc_safe = reinterpret_cast<llvmo::IRBuilderBase_O*>(client);
    obj_gc_safe->~IRBuilderBase_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__IRBuilder_O: {
    llvmo::IRBuilder_O* obj_gc_safe = reinterpret_cast<llvmo::IRBuilder_O*>(client);
    obj_gc_safe->~IRBuilder_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DIBuilder_O: {
    llvmo::DIBuilder_O* obj_gc_safe = reinterpret_cast<llvmo::DIBuilder_O*>(client);
    obj_gc_safe->~DIBuilder_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__ExecutionEngine_O: {
    llvmo::ExecutionEngine_O* obj_gc_safe = reinterpret_cast<llvmo::ExecutionEngine_O*>(client);
    obj_gc_safe->~ExecutionEngine_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__EngineBuilder_O: {
    llvmo::EngineBuilder_O* obj_gc_safe = reinterpret_cast<llvmo::EngineBuilder_O*>(client);
    obj_gc_safe->~EngineBuilder_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__APInt_O: {
    llvmo::APInt_O* obj_gc_safe = reinterpret_cast<llvmo::APInt_O*>(client);
    obj_gc_safe->~APInt_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__APFloat_O: {
    llvmo::APFloat_O* obj_gc_safe = reinterpret_cast<llvmo::APFloat_O*>(client);
    obj_gc_safe->~APFloat_O();
    return;
} break;
case KIND_LISPALLOC_core__ForeignData_O: {
    core::ForeignData_O* obj_gc_safe = reinterpret_cast<core::ForeignData_O*>(client);
    obj_gc_safe->~ForeignData_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__PassManagerBuilder_O: {
    llvmo::PassManagerBuilder_O* obj_gc_safe = reinterpret_cast<llvmo::PassManagerBuilder_O*>(client);
    obj_gc_safe->~PassManagerBuilder_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__PassManagerBase_O: {
    llvmo::PassManagerBase_O* obj_gc_safe = reinterpret_cast<llvmo::PassManagerBase_O*>(client);
    obj_gc_safe->~PassManagerBase_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__PassManager_O: {
    llvmo::PassManager_O* obj_gc_safe = reinterpret_cast<llvmo::PassManager_O*>(client);
    obj_gc_safe->~PassManager_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__FunctionPassManager_O: {
    llvmo::FunctionPassManager_O* obj_gc_safe = reinterpret_cast<llvmo::FunctionPassManager_O*>(client);
    obj_gc_safe->~FunctionPassManager_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__DataLayout_O: {
    llvmo::DataLayout_O* obj_gc_safe = reinterpret_cast<llvmo::DataLayout_O*>(client);
    obj_gc_safe->~DataLayout_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__Type_O: {
    llvmo::Type_O* obj_gc_safe = reinterpret_cast<llvmo::Type_O*>(client);
    obj_gc_safe->~Type_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__CompositeType_O: {
    llvmo::CompositeType_O* obj_gc_safe = reinterpret_cast<llvmo::CompositeType_O*>(client);
    obj_gc_safe->~CompositeType_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__SequentialType_O: {
    llvmo::SequentialType_O* obj_gc_safe = reinterpret_cast<llvmo::SequentialType_O*>(client);
    obj_gc_safe->~SequentialType_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__PointerType_O: {
    llvmo::PointerType_O* obj_gc_safe = reinterpret_cast<llvmo::PointerType_O*>(client);
    obj_gc_safe->~PointerType_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__VectorType_O: {
    llvmo::VectorType_O* obj_gc_safe = reinterpret_cast<llvmo::VectorType_O*>(client);
    obj_gc_safe->~VectorType_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__ArrayType_O: {
    llvmo::ArrayType_O* obj_gc_safe = reinterpret_cast<llvmo::ArrayType_O*>(client);
    obj_gc_safe->~ArrayType_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__StructType_O: {
    llvmo::StructType_O* obj_gc_safe = reinterpret_cast<llvmo::StructType_O*>(client);
    obj_gc_safe->~StructType_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__IntegerType_O: {
    llvmo::IntegerType_O* obj_gc_safe = reinterpret_cast<llvmo::IntegerType_O*>(client);
    obj_gc_safe->~IntegerType_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__FunctionType_O: {
    llvmo::FunctionType_O* obj_gc_safe = reinterpret_cast<llvmo::FunctionType_O*>(client);
    obj_gc_safe->~FunctionType_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__Linker_O: {
    llvmo::Linker_O* obj_gc_safe = reinterpret_cast<llvmo::Linker_O*>(client);
    obj_gc_safe->~Linker_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__Value_O: {
    llvmo::Value_O* obj_gc_safe = reinterpret_cast<llvmo::Value_O*>(client);
    obj_gc_safe->~Value_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__Argument_O: {
    llvmo::Argument_O* obj_gc_safe = reinterpret_cast<llvmo::Argument_O*>(client);
    obj_gc_safe->~Argument_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__MDString_O: {
    llvmo::MDString_O* obj_gc_safe = reinterpret_cast<llvmo::MDString_O*>(client);
    obj_gc_safe->~MDString_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__MDNode_O: {
    llvmo::MDNode_O* obj_gc_safe = reinterpret_cast<llvmo::MDNode_O*>(client);
    obj_gc_safe->~MDNode_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__BasicBlock_O: {
    llvmo::BasicBlock_O* obj_gc_safe = reinterpret_cast<llvmo::BasicBlock_O*>(client);
    obj_gc_safe->~BasicBlock_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__User_O: {
    llvmo::User_O* obj_gc_safe = reinterpret_cast<llvmo::User_O*>(client);
    obj_gc_safe->~User_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__Instruction_O: {
    llvmo::Instruction_O* obj_gc_safe = reinterpret_cast<llvmo::Instruction_O*>(client);
    obj_gc_safe->~Instruction_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__AtomicRMWInst_O: {
    llvmo::AtomicRMWInst_O* obj_gc_safe = reinterpret_cast<llvmo::AtomicRMWInst_O*>(client);
    obj_gc_safe->~AtomicRMWInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__StoreInst_O: {
    llvmo::StoreInst_O* obj_gc_safe = reinterpret_cast<llvmo::StoreInst_O*>(client);
    obj_gc_safe->~StoreInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__PHINode_O: {
    llvmo::PHINode_O* obj_gc_safe = reinterpret_cast<llvmo::PHINode_O*>(client);
    obj_gc_safe->~PHINode_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__AtomicCmpXchgInst_O: {
    llvmo::AtomicCmpXchgInst_O* obj_gc_safe = reinterpret_cast<llvmo::AtomicCmpXchgInst_O*>(client);
    obj_gc_safe->~AtomicCmpXchgInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__LandingPadInst_O: {
    llvmo::LandingPadInst_O* obj_gc_safe = reinterpret_cast<llvmo::LandingPadInst_O*>(client);
    obj_gc_safe->~LandingPadInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__UnaryInstruction_O: {
    llvmo::UnaryInstruction_O* obj_gc_safe = reinterpret_cast<llvmo::UnaryInstruction_O*>(client);
    obj_gc_safe->~UnaryInstruction_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__LoadInst_O: {
    llvmo::LoadInst_O* obj_gc_safe = reinterpret_cast<llvmo::LoadInst_O*>(client);
    obj_gc_safe->~LoadInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__VAArgInst_O: {
    llvmo::VAArgInst_O* obj_gc_safe = reinterpret_cast<llvmo::VAArgInst_O*>(client);
    obj_gc_safe->~VAArgInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__AllocaInst_O: {
    llvmo::AllocaInst_O* obj_gc_safe = reinterpret_cast<llvmo::AllocaInst_O*>(client);
    obj_gc_safe->~AllocaInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__TerminatorInst_O: {
    llvmo::TerminatorInst_O* obj_gc_safe = reinterpret_cast<llvmo::TerminatorInst_O*>(client);
    obj_gc_safe->~TerminatorInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__IndirectBrInst_O: {
    llvmo::IndirectBrInst_O* obj_gc_safe = reinterpret_cast<llvmo::IndirectBrInst_O*>(client);
    obj_gc_safe->~IndirectBrInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__UnreachableInst_O: {
    llvmo::UnreachableInst_O* obj_gc_safe = reinterpret_cast<llvmo::UnreachableInst_O*>(client);
    obj_gc_safe->~UnreachableInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__InvokeInst_O: {
    llvmo::InvokeInst_O* obj_gc_safe = reinterpret_cast<llvmo::InvokeInst_O*>(client);
    obj_gc_safe->~InvokeInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__ReturnInst_O: {
    llvmo::ReturnInst_O* obj_gc_safe = reinterpret_cast<llvmo::ReturnInst_O*>(client);
    obj_gc_safe->~ReturnInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__BranchInst_O: {
    llvmo::BranchInst_O* obj_gc_safe = reinterpret_cast<llvmo::BranchInst_O*>(client);
    obj_gc_safe->~BranchInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__ResumeInst_O: {
    llvmo::ResumeInst_O* obj_gc_safe = reinterpret_cast<llvmo::ResumeInst_O*>(client);
    obj_gc_safe->~ResumeInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__SwitchInst_O: {
    llvmo::SwitchInst_O* obj_gc_safe = reinterpret_cast<llvmo::SwitchInst_O*>(client);
    obj_gc_safe->~SwitchInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__FenceInst_O: {
    llvmo::FenceInst_O* obj_gc_safe = reinterpret_cast<llvmo::FenceInst_O*>(client);
    obj_gc_safe->~FenceInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__CallInst_O: {
    llvmo::CallInst_O* obj_gc_safe = reinterpret_cast<llvmo::CallInst_O*>(client);
    obj_gc_safe->~CallInst_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__Constant_O: {
    llvmo::Constant_O* obj_gc_safe = reinterpret_cast<llvmo::Constant_O*>(client);
    obj_gc_safe->~Constant_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__ConstantDataSequential_O: {
    llvmo::ConstantDataSequential_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantDataSequential_O*>(client);
    obj_gc_safe->~ConstantDataSequential_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__ConstantDataArray_O: {
    llvmo::ConstantDataArray_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantDataArray_O*>(client);
    obj_gc_safe->~ConstantDataArray_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__ConstantStruct_O: {
    llvmo::ConstantStruct_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantStruct_O*>(client);
    obj_gc_safe->~ConstantStruct_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__BlockAddress_O: {
    llvmo::BlockAddress_O* obj_gc_safe = reinterpret_cast<llvmo::BlockAddress_O*>(client);
    obj_gc_safe->~BlockAddress_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__ConstantPointerNull_O: {
    llvmo::ConstantPointerNull_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantPointerNull_O*>(client);
    obj_gc_safe->~ConstantPointerNull_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__ConstantArray_O: {
    llvmo::ConstantArray_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantArray_O*>(client);
    obj_gc_safe->~ConstantArray_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__ConstantFP_O: {
    llvmo::ConstantFP_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantFP_O*>(client);
    obj_gc_safe->~ConstantFP_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__GlobalValue_O: {
    llvmo::GlobalValue_O* obj_gc_safe = reinterpret_cast<llvmo::GlobalValue_O*>(client);
    obj_gc_safe->~GlobalValue_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__Function_O: {
    llvmo::Function_O* obj_gc_safe = reinterpret_cast<llvmo::Function_O*>(client);
    obj_gc_safe->~Function_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__GlobalVariable_O: {
    llvmo::GlobalVariable_O* obj_gc_safe = reinterpret_cast<llvmo::GlobalVariable_O*>(client);
    obj_gc_safe->~GlobalVariable_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__ConstantExpr_O: {
    llvmo::ConstantExpr_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantExpr_O*>(client);
    obj_gc_safe->~ConstantExpr_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__UndefValue_O: {
    llvmo::UndefValue_O* obj_gc_safe = reinterpret_cast<llvmo::UndefValue_O*>(client);
    obj_gc_safe->~UndefValue_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__ConstantInt_O: {
    llvmo::ConstantInt_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantInt_O*>(client);
    obj_gc_safe->~ConstantInt_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__TargetMachine_O: {
    llvmo::TargetMachine_O* obj_gc_safe = reinterpret_cast<llvmo::TargetMachine_O*>(client);
    obj_gc_safe->~TargetMachine_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__LLVMContext_O: {
    llvmo::LLVMContext_O* obj_gc_safe = reinterpret_cast<llvmo::LLVMContext_O*>(client);
    obj_gc_safe->~LLVMContext_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__Module_O: {
    llvmo::Module_O* obj_gc_safe = reinterpret_cast<llvmo::Module_O*>(client);
    obj_gc_safe->~Module_O();
    return;
} break;
case KIND_LISPALLOC_llvmo__NamedMDNode_O: {
    llvmo::NamedMDNode_O* obj_gc_safe = reinterpret_cast<llvmo::NamedMDNode_O*>(client);
    obj_gc_safe->~NamedMDNode_O();
    return;
} break;
case KIND_LISPALLOC_core__SNode_O: {
    core::SNode_O* obj_gc_safe = reinterpret_cast<core::SNode_O*>(client);
    obj_gc_safe->~SNode_O();
    return;
} break;
case KIND_LISPALLOC_core__BranchSNode_O: {
    core::BranchSNode_O* obj_gc_safe = reinterpret_cast<core::BranchSNode_O*>(client);
    obj_gc_safe->~BranchSNode_O();
    return;
} break;
case KIND_LISPALLOC_core__LeafSNode_O: {
    core::LeafSNode_O* obj_gc_safe = reinterpret_cast<core::LeafSNode_O*>(client);
    obj_gc_safe->~LeafSNode_O();
    return;
} break;
case KIND_LISPALLOC_core__LoadTimeValues_O: {
    core::LoadTimeValues_O* obj_gc_safe = reinterpret_cast<core::LoadTimeValues_O*>(client);
    obj_gc_safe->~LoadTimeValues_O();
    return;
} break;
case KIND_LISPALLOC_core__LightUserData_O: {
    core::LightUserData_O* obj_gc_safe = reinterpret_cast<core::LightUserData_O*>(client);
    obj_gc_safe->~LightUserData_O();
    return;
} break;
case KIND_LISPALLOC_core__UserData_O: {
    core::UserData_O* obj_gc_safe = reinterpret_cast<core::UserData_O*>(client);
    obj_gc_safe->~UserData_O();
    return;
} break;
case KIND_LISPALLOC_core__WeakHashTable_O: {
    core::WeakHashTable_O* obj_gc_safe = reinterpret_cast<core::WeakHashTable_O*>(client);
    obj_gc_safe->~WeakHashTable_O();
    return;
} break;
case KIND_LISPALLOC_core__WeakKeyHashTable_O: {
    core::WeakKeyHashTable_O* obj_gc_safe = reinterpret_cast<core::WeakKeyHashTable_O*>(client);
    obj_gc_safe->~WeakKeyHashTable_O();
    return;
} break;
case KIND_TEMPLATED_LISPALLOC_core__WrappedPointer_O: {
    core::WrappedPointer_O* obj_gc_safe = reinterpret_cast<core::WrappedPointer_O*>(client);
    obj_gc_safe->~WrappedPointer_O();
} break;
case KIND_BOOTSTRAP_core__StandardObject_O: {
    core::StandardObject_O* obj_gc_safe = reinterpret_cast<core::StandardObject_O*>(client);
    obj_gc_safe->~StandardObject_O();
    return;
} break;
case KIND_BOOTSTRAP_core__Metaobject_O: {
    core::Metaobject_O* obj_gc_safe = reinterpret_cast<core::Metaobject_O*>(client);
    obj_gc_safe->~Metaobject_O();
    return;
} break;
case KIND_BOOTSTRAP_core__Specializer_O: {
    core::Specializer_O* obj_gc_safe = reinterpret_cast<core::Specializer_O*>(client);
    obj_gc_safe->~Specializer_O();
    return;
} break;
case KIND_BOOTSTRAP_core__Class_O: {
    core::Class_O* obj_gc_safe = reinterpret_cast<core::Class_O*>(client);
    obj_gc_safe->~Class_O();
    return;
} break;
case KIND_LISPALLOC_core__ForwardReferencedClass_O: {
    core::ForwardReferencedClass_O* obj_gc_safe = reinterpret_cast<core::ForwardReferencedClass_O*>(client);
    obj_gc_safe->~ForwardReferencedClass_O();
    return;
} break;
case KIND_BOOTSTRAP_core__StdClass_O: {
    core::StdClass_O* obj_gc_safe = reinterpret_cast<core::StdClass_O*>(client);
    obj_gc_safe->~StdClass_O();
    return;
} break;
case KIND_BOOTSTRAP_core__StandardClass_O: {
    core::StandardClass_O* obj_gc_safe = reinterpret_cast<core::StandardClass_O*>(client);
    obj_gc_safe->~StandardClass_O();
    return;
} break;
case KIND_LISPALLOC_core__FuncallableStandardClass_O: {
    core::FuncallableStandardClass_O* obj_gc_safe = reinterpret_cast<core::FuncallableStandardClass_O*>(client);
    obj_gc_safe->~FuncallableStandardClass_O();
    return;
} break;
case KIND_BOOTSTRAP_core__BuiltInClass_O: {
    core::BuiltInClass_O* obj_gc_safe = reinterpret_cast<core::BuiltInClass_O*>(client);
    obj_gc_safe->~BuiltInClass_O();
    return;
} break;
case KIND_LISPALLOC_clbind__ClassRep_O: {
    clbind::ClassRep_O* obj_gc_safe = reinterpret_cast<clbind::ClassRep_O*>(client);
    obj_gc_safe->~ClassRep_O();
    return;
} break;
case KIND_BOOTSTRAP_core__StructureClass_O: {
    core::StructureClass_O* obj_gc_safe = reinterpret_cast<core::StructureClass_O*>(client);
    obj_gc_safe->~StructureClass_O();
    return;
} break;
case KIND_LISPALLOC_asttooling__AstVisitor_O: {
    asttooling::AstVisitor_O* obj_gc_safe = reinterpret_cast<asttooling::AstVisitor_O*>(client);
    obj_gc_safe->~AstVisitor_O();
    return;
} break;
case KIND_BOOTSTRAP_core__Symbol_O: {
    core::Symbol_O* obj_gc_safe = reinterpret_cast<core::Symbol_O*>(client);
    obj_gc_safe->~Symbol_O();
    return;
} break;
case KIND_LISPALLOC_core__Null_O: {
    core::Null_O* obj_gc_safe = reinterpret_cast<core::Null_O*>(client);
    obj_gc_safe->~Null_O();
    return;
} break;
case KIND_LISPALLOC_core__StringSet_O: {
    core::StringSet_O* obj_gc_safe = reinterpret_cast<core::StringSet_O*>(client);
    obj_gc_safe->~StringSet_O();
    return;
} break;
case KIND_LISPALLOC_core__SymbolToEnumConverter_O: {
    core::SymbolToEnumConverter_O* obj_gc_safe = reinterpret_cast<core::SymbolToEnumConverter_O*>(client);
    obj_gc_safe->~SymbolToEnumConverter_O();
    return;
} break;
case KIND_LISPALLOC_core__MultiStringBuffer_O: {
    core::MultiStringBuffer_O* obj_gc_safe = reinterpret_cast<core::MultiStringBuffer_O*>(client);
    obj_gc_safe->~MultiStringBuffer_O();
    return;
} break;
case KIND_LISPALLOC_core__SymbolList_O: {
    core::SymbolList_O* obj_gc_safe = reinterpret_cast<core::SymbolList_O*>(client);
    obj_gc_safe->~SymbolList_O();
    return;
} break;
case KIND_LISPALLOC_core__WeakPointer_O: {
    core::WeakPointer_O* obj_gc_safe = reinterpret_cast<core::WeakPointer_O*>(client);
    obj_gc_safe->~WeakPointer_O();
    return;
} break;
case KIND_LISPALLOC_core__HashTable_O: {
    core::HashTable_O* obj_gc_safe = reinterpret_cast<core::HashTable_O*>(client);
    obj_gc_safe->~HashTable_O();
    return;
} break;
case KIND_LISPALLOC_core__HashTableEqual_O: {
    core::HashTableEqual_O* obj_gc_safe = reinterpret_cast<core::HashTableEqual_O*>(client);
    obj_gc_safe->~HashTableEqual_O();
    return;
} break;
case KIND_LISPALLOC_core__HashTableEqualp_O: {
    core::HashTableEqualp_O* obj_gc_safe = reinterpret_cast<core::HashTableEqualp_O*>(client);
    obj_gc_safe->~HashTableEqualp_O();
    return;
} break;
case KIND_LISPALLOC_core__HashTableEql_O: {
    core::HashTableEql_O* obj_gc_safe = reinterpret_cast<core::HashTableEql_O*>(client);
    obj_gc_safe->~HashTableEql_O();
    return;
} break;
case KIND_LISPALLOC_core__HashTableEq_O: {
    core::HashTableEq_O* obj_gc_safe = reinterpret_cast<core::HashTableEq_O*>(client);
    obj_gc_safe->~HashTableEq_O();
    return;
} break;
case KIND_LISPALLOC_core__SymbolSet_O: {
    core::SymbolSet_O* obj_gc_safe = reinterpret_cast<core::SymbolSet_O*>(client);
    obj_gc_safe->~SymbolSet_O();
    return;
} break;
case KIND_LISPALLOC_core__Binder_O: {
    core::Binder_O* obj_gc_safe = reinterpret_cast<core::Binder_O*>(client);
    obj_gc_safe->~Binder_O();
    return;
} break;
case KIND_CLASSALLOC_core__Cache: {
    core::Cache* obj_gc_safe = reinterpret_cast<core::Cache*>(client);
    obj_gc_safe->~Cache();
    return;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__DynamicBinding_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::DynamicBinding>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::DynamicBinding>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::DynamicBinding" :#2# "DynamicBinding")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::DynamicBinding" :NAME "DynamicBinding")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::DynamicBinding>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__SourceFileInfo_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::SourceFileInfo_O>" :SPECIALIZER "class core::SourceFileInfo_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::SourceFileInfo_O>" :SPECIALIZER "class core::SourceFileInfo_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>"));} break;
case KIND_LISPALLOC_asttooling__DerivableFrontendActionFactory: {
    asttooling::DerivableFrontendActionFactory* obj_gc_safe = reinterpret_cast<asttooling::DerivableFrontendActionFactory*>(client);
    obj_gc_safe->~DerivableFrontendActionFactory();
    return;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ContextFrame_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<asttooling::ContextFrame>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::ContextFrame>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "asttooling::ContextFrame" :#2# "ContextFrame")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "asttooling::ContextFrame" :NAME "ContextFrame")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<asttooling::ContextFrame>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__Message_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<asttooling::Message>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::Message>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "asttooling::Message" :#2# "Message")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "asttooling::Message" :NAME "Message")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<asttooling::Message>"));} break;
case KIND_GCSTRING_gctools__GCString_moveable_char_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCString_moveable<char>" :#2=NAME "GCString_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcstring.h:40:5" :#3=CTYPE #S(GCSTRING-MOVEABLE-CTYPE :#1# "gctools::GCString_moveable<char>" :#2# "GCString_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(UNCLASSIFIED-CTYPE :#1# "char")))))
// parm0-ctype = #S(UNCLASSIFIED-CTYPE :KEY "char")
    THROW_HARD_ERROR(BF("Should never finalize gcstrings gctools::GCString_moveable<char>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__T_O__gctools__smart_ptr_core__T_O___: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>" :#2# "GCVector_moveable" :#4=ARGUMENTS (#S(#5=GC-TEMPLATE-ARGUMENT :#6=INDEX 0 :#3# #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1# "std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>" :#2# NIL :#4# (#S(#5# :#6# 0 :#3# #S(#7=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :#8=SPECIALIZER "class core::T_O")) #S(#5# :#6# 1 :#3# #S(#7# :#1# "gctools::smart_ptr<core::T_O>" :#8# "class core::T_O"))))))))
// parm0-ctype = #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :#1=KEY "std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>" :NAME NIL :ARGUMENTS (#S(#2=GC-TEMPLATE-ARGUMENT :#3=INDEX 0 :#4=CTYPE #S(#5=SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :#6=SPECIALIZER "class core::T_O")) #S(#2# :#3# 1 :#4# #S(#5# :#1# "gctools::smart_ptr<core::T_O>" :#6# "class core::T_O"))))
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__internal__MatcherDescriptor_P_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<asttooling::internal::MatcherDescriptor *>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::internal::MatcherDescriptor *>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(POINTER-CTYPE :#1# NIL :POINTEE #S(CXXRECORD-CTYPE :#1# "asttooling::internal::MatcherDescriptor" :#2# "MatcherDescriptor"))))))
// parm0-ctype = #S(POINTER-CTYPE :#1=KEY NIL :POINTEE #S(CXXRECORD-CTYPE :#1# "asttooling::internal::MatcherDescriptor" :NAME "MatcherDescriptor"))
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<asttooling::internal::MatcherDescriptor *>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__ExceptionEntry_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::ExceptionEntry>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::ExceptionEntry>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::ExceptionEntry" :#2# "ExceptionEntry")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::ExceptionEntry" :NAME "ExceptionEntry")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::ExceptionEntry>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Package_O>" :SPECIALIZER "class core::Package_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :SPECIALIZER "class core::Package_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ErrorContent_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<asttooling::ErrorContent>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::ErrorContent>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "asttooling::ErrorContent" :#2# "ErrorContent")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "asttooling::ErrorContent" :NAME "ErrorContent")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<asttooling::ErrorContent>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>"));} break;
case KIND_LISPALLOC_asttooling__DerivableSyntaxOnlyAction: {
    asttooling::DerivableSyntaxOnlyAction* obj_gc_safe = reinterpret_cast<asttooling::DerivableSyntaxOnlyAction*>(client);
    obj_gc_safe->~DerivableSyntaxOnlyAction();
    return;
} break;
case KIND_TEMPLATED_CLASSALLOC_core__BuiltinClosure: {
    core::BuiltinClosure* obj_gc_safe = reinterpret_cast<core::BuiltinClosure*>(client);
    obj_gc_safe->~BuiltinClosure();
} break;
case KIND_CLASSALLOC_llvmo__CompiledClosure: {
    llvmo::CompiledClosure* obj_gc_safe = reinterpret_cast<llvmo::CompiledClosure*>(client);
    obj_gc_safe->~CompiledClosure();
    return;
} break;
case KIND_CLASSALLOC_core__InterpretedClosure: {
    core::InterpretedClosure* obj_gc_safe = reinterpret_cast<core::InterpretedClosure*>(client);
    obj_gc_safe->~InterpretedClosure();
    return;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__ParserValue_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<asttooling::ParserValue>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::ParserValue>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "asttooling::ParserValue" :#2# "ParserValue")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "asttooling::ParserValue" :NAME "ParserValue")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<asttooling::ParserValue>"));} break;
case KIND_CLASSALLOC_asttooling__internal__OverloadedMatcherDescriptor: {
    asttooling::internal::OverloadedMatcherDescriptor* obj_gc_safe = reinterpret_cast<asttooling::internal::OverloadedMatcherDescriptor*>(client);
    obj_gc_safe->~OverloadedMatcherDescriptor();
    return;
} break;
case KIND_LISPALLOC_asttooling__DerivableMatchCallback: {
    asttooling::DerivableMatchCallback* obj_gc_safe = reinterpret_cast<asttooling::DerivableMatchCallback*>(client);
    obj_gc_safe->~DerivableMatchCallback();
    return;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__SingleDispatchMethod_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::SingleDispatchMethod_O>" :SPECIALIZER "class core::SingleDispatchMethod_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::SingleDispatchMethod_O>" :SPECIALIZER "class core::SingleDispatchMethod_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Cons_O>" :SPECIALIZER "class core::Cons_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Cons_O>" :SPECIALIZER "class core::Cons_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Character_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Character_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Character_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Character_O>" :SPECIALIZER "class core::Character_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Character_O>" :SPECIALIZER "class core::Character_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::Character_O>>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__SequenceStepper_P_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::SequenceStepper *>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::SequenceStepper *>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(POINTER-CTYPE :#1# NIL :POINTEE #S(CXXRECORD-CTYPE :#1# "core::SequenceStepper" :#2# "SequenceStepper"))))))
// parm0-ctype = #S(POINTER-CTYPE :#1=KEY NIL :POINTEE #S(CXXRECORD-CTYPE :#1# "core::SequenceStepper" :NAME "SequenceStepper"))
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::SequenceStepper *>"));} break;
case KIND_CLASSALLOC_core__CoreExposer: {
    core::CoreExposer* obj_gc_safe = reinterpret_cast<core::CoreExposer*>(client);
    obj_gc_safe->~CoreExposer();
    return;
} break;
case KIND_CLASSALLOC_core__SingleDispatchGenericFunctionClosure: {
    core::SingleDispatchGenericFunctionClosure* obj_gc_safe = reinterpret_cast<core::SingleDispatchGenericFunctionClosure*>(client);
    obj_gc_safe->~SingleDispatchGenericFunctionClosure();
    return;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__SymbolStorage_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::SymbolStorage>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::SymbolStorage>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::SymbolStorage" :#2# "SymbolStorage")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::SymbolStorage" :NAME "SymbolStorage")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::SymbolStorage>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__OptionalArgument_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::OptionalArgument>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::OptionalArgument>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::OptionalArgument" :#2# "OptionalArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::OptionalArgument" :NAME "OptionalArgument")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::OptionalArgument>"));} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__0_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>" :#2=NAME "GCArray_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcarray.h:33:5" :#3=CTYPE #S(GCARRAY-MOVEABLE-CTYPE :#1# "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>" :#2# "GCArray_moveable" :ARGUMENTS (#S(#4=GC-TEMPLATE-ARGUMENT :#5=INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")) #S(#4# :#5# 1 :#3# NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>"));} break;
case KIND_LISPALLOC_asttooling__DerivableArgumentsAdjuster: {
    asttooling::DerivableArgumentsAdjuster* obj_gc_safe = reinterpret_cast<asttooling::DerivableArgumentsAdjuster*>(client);
    obj_gc_safe->~DerivableArgumentsAdjuster();
    return;
} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__3_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>" :#2=NAME "GCArray_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcarray.h:33:5" :#3=CTYPE #S(GCARRAY-MOVEABLE-CTYPE :#1# "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>" :#2# "GCArray_moveable" :ARGUMENTS (#S(#4=GC-TEMPLATE-ARGUMENT :#5=INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")) #S(#4# :#5# 1 :#3# NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>"));} break;
case KIND_CLASSALLOC_core__MacroClosure: {
    core::MacroClosure* obj_gc_safe = reinterpret_cast<core::MacroClosure*>(client);
    obj_gc_safe->~MacroClosure();
    return;
} break;
case KIND_LISPALLOC_asttooling__DerivableASTFrontendAction: {
    asttooling::DerivableASTFrontendAction* obj_gc_safe = reinterpret_cast<asttooling::DerivableASTFrontendAction*>(client);
    obj_gc_safe->~DerivableASTFrontendAction();
    return;
} break;
case KIND_CLASSALLOC_asttooling__internal__FixedArgCountMatcherDescriptor: {
    asttooling::internal::FixedArgCountMatcherDescriptor* obj_gc_safe = reinterpret_cast<asttooling::internal::FixedArgCountMatcherDescriptor*>(client);
    obj_gc_safe->~FixedArgCountMatcherDescriptor();
    return;
} break;
case KIND_CLASSALLOC_asttooling__internal__FreeFuncMatcherDescriptor: {
    asttooling::internal::FreeFuncMatcherDescriptor* obj_gc_safe = reinterpret_cast<asttooling::internal::FreeFuncMatcherDescriptor*>(client);
    obj_gc_safe->~FreeFuncMatcherDescriptor();
    return;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__AuxArgument_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::AuxArgument>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::AuxArgument>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::AuxArgument" :#2# "AuxArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::AuxArgument" :NAME "AuxArgument")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::AuxArgument>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__SymbolClassPair_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::SymbolClassPair>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::SymbolClassPair>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::SymbolClassPair" :#2# "SymbolClassPair")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::SymbolClassPair" :NAME "SymbolClassPair")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::SymbolClassPair>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__KeywordArgument_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::KeywordArgument>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::KeywordArgument>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::KeywordArgument" :#2# "KeywordArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::KeywordArgument" :NAME "KeywordArgument")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::KeywordArgument>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__CacheRecord_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::CacheRecord>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::CacheRecord>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::CacheRecord" :#2# "CacheRecord")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::CacheRecord" :NAME "CacheRecord")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::CacheRecord>"));} break;
case KIND_CLASSALLOC_core__InstanceClosure: {
    core::InstanceClosure* obj_gc_safe = reinterpret_cast<core::InstanceClosure*>(client);
    obj_gc_safe->~InstanceClosure();
    return;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__RequiredArgument_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<core::RequiredArgument>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<core::RequiredArgument>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "core::RequiredArgument" :#2# "RequiredArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::RequiredArgument" :NAME "RequiredArgument")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::RequiredArgument>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Symbol_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>"));} break;
case KIND_CLASSALLOC_asttooling__internal__VariadicOperatorMatcherDescriptor: {
    asttooling::internal::VariadicOperatorMatcherDescriptor* obj_gc_safe = reinterpret_cast<asttooling::internal::VariadicOperatorMatcherDescriptor*>(client);
    obj_gc_safe->~VariadicOperatorMatcherDescriptor();
    return;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_clbind__ClassRep_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<clbind::ClassRep_O>" :SPECIALIZER "class clbind::ClassRep_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<clbind::ClassRep_O>" :SPECIALIZER "class clbind::ClassRep_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_asttooling__RegMap__SymbolMatcherDescriptorPair_: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<asttooling::RegMap::SymbolMatcherDescriptorPair>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<asttooling::RegMap::SymbolMatcherDescriptorPair>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(CXXRECORD-CTYPE :#1# "asttooling::RegMap::SymbolMatcherDescriptorPair" :#2# "SymbolMatcherDescriptorPair")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "asttooling::RegMap::SymbolMatcherDescriptorPair" :NAME "SymbolMatcherDescriptorPair")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<asttooling::RegMap::SymbolMatcherDescriptorPair>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Str_O__: {
// processing #S(CONTAINERALLOC :#1=KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Str_O>>" :#2=NAME "GCVector_moveable" :LOCATION "/home/meister/Development/clasp/src/gctools/gcvector.h:34:5" :#3=CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :#1# "gctools::GCVector_moveable<gctools::smart_ptr<core::Str_O>>" :#2# "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :INDEX 0 :#3# #S(SMART-PTR-CTYPE :#1# "gctools::smart_ptr<core::Str_O>" :SPECIALIZER "class core::Str_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Str_O>" :SPECIALIZER "class core::Str_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::Str_O>>"));} break;
#endif // defined(GC_OBJ_USES_FINALIZE)
#if defined(GC_GLOBALS)
 SMART_PTR_FIX(core::Pointer_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::ConstantArray_O::___staticClass);
 POINTER_FIX(core::StructureClass_O::static_creator);
 POINTER_FIX(llvmo::FunctionType_O::static_creator);
 SMART_PTR_FIX(core::FunctionValueEnvironment_O::___staticClass);
 POINTER_FIX(core::SingleDispatchEffectiveMethodFunction_O::static_creator);
 SMART_PTR_FIX(core::StructureClass_O::___staticClassSymbol);
 POINTER_FIX(core::CompiledFunction_O::static_creator);
 POINTER_FIX(core::SymbolToEnumConverter_O::static_creator);
 SMART_PTR_FIX(core::Environment_O::___staticClass);
 SMART_PTR_FIX(core::BlockEnvironment_O::___staticClass);
 POINTER_FIX(globalRunTimeValues);
 SMART_PTR_FIX(llvmo::AtomicCmpXchgInst_O::___staticClass);
 POINTER_FIX(clbind::globalClassMap);
 SMART_PTR_FIX(core::HashTableEqual_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::CallInst_O::___staticClassSymbol);
 POINTER_FIX(core::Reader_O::static_creator);
 SMART_PTR_FIX(llvmo::FenceInst_O::___staticClassSymbol);
 POINTER_FIX(llvmo::Pass_O::static_creator);
 SMART_PTR_FIX(core::ConcatenatedStream_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::DIScope_O::___staticClassSymbol);
 POINTER_FIX(llvmo::StructType_O::static_creator);
 SMART_PTR_FIX(core::BranchSNode_O::___staticClass);
 POINTER_FIX(llvmo::IRBuilder_O::static_creator);
 SMART_PTR_FIX(llvmo::Type_O::___staticClassSymbol);
 SMART_PTR_FIX(core::Character_O::___staticClass);
 SMART_PTR_FIX(llvmo::APInt_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::ConstantPointerNull_O::___staticClassSymbol);
 SMART_PTR_FIX(core::TwoWayStream_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::UnreachableInst_O::___staticClass);
 SMART_PTR_FIX(llvmo::VectorType_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::DICompositeType_O::___staticClass);
 SMART_PTR_FIX(core::SmallMap_O::___staticClass);
 SMART_PTR_FIX(core::SingleDispatchGenericFunction_O::___staticClass);
 SMART_PTR_FIX(core::ObjectSet_O::___staticClassSymbol);
 POINTER_FIX(core::MultiStringBuffer_O::static_creator);
 SMART_PTR_FIX(core::Rational_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::IRBuilder_O::___staticClassSymbol);
 POINTER_FIX(llvmo::Type_O::static_creator);
 SMART_PTR_FIX(core::ExternalObject_O::___staticClassSymbol);
 POINTER_FIX(core::ConcatenatedStream_O::static_creator);
 SMART_PTR_FIX(core::SymbolSet_O::___staticClassSymbol);
 SMART_PTR_FIX(core::LightUserData_O::___staticClassSymbol);
 SMART_PTR_FIX(core::Integer_O::___staticClass);
 POINTER_FIX(core::ShortFloat_O::static_creator);
 SMART_PTR_FIX(core::IntArray_O::___staticClass);
 SMART_PTR_FIX(core::StdClass_O::___staticClass);
 SMART_PTR_FIX(llvmo::AtomicCmpXchgInst_O::___staticClassSymbol);
 POINTER_FIX(core::TagbodyEnvironment_O::static_creator);
 SMART_PTR_FIX(llvmo::PassManager_O::___staticClassSymbol);
 POINTER_FIX(core::SmallMap_O::static_creator);
 POINTER_FIX(core::LogicalPathname_O::static_creator);
 POINTER_FIX(llvmo::MDString_O::static_creator);
 SMART_PTR_FIX(core::Instance_O::___staticClass);
 POINTER_FIX(llvmo::ConstantFP_O::static_creator);
 SMART_PTR_FIX(llvmo::Attribute_O::___staticClassSymbol);
 POINTER_FIX(core::FunctionValueEnvironment_O::static_creator);
 POINTER_FIX(llvmo::TerminatorInst_O::static_creator);
 SMART_PTR_FIX(llvmo::ReturnInst_O::___staticClassSymbol);
 SMART_PTR_FIX(core::MacroletEnvironment_O::___staticClass);
 SMART_PTR_FIX(core::StringSet_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::FenceInst_O::___staticClass);
 POINTER_FIX(core::RuntimeVisibleEnvironment_O::static_creator);
 SMART_PTR_FIX(core::GlueEnvironment_O::___staticClass);
 POINTER_FIX(llvmo::IRBuilderBase_O::static_creator);
 SMART_PTR_FIX(llvmo::LoadInst_O::___staticClassSymbol);
 SMART_PTR_FIX(core::BitVector_O::___staticClassSymbol);
 SMART_PTR_FIX(core::HashTableEql_O::___staticClass);
 SMART_PTR_FIX(core::Pointer_O::___staticClass);
 SMART_PTR_FIX(core::TagbodyEnvironment_O::___staticClass);
 SMART_PTR_FIX(core::Binder_O::___staticClassSymbol);
 POINTER_FIX(clbind::ClassRep_O::static_creator);
 SMART_PTR_FIX(core::StrWithFillPtr_O::___staticClass);
 SMART_PTR_FIX(llvmo::PassManager_O::___staticClass);
 POINTER_FIX(llvmo::UnreachableInst_O::static_creator);
 SMART_PTR_FIX(core::Package_O::___staticClass);
 POINTER_FIX(core::T_O::static_creator);
 POINTER_FIX(llvmo::DebugLoc_O::static_creator);
 SMART_PTR_FIX(core::Real_O::___staticClass);
 POINTER_FIX(core::Class_O::static_creator);
 SMART_PTR_FIX(llvmo::ConstantStruct_O::___staticClass);
 POINTER_FIX(core::IntArray_O::static_creator);
 POINTER_FIX(core::WeakKeyHashTable_O::static_creator);
 SMART_PTR_FIX(core::StandardObject_O::___staticClass);
 SMART_PTR_FIX(llvmo::VectorType_O::___staticClass);
 SMART_PTR_FIX(cffi::Pointer_O::___staticClassSymbol);
 SMART_PTR_FIX(core::StdClass_O::___staticClassSymbol);
 SMART_PTR_FIX(clbind::ClassRep_O::___staticClass);
 SMART_PTR_FIX(core::DirectoryIterator_O::___staticClassSymbol);
 POINTER_FIX(llvmo::IndirectBrInst_O::static_creator);
 SMART_PTR_FIX(llvmo::PassManagerBuilder_O::___staticClassSymbol);
 SMART_PTR_FIX(core::Regex_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::DITypeArray_O::___staticClass);
 SMART_PTR_FIX(llvmo::PHINode_O::___staticClassSymbol);
 SMART_PTR_FIX(core::ShortFloat_O::___staticClassSymbol);
 POINTER_FIX(core::StandardClass_O::static_creator);
 POINTER_FIX(core::Fixnum_O::static_creator);
 POINTER_FIX(core::VectorObjects_O::static_creator);
 SMART_PTR_FIX(llvmo::ConstantInt_O::___staticClassSymbol);
 SMART_PTR_FIX(core::Package_O::___staticClassSymbol);
 SMART_PTR_FIX(core::SingleFloat_O::___staticClass);
 POINTER_FIX(core::Float_O::static_creator);
 SMART_PTR_FIX(llvmo::DICompileUnit_O::___staticClass);
 POINTER_FIX(core::SNode_O::static_creator);
 SMART_PTR_FIX(core::TagbodyFrame_O::___staticClass);
 SMART_PTR_FIX(core::CompileTimeEnvironment_O::___staticClass);
 SMART_PTR_FIX(llvmo::AllocaInst_O::___staticClass);
 SMART_PTR_FIX(core::SymbolList_O::___staticClassSymbol);
 SMART_PTR_FIX(core::StructureObject_O::___staticClass);
 POINTER_FIX(core::Array_O::static_creator);
 SMART_PTR_FIX(llvmo::ReturnInst_O::___staticClass);
 SMART_PTR_FIX(core::SingleDispatchMethod_O::___staticClass);
 SMART_PTR_FIX(llvmo::IRBuilderBase_O::___staticClass);
 SMART_PTR_FIX(llvmo::GlobalValue_O::___staticClass);
 SMART_PTR_FIX(core::Reader_O::___staticClassSymbol);
 SMART_PTR_FIX(core::CompiledFunction_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::TargetMachine_O::___staticClassSymbol);
 POINTER_FIX(llvmo::DICompositeType_O::static_creator);
 POINTER_FIX(llvmo::ConstantDataArray_O::static_creator);
 SMART_PTR_FIX(llvmo::DITypeArray_O::___staticClassSymbol);
 SMART_PTR_FIX(core::Vector_O::___staticClass);
 POINTER_FIX(core::DoubleFloat_O::static_creator);
 POINTER_FIX(llvmo::ConstantInt_O::static_creator);
 SMART_PTR_FIX(core::ForwardReferencedClass_O::___staticClassSymbol);
 POINTER_FIX(llvmo::InsertPoint_O::static_creator);
 SMART_PTR_FIX(llvmo::BasicBlock_O::___staticClass);
 POINTER_FIX(core::Number_O::static_creator);
 SMART_PTR_FIX(core::HashTable_O::___staticClass);
 SMART_PTR_FIX(core::Regex_O::___staticClass);
 SMART_PTR_FIX(core::EchoStream_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::TerminatorInst_O::___staticClass);
 POINTER_FIX(core::SynonymStream_O::static_creator);
 SMART_PTR_FIX(llvmo::Attribute_O::___staticClass);
 SMART_PTR_FIX(llvmo::ConstantDataSequential_O::___staticClass);
 SMART_PTR_FIX(core::Metaobject_O::___staticClassSymbol);
 SMART_PTR_FIX(core::HashTableEql_O::___staticClassSymbol);
 POINTER_FIX(llvmo::DIBuilder_O::static_creator);
 POINTER_FIX(core::SingleDispatchMethod_O::static_creator);
 SMART_PTR_FIX(llvmo::ConstantExpr_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::ArrayType_O::___staticClass);
 POINTER_FIX(core::SourceManager_O::static_creator);
 POINTER_FIX(core::BranchSNode_O::static_creator);
 POINTER_FIX(core::AnsiStream_O::static_creator);
 SMART_PTR_FIX(core::WeakPointer_O::___staticClass);
 SMART_PTR_FIX(llvmo::IntegerType_O::___staticClassSymbol);
 SMART_PTR_FIX(core::WeakKeyHashTable_O::___staticClass);
 SMART_PTR_FIX(core::Rational_O::___staticClass);
 POINTER_FIX(llvmo::BasicBlock_O::static_creator);
 SMART_PTR_FIX(core::Metaobject_O::___staticClass);
 POINTER_FIX(llvmo::FunctionPass_O::static_creator);
 POINTER_FIX(core::ForeignData_O::static_creator);
 SMART_PTR_FIX(llvmo::DIFile_O::___staticClassSymbol);
 SMART_PTR_FIX(core::Specializer_O::___staticClass);
 SMART_PTR_FIX(llvmo::ModulePass_O::___staticClassSymbol);
 POINTER_FIX(core::String_O::static_creator);
 POINTER_FIX(llvmo::Value_O::static_creator);
 POINTER_FIX(core::MacroletEnvironment_O::static_creator);
 POINTER_FIX(core::Function_O::static_creator);
 SMART_PTR_FIX(core::MultiStringBuffer_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::DILexicalBlock_O::___staticClass);
 SMART_PTR_FIX(llvmo::IntegerType_O::___staticClass);
 POINTER_FIX(llvmo::Instruction_O::static_creator);
 SMART_PTR_FIX(core::RegexMatch_O::___staticClass);
 SMART_PTR_FIX(llvmo::DICompileUnit_O::___staticClassSymbol);
 SMART_PTR_FIX(core::ArrayObjects_O::___staticClassSymbol);
 SMART_PTR_FIX(core::StringStream_O::___staticClass);
 SMART_PTR_FIX(core::Cons_O::___staticClassSymbol);
 POINTER_FIX(core::MicroHeap_O::static_creator);
 POINTER_FIX(core::Archive_O::static_creator);
 SMART_PTR_FIX(core::VectorObjects_O::___staticClassSymbol);
 POINTER_FIX(core::SexpLoadArchive_O::static_creator);
 SMART_PTR_FIX(core::Function_O::___staticClassSymbol);
 SMART_PTR_FIX(core::LeafSNode_O::___staticClassSymbol);
 POINTER_FIX(llvmo::ExecutionEngine_O::static_creator);
 POINTER_FIX(llvmo::DIDescriptor_O::static_creator);
 SMART_PTR_FIX(core::IOFileStream_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::DIBasicType_O::___staticClass);
 POINTER_FIX(core::Ratio_O::static_creator);
 POINTER_FIX(core::SingleFloat_O::static_creator);
 SMART_PTR_FIX(core::HashTable_O::___staticClassSymbol);
 SMART_PTR_FIX(core::LogicalPathname_O::___staticClass);
 SMART_PTR_FIX(llvmo::VAArgInst_O::___staticClass);
 SMART_PTR_FIX(core::SNode_O::___staticClassSymbol);
 POINTER_FIX(core::Instance_O::static_creator);
 POINTER_FIX(asttooling::AstVisitor_O::static_creator);
 SMART_PTR_FIX(core::ObjRef_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::DIBasicType_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::LLVMContext_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::FunctionType_O::___staticClassSymbol);
 SMART_PTR_FIX(core::SingleDispatchEffectiveMethodFunction_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::SwitchInst_O::___staticClass);
 SMART_PTR_FIX(core::HashTableEqual_O::___staticClass);
 SMART_PTR_FIX(core::FuncallableStandardClass_O::___staticClass);
 POINTER_FIX(llvmo::LLVMContext_O::static_creator);
 POINTER_FIX(llvmo::BlockAddress_O::static_creator);
 SMART_PTR_FIX(core::ReadTable_O::___staticClass);
 POINTER_FIX(core::WeakPointer_O::static_creator);
 SMART_PTR_FIX(core::LoadArchive_O::___staticClassSymbol);
 SMART_PTR_FIX(core::GlueEnvironment_O::___staticClassSymbol);
 SMART_PTR_FIX(core::MultiStringBuffer_O::___staticClass);
 SMART_PTR_FIX(core::SingleDispatchGenericFunction_O::___staticClassSymbol);
 SMART_PTR_FIX(core::Pathname_O::___staticClass);
 POINTER_FIX(core::StandardChar_O::static_creator);
 SMART_PTR_FIX(core::Path_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::Instruction_O::___staticClassSymbol);
 POINTER_FIX(core::Pathname_O::static_creator);
 POINTER_FIX(core::StrWithFillPtr_O::static_creator);
 SMART_PTR_FIX(core::UnwindProtectEnvironment_O::___staticClass);
 SMART_PTR_FIX(llvmo::ConstantArray_O::___staticClassSymbol);
 SMART_PTR_FIX(core::SexpSaveArchive_O::___staticClassSymbol);
 POINTER_FIX(llvmo::DISubroutineType_O::static_creator);
 SMART_PTR_FIX(llvmo::UnaryInstruction_O::___staticClass);
 SMART_PTR_FIX(llvmo::DIBuilder_O::___staticClass);
 SMART_PTR_FIX(llvmo::AllocaInst_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::DataLayoutPass_O::___staticClass);
 SMART_PTR_FIX(core::BranchSNode_O::___staticClassSymbol);
 SMART_PTR_FIX(core::Symbol_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::IRBuilderBase_O::___staticClassSymbol);
 SMART_PTR_FIX(core::DirectoryEntry_O::___staticClassSymbol);
 SMART_PTR_FIX(core::HashTableEqualp_O::___staticClassSymbol);
 POINTER_FIX(core::Null_O::static_creator);
 SMART_PTR_FIX(llvmo::BranchInst_O::___staticClass);
 POINTER_FIX(llvmo::PHINode_O::static_creator);
 POINTER_FIX(cffi::Pointer_O::static_creator);
 SMART_PTR_FIX(llvmo::Argument_O::___staticClass);
 POINTER_FIX(core::EchoStream_O::static_creator);
 POINTER_FIX(core::SymbolMacroletEnvironment_O::static_creator);
 POINTER_FIX(llvmo::Constant_O::static_creator);
 POINTER_FIX(core::CompileTimeEnvironment_O::static_creator);
 SMART_PTR_FIX(core::LexicalEnvironment_O::___staticClass);
 SMART_PTR_FIX(llvmo::DIType_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::DIBuilder_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::TargetMachine_O::___staticClass);
 SMART_PTR_FIX(core::AnsiStream_O::___staticClass);
 POINTER_FIX(core::Str_O::static_creator);
 SMART_PTR_FIX(core::FileStream_O::___staticClass);
 POINTER_FIX(llvmo::NamedMDNode_O::static_creator);
 SMART_PTR_FIX(core::FunctionContainerEnvironment_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::NamedMDNode_O::___staticClassSymbol);
 SMART_PTR_FIX(core::Bignum_O::___staticClass);
 POINTER_FIX(core::LoadArchive_O::static_creator);
 SMART_PTR_FIX(llvmo::DIDescriptor_O::___staticClassSymbol);
 POINTER_FIX(llvmo::CallInst_O::static_creator);
 POINTER_FIX(core::BaseChar_O::static_creator);
 POINTER_FIX(llvmo::DIScope_O::static_creator);
 SMART_PTR_FIX(llvmo::DIDerivedType_O::___staticClassSymbol);
 SMART_PTR_FIX(core::SimpleBitVector_O::___staticClassSymbol);
 POINTER_FIX(llvmo::DISubprogram_O::static_creator);
 SMART_PTR_FIX(core::Str_O::___staticClass);
 SMART_PTR_FIX(llvmo::Function_O::___staticClassSymbol);
 SMART_PTR_FIX(core::Complex_O::___staticClass);
 POINTER_FIX(core::SourceFileInfo_O::static_creator);
 SMART_PTR_FIX(llvmo::MDNode_O::___staticClassSymbol);
 SMART_PTR_FIX(core::ValueEnvironment_O::___staticClass);
 POINTER_FIX(llvmo::ResumeInst_O::static_creator);
 SMART_PTR_FIX(llvmo::ConstantInt_O::___staticClass);
 POINTER_FIX(core::DirectoryIterator_O::static_creator);
 SMART_PTR_FIX(core::SingleFloat_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::DICompositeType_O::___staticClassSymbol);
 POINTER_FIX(llvmo::ConstantStruct_O::static_creator);
 SMART_PTR_FIX(core::VectorObjects_O::___staticClass);
 SMART_PTR_FIX(core::SourceManager_O::___staticClass);
 SMART_PTR_FIX(core::SourceFileInfo_O::___staticClassSymbol);
 SMART_PTR_FIX(core::HashTableEq_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::ImmutablePass_O::___staticClassSymbol);
 POINTER_FIX(llvmo::DIBasicType_O::static_creator);
 POINTER_FIX(core::LexicalEnvironment_O::static_creator);
 SMART_PTR_FIX(llvmo::UnreachableInst_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::Module_O::___staticClass);
 POINTER_FIX(core::StringList_O::static_creator);
 SMART_PTR_FIX(core::BlockEnvironment_O::___staticClassSymbol);
 POINTER_FIX(core::GlueEnvironment_O::static_creator);
 SMART_PTR_FIX(core::ArrayObjects_O::___staticClass);
 SMART_PTR_FIX(llvmo::DIArray_O::___staticClass);
 SMART_PTR_FIX(core::SourcePosInfo_O::___staticClassSymbol);
 SMART_PTR_FIX(core::UserData_O::___staticClassSymbol);
 POINTER_FIX(core::StringOutputStream_O::static_creator);
 SMART_PTR_FIX(llvmo::Value_O::___staticClass);
 SMART_PTR_FIX(llvmo::CallInst_O::___staticClass);
 SMART_PTR_FIX(core::ForeignData_O::___staticClassSymbol);
 SMART_PTR_FIX(core::WrappedPointer_O::___staticClass);
 SMART_PTR_FIX(core::CompiledFunction_O::___staticClass);
 SMART_PTR_FIX(llvmo::LandingPadInst_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::FunctionPass_O::___staticClass);
 POINTER_FIX(core::IOStreamStream_O::static_creator);
 POINTER_FIX(llvmo::SwitchInst_O::static_creator);
 SMART_PTR_FIX(core::Number_O::___staticClassSymbol);
 SMART_PTR_FIX(core::ValueFrame_O::___staticClass);
 SMART_PTR_FIX(llvmo::EngineBuilder_O::___staticClass);
 SMART_PTR_FIX(clbind::ClassRegistry_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::BranchInst_O::___staticClassSymbol);
 SMART_PTR_FIX(core::BaseChar_O::___staticClass);
 SMART_PTR_FIX(core::IOFileStream_O::___staticClass);
 POINTER_FIX(llvmo::ConstantPointerNull_O::static_creator);
 SMART_PTR_FIX(core::FileStream_O::___staticClassSymbol);
 POINTER_FIX(core::BuiltInClass_O::static_creator);
 SMART_PTR_FIX(core::DirectoryIterator_O::___staticClass);
 SMART_PTR_FIX(llvmo::NamedMDNode_O::___staticClass);
 SMART_PTR_FIX(core::IOStreamStream_O::___staticClass);
 SMART_PTR_FIX(llvmo::DataLayoutPass_O::___staticClassSymbol);
 POINTER_FIX(llvmo::InvokeInst_O::static_creator);
 POINTER_FIX(llvmo::PassManagerBase_O::static_creator);
 SMART_PTR_FIX(llvmo::PointerType_O::___staticClass);
 SMART_PTR_FIX(llvmo::PassManagerBase_O::___staticClass);
 SMART_PTR_FIX(core::WeakHashTable_O::___staticClassSymbol);
 POINTER_FIX(core::StructureObject_O::static_creator);
 SMART_PTR_FIX(llvmo::BlockAddress_O::___staticClass);
 SMART_PTR_FIX(core::StringSet_O::___staticClass);
 SMART_PTR_FIX(core::MacroletEnvironment_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::UndefValue_O::___staticClassSymbol);
 POINTER_FIX(core::DirectoryEntry_O::static_creator);
 SMART_PTR_FIX(core::WeakKeyMapping_O::___staticClassSymbol);
 SMART_PTR_FIX(core::Null_O::___staticClass);
 POINTER_FIX(clbind::ClassRegistry_O::static_creator);
 POINTER_FIX(core::SexpSaveArchive_O::static_creator);
 SMART_PTR_FIX(core::Ratio_O::___staticClassSymbol);
 POINTER_FIX(core::Integer_O::static_creator);
 SMART_PTR_FIX(core::LambdaListHandler_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::DIDerivedType_O::___staticClass);
 SMART_PTR_FIX(llvmo::DataLayout_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::ConstantExpr_O::___staticClass);
 SMART_PTR_FIX(core::Archive_O::___staticClass);
 SMART_PTR_FIX(llvmo::Argument_O::___staticClassSymbol);
 SMART_PTR_FIX(core::T_O::___staticClass);
 SMART_PTR_FIX(llvmo::DISubprogram_O::___staticClass);
 SMART_PTR_FIX(core::SynonymStream_O::___staticClassSymbol);
 SMART_PTR_FIX(core::SourceManager_O::___staticClassSymbol);
 POINTER_FIX(core::Cons_O::static_creator);
 SMART_PTR_FIX(llvmo::Module_O::___staticClassSymbol);
 POINTER_FIX(llvmo::DIArray_O::static_creator);
 SMART_PTR_FIX(core::HashTableEq_O::___staticClass);
 SMART_PTR_FIX(core::Iterator_O::___staticClass);
 SMART_PTR_FIX(core::T_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::FunctionPass_O::___staticClassSymbol);
 SMART_PTR_FIX(core::StringList_O::___staticClass);
 POINTER_FIX(core::Complex_O::static_creator);
 SMART_PTR_FIX(core::WrappedPointer_O::___staticClassSymbol);
 SMART_PTR_FIX(core::Binder_O::___staticClass);
 POINTER_FIX(llvmo::VectorType_O::static_creator);
 SMART_PTR_FIX(llvmo::DIDescriptor_O::___staticClass);
 SMART_PTR_FIX(core::Number_O::___staticClass);
 SMART_PTR_FIX(llvmo::VAArgInst_O::___staticClassSymbol);
 SMART_PTR_FIX(core::StandardClass_O::___staticClass);
 SMART_PTR_FIX(llvmo::DebugLoc_O::___staticClass);
 POINTER_FIX(core::SaveArchive_O::static_creator);
 SMART_PTR_FIX(llvmo::BlockAddress_O::___staticClassSymbol);
 SMART_PTR_FIX(core::Float_O::___staticClassSymbol);
 SMART_PTR_FIX(core::Cons_O::___staticClass);
 SMART_PTR_FIX(core::StringOutputStream_O::___staticClassSymbol);
 POINTER_FIX(core::SourcePosInfo_O::static_creator);
 POINTER_FIX(llvmo::ConstantDataSequential_O::static_creator);
 SMART_PTR_FIX(core::Class_O::___staticClassSymbol);
 SMART_PTR_FIX(core::SpecialForm_O::___staticClass);
 POINTER_FIX(llvmo::Module_O::static_creator);
 SMART_PTR_FIX(llvmo::CompositeType_O::___staticClass);
 SMART_PTR_FIX(core::RecursiveDirectoryIterator_O::___staticClass);
 POINTER_FIX(core::ArrayObjects_O::static_creator);
 SMART_PTR_FIX(core::RuntimeVisibleEnvironment_O::___staticClass);
 SMART_PTR_FIX(llvmo::Linker_O::___staticClassSymbol);
 POINTER_FIX(core::StringSet_O::static_creator);
 SMART_PTR_FIX(llvmo::ConstantStruct_O::___staticClassSymbol);
 POINTER_FIX(core::TagbodyFrame_O::static_creator);
 POINTER_FIX(llvmo::TargetMachine_O::static_creator);
 POINTER_FIX(core::RecursiveDirectoryIterator_O::static_creator);
 POINTER_FIX(llvmo::Attribute_O::static_creator);
 SMART_PTR_FIX(core::TwoWayStream_O::___staticClass);
 SMART_PTR_FIX(core::Null_O::___staticClassSymbol);
 SMART_PTR_FIX(core::PosixTimeDuration_O::___staticClassSymbol);
 POINTER_FIX(core::Specializer_O::static_creator);
 SMART_PTR_FIX(core::StringInputStream_O::___staticClassSymbol);
 SMART_PTR_FIX(core::ConcatenatedStream_O::___staticClass);
 SMART_PTR_FIX(llvmo::ConstantPointerNull_O::___staticClass);
 POINTER_FIX(_lisp);
 SMART_PTR_FIX(llvmo::ArrayType_O::___staticClassSymbol);
 POINTER_FIX(core::PosixTime_O::static_creator);
 SMART_PTR_FIX(core::ActivationFrame_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::StoreInst_O::___staticClass);
 POINTER_FIX(llvmo::Argument_O::static_creator);
 SMART_PTR_FIX(core::PosixTime_O::___staticClassSymbol);
 SMART_PTR_FIX(core::StringInputStream_O::___staticClass);
 SMART_PTR_FIX(core::FunctionFrame_O::___staticClass);
 SMART_PTR_FIX(core::SourcePosInfo_O::___staticClass);
 SMART_PTR_FIX(core::ExtendedChar_O::___staticClass);
 SMART_PTR_FIX(core::HashTableEqualp_O::___staticClass);
 POINTER_FIX(llvmo::BranchInst_O::static_creator);
 SMART_PTR_FIX(core::StandardChar_O::___staticClass);
 SMART_PTR_FIX(llvmo::Function_O::___staticClass);
 SMART_PTR_FIX(llvmo::Value_O::___staticClassSymbol);
 POINTER_FIX(core::StringInputStream_O::static_creator);
 POINTER_FIX(core::SimpleBitVector_O::static_creator);
 SMART_PTR_FIX(core::ForeignData_O::___staticClass);
 SMART_PTR_FIX(llvmo::InsertPoint_O::___staticClassSymbol);
 POINTER_FIX(llvmo::AtomicCmpXchgInst_O::static_creator);
 SMART_PTR_FIX(core::LoadTimeValues_O::___staticClass);
 SMART_PTR_FIX(core::BuiltInClass_O::___staticClass);
 POINTER_FIX(llvmo::FenceInst_O::static_creator);
 SMART_PTR_FIX(core::SmallMap_O::___staticClassSymbol);
 SMART_PTR_FIX(core::SynonymStream_O::___staticClass);
 POINTER_FIX(core::CandoException_O::static_creator);
 SMART_PTR_FIX(core::FuncallableStandardClass_O::___staticClassSymbol);
 POINTER_FIX(llvmo::ReturnInst_O::static_creator);
 SMART_PTR_FIX(core::SymbolList_O::___staticClass);
 SMART_PTR_FIX(core::MicroHeap_O::___staticClassSymbol);
 SMART_PTR_FIX(core::SourceFileInfo_O::___staticClass);
 SMART_PTR_FIX(llvmo::DIScope_O::___staticClass);
 SMART_PTR_FIX(core::LoadArchive_O::___staticClass);
 SMART_PTR_FIX(core::String_O::___staticClassSymbol);
 SMART_PTR_FIX(core::StandardClass_O::___staticClassSymbol);
 POINTER_FIX(llvmo::DIDerivedType_O::static_creator);
 SMART_PTR_FIX(llvmo::GlobalVariable_O::___staticClassSymbol);
 SMART_PTR_FIX(core::DirectoryEntry_O::___staticClass);
 SMART_PTR_FIX(llvmo::Constant_O::___staticClass);
 POINTER_FIX(llvmo::ArrayType_O::static_creator);
 POINTER_FIX(core::LambdaListHandler_O::static_creator);
 SMART_PTR_FIX(llvmo::PHINode_O::___staticClass);
 SMART_PTR_FIX(llvmo::ModulePass_O::___staticClass);
 SMART_PTR_FIX(llvmo::Constant_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::StructType_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::StoreInst_O::___staticClassSymbol);
 POINTER_FIX(llvmo::PointerType_O::static_creator);
 POINTER_FIX(llvmo::VAArgInst_O::static_creator);
 POINTER_FIX(core::Character_O::static_creator);
 SMART_PTR_FIX(core::Pathname_O::___staticClassSymbol);
 POINTER_FIX(llvmo::CompositeType_O::static_creator);
 SMART_PTR_FIX(llvmo::CompositeType_O::___staticClassSymbol);
 SMART_PTR_FIX(core::Function_O::___staticClass);
 POINTER_FIX(core::Regex_O::static_creator);
 SMART_PTR_FIX(llvmo::ExecutionEngine_O::___staticClass);
 SMART_PTR_FIX(core::LambdaListHandler_O::___staticClass);
 SMART_PTR_FIX(core::IOStreamStream_O::___staticClassSymbol);
 POINTER_FIX(core::Pointer_O::static_creator);
 POINTER_FIX(core::HashTableEqual_O::static_creator);
 POINTER_FIX(core::ExternalObject_O::static_creator);
 SMART_PTR_FIX(llvmo::SequentialType_O::___staticClass);
 SMART_PTR_FIX(llvmo::DISubroutineType_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::ConstantFP_O::___staticClass);
 SMART_PTR_FIX(llvmo::IndirectBrInst_O::___staticClass);
 POINTER_FIX(llvmo::ModulePass_O::static_creator);
 SMART_PTR_FIX(core::ActivationFrame_O::___staticClass);
 POINTER_FIX(core::ObjectSet_O::static_creator);
 SMART_PTR_FIX(core::StringList_O::___staticClassSymbol);
 POINTER_FIX(core::FileStatus_O::static_creator);
 POINTER_FIX(llvmo::UndefValue_O::static_creator);
 POINTER_FIX(core::Binder_O::static_creator);
 SMART_PTR_FIX(llvmo::DIType_O::___staticClass);
 SMART_PTR_FIX(core::DoubleFloat_O::___staticClass);
 POINTER_FIX(core::HashTableEql_O::static_creator);
 SMART_PTR_FIX(core::RecursiveDirectoryIterator_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::Instruction_O::___staticClass);
 POINTER_FIX(llvmo::SequentialType_O::static_creator);
 SMART_PTR_FIX(core::SimpleBitVector_O::___staticClass);
 SMART_PTR_FIX(core::RuntimeVisibleEnvironment_O::___staticClassSymbol);
 SMART_PTR_FIX(core::BuiltInClass_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::ExecutionEngine_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::Pass_O::___staticClass);
 SMART_PTR_FIX(core::FunctionContainerEnvironment_O::___staticClass);
 SMART_PTR_FIX(core::ValueFrame_O::___staticClassSymbol);
 SMART_PTR_FIX(core::EchoStream_O::___staticClass);
 SMART_PTR_FIX(llvmo::MDNode_O::___staticClass);
 POINTER_FIX(llvmo::AllocaInst_O::static_creator);
 SMART_PTR_FIX(core::Real_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::DISubroutineType_O::___staticClass);
 POINTER_FIX(core::ActivationFrame_O::static_creator);
 POINTER_FIX(llvmo::AtomicRMWInst_O::static_creator);
 POINTER_FIX(core::FunctionFrame_O::static_creator);
 SMART_PTR_FIX(core::ValueEnvironment_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::SequentialType_O::___staticClassSymbol);
 POINTER_FIX(core::Real_O::static_creator);
 SMART_PTR_FIX(core::BaseChar_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::DILexicalBlock_O::___staticClassSymbol);
 SMART_PTR_FIX(core::Complex_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::ConstantDataArray_O::___staticClassSymbol);
 SMART_PTR_FIX(core::CandoException_O::___staticClass);
 SMART_PTR_FIX(core::Array_O::___staticClassSymbol);
 POINTER_FIX(core::SymbolSet_O::static_creator);
 SMART_PTR_FIX(core::Float_O::___staticClass);
 SMART_PTR_FIX(llvmo::GlobalValue_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::InvokeInst_O::___staticClassSymbol);
 SMART_PTR_FIX(core::AnsiStream_O::___staticClassSymbol);
 POINTER_FIX(core::ObjRef_O::static_creator);
 POINTER_FIX(llvmo::DebugInfo_O::static_creator);
 POINTER_FIX(llvmo::LandingPadInst_O::static_creator);
 SMART_PTR_FIX(core::ObjRef_O::___staticClass);
 SMART_PTR_FIX(core::Str_O::___staticClassSymbol);
 POINTER_FIX(core::LightUserData_O::static_creator);
 SMART_PTR_FIX(llvmo::MDString_O::___staticClassSymbol);
 SMART_PTR_FIX(core::WeakKeyMapping_O::___staticClass);
 POINTER_FIX(llvmo::ConstantExpr_O::static_creator);
 SMART_PTR_FIX(core::FunctionValueEnvironment_O::___staticClassSymbol);
 POINTER_FIX(llvmo::DataLayout_O::static_creator);
 SMART_PTR_FIX(core::StrWithFillPtr_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::ImmutablePass_O::___staticClass);
 SMART_PTR_FIX(llvmo::FunctionPassManager_O::___staticClassSymbol);
 SMART_PTR_FIX(core::ForwardReferencedClass_O::___staticClass);
 SMART_PTR_FIX(llvmo::DIFile_O::___staticClass);
 SMART_PTR_FIX(llvmo::BasicBlock_O::___staticClassSymbol);
 POINTER_FIX(llvmo::GlobalVariable_O::static_creator);
 SMART_PTR_FIX(core::MicroHeap_O::___staticClass);
 SMART_PTR_FIX(core::LoadTimeValues_O::___staticClassSymbol);
 POINTER_FIX(core::LeafSNode_O::static_creator);
 SMART_PTR_FIX(core::Vector_O::___staticClassSymbol);
 SMART_PTR_FIX(core::PosixTimeDuration_O::___staticClass);
 SMART_PTR_FIX(core::StringOutputStream_O::___staticClass);
 SMART_PTR_FIX(llvmo::FunctionType_O::___staticClass);
 POINTER_FIX(core::ValueFrame_O::static_creator);
 SMART_PTR_FIX(core::Character_O::___staticClassSymbol);
 POINTER_FIX(core::Symbol_O::static_creator);
 POINTER_FIX(core::BroadcastStream_O::static_creator);
 POINTER_FIX(llvmo::StoreInst_O::static_creator);
 SMART_PTR_FIX(llvmo::APFloat_O::___staticClass);
 SMART_PTR_FIX(core::ReadTable_O::___staticClassSymbol);
 SMART_PTR_FIX(core::TagbodyEnvironment_O::___staticClassSymbol);
 POINTER_FIX(core::Rational_O::static_creator);
 SMART_PTR_FIX(cffi::Pointer_O::___staticClass);
 SMART_PTR_FIX(core::CandoException_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::DebugLoc_O::___staticClassSymbol);
 SMART_PTR_FIX(core::IntArray_O::___staticClassSymbol);
 SMART_PTR_FIX(core::ExternalObject_O::___staticClass);
 SMART_PTR_FIX(core::ShortFloat_O::___staticClass);
 SMART_PTR_FIX(llvmo::InsertPoint_O::___staticClass);
 SMART_PTR_FIX(core::UserData_O::___staticClass);
 POINTER_FIX(core::LoadTimeValues_O::static_creator);
 SMART_PTR_FIX(llvmo::User_O::___staticClassSymbol);
 POINTER_FIX(core::StdClass_O::static_creator);
 SMART_PTR_FIX(llvmo::APFloat_O::___staticClassSymbol);
 POINTER_FIX(core::Package_O::static_creator);
 SMART_PTR_FIX(llvmo::UnaryInstruction_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::TerminatorInst_O::___staticClassSymbol);
 SMART_PTR_FIX(core::Specializer_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::PassManagerBuilder_O::___staticClass);
 SMART_PTR_FIX(asttooling::AstVisitor_O::___staticClass);
 SMART_PTR_FIX(core::LightUserData_O::___staticClass);
 SMART_PTR_FIX(core::StringStream_O::___staticClassSymbol);
 SMART_PTR_FIX(core::VectorObjectsWithFillPtr_O::___staticClass);
 POINTER_FIX(llvmo::EngineBuilder_O::static_creator);
 POINTER_FIX(core::UnwindProtectEnvironment_O::static_creator);
 SMART_PTR_FIX(llvmo::EngineBuilder_O::___staticClassSymbol);
 POINTER_FIX(llvmo::DIType_O::static_creator);
 POINTER_FIX(core::WeakHashTable_O::static_creator);
 POINTER_FIX(llvmo::ConstantArray_O::static_creator);
 SMART_PTR_FIX(core::Environment_O::___staticClassSymbol);
 POINTER_FIX(llvmo::PassManager_O::static_creator);
 POINTER_FIX(core::Metaobject_O::static_creator);
 SMART_PTR_FIX(core::Iterator_O::___staticClassSymbol);
 SMART_PTR_FIX(core::BitVector_O::___staticClass);
 SMART_PTR_FIX(core::Bignum_O::___staticClassSymbol);
 SMART_PTR_FIX(core::LogicalPathname_O::___staticClassSymbol);
 POINTER_FIX(llvmo::DIFile_O::static_creator);
 POINTER_FIX(core::HashTable_O::static_creator);
 SMART_PTR_FIX(llvmo::ConstantFP_O::___staticClassSymbol);
 SMART_PTR_FIX(core::StandardObject_O::___staticClassSymbol);
 SMART_PTR_FIX(core::Class_O::___staticClass);
 SMART_PTR_FIX(core::CompileTimeEnvironment_O::___staticClassSymbol);
 SMART_PTR_FIX(core::ObjectSet_O::___staticClass);
 POINTER_FIX(llvmo::UnaryInstruction_O::static_creator);
 POINTER_FIX(core::Stream_O::static_creator);
 SMART_PTR_FIX(core::Path_O::___staticClass);
 SMART_PTR_FIX(llvmo::MDString_O::___staticClass);
 SMART_PTR_FIX(core::Integer_O::___staticClassSymbol);
 POINTER_FIX(core::ReadTable_O::static_creator);
 SMART_PTR_FIX(llvmo::DISubprogram_O::___staticClassSymbol);
 SMART_PTR_FIX(core::WeakHashTable_O::___staticClass);
 POINTER_FIX(core::StringStream_O::static_creator);
 POINTER_FIX(core::VectorObjectsWithFillPtr_O::static_creator);
 SMART_PTR_FIX(core::SaveArchive_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::SwitchInst_O::___staticClassSymbol);
 POINTER_FIX(llvmo::DICompileUnit_O::static_creator);
 SMART_PTR_FIX(llvmo::DIArray_O::___staticClassSymbol);
 SMART_PTR_FIX(core::SexpLoadArchive_O::___staticClassSymbol);
 SMART_PTR_FIX(asttooling::AstVisitor_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::StructType_O::___staticClass);
 SMART_PTR_FIX(llvmo::ResumeInst_O::___staticClass);
 POINTER_FIX(core::Environment_O::static_creator);
 SMART_PTR_FIX(llvmo::AtomicRMWInst_O::___staticClassSymbol);
 POINTER_FIX(llvmo::LoadInst_O::static_creator);
 SMART_PTR_FIX(llvmo::UndefValue_O::___staticClass);
 POINTER_FIX(core::SymbolList_O::static_creator);
 SMART_PTR_FIX(core::PosixTime_O::___staticClass);
 POINTER_FIX(core::SingleDispatchGenericFunction_O::static_creator);
 POINTER_FIX(llvmo::PassManagerBuilder_O::static_creator);
 SMART_PTR_FIX(clbind::ClassRep_O::___staticClassSymbol);
 POINTER_FIX(core::SpecialForm_O::static_creator);
 SMART_PTR_FIX(core::BroadcastStream_O::___staticClass);
 SMART_PTR_FIX(core::SexpSaveArchive_O::___staticClass);
 POINTER_FIX(llvmo::GlobalValue_O::static_creator);
 SMART_PTR_FIX(llvmo::APInt_O::___staticClass);
 SMART_PTR_FIX(llvmo::IRBuilder_O::___staticClass);
 SMART_PTR_FIX(llvmo::User_O::___staticClass);
 POINTER_FIX(core::RegexMatch_O::static_creator);
 POINTER_FIX(core::TwoWayStream_O::static_creator);
 POINTER_FIX(core::WrappedPointer_O::static_creator);
 SMART_PTR_FIX(core::SymbolToEnumConverter_O::___staticClass);
 SMART_PTR_FIX(core::WeakKeyHashTable_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::Type_O::___staticClass);
 POINTER_FIX(core::HashTableEq_O::static_creator);
 SMART_PTR_FIX(core::Ratio_O::___staticClass);
 SMART_PTR_FIX(core::Fixnum_O::___staticClass);
 SMART_PTR_FIX(llvmo::ResumeInst_O::___staticClassSymbol);
 POINTER_FIX(llvmo::DILexicalBlock_O::static_creator);
 POINTER_FIX(core::Bignum_O::static_creator);
 SMART_PTR_FIX(core::TagbodyFrame_O::___staticClassSymbol);
 SMART_PTR_FIX(core::SymbolToEnumConverter_O::___staticClassSymbol);
 SMART_PTR_FIX(core::SNode_O::___staticClass);
 SMART_PTR_FIX(llvmo::Linker_O::___staticClass);
 SMART_PTR_FIX(core::StructureObject_O::___staticClassSymbol);
 POINTER_FIX(core::FileStream_O::static_creator);
 SMART_PTR_FIX(core::CatchEnvironment_O::___staticClass);
 SMART_PTR_FIX(core::SymbolSet_O::___staticClass);
 SMART_PTR_FIX(core::Fixnum_O::___staticClassSymbol);
 SMART_PTR_FIX(core::Array_O::___staticClass);
 SMART_PTR_FIX(core::Archive_O::___staticClassSymbol);
 SMART_PTR_FIX(core::Instance_O::___staticClassSymbol);
 POINTER_FIX(llvmo::APFloat_O::static_creator);
 SMART_PTR_FIX(core::VectorObjectsWithFillPtr_O::___staticClassSymbol);
 POINTER_FIX(asttooling::RegMap::RegistryData);
 SMART_PTR_FIX(core::SymbolMacroletEnvironment_O::___staticClassSymbol);
 SMART_PTR_FIX(core::SymbolMacroletEnvironment_O::___staticClass);
 POINTER_FIX(core::StandardObject_O::static_creator);
 POINTER_FIX(core::ValueEnvironment_O::static_creator);
 SMART_PTR_FIX(core::FunctionFrame_O::___staticClassSymbol);
 SMART_PTR_FIX(core::StructureClass_O::___staticClass);
 POINTER_FIX(core::ExtendedChar_O::static_creator);
 POINTER_FIX(core::FunctionContainerEnvironment_O::static_creator);
 SMART_PTR_FIX(core::CatchEnvironment_O::___staticClassSymbol);
 SMART_PTR_FIX(core::UnwindProtectEnvironment_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::PointerType_O::___staticClassSymbol);
 SMART_PTR_FIX(core::FileStatus_O::___staticClass);
 SMART_PTR_FIX(core::LeafSNode_O::___staticClass);
 SMART_PTR_FIX(core::Stream_O::___staticClass);
 POINTER_FIX(core::BlockEnvironment_O::static_creator);
 POINTER_FIX(llvmo::DITypeArray_O::static_creator);
 SMART_PTR_FIX(core::FileStatus_O::___staticClassSymbol);
 POINTER_FIX(core::Vector_O::static_creator);
 POINTER_FIX(llvmo::APInt_O::static_creator);
 SMART_PTR_FIX(llvmo::LandingPadInst_O::___staticClass);
 SMART_PTR_FIX(llvmo::LLVMContext_O::___staticClass);
 SMART_PTR_FIX(core::Symbol_O::___staticClass);
 SMART_PTR_FIX(core::SaveArchive_O::___staticClass);
 POINTER_FIX(core::ForwardReferencedClass_O::static_creator);
 SMART_PTR_FIX(llvmo::LoadInst_O::___staticClass);
 POINTER_FIX(core::CatchEnvironment_O::static_creator);
 SMART_PTR_FIX(llvmo::ConstantDataSequential_O::___staticClassSymbol);
 POINTER_FIX(core::WeakKeyMapping_O::static_creator);
 POINTER_FIX(core::BitVector_O::static_creator);
 SMART_PTR_FIX(core::StandardChar_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::PassManagerBase_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::IndirectBrInst_O::___staticClassSymbol);
 POINTER_FIX(core::PosixTimeDuration_O::static_creator);
 SMART_PTR_FIX(llvmo::FunctionPassManager_O::___staticClass);
 SMART_PTR_FIX(core::DoubleFloat_O::___staticClassSymbol);
 POINTER_FIX(llvmo::Linker_O::static_creator);
 POINTER_FIX(llvmo::FunctionPassManager_O::static_creator);
 POINTER_FIX(core::UserData_O::static_creator);
 POINTER_FIX(llvmo::MDNode_O::static_creator);
 POINTER_FIX(core::FuncallableStandardClass_O::static_creator);
 POINTER_FIX(core::Path_O::static_creator);
 POINTER_FIX(llvmo::IntegerType_O::static_creator);
 SMART_PTR_FIX(core::SingleDispatchMethod_O::___staticClassSymbol);
 POINTER_FIX(core::HashTableEqualp_O::static_creator);
 SMART_PTR_FIX(core::String_O::___staticClass);
 SMART_PTR_FIX(core::SexpLoadArchive_O::___staticClass);
 SMART_PTR_FIX(core::ExtendedChar_O::___staticClassSymbol);
 SMART_PTR_FIX(core::Stream_O::___staticClassSymbol);
 POINTER_FIX(llvmo::User_O::static_creator);
 POINTER_FIX(core::IOFileStream_O::static_creator);
 SMART_PTR_FIX(llvmo::InvokeInst_O::___staticClass);
 POINTER_FIX(core::Iterator_O::static_creator);
 SMART_PTR_FIX(core::WeakPointer_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::DebugInfo_O::___staticClass);
 SMART_PTR_FIX(core::Reader_O::___staticClass);
 POINTER_FIX(llvmo::DataLayoutPass_O::static_creator);
 SMART_PTR_FIX(core::SingleDispatchEffectiveMethodFunction_O::___staticClass);
 SMART_PTR_FIX(llvmo::Pass_O::___staticClassSymbol);
 SMART_PTR_FIX(clbind::ClassRegistry_O::___staticClass);
 SMART_PTR_FIX(llvmo::AtomicRMWInst_O::___staticClass);
 SMART_PTR_FIX(llvmo::GlobalVariable_O::___staticClass);
 SMART_PTR_FIX(core::BroadcastStream_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::DebugInfo_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::ConstantDataArray_O::___staticClass);
 POINTER_FIX(llvmo::ImmutablePass_O::static_creator);
 SMART_PTR_FIX(core::LexicalEnvironment_O::___staticClassSymbol);
 POINTER_FIX(llvmo::Function_O::static_creator);
 SMART_PTR_FIX(core::SpecialForm_O::___staticClassSymbol);
 SMART_PTR_FIX(llvmo::DataLayout_O::___staticClass);
 SMART_PTR_FIX(core::RegexMatch_O::___staticClassSymbol);
#endif // defined(GC_GLOBALS)
#if defined(GC_GLOBAL_SYMBOLS)
 SMART_PTR_FIX(cl::_sym_aref);
 SMART_PTR_FIX(core::_sym_tooManyArgumentsError);
 SMART_PTR_FIX(llvmo::_sym_AllocaInst_O);
 SMART_PTR_FIX(llvmo::_sym_PassManagerBase_O);
 SMART_PTR_FIX(core::_sym_lookupLoadTimeValue);
 SMART_PTR_FIX(core::_sym_gdb);
 SMART_PTR_FIX(cl::_sym_getDispatchMacroCharacter);
 SMART_PTR_FIX(cl::_sym_string_greaterp);
 SMART_PTR_FIX(cl::_sym_string_NE_);
 SMART_PTR_FIX(kw::_sym_overwrite);
 SMART_PTR_FIX(core::_sym_reader_list_allow_consing_dot);
 SMART_PTR_FIX(core::_sym_backquote_attach_append);
 SMART_PTR_FIX(kw::_sym_eval);
 SMART_PTR_FIX(core::_sym_UnwindProtectEnvironment_O);
 SMART_PTR_FIX(core::_sym_STARsharp_equal_alistSTAR);
 SMART_PTR_FIX(core::_sym_BlockEnvironment_O);
 SMART_PTR_FIX(ext::_sym_getenv);
 SMART_PTR_FIX(cl::_sym_StandardChar_O);
 SMART_PTR_FIX(core::_sym_instanceSig);
 SMART_PTR_FIX(kw::_sym_inherited);
 SMART_PTR_FIX(llvmo::_sym_LLVMDebugVersion6);
 SMART_PTR_FIX(cl::_sym_simple_array);
 SMART_PTR_FIX(cl::_sym_specialOperatorP);
 SMART_PTR_FIX(gray::_sym_stream_file_position);
 SMART_PTR_FIX(llvmo::_sym_PassManager_O);
 SMART_PTR_FIX(core::_sym_LeafSNode_O);
 SMART_PTR_FIX(cl::_sym_list);
 SMART_PTR_FIX(core::_sym_adjustable);
 SMART_PTR_FIX(core::_sym_Archive_O);
 SMART_PTR_FIX(core::_sym_loadTimeValueArray);
 SMART_PTR_FIX(cl::_sym_string);
 SMART_PTR_FIX(core::_sym_STARbq_clobberableSTAR);
 SMART_PTR_FIX(kw::_sym_file);
 SMART_PTR_FIX(llvmo::_sym_Type_O);
 SMART_PTR_FIX(cl::_sym_most_positive_double_float);
 SMART_PTR_FIX(llvmo::_sym_LandingPadInst_O);
 SMART_PTR_FIX(llvmo::_sym_FCMP_FALSE);
 SMART_PTR_FIX(cl::_sym_makeArray);
 SMART_PTR_FIX(cl::_sym_char_GE_);
 SMART_PTR_FIX(cl::_sym_seriousCondition);
 SMART_PTR_FIX(core::_sym_globalFunction);
 SMART_PTR_FIX(cffi::_sym_time);
 SMART_PTR_FIX(clbind::_sym_ClassRep_O);
 SMART_PTR_FIX(core::_sym_ExternalObject_O);
 SMART_PTR_FIX(cl::_sym_warning);
 SMART_PTR_FIX(core::_sym_loadBitcode);
 SMART_PTR_FIX(llvmo::_sym_LLVMDebugVersion10);
 SMART_PTR_FIX(cl::_sym_safety);
 SMART_PTR_FIX(cl::_sym_setf);
 SMART_PTR_FIX(cl::_sym_two_way_stream);
 SMART_PTR_FIX(cffi::_sym_uint8);
 SMART_PTR_FIX(core::_sym_ihsBacktrace);
 SMART_PTR_FIX(cl::_sym_makePathname);
 SMART_PTR_FIX(core::_sym_STARdebugMacroexpandSTAR);
 SMART_PTR_FIX(kw::_sym_if_does_not_exist);
 SMART_PTR_FIX(kw::_sym_io);
 SMART_PTR_FIX(cl::_sym_floatPrecision);
 SMART_PTR_FIX(core::_sym_sharp_vertical_bar);
 SMART_PTR_FIX(core::_sym_instanceRef);
 SMART_PTR_FIX(cl::_sym_unuse_package);
 SMART_PTR_FIX(core::_sym_STARsharp_equal_temp_tableSTAR);
 SMART_PTR_FIX(llvmo::_sym_AttributeNest);
 SMART_PTR_FIX(sockets::_sym_ff_close);
 SMART_PTR_FIX(core::_sym_backquote_simplify);
 SMART_PTR_FIX(llvmo::_sym_LinkOnceODRAutoHideLinkage);
 SMART_PTR_FIX(llvmo::_sym_InsertPoint_O);
 SMART_PTR_FIX(core::_sym_object);
 SMART_PTR_FIX(sockets::_sym_EPERM);
 SMART_PTR_FIX(core::_sym_eof_value);
 SMART_PTR_FIX(core::_sym_currentDir);
 SMART_PTR_FIX(core::_sym_STARsharp_equal_repl_tableSTAR);
 SMART_PTR_FIX(llvmo::_sym_FAdd);
 SMART_PTR_FIX(core::_sym_STARdebugReaderSTAR);
 SMART_PTR_FIX(cl::_sym_unread_char);
 SMART_PTR_FIX(kw::_sym_elementType);
 SMART_PTR_FIX(clos::_sym_classp);
 SMART_PTR_FIX(llvmo::_sym_UndefValue_O);
 SMART_PTR_FIX(llvmo::_sym_TargetMachine_O);
 SMART_PTR_FIX(core::_sym_sourceLineColumn);
 SMART_PTR_FIX(gray::_sym_stream_write_char);
 SMART_PTR_FIX(cl::_sym_standard_char);
 SMART_PTR_FIX(core::_sym_IntArray_O);
 SMART_PTR_FIX(cl::_sym_eval);
 SMART_PTR_FIX(llvmo::_sym_ICMP_SLE);
 SMART_PTR_FIX(core::_sym_sharp_single_quote);
 SMART_PTR_FIX(kw::_sym_relative);
 SMART_PTR_FIX(cl::_sym_provide);
 SMART_PTR_FIX(core::_sym__PLUS_activationFrameNil_PLUS_);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_entry_point);
 SMART_PTR_FIX(llvmo::_sym_UnaryInstruction_O);
 SMART_PTR_FIX(sockets::_sym_SO_LINGER);
 SMART_PTR_FIX(kw::_sym_line_buffered);
 SMART_PTR_FIX(cl::_sym_compute_restarts);
 SMART_PTR_FIX(core::_sym_STARsharp_equal_final_tableSTAR);
 SMART_PTR_FIX(core::_sym_inheritDefaultAllocator);
 SMART_PTR_FIX(llvmo::_sym_valid);
 SMART_PTR_FIX(kw::_sym_use_mps);
 SMART_PTR_FIX(sockets::_sym_ll_setSockoptInt);
 SMART_PTR_FIX(asttooling::_sym_STARclangTemplateArgumentArgKindSTAR);
 SMART_PTR_FIX(cl::_sym_fileNamestring);
 SMART_PTR_FIX(core::_sym_read_list_allow_consing_dot);
 SMART_PTR_FIX(llvmo::_sym_mdnodeGet);
 SMART_PTR_FIX(gctools::_sym_bootstrapKindsP);
 SMART_PTR_FIX(sockets::_sym_ff_listen);
 SMART_PTR_FIX(core::_sym_testMemoryError);
 SMART_PTR_FIX(cl::_sym_wildPathnameP);
 SMART_PTR_FIX(llvmo::_sym_AttributeNoCapture);
 SMART_PTR_FIX(llvmo::_sym_UMax);
 SMART_PTR_FIX(cl::_sym_logior);
 SMART_PTR_FIX(cl::_sym_tagbody);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_interface_type);
 SMART_PTR_FIX(core::_sym_singleDispatchBadLambdaListError);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_function_template);
 SMART_PTR_FIX(core::_sym_dumpTaggedFixnum);
 SMART_PTR_FIX(llvmo::_sym_FCMP_OGE);
 SMART_PTR_FIX(cl::_sym_and);
 SMART_PTR_FIX(kw::_sym_ucs_4);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_namelist_item);
 SMART_PTR_FIX(llvmo::_sym_DIBasicType_O);
 SMART_PTR_FIX(core::_sym_SingleDispatchGenericFunction_O);
 SMART_PTR_FIX(kw::_sym_name);
 SMART_PTR_FIX(core::_sym_structurep);
 SMART_PTR_FIX(llvmo::_sym_IRBuilder_O);
 SMART_PTR_FIX(core::_sym_STARbq_nconcSTAR);
 SMART_PTR_FIX(cl::_sym_logeqv);
 SMART_PTR_FIX(cl::_sym_internalTimeUnitsPerSecond);
 SMART_PTR_FIX(kw::_sym_dispatch_table);
 SMART_PTR_FIX(cl::_sym_broadcast_stream_streams);
 SMART_PTR_FIX(core::_sym_mapappend);
 SMART_PTR_FIX(core::_sym_io);
 SMART_PTR_FIX(cl::_sym_find_restart);
 SMART_PTR_FIX(llvmo::_sym_AttributeNoRedZone);
 SMART_PTR_FIX(llvmo::_sym_AttributeReadOnly);
 SMART_PTR_FIX(ext::_sym_integer8);
 SMART_PTR_FIX(cl::_sym_dolist);
 SMART_PTR_FIX(core::_sym_LambdaListHandler_O);
 SMART_PTR_FIX(core::_sym_reader_double_quote_string);
 SMART_PTR_FIX(kw::_sym_newest);
 SMART_PTR_FIX(core::_sym_coerceToFilename);
 SMART_PTR_FIX(cl::_sym_Symbol_O);
 SMART_PTR_FIX(clos::_sym_clearGfunHash);
 SMART_PTR_FIX(llvmo::_sym_FMul);
 SMART_PTR_FIX(core::_sym_WeakHashTable_O);
 SMART_PTR_FIX(core::_sym_newVersion);
 SMART_PTR_FIX(llvmo::_sym_ConstantExpr_O);
 SMART_PTR_FIX(cl::_sym_lognand);
 SMART_PTR_FIX(gray::_sym_stream_terpri);
 SMART_PTR_FIX(comp::_sym_STARlowLevelTracePrintSTAR);
 SMART_PTR_FIX(llvmo::_sym_AquireRelease);
 SMART_PTR_FIX(kw::_sym_output);
 SMART_PTR_FIX(cl::_sym_ReadTable_O);
 SMART_PTR_FIX(core::_sym_SingleDispatchEffectiveMethodFunction_O);
 SMART_PTR_FIX(core::_sym__PLUS_ecl_syntax_progv_list_PLUS_);
 SMART_PTR_FIX(kw::_sym_formatControl);
 SMART_PTR_FIX(core::_sym_DOT);
 SMART_PTR_FIX(cl::_sym_string_EQ_);
 SMART_PTR_FIX(llvmo::_sym_AttributeByVal);
 SMART_PTR_FIX(cl::_sym_char_LE_);
 SMART_PTR_FIX(cl::_sym_hash_table);
 SMART_PTR_FIX(clos::_sym_std_compute_applicable_methods);
 SMART_PTR_FIX(cl::_sym_symbolValue);
 SMART_PTR_FIX(cl::_sym_macroexpand_1);
 SMART_PTR_FIX(core::_sym_STARprintPackageSTAR);
 SMART_PTR_FIX(llvmo::_sym_UMin);
 SMART_PTR_FIX(llvmo::_sym_moduleFlagAppendUnique);
 SMART_PTR_FIX(llvmo::_sym_Unordered);
 SMART_PTR_FIX(cl::_sym_cadr);
 SMART_PTR_FIX(clos::_sym_standardOptimizedReaderMethod);
 SMART_PTR_FIX(kw::_sym_podSymbolMap);
 SMART_PTR_FIX(kw::_sym_class);
 SMART_PTR_FIX(kw::_sym_allow_other_keys);
 SMART_PTR_FIX(cl::_sym_STARprint_lengthSTAR);
 SMART_PTR_FIX(sockets::_sym_ll_socketReceive);
 SMART_PTR_FIX(llvmo::_sym_disassembleSTAR);
 SMART_PTR_FIX(core::_sym_STARexecutable_nameSTAR);
 SMART_PTR_FIX(core::_sym_extractDeclaresDocstringCode);
 SMART_PTR_FIX(cl::_sym_string_not_lessp);
 SMART_PTR_FIX(cl::_sym_fdefinition);
 SMART_PTR_FIX(gray::_sym_stream_clear_output);
 SMART_PTR_FIX(gray::_sym_output_stream_p);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_common_inclusion);
 SMART_PTR_FIX(llvmo::_sym_NotAtomic);
 SMART_PTR_FIX(core::_sym_STARsourceDatabaseSTAR);
 SMART_PTR_FIX(kw::_sym_device);
 SMART_PTR_FIX(core::_sym_DirectoryIterator_O);
 SMART_PTR_FIX(core::_sym_dynamicGo);
 SMART_PTR_FIX(sockets::_sym_ff_socket);
 SMART_PTR_FIX(cl::_sym_bit);
 SMART_PTR_FIX(llvmo::_sym_AttributeStructRet);
 SMART_PTR_FIX(kw::_sym_calledFunction);
 SMART_PTR_FIX(core::_sym_supersede);
 SMART_PTR_FIX(core::_sym_STARbq_quote_nilSTAR);
 SMART_PTR_FIX(core::_sym_get_sysprop);
 SMART_PTR_FIX(cl::_sym_prog1);
 SMART_PTR_FIX(llvmo::_sym_StoreInst_O);
 SMART_PTR_FIX(core::_sym_printUnreadableObjectFunction);
 SMART_PTR_FIX(llvmo::_sym_UIToFP);
 SMART_PTR_FIX(cl::_sym_complex);
 SMART_PTR_FIX(sockets::_sym__PLUS_af_local_PLUS_);
 SMART_PTR_FIX(cl::_sym_declare);
 SMART_PTR_FIX(sockets::_sym_EAGAIN);
 SMART_PTR_FIX(cl::_sym_length);
 SMART_PTR_FIX(cl::_sym_logicalPathnameTranslations);
 SMART_PTR_FIX(core::_sym_record_field);
 SMART_PTR_FIX(core::_sym_dispatch_macro_character);
 SMART_PTR_FIX(llvmo::_sym_SRem);
 SMART_PTR_FIX(kw::_sym_or);
 SMART_PTR_FIX(core::_sym_coerceToFilePathname);
 SMART_PTR_FIX(asttooling::_sym_VisitStmt);
 SMART_PTR_FIX(cl::_sym_labels);
 SMART_PTR_FIX(core::_sym_fileColumn);
 SMART_PTR_FIX(llvmo::_sym_LinkerPrivateWeakLinkage);
 SMART_PTR_FIX(core::_sym_instanceClassSet);
 SMART_PTR_FIX(kw::_sym_local);
 SMART_PTR_FIX(cl::_sym_most_negative_double_float);
 SMART_PTR_FIX(core::_sym_SNode_O);
 SMART_PTR_FIX(core::_sym_unquote_nsplice);
 SMART_PTR_FIX(cl::_sym_lcm);
 SMART_PTR_FIX(llvmo::_sym_FDiv);
 SMART_PTR_FIX(core::_sym_SymbolList_O);
 SMART_PTR_FIX(cl::_sym_sort);
 SMART_PTR_FIX(core::_sym_render);
 SMART_PTR_FIX(core::_sym_dispatchTable);
 SMART_PTR_FIX(cl::_sym_step);
 SMART_PTR_FIX(kw::_sym_requiredNumberOfArguments);
 SMART_PTR_FIX(core::_sym_STARimplicit_compile_hookSTAR);
 SMART_PTR_FIX(core::_sym_STARpreserve_whitespace_pSTAR);
 SMART_PTR_FIX(cl::_sym_get_output_stream_string);
 SMART_PTR_FIX(sockets::_sym_SOL_SOCKET);
 SMART_PTR_FIX(ext::_sym_AnsiStream_O);
 SMART_PTR_FIX(core::_sym_lambda_with_handler);
 SMART_PTR_FIX(cl::_sym__PLUS_);
 SMART_PTR_FIX(core::_sym_macroexpand_default);
 SMART_PTR_FIX(cffi::_sym_PERCENTload_foreign_library);
 SMART_PTR_FIX(cl::_sym_STARprint_escapeSTAR);
 SMART_PTR_FIX(llvmo::_sym_AppendingLinkage);
 SMART_PTR_FIX(cl::_sym_string_equal);
 SMART_PTR_FIX(cl::_sym_mapcon);
 SMART_PTR_FIX(core::_sym_pointer);
 SMART_PTR_FIX(cl::_sym_most_positive_short_float);
 SMART_PTR_FIX(core::_sym_macro);
 SMART_PTR_FIX(sockets::_sym_ll_socketBind_inetSocket);
 SMART_PTR_FIX(llvmo::_sym_FCMP_UGE);
 SMART_PTR_FIX(sockets::_sym_NETDB_SUCCESS);
 SMART_PTR_FIX(core::_sym_simpleProgramError);
 SMART_PTR_FIX(cl::_sym_ShortFloat_O);
 SMART_PTR_FIX(kw::_sym_givenNumberOfArguments);
 SMART_PTR_FIX(kw::_sym_gzip);
 SMART_PTR_FIX(llvmo::_sym_AttributeUWTable);
 SMART_PTR_FIX(core::_sym_STARsystem_defsetf_update_functionsSTAR);
 SMART_PTR_FIX(llvmo::_sym_User_O);
 SMART_PTR_FIX(core::_sym_Metaobject_O);
 SMART_PTR_FIX(llvmo::_sym_ZExt);
 SMART_PTR_FIX(cl::_sym_stream);
 SMART_PTR_FIX(cl::_sym_standard_char_p);
 SMART_PTR_FIX(cl::_sym_package_use_list);
 SMART_PTR_FIX(core::_sym_renameAndDelete);
 SMART_PTR_FIX(core::_sym_database_dir);
 SMART_PTR_FIX(kw::_sym_operation);
 SMART_PTR_FIX(cl::_sym_STARprint_arraySTAR);
 SMART_PTR_FIX(core::_sym_STARcircleCounterSTAR);
 SMART_PTR_FIX(cffi::_sym_long_long);
 SMART_PTR_FIX(cl::_sym_namestring);
 SMART_PTR_FIX(llvmo::_sym_throwIfMismatchedStructureSizes);
 SMART_PTR_FIX(kw::_sym_fillPointer);
 SMART_PTR_FIX(core::_sym_RecursiveDirectoryIterator_O);
 SMART_PTR_FIX(cl::_sym_macrolet);
 SMART_PTR_FIX(cl::_sym_nthcdr);
 SMART_PTR_FIX(core::_sym_backquote_process);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_base_type);
 SMART_PTR_FIX(cl::_sym_readerError);
 SMART_PTR_FIX(llvmo::_sym_AttributeInReg);
 SMART_PTR_FIX(core::_sym_lookupSourceFileInfo);
 SMART_PTR_FIX(cl::_sym_most_negative_single_float);
 SMART_PTR_FIX(core::_sym_STARmonitorRegisterSourceInfoSTAR);
 SMART_PTR_FIX(cl::_sym_import);
 SMART_PTR_FIX(cl::_sym_setMacroCharacter);
 SMART_PTR_FIX(kw::_sym_downcase);
 SMART_PTR_FIX(core::_sym_separatePairList);
 SMART_PTR_FIX(sockets::_sym_EBADF);
 SMART_PTR_FIX(llvmo::_sym_IRBuilderBase_O);
 SMART_PTR_FIX(clos::_sym_setFuncallableInstanceFunction);
 SMART_PTR_FIX(llvmo::_sym_APInt_O);
 SMART_PTR_FIX(cl::_sym_slot_value);
 SMART_PTR_FIX(gray::_sym_stream_line_column);
 SMART_PTR_FIX(sockets::_sym_ll_socketBind_localSocket);
 SMART_PTR_FIX(cl::_sym_progn);
 SMART_PTR_FIX(sockets::_sym_ll_get_name_service_h_errno);
 SMART_PTR_FIX(llvmo::_sym_DIFile_O);
 SMART_PTR_FIX(core::_sym_float_to_digits);
 SMART_PTR_FIX(llvmo::_sym_FPExt);
 SMART_PTR_FIX(ext::_sym_maybeQuote);
 SMART_PTR_FIX(llvmo::_sym_DIDerivedType_O);
 SMART_PTR_FIX(cl::_sym_StructureClass_O);
 SMART_PTR_FIX(gray::_sym_stream_write_byte);
 SMART_PTR_FIX(cl::_sym_equalp);
 SMART_PTR_FIX(llvmo::_sym_Xor);
 SMART_PTR_FIX(core::_sym_default);
 SMART_PTR_FIX(kw::_sym_message);
 SMART_PTR_FIX(cl::_sym_charUpcase);
 SMART_PTR_FIX(llvmo::_sym_AttributeInlineHint);
 SMART_PTR_FIX(kw::_sym_target_os_linux);
 SMART_PTR_FIX(cffi::_sym_unsigned_char);
 SMART_PTR_FIX(core::_sym_isString);
 SMART_PTR_FIX(llvmo::_sym_interpreter);
 SMART_PTR_FIX(llvmo::_sym_DW_LANG_COMMON_LISP);
 SMART_PTR_FIX(llvmo::_sym__PLUS_globalBootFunctionsNameSize_PLUS_);
 SMART_PTR_FIX(kw::_sym_external);
 SMART_PTR_FIX(cl::_sym_conjugate);
 SMART_PTR_FIX(llvmo::_sym_STARsynchronization_scopeSTAR);
 SMART_PTR_FIX(llvmo::_sym_STARBinaryOpsSTAR);
 SMART_PTR_FIX(cl::_sym_mapl);
 SMART_PTR_FIX(cl::_sym_concatenated_stream_streams);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_GNU_template_template_param);
 SMART_PTR_FIX(cl::_sym_letSTAR);
 SMART_PTR_FIX(serveEvent::_sym_ll_serveEventNoTimeout);
 SMART_PTR_FIX(cl::_sym_AMPbody);
 SMART_PTR_FIX(kw::_sym_docstring);
 SMART_PTR_FIX(kw::_sym_up);
 SMART_PTR_FIX(cl::_sym_restartName);
 SMART_PTR_FIX(cl::_sym_read_from_string);
 SMART_PTR_FIX(core::_sym__PLUS_io_syntax_progv_list_PLUS_);
 SMART_PTR_FIX(gray::_sym_stream_advance_to_column);
 SMART_PTR_FIX(cffi::_sym_int8);
 SMART_PTR_FIX(core::_sym_debugLogOff);
 SMART_PTR_FIX(llvmo::_sym_FCMP_ULE);
 SMART_PTR_FIX(core::_sym_unrecognizedKeywordArgumentError);
 SMART_PTR_FIX(core::_sym_STARstandard_readtableSTAR);
 SMART_PTR_FIX(core::_sym_BranchSNode_O);
 SMART_PTR_FIX(cl::_sym_funcall);
 SMART_PTR_FIX(core::_sym_CandoException_O);
 SMART_PTR_FIX(core::_sym_makeSureClosClassSlotsMatchClass);
 SMART_PTR_FIX(kw::_sym_brcl);
 SMART_PTR_FIX(core::_sym_setf_findClass);
 SMART_PTR_FIX(core::_sym_setRunTimeValuesVector);
 SMART_PTR_FIX(llvmo::_sym_FSub);
 SMART_PTR_FIX(kw::_sym_line);
 SMART_PTR_FIX(sockets::_sym_ENETUNREACH);
 SMART_PTR_FIX(llvmo::_sym_ConstantStruct_O);
 SMART_PTR_FIX(cl::_sym_maphash);
 SMART_PTR_FIX(cl::_sym_endOfFile);
 SMART_PTR_FIX(core::_sym_symbolMacro);
 SMART_PTR_FIX(llvmo::_sym_AttributeReadNone);
 SMART_PTR_FIX(llvmo::_sym_LoadInst_O);
 SMART_PTR_FIX(core::_sym_ObjectSet_O);
 SMART_PTR_FIX(core::_sym_Specializer_O);
 SMART_PTR_FIX(core::_sym_bdsTop);
 SMART_PTR_FIX(cl::_sym_imagpart);
 SMART_PTR_FIX(llvmo::_sym_verifyFunction);
 SMART_PTR_FIX(cl::_sym_divisionByZero);
 SMART_PTR_FIX(core::_sym_structure_include);
 SMART_PTR_FIX(cl::_sym_AMPoptional);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_subprogram);
 SMART_PTR_FIX(serveEvent::_sym_ll_fdset_size);
 SMART_PTR_FIX(cl::_sym_vectorPushExtend);
 SMART_PTR_FIX(cffi::_sym_size);
 SMART_PTR_FIX(cl::_sym_lognot);
 SMART_PTR_FIX(core::_sym_StrWithFillPtr_O);
 SMART_PTR_FIX(llvmo::_sym_parseBitcodeFile);
 SMART_PTR_FIX(cl::_sym_Bit);
 SMART_PTR_FIX(core::_sym__SHARP__BANG_);
 SMART_PTR_FIX(core::_sym_STARstartRunTimeSTAR);
 SMART_PTR_FIX(cl::_sym_STARpackageSTAR);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_MIPS_loop);
 SMART_PTR_FIX(llvmo::_sym_ICMP_ULE);
 SMART_PTR_FIX(cl::_sym_Number_O);
 SMART_PTR_FIX(core::_sym_overwrite);
 SMART_PTR_FIX(cl::_sym_fileError);
 SMART_PTR_FIX(cl::_sym_otherwise);
 SMART_PTR_FIX(cl::_sym_charEqual);
 SMART_PTR_FIX(cl::_sym_disassemble);
 SMART_PTR_FIX(llvmo::_sym_STARdwarfConstantsSTAR);
 SMART_PTR_FIX(cl::_sym_getInternalRealTime);
 SMART_PTR_FIX(cl::_sym_prin1);
 SMART_PTR_FIX(clos::_sym_compute_applicable_methods_using_classes);
 SMART_PTR_FIX(clbind::_sym_ClassRegistry_O);
 SMART_PTR_FIX(cl::_sym_pathnameVersion);
 SMART_PTR_FIX(cl::_sym_null);
 SMART_PTR_FIX(cl::_sym_logxor);
 SMART_PTR_FIX(cl::_sym_acons);
 SMART_PTR_FIX(cl::_sym_userHomedirPathname);
 SMART_PTR_FIX(core::_sym_ensureSingleDispatchMethod);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_with_stmt);
 SMART_PTR_FIX(sockets::_sym__PLUS_af_inet_PLUS_);
 SMART_PTR_FIX(llvmo::_sym_Min);
 SMART_PTR_FIX(cl::_sym_printObject);
 SMART_PTR_FIX(cl::_sym_nreverse);
 SMART_PTR_FIX(cl::_sym_LogicalPathname_O);
 SMART_PTR_FIX(asttooling::_sym_VisitType);
 SMART_PTR_FIX(llvmo::_sym__PLUS_globalBootFunctionsName_PLUS_);
 SMART_PTR_FIX(kw::_sym_defaults);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_formal_parameter);
 SMART_PTR_FIX(cffi::_sym_short);
 SMART_PTR_FIX(core::_sym_declaredSpecial);
 SMART_PTR_FIX(core::_sym_bdsVal);
 SMART_PTR_FIX(cl::_sym__GE_);
 SMART_PTR_FIX(cl::_sym_getOutputStreamString);
 SMART_PTR_FIX(core::_sym_STARconsing_dot_allowedSTAR);
 SMART_PTR_FIX(sockets::_sym_NO_RECOVERY);
 SMART_PTR_FIX(core::_sym_integerToString);
 SMART_PTR_FIX(ext::_sym_specialVar);
 SMART_PTR_FIX(cl::_sym_clrhash);
 SMART_PTR_FIX(llvmo::_sym_DIDescriptor_O);
 SMART_PTR_FIX(core::_sym_VectorObjects_O);
 SMART_PTR_FIX(cl::_sym_STARprint_miser_widthSTAR);
 SMART_PTR_FIX(llvmo::_sym_Monotonic);
 SMART_PTR_FIX(core::_sym_base_string_concatenate);
 SMART_PTR_FIX(core::_sym_bq_remove_tokens);
 SMART_PTR_FIX(core::_sym_dladdr);
 SMART_PTR_FIX(cl::_sym_unboundSlot);
 SMART_PTR_FIX(kw::_sym_if_exists);
 SMART_PTR_FIX(core::_sym_GlueEnvironment_O);
 SMART_PTR_FIX(cl::_sym_quote);
 SMART_PTR_FIX(cl::_sym_MultipleValuesLimit);
 SMART_PTR_FIX(cl::_sym_member);
 SMART_PTR_FIX(llvmo::_sym_FRem);
 SMART_PTR_FIX(kw::_sym_macro_function);
 SMART_PTR_FIX(cl::_sym_unintern);
 SMART_PTR_FIX(core::_sym_conditionMessage);
 SMART_PTR_FIX(core::_sym_sequence_start_end);
 SMART_PTR_FIX(cl::_sym_symbol);
 SMART_PTR_FIX(cl::_sym_define_modify_macro);
 SMART_PTR_FIX(llvmo::_sym_AttributeNonLazyBind);
 SMART_PTR_FIX(core::_sym_backquote_append);
 SMART_PTR_FIX(core::_sym_set_record_field);
 SMART_PTR_FIX(kw::_sym_capitalize);
 SMART_PTR_FIX(cl::_sym_define_method_combination);
 SMART_PTR_FIX(cl::_sym_STARprint_pprint_dispatchSTAR);
 SMART_PTR_FIX(cl::_sym_ExtendedChar_O);
 SMART_PTR_FIX(core::_sym_makeStringOutputStream);
 SMART_PTR_FIX(cl::_sym_type_of);
 SMART_PTR_FIX(core::_sym_ensureSingleDispatchGenericFunction);
 SMART_PTR_FIX(cl::_sym_integerp);
 SMART_PTR_FIX(llvmo::_sym_DICompileUnit_O);
 SMART_PTR_FIX(cl::_sym_AMPaux);
 SMART_PTR_FIX(cl::_sym_some);
 SMART_PTR_FIX(cl::_sym_packagep);
 SMART_PTR_FIX(cl::_sym_random);
 SMART_PTR_FIX(kw::_sym_stream);
 SMART_PTR_FIX(cl::_sym_AMPenvironment);
 SMART_PTR_FIX(cl::_sym_butlast);
 SMART_PTR_FIX(llvmo::_sym_FCMP_ULT);
 SMART_PTR_FIX(cl::_sym_every);
 SMART_PTR_FIX(core::_sym_ihsNext);
 SMART_PTR_FIX(kw::_sym_lf);
 SMART_PTR_FIX(core::_sym_cArgumentsLimit);
 SMART_PTR_FIX(cl::_sym_tanh);
 SMART_PTR_FIX(kw::_sym_multiple_escape_character);
 SMART_PTR_FIX(cl::_sym_floatp);
 SMART_PTR_FIX(core::_sym_color);
 SMART_PTR_FIX(cl::_sym_constantp);
 SMART_PTR_FIX(cl::_sym_close);
 SMART_PTR_FIX(core::_sym_WeakPointer_O);
 SMART_PTR_FIX(core::_sym_bq_simplify);
 SMART_PTR_FIX(cl::_sym_compiled_function_p);
 SMART_PTR_FIX(gray::_sym_stream_read_char);
 SMART_PTR_FIX(core::_sym_localGo);
 SMART_PTR_FIX(cl::_sym_cellError);
 SMART_PTR_FIX(cl::_sym_storageCondition);
 SMART_PTR_FIX(cl::_sym_complexp);
 SMART_PTR_FIX(cl::_sym_StructureObject_O);
 SMART_PTR_FIX(cl::_sym_peekChar);
 SMART_PTR_FIX(core::_sym_bq_bracket);
 SMART_PTR_FIX(core::_sym_test_not);
 SMART_PTR_FIX(core::_sym_runtimeEnvironment);
 SMART_PTR_FIX(core::_sym_loadTimeValuesIds);
 SMART_PTR_FIX(cl::_sym_condition);
 SMART_PTR_FIX(core::_sym_makeStringOutputStreamFromString);
 SMART_PTR_FIX(sockets::_sym_EINVAL);
 SMART_PTR_FIX(cl::_sym_output_stream_p);
 SMART_PTR_FIX(cl::_sym_cdr);
 SMART_PTR_FIX(cl::_sym_STARtrace_outputSTAR);
 SMART_PTR_FIX(cl::_sym_make_two_way_stream);
 SMART_PTR_FIX(cl::_sym_echo_stream_input_stream);
 SMART_PTR_FIX(cl::_sym_standard_class);
 SMART_PTR_FIX(core::_sym_member1);
 SMART_PTR_FIX(cl::_sym_STARprint_readablySTAR);
 SMART_PTR_FIX(cl::_sym_setq);
 SMART_PTR_FIX(core::_sym_create);
 SMART_PTR_FIX(cl::_sym_Real_O);
 SMART_PTR_FIX(llvmo::_sym_Mul);
 SMART_PTR_FIX(core::_sym_STARinput_streamSTAR);
 SMART_PTR_FIX(core::_sym_tooFewArguments);
 SMART_PTR_FIX(core::_sym_implicit_compile_hook_default);
 SMART_PTR_FIX(kw::_sym_load_toplevel);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_lexical_block);
 SMART_PTR_FIX(cl::_sym_fmakunbound);
 SMART_PTR_FIX(core::_sym_unbound);
 SMART_PTR_FIX(core::_sym_backquote);
 SMART_PTR_FIX(cl::_sym_SynonymStream_O);
 SMART_PTR_FIX(llvmo::_sym_AttributeNoInline);
 SMART_PTR_FIX(cl::_sym_dotimes);
 SMART_PTR_FIX(llvmo::_sym_Constant_O);
 SMART_PTR_FIX(ext::_sym_byte8);
 SMART_PTR_FIX(cl::_sym_macroFunction);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_access_declaration);
 SMART_PTR_FIX(cl::_sym_translateLogicalPathname);
 SMART_PTR_FIX(kw::_sym_single_escape_character);
 SMART_PTR_FIX(gray::_sym_aSingleGraySymbol);
 SMART_PTR_FIX(kw::_sym_instance);
 SMART_PTR_FIX(cl::_sym_locally);
 SMART_PTR_FIX(cl::_sym_load);
 SMART_PTR_FIX(core::_sym_STARARGSSTAR);
 SMART_PTR_FIX(cl::_sym_rest);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_shared_type);
 SMART_PTR_FIX(cl::_sym_documentation);
 SMART_PTR_FIX(core::_sym_end);
 SMART_PTR_FIX(sockets::_sym_SO_DONTROUTE);
 SMART_PTR_FIX(sockets::_sym_TRY_AGAIN);
 SMART_PTR_FIX(serveEvent::_sym__PLUS_EINTR_PLUS_);
 SMART_PTR_FIX(cl::_sym_if);
 SMART_PTR_FIX(cl::_sym_two_way_stream_input_stream);
 SMART_PTR_FIX(llvmo::_sym_Trunc);
 SMART_PTR_FIX(kw::_sym_pathname);
 SMART_PTR_FIX(kw::_sym_address_model_32);
 SMART_PTR_FIX(cl::_sym_BuiltInClass_O);
 SMART_PTR_FIX(llvmo::_sym_ExternalWeakLinkage);
 SMART_PTR_FIX(core::_sym_makeStructure);
 SMART_PTR_FIX(core::_sym_STARfset);
 SMART_PTR_FIX(core::_sym_reader_backquoted_expression);
 SMART_PTR_FIX(kw::_sym_append);
 SMART_PTR_FIX(core::_sym_instanceSet);
 SMART_PTR_FIX(cl::_sym_eql);
 SMART_PTR_FIX(cl::_sym_print);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_imported_module);
 SMART_PTR_FIX(llvmo::_sym_DIArray_O);
 SMART_PTR_FIX(ext::_sym_aSingleExtSymbol);
 SMART_PTR_FIX(core::_sym_MacroletEnvironment_O);
 SMART_PTR_FIX(cl::_sym_rename_file);
 SMART_PTR_FIX(cffi::_sym_char);
 SMART_PTR_FIX(cffi::_sym_foreign_alloc);
 SMART_PTR_FIX(cl::_sym_no_applicable_method);
 SMART_PTR_FIX(cl::_sym_simpleTypeError);
 SMART_PTR_FIX(core::_sym_Iterator_O);
 SMART_PTR_FIX(cl::_sym_optimize);
 SMART_PTR_FIX(cffi::_sym_PERCENTforeign_type_size);
 SMART_PTR_FIX(core::_sym_calculateMissingCommonLispSymbols);
 SMART_PTR_FIX(cl::_sym_eval_when);
 SMART_PTR_FIX(core::_sym_STARenablePrintPrettySTAR);
 SMART_PTR_FIX(core::_sym_STARprint_structureSTAR);
 SMART_PTR_FIX(cl::_sym_STARload_printSTAR);
 SMART_PTR_FIX(cl::_sym_exp);
 SMART_PTR_FIX(core::_sym___init__);
 SMART_PTR_FIX(cl::_sym_getf);
 SMART_PTR_FIX(core::_sym_dlsym);
 SMART_PTR_FIX(cl::_sym_or);
 SMART_PTR_FIX(core::_sym_coerceToPhysicalPathname);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_class_template);
 SMART_PTR_FIX(cl::_sym_Fixnum_O);
 SMART_PTR_FIX(core::_sym_environmentTypeList);
 SMART_PTR_FIX(asttooling::_sym_CreateASTConsumer);
 SMART_PTR_FIX(cl::_sym_T_O);
 SMART_PTR_FIX(core::_sym_sharp_dot);
 SMART_PTR_FIX(core::_sym_initial_element);
 SMART_PTR_FIX(cl::_sym_readChar);
 SMART_PTR_FIX(cl::_sym_symbolName);
 SMART_PTR_FIX(cl::_sym_printNotReadable);
 SMART_PTR_FIX(llvmo::_sym_URem);
 SMART_PTR_FIX(cl::_sym_STARmacroexpand_hookSTAR);
 SMART_PTR_FIX(core::_sym_invalidKeywordArgumentError);
 SMART_PTR_FIX(cl::_sym_assoc);
 SMART_PTR_FIX(core::_sym_fromTaggedFixnum);
 SMART_PTR_FIX(gray::_sym_stream_force_output);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_thrown_type);
 SMART_PTR_FIX(llvmo::_sym_WeakODRLinkage);
 SMART_PTR_FIX(core::_sym_setf_find_single_dispatch_generic_function);
 SMART_PTR_FIX(cl::_sym_multipleValueSetq);
 SMART_PTR_FIX(kw::_sym_not);
 SMART_PTR_FIX(cl::_sym_remove);
 SMART_PTR_FIX(cl::_sym_describe);
 SMART_PTR_FIX(cl::_sym_nbutlast);
 SMART_PTR_FIX(cl::_sym_append);
 SMART_PTR_FIX(core::_sym_reader_quote);
 SMART_PTR_FIX(core::_sym_record_cons);
 SMART_PTR_FIX(gray::_sym_streamp);
 SMART_PTR_FIX(cl::_sym_destructuring_bind);
 SMART_PTR_FIX(llvmo::_sym_ICMP_SLT);
 SMART_PTR_FIX(core::_sym_forget_all_single_dispatch_generic_functions);
 SMART_PTR_FIX(llvmo::_sym_LinkOnceODRLinkage);
 SMART_PTR_FIX(llvmo::_sym_AttributeNoImplicitFloat);
 SMART_PTR_FIX(core::_sym_STARenvironmentPrintingTabSTAR);
 SMART_PTR_FIX(core::_sym_FunctionValueEnvironment_O);
 SMART_PTR_FIX(llvmo::_sym_SwitchInst_O);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_structure_type);
 SMART_PTR_FIX(cl::_sym_most_positive_fixnum);
 SMART_PTR_FIX(cl::_sym_nconc);
 SMART_PTR_FIX(core::_sym_STARcommandLineArgumentsSTAR);
 SMART_PTR_FIX(core::_sym_dimensions);
 SMART_PTR_FIX(cl::_sym_boundp);
 SMART_PTR_FIX(kw::_sym_rehashThreshold);
 SMART_PTR_FIX(gctools::_sym_maxBootstrapKinds);
 SMART_PTR_FIX(clos::_sym_standardOptimizedWriterFunction);
 SMART_PTR_FIX(core::_sym_STARcircle_counterSTAR);
 SMART_PTR_FIX(cl::_sym_charDowncase);
 SMART_PTR_FIX(llvmo::_sym_DIScope_O);
 SMART_PTR_FIX(sockets::_sym__PLUS_brcl_stream_mode_io_PLUS_);
 SMART_PTR_FIX(gray::_sym_stream_fresh_line);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_dwarf_procedure);
 SMART_PTR_FIX(cl::_sym_Function_O);
 SMART_PTR_FIX(llvmo::_sym_makeAPInt1);
 SMART_PTR_FIX(cl::_sym_pprint_dispatch);
 SMART_PTR_FIX(cffi::_sym_void);
 SMART_PTR_FIX(llvmo::_sym_ICMP_UGT);
 SMART_PTR_FIX(core::_sym_recursive_p);
 SMART_PTR_FIX(cl::_sym_macroexpand);
 SMART_PTR_FIX(cl::_sym_speed);
 SMART_PTR_FIX(clos::_sym_standardOptimizedWriterMethod);
 SMART_PTR_FIX(sockets::_sym_ECONNREFUSED);
 SMART_PTR_FIX(kw::_sym_non_terminating_macro_character);
 SMART_PTR_FIX(core::_sym_SymbolMacroletEnvironment_O);
 SMART_PTR_FIX(sockets::_sym_SO_REUSEADDR);
 SMART_PTR_FIX(core::_sym_selectPackage);
 SMART_PTR_FIX(core::_sym_key);
 SMART_PTR_FIX(core::_sym_findFileInLispPath);
 SMART_PTR_FIX(llvmo::_sym_SDiv);
 SMART_PTR_FIX(ext::_sym_getEnv);
 SMART_PTR_FIX(core::_sym_Instance_O);
 SMART_PTR_FIX(sockets::_sym_ll_getSockoptLinger);
 SMART_PTR_FIX(core::_sym_annotate);
 SMART_PTR_FIX(sockets::_sym_EPROTONOSUPPORT);
 SMART_PTR_FIX(cl::_sym_pathnamep);
 SMART_PTR_FIX(cl::_sym_programError);
 SMART_PTR_FIX(cl::_sym_freshLine);
 SMART_PTR_FIX(llvmo::_sym__PLUS_ClaspMainFunctionName_PLUS_);
 SMART_PTR_FIX(cl::_sym_floor);
 SMART_PTR_FIX(llvmo::_sym_STARmostRecentLlvmFinalizationTimeSTAR);
 SMART_PTR_FIX(llvmo::_sym_PHINode_O);
 SMART_PTR_FIX(core::_sym_system);
 SMART_PTR_FIX(cl::_sym_open_stream_p);
 SMART_PTR_FIX(core::_sym_functionName);
 SMART_PTR_FIX(llvmo::_sym_Function_O);
 SMART_PTR_FIX(cl::_sym_digitCharP);
 SMART_PTR_FIX(core::_sym_deserialize_xml);
 SMART_PTR_FIX(core::_sym_quasiquote);
 SMART_PTR_FIX(cl::_sym_simpleError);
 SMART_PTR_FIX(core::_sym_lexicalFunction);
 SMART_PTR_FIX(sockets::_sym_ll_getSockoptBool);
 SMART_PTR_FIX(cffi::_sym_ptrdiff);
 SMART_PTR_FIX(core::_sym_loadCando);
 SMART_PTR_FIX(cl::_sym_stringp);
 SMART_PTR_FIX(llvmo::_sym_Sub);
 SMART_PTR_FIX(cl::_sym_restart);
 SMART_PTR_FIX(kw::_sym_type);
 SMART_PTR_FIX(llvmo::_sym_LLVMDebugVersion5);
 SMART_PTR_FIX(cl::_sym__TIMES_);
 SMART_PTR_FIX(kw::_sym_object);
 SMART_PTR_FIX(cl::_sym_gcd);
 SMART_PTR_FIX(core::_sym_WeakKeyHashTable_O);
 SMART_PTR_FIX(llvmo::_sym_StructType_O);
 SMART_PTR_FIX(cl::_sym_file_write_date);
 SMART_PTR_FIX(llvmo::_sym_Release);
 SMART_PTR_FIX(core::_sym_STARbq_appendSTAR);
 SMART_PTR_FIX(cl::_sym_nil);
 SMART_PTR_FIX(llvmo::_sym_ConstantFP_O);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_GNU_formal_parameter_pack);
 SMART_PTR_FIX(cl::_sym_STARreadDefaultFloatFormatSTAR);
 SMART_PTR_FIX(core::_sym_classifyLetVariablesAndDeclares);
 SMART_PTR_FIX(cl::_sym_string_GT_);
 SMART_PTR_FIX(cl::_sym_make_synonym_stream);
 SMART_PTR_FIX(core::_sym_STARprintStructureSTAR);
 SMART_PTR_FIX(sockets::_sym_socketSendNoAddress);
 SMART_PTR_FIX(core::_sym_LightUserData_O);
 SMART_PTR_FIX(sockets::_sym_SO_RCVBUF);
 SMART_PTR_FIX(cl::_sym_cond);
 SMART_PTR_FIX(gray::_sym_streamClearInput);
 SMART_PTR_FIX(cl::_sym_char);
 SMART_PTR_FIX(llvmo::_sym_moduleFlagError);
 SMART_PTR_FIX(llvmo::_sym_FenceInst_O);
 SMART_PTR_FIX(core::_sym_hash_equal);
 SMART_PTR_FIX(cl::_sym_string_not_greaterp);
 SMART_PTR_FIX(cl::_sym_Complex_O);
 SMART_PTR_FIX(llvmo::_sym_FCMP_OGT);
 SMART_PTR_FIX(core::_sym_SourceManager_O);
 SMART_PTR_FIX(cl::_sym_float);
 SMART_PTR_FIX(core::_sym_instance);
 SMART_PTR_FIX(cl::_sym_array_rank_limit);
 SMART_PTR_FIX(cl::_sym_copyList);
 SMART_PTR_FIX(serveEvent::_sym_ll_fd_isset);
 SMART_PTR_FIX(kw::_sym_print);
 SMART_PTR_FIX(core::_sym_put_sysprop);
 SMART_PTR_FIX(core::_sym_ObjRef_O);
 SMART_PTR_FIX(core::_sym_sharp_c);
 SMART_PTR_FIX(cl::_sym_not);
 SMART_PTR_FIX(llvmo::_sym_PointerType_O);
 SMART_PTR_FIX(cl::_sym_char_code_limit);
 SMART_PTR_FIX(llvmo::_sym_module_get_function_list);
 SMART_PTR_FIX(core::_sym_reader_read_double_quote_string);
 SMART_PTR_FIX(cl::_sym_STARdebuggerHookSTAR);
 SMART_PTR_FIX(core::_sym_log1p);
 SMART_PTR_FIX(cl::_sym_file_string_length);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_label);
 SMART_PTR_FIX(core::_sym_tooFewArgumentsError);
 SMART_PTR_FIX(cl::_sym_SignedByte);
 SMART_PTR_FIX(llvmo::_sym_JITEmitDebugInfoToDisk);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_const_type);
 SMART_PTR_FIX(cl::_sym_STARread_suppressSTAR);
 SMART_PTR_FIX(gctools::_sym_bootstrapKindSymbols);
 SMART_PTR_FIX(llvmo::_sym_AttributeSExt);
 SMART_PTR_FIX(cl::_sym_STARterminal_ioSTAR);
 SMART_PTR_FIX(cl::_sym_restart_bind);
 SMART_PTR_FIX(cl::_sym_printNotReadableObject);
 SMART_PTR_FIX(cl::_sym_nstring_upcase);
 SMART_PTR_FIX(llvmo::_sym_Linker_O);
 SMART_PTR_FIX(core::_sym_sharp_o);
 SMART_PTR_FIX(core::_sym_processLambdaList);
 SMART_PTR_FIX(cl::_sym_Vector_O);
 SMART_PTR_FIX(cl::_sym_char_name);
 SMART_PTR_FIX(kw::_sym_end);
 SMART_PTR_FIX(kw::_sym_load);
 SMART_PTR_FIX(core::_sym_ihsTop);
 SMART_PTR_FIX(cl::_sym_string_lessp);
 SMART_PTR_FIX(core::_sym_implementationClass);
 SMART_PTR_FIX(core::_sym_IOFileStream_O);
 SMART_PTR_FIX(core::_sym_eof_error_p);
 SMART_PTR_FIX(cl::_sym_T);
 SMART_PTR_FIX(cl::_sym_catch);
 SMART_PTR_FIX(core::_sym_MultiStringBuffer_O);
 SMART_PTR_FIX(core::_sym_Environment_O);
 SMART_PTR_FIX(cl::_sym_the);
 SMART_PTR_FIX(llvmo::_sym_DIType_O);
 SMART_PTR_FIX(cl::_sym_synonym_stream_symbol);
 SMART_PTR_FIX(core::_sym_StringSet_O);
 SMART_PTR_FIX(sockets::_sym_ll_autoCloseTwoWayStream);
 SMART_PTR_FIX(comp::_sym_aSingleCompilerSymbol);
 SMART_PTR_FIX(cffi::_sym_int);
 SMART_PTR_FIX(core::_sym_VectorObjectsWithFillPtr_O);
 SMART_PTR_FIX(llvmo::_sym_InternalLinkage);
 SMART_PTR_FIX(core::_sym_backquote_bracket);
 SMART_PTR_FIX(cl::_sym_streamp);
 SMART_PTR_FIX(core::_sym_cl_fixnum_bits);
 SMART_PTR_FIX(core::_sym_Binder_O);
 SMART_PTR_FIX(kw::_sym_syntax);
 SMART_PTR_FIX(cl::_sym_read_line);
 SMART_PTR_FIX(cl::_sym_package);
 SMART_PTR_FIX(core::_sym_nan);
 SMART_PTR_FIX(cl::_sym_simple_string_p);
 SMART_PTR_FIX(cl::_sym_AMPwhole);
 SMART_PTR_FIX(cl::_sym_Ratio_O);
 SMART_PTR_FIX(cl::_sym_most_positive_single_float);
 SMART_PTR_FIX(cl::_sym_mismatch);
 SMART_PTR_FIX(llvmo::_sym_LLVMDebugVersion8);
 SMART_PTR_FIX(sockets::_sym_ll_setfNonBlockingMode);
 SMART_PTR_FIX(llvmo::_sym_Instruction_O);
 SMART_PTR_FIX(cl::_sym_functionp);
 SMART_PTR_FIX(core::_sym_sharp_a);
 SMART_PTR_FIX(llvmo::_sym_DILexicalBlock_O);
 SMART_PTR_FIX(llvmo::_sym_FCMP_PREDICATE);
 SMART_PTR_FIX(core::_sym_streamLinenumber);
 SMART_PTR_FIX(core::_sym_STARllvmFunctionNameHookSTAR);
 SMART_PTR_FIX(kw::_sym_formatArguments);
 SMART_PTR_FIX(clos::_sym_FuncallableStandardClass_O);
 SMART_PTR_FIX(kw::_sym_datum);
 SMART_PTR_FIX(core::_sym_HashTableEq_O);
 SMART_PTR_FIX(cl::_sym_nth);
 SMART_PTR_FIX(core::_sym_CompileTimeEnvironment_O);
 SMART_PTR_FIX(core::_sym_instancep);
 SMART_PTR_FIX(cl::_sym__DIVIDE_);
 SMART_PTR_FIX(cl::_sym_make_symbol);
 SMART_PTR_FIX(ext::_sym__PLUS_processErrorOutput_PLUS_);
 SMART_PTR_FIX(sockets::_sym_ll_makeStreamFromFd);
 SMART_PTR_FIX(cl::_sym_STARread_evalSTAR);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_hi_user);
 SMART_PTR_FIX(cl::_sym_STARprint_circleSTAR);
 SMART_PTR_FIX(kw::_sym_escape);
 SMART_PTR_FIX(cl::_sym_input_stream_p);
 SMART_PTR_FIX(llvmo::_sym_makeAP32);
 SMART_PTR_FIX(cl::_sym_variable);
 SMART_PTR_FIX(core::_sym_structureSubtypep);
 SMART_PTR_FIX(core::_sym_LexicalEnvironment_O);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_namespace);
 SMART_PTR_FIX(kw::_sym_none);
 SMART_PTR_FIX(core::_sym_STARcircle_stackSTAR);
 SMART_PTR_FIX(cl::_sym_FileStream_O);
 SMART_PTR_FIX(cl::_sym_streamError);
 SMART_PTR_FIX(llvmo::_sym_getOrCreateExternalGlobal);
 SMART_PTR_FIX(llvmo::_sym_LinkerPrivateLinkage);
 SMART_PTR_FIX(core::_sym_CatchEnvironment_O);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_variant_part);
 SMART_PTR_FIX(core::_sym_clock_gettime_nanoseconds);
 SMART_PTR_FIX(cl::_sym_format);
 SMART_PTR_FIX(cl::_sym_STARread_baseSTAR);
 SMART_PTR_FIX(kw::_sym_unbound);
 SMART_PTR_FIX(core::_sym_structure_print_function);
 SMART_PTR_FIX(sockets::_sym_TCP_NODELAY);
 SMART_PTR_FIX(cl::_sym_makeCondition);
 SMART_PTR_FIX(llvmo::_sym_AttributeReturnsTwice);
 SMART_PTR_FIX(sockets::_sym_ll_getSockoptTimeval);
 SMART_PTR_FIX(core::_sym_backquote_splicing_frob);
 SMART_PTR_FIX(cl::_sym_defconstant);
 SMART_PTR_FIX(cl::_sym_numerator);
 SMART_PTR_FIX(cl::_sym_use_package);
 SMART_PTR_FIX(core::_sym_processDeclarations);
 SMART_PTR_FIX(cffi::_sym_unsigned_long_long);
 SMART_PTR_FIX(cl::_sym_floatingPointUnderflow);
 SMART_PTR_FIX(kw::_sym_host);
 SMART_PTR_FIX(core::_sym_loadTimeValuesDump);
 SMART_PTR_FIX(core::_sym_WeakKeyMapping_O);
 SMART_PTR_FIX(sockets::_sym_NETDB_INTERNAL);
 SMART_PTR_FIX(kw::_sym_start);
 SMART_PTR_FIX(core::_sym_sharp_colon);
 SMART_PTR_FIX(core::_sym_UserData_O);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_pointer_type);
 SMART_PTR_FIX(core::_sym_fixnum_number_of_bits);
 SMART_PTR_FIX(cl::_sym_sin);
 SMART_PTR_FIX(llvmo::_sym_PrivateLinkage);
 SMART_PTR_FIX(kw::_sym_operands);
 SMART_PTR_FIX(kw::_sym_preserve);
 SMART_PTR_FIX(ext::_sym_lexicalVar);
 SMART_PTR_FIX(core::_sym_sharp_p);
 SMART_PTR_FIX(llvmo::_sym_VectorType_O);
 SMART_PTR_FIX(core::_sym_SexpSaveArchive_O);
 SMART_PTR_FIX(cl::_sym_STARprint_caseSTAR);
 SMART_PTR_FIX(cl::_sym_findSymbol);
 SMART_PTR_FIX(core::_sym_functionBlockName);
 SMART_PTR_FIX(kw::_sym_internal);
 SMART_PTR_FIX(llvmo::_sym_DataLayout_O);
 SMART_PTR_FIX(cffi::_sym_PERCENTsetf_mem_ref);
 SMART_PTR_FIX(cl::_sym_STARbreakOnSignalsSTAR);
 SMART_PTR_FIX(cl::_sym_STARprint_baseSTAR);
 SMART_PTR_FIX(llvmo::_sym_Nand);
 SMART_PTR_FIX(cl::_sym_UnsignedByte);
 SMART_PTR_FIX(cl::_sym_copyStructure);
 SMART_PTR_FIX(cl::_sym_consp);
 SMART_PTR_FIX(comp::_sym_compileInEnv);
 SMART_PTR_FIX(ext::_sym_STARinvokeDebuggerHookSTAR);
 SMART_PTR_FIX(cl::_sym_Integer_O);
 SMART_PTR_FIX(gray::_sym_stream_listen);
 SMART_PTR_FIX(cl::_sym_lognor);
 SMART_PTR_FIX(core::_sym_backquote_maptree);
 SMART_PTR_FIX(core::_sym_streamColumn);
 SMART_PTR_FIX(sockets::_sym_SO_KEEPALIVE);
 SMART_PTR_FIX(core::_sym_bformat);
 SMART_PTR_FIX(core::_sym_printCurrentIhsFrameEnvironment);
 SMART_PTR_FIX(kw::_sym_rtld_next);
 SMART_PTR_FIX(cffi::_sym_unsigned_long);
 SMART_PTR_FIX(core::_sym_STARcodeWalkerSTAR);
 SMART_PTR_FIX(cl::_sym_subtypep);
 SMART_PTR_FIX(core::_sym_backquote_attach_conses);
 SMART_PTR_FIX(core::_sym_monitorReader);
 SMART_PTR_FIX(cl::_sym_makeStringOutputStream);
 SMART_PTR_FIX(cl::_sym_cosh);
 SMART_PTR_FIX(llvmo::_sym_Acquire);
 SMART_PTR_FIX(core::_sym_hash_equalp);
 SMART_PTR_FIX(kw::_sym_execute);
 SMART_PTR_FIX(llvmo::_sym_FPToUI);
 SMART_PTR_FIX(core::_sym_isTopLevelScript);
 SMART_PTR_FIX(cl::_sym_case);
 SMART_PTR_FIX(cl::_sym_parseNamestring);
 SMART_PTR_FIX(core::_sym_Path_O);
 SMART_PTR_FIX(cl::_sym_fileStream);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_file_type);
 SMART_PTR_FIX(cl::_sym_filePosition);
 SMART_PTR_FIX(core::_sym_ForwardReferencedClass_O);
 SMART_PTR_FIX(core::_sym_SourceFileInfo_O);
 SMART_PTR_FIX(core::_sym_sharp_equal);
 SMART_PTR_FIX(cl::_sym_nreconc);
 SMART_PTR_FIX(core::_sym_make_vector);
 SMART_PTR_FIX(cl::_sym__LE_);
 SMART_PTR_FIX(core::_sym_rem_f);
 SMART_PTR_FIX(cl::_sym_atom);
 SMART_PTR_FIX(llvmo::_sym_IndirectBrInst_O);
 SMART_PTR_FIX(core::_sym_slBoundp);
 SMART_PTR_FIX(cl::_sym_array_dimension_limit);
 SMART_PTR_FIX(llvmo::_sym_STARnumberOfLlvmFinalizationsSTAR);
 SMART_PTR_FIX(cl::_sym_interactive_stream_p);
 SMART_PTR_FIX(cffi::_sym_unsigned_int);
 SMART_PTR_FIX(gray::_sym_close);
 SMART_PTR_FIX(cl::_sym_simple_vector);
 SMART_PTR_FIX(cl::_sym_name_char);
 SMART_PTR_FIX(cl::_sym_standardGenericFunction);
 SMART_PTR_FIX(core::_sym_HashTableEqualp_O);
 SMART_PTR_FIX(cffi::_sym_foreign_symbol_pointer);
 SMART_PTR_FIX(cl::_sym_first);
 SMART_PTR_FIX(cl::_sym_keywordp);
 SMART_PTR_FIX(cl::_sym_copySeq);
 SMART_PTR_FIX(cl::_sym_STARstandard_outputSTAR);
 SMART_PTR_FIX(cl::_sym__GT_);
 SMART_PTR_FIX(core::_sym_sharp_asterisk);
 SMART_PTR_FIX(cl::_sym_defsetf);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_restrict_type);
 SMART_PTR_FIX(sockets::_sym__PLUS_eagain_PLUS_);
 SMART_PTR_FIX(cl::_sym_floatSign);
 SMART_PTR_FIX(gray::_sym_stream_write_string);
 SMART_PTR_FIX(core::_sym_dlopen);
 SMART_PTR_FIX(core::_sym_FunctionFrame_O);
 SMART_PTR_FIX(core::_sym_STARcommandLineLoadSTAR);
 SMART_PTR_FIX(cl::_sym_charNotEqual);
 SMART_PTR_FIX(core::_sym_STARconsing_dotSTAR);
 SMART_PTR_FIX(cl::_sym_gensym);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_variable);
 SMART_PTR_FIX(core::_sym_smartPointerDetails);
 SMART_PTR_FIX(llvmo::_sym_LLVMDebugVersion4);
 SMART_PTR_FIX(sockets::_sym_ESOCKTNOSUPPORT);
 SMART_PTR_FIX(core::_sym_singleDispatchTooManyArgumentsError);
 SMART_PTR_FIX(llvmo::_sym_AttributeAddressSafety);
 SMART_PTR_FIX(cl::_sym_STARprint_linesSTAR);
 SMART_PTR_FIX(sockets::_sym_SO_SNDTIMEO);
 SMART_PTR_FIX(core::_sym_libraryPath);
 SMART_PTR_FIX(cl::_sym_set);
 SMART_PTR_FIX(cl::_sym_denominator);
 SMART_PTR_FIX(kw::_sym_expectedType);
 SMART_PTR_FIX(cl::_sym_typep);
 SMART_PTR_FIX(kw::_sym_rtld_self);
 SMART_PTR_FIX(core::_sym_hash_eql);
 SMART_PTR_FIX(kw::_sym_deleted);
 SMART_PTR_FIX(core::_sym_subclassp);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_imported_unit);
 SMART_PTR_FIX(cl::_sym_gentemp);
 SMART_PTR_FIX(core::_sym_forward_referenced_class);
 SMART_PTR_FIX(cl::_sym_invoke_restart);
 SMART_PTR_FIX(cl::_sym_least_negative_normalized_long_float);
 SMART_PTR_FIX(cl::_sym_Rational_O);
 SMART_PTR_FIX(cl::_sym_Float_O);
 SMART_PTR_FIX(core::_sym_STARcurrentLinenoSTAR);
 SMART_PTR_FIX(llvmo::_sym_Or);
 SMART_PTR_FIX(sockets::_sym_SO_TYPE);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_ptr_to_member_type);
 SMART_PTR_FIX(cl::_sym_unwind_protect);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_template_alias);
 SMART_PTR_FIX(kw::_sym_probe);
 SMART_PTR_FIX(cl::_sym_pathnameName);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_imported_declaration);
 SMART_PTR_FIX(sockets::_sym_ETIMEDOUT);
 SMART_PTR_FIX(cl::_sym_least_positive_normalized_long_float);
 SMART_PTR_FIX(sockets::_sym_SO_REUSEPORT);
 SMART_PTR_FIX(gray::_sym_stream_element_type);
 SMART_PTR_FIX(core::_sym_sharp_s);
 SMART_PTR_FIX(cl::_sym_StandardClass_O);
 SMART_PTR_FIX(kw::_sym_iclass);
 SMART_PTR_FIX(llvmo::_sym_IntegerType_O);
 SMART_PTR_FIX(cl::_sym_force_output);
 SMART_PTR_FIX(llvmo::_sym_DLLExportLinkage);
 SMART_PTR_FIX(cl::_sym__EQ_);
 SMART_PTR_FIX(cl::_sym_deftype);
 SMART_PTR_FIX(cl::_sym_HashTable_O);
 SMART_PTR_FIX(cl::_sym_equal);
 SMART_PTR_FIX(sockets::_sym_ll_socketConnect_localSocket);
 SMART_PTR_FIX(cl::_sym_break);
 SMART_PTR_FIX(kw::_sym_whitespace_character);
 SMART_PTR_FIX(sockets::_sym_ll_strerror_errno);
 SMART_PTR_FIX(llvmo::_sym_AtomicRMWInst_O);
 SMART_PTR_FIX(cl::_sym_listAllPackages);
 SMART_PTR_FIX(core::_sym_walkToFindSourceInfo);
 SMART_PTR_FIX(core::_sym_makeRegex);
 SMART_PTR_FIX(core::_sym_instanceClass);
 SMART_PTR_FIX(core::_sym_STARihsCurrentSTAR);
 SMART_PTR_FIX(gctools::_sym_ramp);
 SMART_PTR_FIX(core::_sym_lookupLoadTimeSymbol);
 SMART_PTR_FIX(sockets::_sym__PLUS_brcl_stream_mode_input_PLUS_);
 SMART_PTR_FIX(core::_sym_file_kind);
 SMART_PTR_FIX(asttooling::_sym_x);
 SMART_PTR_FIX(llvmo::_sym_ModulePass_O);
 SMART_PTR_FIX(core::_sym_STARserializerArchiveSTAR);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_catch_block);
 SMART_PTR_FIX(cl::_sym_notany);
 SMART_PTR_FIX(cl::_sym_char_GT_);
 SMART_PTR_FIX(cl::_sym_tan);
 SMART_PTR_FIX(core::_sym_sharp_plus);
 SMART_PTR_FIX(cl::_sym_Stream_O);
 SMART_PTR_FIX(llvmo::_sym_DLLImportLinkage);
 SMART_PTR_FIX(core::_sym_STARpollTicksPerGcSTAR);
 SMART_PTR_FIX(llvmo::_sym_ExecutionEngine_O);
 SMART_PTR_FIX(core::_sym_item);
 SMART_PTR_FIX(ext::_sym_compiledFunctionName);
 SMART_PTR_FIX(llvmo::_sym_FIRST_FCMP_PREDICATE);
 SMART_PTR_FIX(core::_sym_debugLogOn);
 SMART_PTR_FIX(core::_sym_sharp_sharp);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_unspecified_parameters);
 SMART_PTR_FIX(core::_sym_SourcePosInfo_O);
 SMART_PTR_FIX(cl::_sym_string_not_equal);
 SMART_PTR_FIX(cl::_sym_STARstandard_inputSTAR);
 SMART_PTR_FIX(cl::_sym_export);
 SMART_PTR_FIX(llvmo::_sym_Xchg);
 SMART_PTR_FIX(core::_sym_sharp_backslash);
 SMART_PTR_FIX(cl::_sym_scaleFloat);
 SMART_PTR_FIX(cl::_sym_hash_table_p);
 SMART_PTR_FIX(core::_sym_serialize_xml);
 SMART_PTR_FIX(kw::_sym_new_version);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_reference_type);
 SMART_PTR_FIX(cl::_sym_packageError);
 SMART_PTR_FIX(llvmo::_sym_AttributeStackProtect);
 SMART_PTR_FIX(cl::_sym_EchoStream_O);
 SMART_PTR_FIX(cl::_sym_compileFile);
 SMART_PTR_FIX(core::_sym_environmentList);
 SMART_PTR_FIX(core::_sym_backquote_remove_tokens);
 SMART_PTR_FIX(cl::_sym_integerDecodeFloat);
 SMART_PTR_FIX(cl::_sym_SimpleBitVector_O);
 SMART_PTR_FIX(cl::_sym_generic_function);
 SMART_PTR_FIX(cl::_sym_fboundp);
 SMART_PTR_FIX(cl::_sym_log);
 SMART_PTR_FIX(core::_sym_MicroHeap_O);
 SMART_PTR_FIX(llvmo::_sym_FCMP_UGT);
 SMART_PTR_FIX(cl::_sym_most_negative_long_float);
 SMART_PTR_FIX(cl::_sym_ash);
 SMART_PTR_FIX(llvmo::_sym_SExt);
 SMART_PTR_FIX(core::_sym_SaveArchive_O);
 SMART_PTR_FIX(kw::_sym_cr);
 SMART_PTR_FIX(core::_sym_WrappedPointer_O);
 SMART_PTR_FIX(core::_sym_STARsharpEqContextSTAR);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_typedef);
 SMART_PTR_FIX(llvmo::_sym_makeAPInt);
 SMART_PTR_FIX(cl::_sym_parseError);
 SMART_PTR_FIX(core::_sym_STARdebugGenericDispatchSTAR);
 SMART_PTR_FIX(cl::_sym_Package_O);
 SMART_PTR_FIX(cl::_sym_char_NE_);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_member);
 SMART_PTR_FIX(cl::_sym_maplist);
 SMART_PTR_FIX(clos::_sym_std_compute_effective_method);
 SMART_PTR_FIX(cl::_sym_terpri);
 SMART_PTR_FIX(cl::_sym_DoubleFloat_O);
 SMART_PTR_FIX(llvmo::_sym_GlobalVariable_O);
 SMART_PTR_FIX(cl::_sym_nstring_downcase);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_volatile_type);
 SMART_PTR_FIX(kw::_sym_case);
 SMART_PTR_FIX(core::_sym_getline);
 SMART_PTR_FIX(core::_sym_STARsharp_sharp_alistSTAR);
 SMART_PTR_FIX(cl::_sym_CompiledFunction_O);
 SMART_PTR_FIX(comp::_sym_parse_macro);
 SMART_PTR_FIX(kw::_sym_version);
 SMART_PTR_FIX(kw::_sym_default);
 SMART_PTR_FIX(cl::_sym_multiple_value_call);
 SMART_PTR_FIX(core::_sym_STARdocumentation_poolSTAR);
 SMART_PTR_FIX(core::_sym_STARdocumentation_databaseSTAR);
 SMART_PTR_FIX(llvmo::_sym_DISubroutineType_O);
 SMART_PTR_FIX(llvmo::_sym_DW_LANG_C_plus_plus);
 SMART_PTR_FIX(cl::_sym_characterp);
 SMART_PTR_FIX(core::_sym_mpi_rank);
 SMART_PTR_FIX(core::_sym_STARbq_listSTARSTAR);
 SMART_PTR_FIX(cl::_sym_mergePathnames);
 SMART_PTR_FIX(llvmo::_sym_ICMP_SGT);
 SMART_PTR_FIX(cl::_sym_floatingPointInvalidOperation);
 SMART_PTR_FIX(llvmo::_sym_STARaSTAR);
 SMART_PTR_FIX(kw::_sym_absolute);
 SMART_PTR_FIX(cl::_sym_BroadcastStream_O);
 SMART_PTR_FIX(cl::_sym_deleteFile);
 SMART_PTR_FIX(cl::_sym_multiple_value_prog1);
 SMART_PTR_FIX(cl::_sym_space);
 SMART_PTR_FIX(core::_sym_single_dispatch_on);
 SMART_PTR_FIX(cl::_sym_findClass);
 SMART_PTR_FIX(sockets::_sym_ll_setSockOptLinger);
 SMART_PTR_FIX(kw::_sym_passThrough);
 SMART_PTR_FIX(core::_sym_isAssignableTo);
 SMART_PTR_FIX(sockets::_sym_IPPROTO_TCP);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_packed_type);
 SMART_PTR_FIX(core::_sym_STARprintVersionOnStartupSTAR);
 SMART_PTR_FIX(cl::_sym_STARload_verboseSTAR);
 SMART_PTR_FIX(core::_sym_SymbolToEnumConverter_O);
 SMART_PTR_FIX(cl::_sym_read_sequence);
 SMART_PTR_FIX(llvmo::_sym_ExternalLinkage);
 SMART_PTR_FIX(cl::_sym_SingleFloat_O);
 SMART_PTR_FIX(cl::_sym_pathnameMatchP);
 SMART_PTR_FIX(cl::_sym_STARprint_radixSTAR);
 SMART_PTR_FIX(kw::_sym_body);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_enumerator);
 SMART_PTR_FIX(core::_sym_setCurrentWorkingDirectory);
 SMART_PTR_FIX(core::_sym_sharp_x);
 SMART_PTR_FIX(llvmo::_sym_moduleFlagWarning);
 SMART_PTR_FIX(llvmo::_sym_SingleThread);
 SMART_PTR_FIX(llvmo::_sym_WeakAnyLinkage);
 SMART_PTR_FIX(llvmo::_sym_EngineBuilder_O);
 SMART_PTR_FIX(kw::_sym_arguments);
 SMART_PTR_FIX(cl::_sym_remhash);
 SMART_PTR_FIX(llvmo::_sym_NamedMDNode_O);
 SMART_PTR_FIX(cl::_sym_make_sequence);
 SMART_PTR_FIX(core::_sym_environmentActivationFrame);
 SMART_PTR_FIX(core::_sym_isArray);
 SMART_PTR_FIX(sockets::_sym_ll_setSockOptBool);
 SMART_PTR_FIX(llvmo::_sym_STARrunTimeExecutionEngineSTAR);
 SMART_PTR_FIX(core::_sym_STARbq_quoteSTAR);
 SMART_PTR_FIX(cl::_sym_intersection);
 SMART_PTR_FIX(cl::_sym_arithmeticError);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_friend);
 SMART_PTR_FIX(cl::_sym_logorc2);
 SMART_PTR_FIX(cl::_sym_subseq);
 SMART_PTR_FIX(llvmo::_sym_Pass_O);
 SMART_PTR_FIX(asttooling::_sym_HandleTranslationUnit);
 SMART_PTR_FIX(cl::_sym_STARerror_outputSTAR);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_enumeration_type);
 SMART_PTR_FIX(cl::_sym_STARfeaturesSTAR);
 SMART_PTR_FIX(kw::_sym_compile_toplevel);
 SMART_PTR_FIX(core::_sym_structureRef);
 SMART_PTR_FIX(kw::_sym_ignoreInitImage);
 SMART_PTR_FIX(core::_sym_STARloadSearchListSTAR);
 SMART_PTR_FIX(llvmo::_sym_moduleFlagOverride);
 SMART_PTR_FIX(core::_sym_topLevelEvalWithEnv);
 SMART_PTR_FIX(sockets::_sym_ENOMEM);
 SMART_PTR_FIX(cl::_sym_string_LT_);
 SMART_PTR_FIX(cl::_sym_floatingPointOverflow);
 SMART_PTR_FIX(kw::_sym_error);
 SMART_PTR_FIX(cl::_sym_STARdebug_ioSTAR);
 SMART_PTR_FIX(kw::_sym_link);
 SMART_PTR_FIX(cl::_sym_ConcatenatedStream_O);
 SMART_PTR_FIX(llvmo::_sym_Attribute_O);
 SMART_PTR_FIX(llvmo::_sym_LShr);
 SMART_PTR_FIX(llvmo::_sym_ICMP_EQ);
 SMART_PTR_FIX(llvmo::_sym_STARInstructionCastOpsSTAR);
 SMART_PTR_FIX(cl::_sym_charLessp);
 SMART_PTR_FIX(core::_sym_setfSubseq);
 SMART_PTR_FIX(kw::_sym_special);
 SMART_PTR_FIX(sockets::_sym_socketPeername_localSocket);
 SMART_PTR_FIX(llvmo::_sym_DataLayoutPass_O);
 SMART_PTR_FIX(llvmo::_sym_STARaccumulatedLlvmFinalizationTimeSTAR);
 SMART_PTR_FIX(core::_sym_STARbackquote_expand_hookSTAR);
 SMART_PTR_FIX(sockets::_sym_ll_strerror);
 SMART_PTR_FIX(kw::_sym_debug);
 SMART_PTR_FIX(cffi::_sym_uint64);
 SMART_PTR_FIX(llvmo::_sym_ICMP_SGE);
 SMART_PTR_FIX(core::_sym_sharp_r);
 SMART_PTR_FIX(cl::_sym_floatDigits);
 SMART_PTR_FIX(llvmo::_sym_Module_O);
 SMART_PTR_FIX(sockets::_sym_NO_ADDRESS);
 SMART_PTR_FIX(kw::_sym_rtld_default);
 SMART_PTR_FIX(core::_sym_Pointer_O);
 SMART_PTR_FIX(llvmo::_sym_AttributeAlwaysInline);
 SMART_PTR_FIX(core::_sym_lexical);
 SMART_PTR_FIX(cl::_sym_elt);
 SMART_PTR_FIX(core::_sym_STARcurrentSourceFileInfoSTAR);
 SMART_PTR_FIX(cl::_sym_Cons_O);
 SMART_PTR_FIX(llvmo::_sym_AttributeEnum);
 SMART_PTR_FIX(cffi::_sym_int64);
 SMART_PTR_FIX(sockets::_sym_ll_socketAccept_localSocket);
 SMART_PTR_FIX(cl::_sym_logandc1);
 SMART_PTR_FIX(cl::_sym_stream_external_format);
 SMART_PTR_FIX(core::_sym_exportToPython);
 SMART_PTR_FIX(cl::_sym_numberp);
 SMART_PTR_FIX(core::_sym_preserve_whitespace);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_constant);
 SMART_PTR_FIX(core::_sym_ensure_documentation);
 SMART_PTR_FIX(core::_sym_ifDoesNotExist);
 SMART_PTR_FIX(cffi::_sym_long);
 SMART_PTR_FIX(core::_sym_instanceSigSet);
 SMART_PTR_FIX(cl::_sym_char_EQ_);
 SMART_PTR_FIX(core::_sym_repr);
 SMART_PTR_FIX(core::_sym_allocateRawClass);
 SMART_PTR_FIX(cl::_sym_block);
 SMART_PTR_FIX(llvmo::_sym_verifyModule);
 SMART_PTR_FIX(cl::_sym_Bignum_O);
 SMART_PTR_FIX(core::_sym_testProfileTimer);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_module);
 SMART_PTR_FIX(ext::_sym_setenv);
 SMART_PTR_FIX(llvmo::_sym_PtrToInt);
 SMART_PTR_FIX(ext::_sym_STARloadHooksSTAR);
 SMART_PTR_FIX(llvmo::_sym_JITEmitDebugInfo);
 SMART_PTR_FIX(llvmo::_sym_IntToPtr);
 SMART_PTR_FIX(cl::_sym_Null_O);
 SMART_PTR_FIX(gray::_sym_open_stream_p);
 SMART_PTR_FIX(cl::_sym_hostNamestring);
 SMART_PTR_FIX(kw::_sym_junkAllowed);
 SMART_PTR_FIX(core::_sym_STARtopLevelCommandHookSTAR);
 SMART_PTR_FIX(kw::_sym_crlf);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_array_type);
 SMART_PTR_FIX(core::_sym_reader_error_unmatched_close_parenthesis);
 SMART_PTR_FIX(cl::_sym_sinh);
 SMART_PTR_FIX(kw::_sym_test);
 SMART_PTR_FIX(cl::_sym_mod);
 SMART_PTR_FIX(kw::_sym_rtld_main_only);
 SMART_PTR_FIX(cl::_sym_symbolPackage);
 SMART_PTR_FIX(core::_sym_structureSet);
 SMART_PTR_FIX(core::_sym_serialize);
 SMART_PTR_FIX(llvmo::_sym_writeBitcodeToFile);
 SMART_PTR_FIX(core::_sym_nread);
 SMART_PTR_FIX(cl::_sym_STARdefaultPathnameDefaultsSTAR);
 SMART_PTR_FIX(llvmo::_sym_FCMP_UNE);
 SMART_PTR_FIX(sockets::_sym__PLUS_sock_stream_PLUS_);
 SMART_PTR_FIX(llvmo::_sym_SequentialType_O);
 SMART_PTR_FIX(cl::_sym_directory);
 SMART_PTR_FIX(cl::_sym_STARquery_ioSTAR);
 SMART_PTR_FIX(llvmo::_sym_moduleFlagRequire);
 SMART_PTR_FIX(sockets::_sym_HOST_NOT_FOUND);
 SMART_PTR_FIX(core::_sym_start);
 SMART_PTR_FIX(asttooling::_sym_run);
 SMART_PTR_FIX(core::_sym_mpi_size);
 SMART_PTR_FIX(llvmo::_sym_UnreachableInst_O);
 SMART_PTR_FIX(core::_sym_STARPATHSTAR);
 SMART_PTR_FIX(cl::_sym_package_shadowing_symbols);
 SMART_PTR_FIX(core::_sym_StdClass_O);
 SMART_PTR_FIX(core::_sym__PLUS_llvmTargetTriple_PLUS_);
 SMART_PTR_FIX(kw::_sym_UnsignedByte);
 SMART_PTR_FIX(cl::_sym_mapcan);
 SMART_PTR_FIX(cl::_sym_clearInput);
 SMART_PTR_FIX(cl::_sym_writeLine);
 SMART_PTR_FIX(kw::_sym_upcase);
 SMART_PTR_FIX(cl::_sym_pathnameType);
 SMART_PTR_FIX(asttooling::_sym_bind);
 SMART_PTR_FIX(core::_sym_sharp_b);
 SMART_PTR_FIX(llvmo::_sym_PassManagerBuilder_O);
 SMART_PTR_FIX(llvmo::_sym_FCMP_OEQ);
 SMART_PTR_FIX(cl::_sym_STARprint_levelSTAR);
 SMART_PTR_FIX(cl::_sym_princ);
 SMART_PTR_FIX(sockets::_sym_ll_socketAccept_inetSocket);
 SMART_PTR_FIX(cl::_sym_Array_O);
 SMART_PTR_FIX(core::_sym_STARcurrent_working_directorySTAR);
 SMART_PTR_FIX(core::_sym_STARenvironmentPrintingTabIncrementSTAR);
 SMART_PTR_FIX(cl::_sym_satisfies);
 SMART_PTR_FIX(cl::_sym_boolean);
 SMART_PTR_FIX(core::_sym_eltSet);
 SMART_PTR_FIX(cl::_sym_shadowing_import);
 SMART_PTR_FIX(core::_sym_SpecialForm_O);
 SMART_PTR_FIX(llvmo::_sym_ImmutablePass_O);
 SMART_PTR_FIX(cl::_sym_truename);
 SMART_PTR_FIX(cl::_sym_position);
 SMART_PTR_FIX(llvmo::_sym_FCMP_UNO);
 SMART_PTR_FIX(cl::_sym_rationalp);
 SMART_PTR_FIX(asttooling::_sym_create);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_GNU_template_parameter_pack);
 SMART_PTR_FIX(kw::_sym__uid);
 SMART_PTR_FIX(core::_sym_dlload);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_union_type);
 SMART_PTR_FIX(llvmo::_sym_makeAPWidth);
 SMART_PTR_FIX(cl::_sym_pathnameDirectory);
 SMART_PTR_FIX(cl::_sym_listSTAR);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_partial_unit);
 SMART_PTR_FIX(llvmo::_sym_CrossThread);
 SMART_PTR_FIX(gray::_sym_stream_interactive_p);
 SMART_PTR_FIX(gray::_sym_stream_unread_char);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_inlined_subroutine);
 SMART_PTR_FIX(cl::_sym_defparameter);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_set_type);
 SMART_PTR_FIX(cl::_sym_char_LT_);
 SMART_PTR_FIX(sockets::_sym__PLUS_eintr_PLUS_);
 SMART_PTR_FIX(llvmo::_sym_AttributeAlignment);
 SMART_PTR_FIX(sockets::_sym_ll_setSockOptTimeval);
 SMART_PTR_FIX(cl::_sym_make_hash_table);
 SMART_PTR_FIX(core::_sym_bdsVar);
 SMART_PTR_FIX(cl::_sym_error);
 SMART_PTR_FIX(cl::_sym_revappend);
 SMART_PTR_FIX(core::_sym_input_stream);
 SMART_PTR_FIX(core::_sym_stackMonitor);
 SMART_PTR_FIX(asttooling::_sym_onEndOfTranslationUnit);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_class_type);
 SMART_PTR_FIX(core::_sym_defaultPathnameDefaults);
 SMART_PTR_FIX(core::_sym_STARbackquote_levelSTAR);
 SMART_PTR_FIX(llvmo::_sym_ReturnInst_O);
 SMART_PTR_FIX(llvmo::_sym_AttributeNoReturn);
 SMART_PTR_FIX(sockets::_sym__PLUS_sock_dgram_PLUS_);
 SMART_PTR_FIX(cl::_sym_Character_O);
 SMART_PTR_FIX(core::_sym_wrongTypeNthArg);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_template_type_parameter);
 SMART_PTR_FIX(llvmo::_sym_STARglobal_value_linkage_typesSTAR);
 SMART_PTR_FIX(sockets::_sym_ll_getSockoptInt);
 SMART_PTR_FIX(cl::_sym_cos);
 SMART_PTR_FIX(llvmo::_sym_AttributeNone);
 SMART_PTR_FIX(llvmo::_sym_Shl);
 SMART_PTR_FIX(cl::_sym_most_negative_short_float);
 SMART_PTR_FIX(core::_sym_setfElt);
 SMART_PTR_FIX(llvmo::_sym_writeIrToFile);
 SMART_PTR_FIX(cl::_sym_pathnameDevice);
 SMART_PTR_FIX(llvmo::_sym_FCMP_UEQ);
 SMART_PTR_FIX(sockets::_sym_ll_socketConnect_inetSocket);
 SMART_PTR_FIX(cffi::_sym_int16);
 SMART_PTR_FIX(llvmo::_sym_ArrayType_O);
 SMART_PTR_FIX(kw::_sym_unrecognizedKeyword);
 SMART_PTR_FIX(cl::_sym_max);
 SMART_PTR_FIX(core::_sym_closedStream);
 SMART_PTR_FIX(llvmo::_sym_BranchInst_O);
 SMART_PTR_FIX(core::_sym_isSubClassOf);
 SMART_PTR_FIX(cl::_sym_load_time_value);
 SMART_PTR_FIX(llvmo::_sym_Max);
 SMART_PTR_FIX(cl::_sym_directoryNamestring);
 SMART_PTR_FIX(llvmo::_sym_makeAP64);
 SMART_PTR_FIX(cl::_sym_fill_pointer);
 SMART_PTR_FIX(core::_sym_DirectoryEntry_O);
 SMART_PTR_FIX(kw::_sym_direct_super_classes);
 SMART_PTR_FIX(cl::_sym_finish_output);
 SMART_PTR_FIX(core::_sym_ActivationFrame_O);
 SMART_PTR_FIX(asttooling::_sym_VisitDecl);
 SMART_PTR_FIX(core::_sym_toTaggedFixnum);
 SMART_PTR_FIX(cl::_sym_Str_O);
 SMART_PTR_FIX(kw::_sym_changed);
 SMART_PTR_FIX(cffi::_sym_float);
 SMART_PTR_FIX(core::_sym_singleDispatchWrongNumberArgumentsError);
 SMART_PTR_FIX(kw::_sym_invert);
 SMART_PTR_FIX(core::_sym_structure_slot_descriptions);
 SMART_PTR_FIX(llvmo::_sym_VAArgInst_O);
 SMART_PTR_FIX(core::_sym_foreach);
 SMART_PTR_FIX(cl::_sym_realp);
 SMART_PTR_FIX(cl::_sym_TwoWayStream_O);
 SMART_PTR_FIX(core::_sym_STARbq_simplifySTAR);
 SMART_PTR_FIX(clbind::_sym_STARtheClassRegistrySTAR);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_unspecified_type);
 SMART_PTR_FIX(llvmo::_sym_FCMP_ONE);
 SMART_PTR_FIX(llvmo::_sym_CompositeType_O);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_variant);
 SMART_PTR_FIX(core::_sym_evaluateVerbosity);
 SMART_PTR_FIX(asttooling::_sym_STARclangTemplateSpecializationKindSTAR);
 SMART_PTR_FIX(llvmo::_sym_FunctionPass_O);
 SMART_PTR_FIX(sockets::_sym__PLUS_brcl_stream_mode_output_PLUS_);
 SMART_PTR_FIX(cl::_sym_read_delimited_list);
 SMART_PTR_FIX(cl::_sym_go);
 SMART_PTR_FIX(sockets::_sym_EOPNOTSUPP);
 SMART_PTR_FIX(llvmo::_sym_moduleFlagAppend);
 SMART_PTR_FIX(cl::_sym_simple_bit_vector_p);
 SMART_PTR_FIX(cl::_sym_controlError);
 SMART_PTR_FIX(core::_sym_STARsilentStartupSTAR);
 SMART_PTR_FIX(llvmo::_sym_BasicBlock_O);
 SMART_PTR_FIX(core::_sym_ihsFun);
 SMART_PTR_FIX(core::_sym_exit);
 SMART_PTR_FIX(core::_sym_unquote_splice);
 SMART_PTR_FIX(sockets::_sym_ll_socketSendAddress);
 SMART_PTR_FIX(cl::_sym_make_string);
 SMART_PTR_FIX(core::_sym_SingleDispatchMethod_O);
 SMART_PTR_FIX(llvmo::_sym_AttributeStackAlignment);
 SMART_PTR_FIX(cl::_sym_setDispatchMacroCharacter);
 SMART_PTR_FIX(llvmo::_sym_AttributeZExt);
 SMART_PTR_FIX(core::_sym_loadSource);
 SMART_PTR_FIX(cffi::_sym_PERCENTmem_ref);
 SMART_PTR_FIX(kw::_sym_full);
 SMART_PTR_FIX(sockets::_sym_ll_nonBlockingMode);
 SMART_PTR_FIX(core::_sym_globalSetfFunction);
 SMART_PTR_FIX(core::_sym__PLUS_executableName_PLUS_);
 SMART_PTR_FIX(core::_sym_StringList_O);
 SMART_PTR_FIX(cl::_sym_find_package);
 SMART_PTR_FIX(cl::_sym_sequence);
 SMART_PTR_FIX(core::_sym_StringInputStream_O);
 SMART_PTR_FIX(cl::_sym_special);
 SMART_PTR_FIX(clos::_sym_standardOptimizedReaderFunction);
 SMART_PTR_FIX(core::_sym_coerce_to_function);
 SMART_PTR_FIX(cl::_sym_pathname);
 SMART_PTR_FIX(core::_sym_putF);
 SMART_PTR_FIX(kw::_sym_LineTablesOnly);
 SMART_PTR_FIX(cl::_sym_pathnameHost);
 SMART_PTR_FIX(llvmo::_sym_UDiv);
 SMART_PTR_FIX(cl::_sym_AMPrest);
 SMART_PTR_FIX(cl::_sym_throw);
 SMART_PTR_FIX(cl::_sym_method);
 SMART_PTR_FIX(core::_sym_RegexMatch_O);
 SMART_PTR_FIX(cl::_sym_simpleWarning);
 SMART_PTR_FIX(llvmo::_sym_ICMP_ULT);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_lo_user);
 SMART_PTR_FIX(core::_sym_unquote);
 SMART_PTR_FIX(kw::_sym_terminating_macro_character);
 SMART_PTR_FIX(cl::_sym_function);
 SMART_PTR_FIX(cl::_sym_rem);
 SMART_PTR_FIX(cl::_sym_decodeFloat);
 SMART_PTR_FIX(cffi::_sym_uint16);
 SMART_PTR_FIX(llvmo::_sym_DebugLoc_O);
 SMART_PTR_FIX(llvmo::_sym_DICompositeType_O);
 SMART_PTR_FIX(llvmo::_sym_CallInst_O);
 SMART_PTR_FIX(kw::_sym_supersede);
 SMART_PTR_FIX(cl::_sym__NE_);
 SMART_PTR_FIX(gctools::_sym_STARallocPatternStackSTAR);
 SMART_PTR_FIX(cl::_sym_round);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_template_value_parameter);
 SMART_PTR_FIX(cl::_sym_StringStream_O);
 SMART_PTR_FIX(llvmo::_sym_BitCast);
 SMART_PTR_FIX(cl::_sym_eq);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_rvalue_reference_type);
 SMART_PTR_FIX(cl::_sym_classOf);
 SMART_PTR_FIX(llvmo::_sym_And);
 SMART_PTR_FIX(cl::_sym_compile);
 SMART_PTR_FIX(cl::_sym_floatingPointInexact);
 SMART_PTR_FIX(llvmo::_sym_ICMP_UGE);
 SMART_PTR_FIX(llvmo::_sym_AttributeNoUnwind);
 SMART_PTR_FIX(core::_sym_aset);
 SMART_PTR_FIX(core::_sym_STARprint_source_code_consSTAR);
 SMART_PTR_FIX(core::_sym_gdbInspect);
 SMART_PTR_FIX(core::_sym_evaluateDepth);
 SMART_PTR_FIX(cl::_sym_translatePathname);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_string_type);
 SMART_PTR_FIX(cl::_sym_write);
 SMART_PTR_FIX(llvmo::_sym_FPTrunc);
 SMART_PTR_FIX(cl::_sym_gethash);
 SMART_PTR_FIX(core::_sym_singleDispatchMissingDispatchArgumentError);
 SMART_PTR_FIX(cl::_sym_get);
 SMART_PTR_FIX(cl::_sym_bit_vector_p);
 SMART_PTR_FIX(cl::_sym_listen);
 SMART_PTR_FIX(kw::_sym_directory);
 SMART_PTR_FIX(cl::_sym_parseInteger);
 SMART_PTR_FIX(core::_sym_environmentId);
 SMART_PTR_FIX(llvmo::_sym_FunctionPassManager_O);
 SMART_PTR_FIX(ext::_sym_truly_the);
 SMART_PTR_FIX(core::_sym_sorted);
 SMART_PTR_FIX(sockets::_sym_SO_RCVTIMEO);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_try_block);
 SMART_PTR_FIX(cl::_sym_simpleCondition);
 SMART_PTR_FIX(sockets::_sym_ll_socketPeername_inetSocket);
 SMART_PTR_FIX(core::_sym_validFunctionNameP);
 SMART_PTR_FIX(core::_sym_isNil);
 SMART_PTR_FIX(core::_sym_FunctionContainerEnvironment_O);
 SMART_PTR_FIX(core::_sym_HashTableEqual_O);
 SMART_PTR_FIX(core::_sym_backquote_frob);
 SMART_PTR_FIX(cl::_sym_enoughNamestring);
 SMART_PTR_FIX(core::_sym_Regex_O);
 SMART_PTR_FIX(core::_sym_mpsGarbageCollection);
 SMART_PTR_FIX(cl::_sym_makePackage);
 SMART_PTR_FIX(core::_sym_make_structure);
 SMART_PTR_FIX(core::_sym_currentVisibleEnvironment);
 SMART_PTR_FIX(core::_sym_STARallCxxClassesSTAR);
 SMART_PTR_FIX(cl::_sym_STARprint_gensymSTAR);
 SMART_PTR_FIX(llvmo::_sym_STARCmpInstPredicateSTAR);
 SMART_PTR_FIX(cl::_sym_getUniversalTime);
 SMART_PTR_FIX(core::_sym_generic);
 SMART_PTR_FIX(sockets::_sym_EADDRINUSE);
 SMART_PTR_FIX(core::_sym_element_type);
 SMART_PTR_FIX(cl::_sym_make_list);
 SMART_PTR_FIX(core::_sym_ForeignData_O);
 SMART_PTR_FIX(core::_sym_copy_subarray);
 SMART_PTR_FIX(cl::_sym_logand);
 SMART_PTR_FIX(sockets::_sym_ll_socket_errno);
 SMART_PTR_FIX(cl::_sym_STARmodulesSTAR);
 SMART_PTR_FIX(llvmo::_sym_AttributeOptimizeForSize);
 SMART_PTR_FIX(core::_sym_setupStackMonitor);
 SMART_PTR_FIX(core::_sym_STARdebugMonitorSTAR);
 SMART_PTR_FIX(cl::_sym_realpart);
 SMART_PTR_FIX(llvmo::_sym_SIToFP);
 SMART_PTR_FIX(asttooling::_sym_AstVisitor_O);
 SMART_PTR_FIX(cl::_sym_getInternalRunTime);
 SMART_PTR_FIX(core::_sym_all_keys);
 SMART_PTR_FIX(cl::_sym_charNotLessp);
 SMART_PTR_FIX(core::_sym_sharp_minus);
 SMART_PTR_FIX(kw::_sym_FullDebug);
 SMART_PTR_FIX(cl::_sym_keyword);
 SMART_PTR_FIX(core::_sym_whole);
 SMART_PTR_FIX(cl::_sym_min);
 SMART_PTR_FIX(kw::_sym_common);
 SMART_PTR_FIX(llvmo::_sym_InvokeInst_O);
 SMART_PTR_FIX(cl::_sym_charGreaterp);
 SMART_PTR_FIX(cl::_sym_STARgensym_counterSTAR);
 SMART_PTR_FIX(cl::_sym_debug);
 SMART_PTR_FIX(core::_sym_ValueEnvironment_O);
 SMART_PTR_FIX(llvmo::_sym_MDNode_O);
 SMART_PTR_FIX(cl::_sym_AMPkey);
 SMART_PTR_FIX(cl::_sym_string_downcase);
 SMART_PTR_FIX(cl::_sym_typeError);
 SMART_PTR_FIX(kw::_sym_lambda_list_handler);
 SMART_PTR_FIX(kw::_sym_latin_1);
 SMART_PTR_FIX(core::_sym_probe);
 SMART_PTR_FIX(llvmo::_sym_ConstantInt_O);
 SMART_PTR_FIX(llvmo::_sym_LLVMContext_O);
 SMART_PTR_FIX(core::_sym_FileStatus_O);
 SMART_PTR_FIX(kw::_sym_invalid_character);
 SMART_PTR_FIX(cl::_sym_STARreadtableSTAR);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_condition);
 SMART_PTR_FIX(cffi::_sym_pointer);
 SMART_PTR_FIX(core::_sym_ihsPrev);
 SMART_PTR_FIX(llvmo::_sym_BlockAddress_O);
 SMART_PTR_FIX(cl::_sym_STARprint_right_marginSTAR);
 SMART_PTR_FIX(kw::_sym_and);
 SMART_PTR_FIX(llvmo::_sym_ICMP_NE);
 SMART_PTR_FIX(core::_sym_invokeInternalDebugger);
 SMART_PTR_FIX(asttooling::_sym_ArgumentsAdjusterAdjust);
 SMART_PTR_FIX(llvmo::_sym_STARmoduleModFlagBehaviorSTAR);
 SMART_PTR_FIX(llvmo::_sym_CommonLinkage);
 SMART_PTR_FIX(gctools::_sym_rampCollectAll);
 SMART_PTR_FIX(cl::_sym_lambda);
 SMART_PTR_FIX(core::_sym_backquote_completely_process);
 SMART_PTR_FIX(cl::_sym_do);
 SMART_PTR_FIX(gray::_sym_stream_clear_input);
 SMART_PTR_FIX(cl::_sym_writeString);
 SMART_PTR_FIX(llvmo::_sym_STARatomic_orderingSTAR);
 SMART_PTR_FIX(cffi::_sym_int32);
 SMART_PTR_FIX(core::_sym_mpi_enabled);
 SMART_PTR_FIX(cl::_sym_Class_O);
 SMART_PTR_FIX(cl::_sym_vectorPush);
 SMART_PTR_FIX(llvmo::_sym_AtomicCmpXchgInst_O);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_subrange_type);
 SMART_PTR_FIX(core::_sym_universalErrorHandler);
 SMART_PTR_FIX(clos::_sym_aSingleClosSymbol);
 SMART_PTR_FIX(core::_sym_PosixTime_O);
 SMART_PTR_FIX(core::_sym_env);
 SMART_PTR_FIX(core::_sym_sharp_left_parenthesis);
 SMART_PTR_FIX(cl::_sym_writeChar);
 SMART_PTR_FIX(core::_sym_ihsEnv);
 SMART_PTR_FIX(cl::_sym_mapc);
 SMART_PTR_FIX(llvmo::_sym__PLUS_DW_ATE_SIGNED_FIXED_PLUS_);
 SMART_PTR_FIX(core::_sym_integer_divide);
 SMART_PTR_FIX(sockets::_sym_ll_getHostByAddress);
 SMART_PTR_FIX(cl::_sym_stringRightTrim);
 SMART_PTR_FIX(gctools::_sym_garbageCollect);
 SMART_PTR_FIX(core::_sym_reader_skip_semicolon_comment);
 SMART_PTR_FIX(core::_sym_stackUsed);
 SMART_PTR_FIX(sockets::_sym_ENOBUFS);
 SMART_PTR_FIX(core::_sym_PosixTimeDuration_O);
 SMART_PTR_FIX(kw::_sym_rehashSize);
 SMART_PTR_FIX(cl::_sym__LT_);
 SMART_PTR_FIX(cl::_sym_two_way_stream_output_stream);
 SMART_PTR_FIX(core::_sym_STARcommandLineLoadEvalSequenceSTAR);
 SMART_PTR_FIX(kw::_sym_macro);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_subroutine_type);
 SMART_PTR_FIX(cl::_sym_STARloadTruenameSTAR);
 SMART_PTR_FIX(core::_sym_STARnestedErrorDepthSTAR);
 SMART_PTR_FIX(core::_sym_HashTableEql_O);
 SMART_PTR_FIX(kw::_sym_adjustable);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_namelist);
 SMART_PTR_FIX(cl::_sym_AMPallow_other_keys);
 SMART_PTR_FIX(cl::_sym_StandardObject_O);
 SMART_PTR_FIX(cl::_sym_car);
 SMART_PTR_FIX(ext::_sym__PLUS_processStandardOutput_PLUS_);
 SMART_PTR_FIX(cl::_sym_probe_file);
 SMART_PTR_FIX(cl::_sym_alpha_char_p);
 SMART_PTR_FIX(cl::_sym_return_from);
 SMART_PTR_FIX(llvmo::_sym_FCMP_TRUE);
 SMART_PTR_FIX(core::_sym_classNameAsString);
 SMART_PTR_FIX(core::_sym_SexpLoadArchive_O);
 SMART_PTR_FIX(cl::_sym_BaseChar_O);
 SMART_PTR_FIX(sockets::_sym_ll_getNameServiceErrorMessage);
 SMART_PTR_FIX(cffi::_sym_unsigned_short);
 SMART_PTR_FIX(core::_sym_sourceFileName);
 SMART_PTR_FIX(core::_sym_anonymous);
 SMART_PTR_FIX(cl::_sym_String_O);
 SMART_PTR_FIX(llvmo::_sym_FCMP_OLT);
 SMART_PTR_FIX(serveEvent::_sym_ll_fd_zero);
 SMART_PTR_FIX(llvmo::_sym_ConstantDataSequential_O);
 SMART_PTR_FIX(sockets::_sym_ll_getProtocolByName);
 SMART_PTR_FIX(kw::_sym_typeError);
 SMART_PTR_FIX(cl::_sym_truncate);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_inheritance);
 SMART_PTR_FIX(core::_sym_saveCando);
 SMART_PTR_FIX(cl::_sym_defvar);
 SMART_PTR_FIX(core::_sym_STARdebugLoadTimeValuesSTAR);
 SMART_PTR_FIX(core::_sym_ValueFrame_O);
 SMART_PTR_FIX(cl::_sym_styleWarning);
 SMART_PTR_FIX(core::_sym_signalSimpleError);
 SMART_PTR_FIX(cl::_sym_STARprint_prettySTAR);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_APPLE_property);
 SMART_PTR_FIX(kw::_sym_splatted);
 SMART_PTR_FIX(cl::_sym_stringLeftTrim);
 SMART_PTR_FIX(llvmo::_sym_DISubprogram_O);
 SMART_PTR_FIX(core::_sym_invokeInternalDebuggerFromGdb);
 SMART_PTR_FIX(llvmo::_sym_llvm_value_p);
 SMART_PTR_FIX(kw::_sym_littleEndian);
 SMART_PTR_FIX(cl::_sym__MINUS_);
 SMART_PTR_FIX(core::_sym_rem_record_field);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_compile_unit);
 SMART_PTR_FIX(core::_sym_adjustVector);
 SMART_PTR_FIX(cl::_sym_vector);
 SMART_PTR_FIX(cl::_sym_string_upcase);
 SMART_PTR_FIX(cffi::_sym_uint32);
 SMART_PTR_FIX(cl::_sym_simple_vector_p);
 SMART_PTR_FIX(llvmo::_sym_MDString_O);
 SMART_PTR_FIX(core::_sym_STARdebugInterpretedFunctionsSTAR);
 SMART_PTR_FIX(cl::_sym_string_GE_);
 SMART_PTR_FIX(core::_sym_alist);
 SMART_PTR_FIX(cl::_sym_logandc2);
 SMART_PTR_FIX(core::_sym_RuntimeVisibleEnvironment_O);
 SMART_PTR_FIX(llvmo::_sym_valuep);
 SMART_PTR_FIX(cl::_sym_apropos);
 SMART_PTR_FIX(core::_sym_slot);
 SMART_PTR_FIX(llvmo::_sym_APFloat_O);
 SMART_PTR_FIX(cl::_sym_copyTree);
 SMART_PTR_FIX(cl::_sym_integer);
 SMART_PTR_FIX(cffi::_sym_Pointer_O);
 SMART_PTR_FIX(cl::_sym_mapcar);
 SMART_PTR_FIX(kw::_sym_address_model_64);
 SMART_PTR_FIX(core::_sym_path);
 SMART_PTR_FIX(cl::_sym_stringTrim);
 SMART_PTR_FIX(core::_sym_LoadArchive_O);
 SMART_PTR_FIX(kw::_sym_package);
 SMART_PTR_FIX(cffi::_sym_PERCENTforeign_type_alignment);
 SMART_PTR_FIX(llvmo::_sym_AvailableExternallyLinkage);
 SMART_PTR_FIX(llvmo::_sym_jit);
 SMART_PTR_FIX(gray::_sym_input_stream_p);
 SMART_PTR_FIX(core::_sym_input_stream_designator);
 SMART_PTR_FIX(cl::_sym_writeByte);
 SMART_PTR_FIX(core::_sym_TagbodyFrame_O);
 SMART_PTR_FIX(kw::_sym_eof);
 SMART_PTR_FIX(cl::_sym_symbolp);
 SMART_PTR_FIX(llvmo::_sym_Value_O);
 SMART_PTR_FIX(llvmo::_sym_LLVMDebugVersion11);
 SMART_PTR_FIX(llvmo::_sym_DITypeArray_O);
 SMART_PTR_FIX(cl::_sym_listp);
 SMART_PTR_FIX(llvmo::_sym_FPToSI);
 SMART_PTR_FIX(kw::_sym_rename_and_delete);
 SMART_PTR_FIX(cl::_sym_type);
 SMART_PTR_FIX(cl::_sym_expt);
 SMART_PTR_FIX(core::_sym_lispCodePath);
 SMART_PTR_FIX(llvmo::_sym_attributesGet);
 SMART_PTR_FIX(cl::_sym_Pathname_O);
 SMART_PTR_FIX(kw::_sym_wild_inferiors);
 SMART_PTR_FIX(kw::_sym_ecl_min);
 SMART_PTR_FIX(cl::_sym_unboundVariable);
 SMART_PTR_FIX(cl::_sym_flet);
 SMART_PTR_FIX(cl::_sym_vectorp);
 SMART_PTR_FIX(clos::_sym_compute_effective_method_function);
 SMART_PTR_FIX(core::_sym_IOStreamStream_O);
 SMART_PTR_FIX(cl::_sym_logorc1);
 SMART_PTR_FIX(llvmo::_sym_AttributeNoAlias);
 SMART_PTR_FIX(kw::_sym_array);
 SMART_PTR_FIX(ext::_sym_lambda_block);
 SMART_PTR_FIX(cl::_sym_values_list);
 SMART_PTR_FIX(cl::_sym_symbolFunction);
 SMART_PTR_FIX(gray::_sym_stream_read_byte);
 SMART_PTR_FIX(gray::_sym_stream_peek_char);
 SMART_PTR_FIX(kw::_sym_target_os_darwin);
 SMART_PTR_FIX(cl::_sym_cons);
 SMART_PTR_FIX(llvmo::_sym_AttributeNaked);
 SMART_PTR_FIX(llvmo::_sym_LinkOnceAnyLinkage);
 SMART_PTR_FIX(core::_sym_type_to_symbol);
 SMART_PTR_FIX(cffi::_sym_double);
 SMART_PTR_FIX(llvmo::_sym_SequentiallyConsistent);
 SMART_PTR_FIX(core::_sym_SmallMap_O);
 SMART_PTR_FIX(cffi::_sym_ssize);
 SMART_PTR_FIX(serveEvent::_sym_ll_fd_set);
 SMART_PTR_FIX(core::_sym_STARechoReplReadSTAR);
 SMART_PTR_FIX(cl::_sym_read_preserving_whitespace);
 SMART_PTR_FIX(cl::_sym_ignore);
 SMART_PTR_FIX(llvmo::_sym_ConstantDataArray_O);
 SMART_PTR_FIX(llvmo::_sym_ConstantArray_O);
 SMART_PTR_FIX(llvmo::_sym_DIBuilder_O);
 SMART_PTR_FIX(kw::_sym_create);
 SMART_PTR_FIX(core::_sym_STARbq_listSTAR);
 SMART_PTR_FIX(cl::_sym_most_positive_long_float);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_format_label);
 SMART_PTR_FIX(llvmo::_sym_ConstantPointerNull_O);
 SMART_PTR_FIX(cl::_sym_write_sequence);
 SMART_PTR_FIX(kw::_sym_constituent_character);
 SMART_PTR_FIX(cl::_sym_values);
 SMART_PTR_FIX(core::_sym_okey);
 SMART_PTR_FIX(llvmo::_sym_FCMP_ORD);
 SMART_PTR_FIX(cl::_sym_notevery);
 SMART_PTR_FIX(cl::_sym_let);
 SMART_PTR_FIX(llvmo::_sym_Add);
 SMART_PTR_FIX(cl::_sym_defun);
 SMART_PTR_FIX(sockets::_sym_ll_dup);
 SMART_PTR_FIX(kw::_sym_back);
 SMART_PTR_FIX(llvmo::_sym_GlobalValue_O);
 SMART_PTR_FIX(core::_sym_intrusiveReferenceCountedPointer);
 SMART_PTR_FIX(core::_sym_process_macro_lambda_list);
 SMART_PTR_FIX(core::_sym_find_single_dispatch_generic_function);
 SMART_PTR_FIX(core::_sym_rem_sysprop);
 SMART_PTR_FIX(llvmo::_sym_STARAtomicRMWInstBinOpSTAR);
 SMART_PTR_FIX(cl::_sym_shadow);
 SMART_PTR_FIX(core::_sym_loadBundle);
 SMART_PTR_FIX(cl::_sym_charNotGreaterp);
 SMART_PTR_FIX(core::_sym_setThrowPosition);
 SMART_PTR_FIX(cl::_sym_read);
 SMART_PTR_FIX(llvmo::_sym_FCMP_OLE);
 SMART_PTR_FIX(cl::_sym_sqrt);
 SMART_PTR_FIX(kw::_sym_function);
 SMART_PTR_FIX(cl::_sym_logical_pathname);
 SMART_PTR_FIX(kw::_sym_fully_buffered);
 SMART_PTR_FIX(cl::_sym_most_negative_fixnum);
 SMART_PTR_FIX(core::_sym_script_dir);
 SMART_PTR_FIX(comp::_sym_STARlowLevelTraceSTAR);
 SMART_PTR_FIX(llvmo::_sym_makeStringGlobal);
 SMART_PTR_FIX(cl::_sym_ceiling);
 SMART_PTR_FIX(core::_sym_compileFormAndEvalWithEnv);
 SMART_PTR_FIX(kw::_sym_rename);
 SMART_PTR_FIX(cl::_sym_STARloadPathnameSTAR);
 SMART_PTR_FIX(asttooling::_sym_onStartOfTranslationUnit);
 SMART_PTR_FIX(core::_sym_ArrayObjects_O);
 SMART_PTR_FIX(gray::_sym_stream_finish_output);
 SMART_PTR_FIX(kw::_sym_bigEndian);
 SMART_PTR_FIX(ext::_sym__PLUS_processStandardInput_PLUS_);
 SMART_PTR_FIX(serveEvent::_sym_ll_serveEventWithTimeout);
 SMART_PTR_FIX(cl::_sym_last);
 SMART_PTR_FIX(llvmo::_sym_FunctionType_O);
 SMART_PTR_FIX(cl::_sym_symbol_macrolet);
 SMART_PTR_FIX(llvmo::_sym_TerminatorInst_O);
 SMART_PTR_FIX(sockets::_sym_ll_getHostByName);
 SMART_PTR_FIX(core::_sym_TagbodyEnvironment_O);
 SMART_PTR_FIX(cl::_sym_nextMethodP);
 SMART_PTR_FIX(core::_sym_STARclassNameHashTableSTAR);
 SMART_PTR_FIX(ext::_sym_STARinspectorHookSTAR);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_type_unit);
 SMART_PTR_FIX(cl::_sym_BitVector_O);
 SMART_PTR_FIX(llvmo::_sym_DW_LANG_C);
 SMART_PTR_FIX(cl::_sym_endp);
 SMART_PTR_FIX(core::_sym_StringOutputStream_O);
 SMART_PTR_FIX(cl::_sym_string_LE_);
 SMART_PTR_FIX(core::_sym_LoadTimeValues_O);
 SMART_PTR_FIX(llvmo::_sym__PLUS_DebugMetadataVersion_PLUS_);
 SMART_PTR_FIX(core::_sym_reader_feature_p);
 SMART_PTR_FIX(core::_sym_quit);
 SMART_PTR_FIX(core::_sym_STARdebugEvalSTAR);
 SMART_PTR_FIX(core::_sym_backquote_null_or_quoted);
 SMART_PTR_FIX(llvmo::_sym_DebugInfo_O);
 SMART_PTR_FIX(llvmo::_sym_LLVMDebugVersion7);
 SMART_PTR_FIX(sockets::_sym_EINTR);
 SMART_PTR_FIX(cl::_sym_count);
 SMART_PTR_FIX(core::_sym_SymbolSet_O);
 SMART_PTR_FIX(kw::_sym_unspecific);
 SMART_PTR_FIX(cl::_sym_progv);
 SMART_PTR_FIX(cl::_sym_union);
 SMART_PTR_FIX(sockets::_sym_ll_socketName);
 SMART_PTR_FIX(cl::_sym_clearOutput);
 SMART_PTR_FIX(kw::_sym_wild);
 SMART_PTR_FIX(core::_sym_reader_comma_form);
 SMART_PTR_FIX(llvmo::_sym_dwTag);
 SMART_PTR_FIX(cl::_sym_undefinedFunction);
 SMART_PTR_FIX(llvmo::_sym_DW_TAG_common_block);
 SMART_PTR_FIX(cl::_sym_apply);
 SMART_PTR_FIX(llvmo::_sym_AttributeStackProtectReq);
 SMART_PTR_FIX(cl::_sym_array);
 SMART_PTR_FIX(core::_sym_makeLambdaListHandler);
 SMART_PTR_FIX(core::_sym_STARcommandLineImageSTAR);
 SMART_PTR_FIX(llvmo::_sym_ResumeInst_O);
 SMART_PTR_FIX(cl::_sym_reverse);
 SMART_PTR_FIX(llvmo::_sym_AShr);
 SMART_PTR_FIX(cl::_sym_callNextMethod);
 SMART_PTR_FIX(core::_sym_sharedReferenceCountedPointer);
 SMART_PTR_FIX(core::_sym_pathnameTranslations);
 SMART_PTR_FIX(core::_sym_double_backquote);
 SMART_PTR_FIX(core::_sym_dot);
 SMART_PTR_FIX(cl::_sym_echo_stream_output_stream);
 SMART_PTR_FIX(ext::_sym_STARdefault_external_formatSTAR);
 SMART_PTR_FIX(cl::_sym_intern);
 SMART_PTR_FIX(core::_sym_wrongIndex);
 SMART_PTR_FIX(cl::_sym_compute_applicable_methods);
 SMART_PTR_FIX(core::_sym_STARwatchDynamicBindingStackSTAR);
 SMART_PTR_FIX(cl::_sym_arrayp);
 SMART_PTR_FIX(core::_sym_STARcurrentColumnSTAR);
 SMART_PTR_FIX(core::_sym_testVal);
 SMART_PTR_FIX(llvmo::_sym_LLVMDebugVersion9);
 SMART_PTR_FIX(llvmo::_sym_Argument_O);
 SMART_PTR_FIX(core::_sym_Reader_O);
 SMART_PTR_FIX(core::_sym_process_single_dispatch_lambda_list);
 SMART_PTR_FIX(kw::_sym_input);
 SMART_PTR_FIX(cl::_sym_identity);
#endif // defined(GC_GLOBAL_SYMBOLS)

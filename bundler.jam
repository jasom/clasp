import errors ;
import type ;
import generators ;
import common ;
import os ;
import path ;
import project ;
import feature ;
import toolset ;

local .top ;
local .common ;
local .applib ;
local .appbin ;
local .appinc ;

rule init ( top ? ) {
     if $(top) {
          .top = $(top) ;
     }
     else {
     	  errors.error "Please set the project root in your Jamroot file" ;
     }
     .common = $(top)/src/common ;
     .applib = $(APPLIB) ;
     local ecl = [ common.get-invocation-command-nodefault clasp : ecl ] ;
#     if ! $(ecl) {
#     	  ECHO "WARNING: Command ecl not found." ;
#     }
}

type.register P : pmp ;   # use pmp so that pump.py dumps output to stdout
type.register L : lisp ;
type.change-generated-target-suffix CPP : : cc ;

generators.register-composing bundler.ptoh : P : H ;
generators.register-composing bundler.ltoh : L : H ;
generators.register-standard bundler.ltocc : L : CPP ;

feature.feature sanitize : asan msan amsan : optional ;
feature.feature changes : 0 1 : incidental ;

rule bundle ( dir : sources * : properties * : opt_props * : dbg_props * )
{

	if ( ( mi in [ modules.peek : ARGV ] ) &&
     	  ( ( [ path.pwd ] = [ path.root $(dir) [ path.pwd ] ] ) ||
	    ( --mi-all in [ modules.peek : ARGV ] ) ) ) {

     	    echo [ SHELL "cd $(dir); touch symbols_scraped_inc.h; rm symbols_scraped_inc.h; touch symbols_scraped_inc.h" ] ;

     	}

     	echo Scraping in $(dir) ;

     	out = [ SHELL "cd $(dir); export PYTHONPATH=`pwd`:${PYTHONPATH}; $(PYTHON2) $(.common)/symbolScraper.py *.cc *.h" : exit-status ] ;

	if $(out[2]) = 0 {
     	   ECHO $(out[1]) ;
     	} else {
          ECHO "No changes found" ;
        }

	local lib = $(dir:B) ;

	make $(lib)_scrape_flag.h : symbols_scraped_inc.h : @bundler.scraped : <changes>$(out[2]) ;

	make $(lib)_initClasses_inc.h :
	     [ path.glob $(dir) : *.h ] :
	     @bundler.register-classes :
	     <dependency>$(.common)/registerClasses.py ;

	alias mi : $(lib)_initClasses_inc.h $(lib)_scrape_flag.h ;

	lib $(lib)_boehm_opt :
	    $(sources) :
	    $(properties) $(opt_props) <gc>boehm
        <target-os>darwin:<make-bundle>no:<linkflags>"-install_name @executable_path/../Resources/lib/lib$(lib)_opt.dylib" ;

	lib $(lib)_boehm_dbg :
	    $(sources) :
	    $(properties) $(dbg_props) <gc>boehm
	    <target-os>darwin:<make-bundle>no:<linkflags>"-install_name @executable_path/../Resources/lib/lib$(lib)_dbg.dylib" ;

	lib $(lib)_mps_opt :
	    $(sources) :
	    $(properties) $(opt_props) <gc>mps
        <target-os>darwin:<make-bundle>no:<linkflags>"-install_name @executable_path/../Resources/lib/lib$(lib)_opt.dylib" ;

	lib $(lib)_mps_dbg :
	    $(sources) :
	    $(properties) $(dbg_props) <gc>mps
	    <target-os>darwin:<make-bundle>no:<linkflags>"-install_name @executable_path/../Resources/lib/lib$(lib)_dbg.dylib" ;

	lib $(lib)_mps_prep_opt :
	    $(sources) :
	    $(properties) $(opt_props) <gc>mps-prep
        <target-os>darwin:<make-bundle>no:<linkflags>"-install_name @executable_path/../Resources/lib/lib$(lib)_opt.dylib" ;

	lib $(lib)_mps_prep_dbg :
	    $(sources) :
	    $(properties) $(dbg_props) <gc>mps-prep
	    <target-os>darwin:<make-bundle>no:<linkflags>"-install_name @executable_path/../Resources/lib/lib$(lib)_dbg.dylib" ;




	alias $(lib) : $(lib)_boehm_opt : <gc>boehm <variant>release ;
	alias $(lib) : $(lib)_boehm_dbg : <gc>boehm <variant>debug ;
	alias $(lib) : $(lib)_mps_opt : <gc>mps <variant>release ;
	alias $(lib) : $(lib)_mps_dbg : <gc>mps <variant>debug ;
	alias $(lib) : $(lib)_mps_prep_opt : <gc>mps-prep <variant>release ;
	alias $(lib) : $(lib)_mps_prep_dbg : <gc>mps-prep <variant>debug ;

	install bundle : $(lib) : <location>$(.applib) ;
}

rule scraped ( target + : sources * : properties * )
{

	if "<changes>0" in $(properties) {
	   ALWAYS $(targets) ;
	}
	else {
	   NOUPDATE $(targets) ;
	}

}

actions scraped
{
	touch $(<)
}


PYTHON2 = [ os.environ PYTHON2 ] ;

actions register-classes
{
	cd $(>[1]:D)
	bname=`basename $(>[1]:D)`
	$(PYTHON2) $(.common)/registerClasses.py $(<) $(<:D)/${bname}_initScripting_inc.h *Package.h otherPackageClasses.h *.h $(<:D)/*.h *.cc $(<:D)/*.cc > registerClasses.log
}

actions ltoh
{
    cd $(>[1]:D)
    ecl -shell $(>[1]) $(<)
}

actions ptoh
{
    cd $(>[1]:D)
    $(PYTHON2) $(.common)/pump.py $(>[1]) $(<)
}

actions ltocc
{
    cd $(>[1]:D)
    ecl -shell $(>[1]) $(<)
}